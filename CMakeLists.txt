# THIS FILE IS A SAMPLE GENERATED ONLY IF THE CORRECT OPTIONS ARE SET.
# YOU CAN USE THIS FILE AS A TEMPLATE AND MODIFY IT AS NEEDED.

# Minimum CMake version
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

# RATELProf 
PROJECT("RATELProf" VERSION 1.0.0)

# INCLUDE(cmake/check_available_functions.cmake)
INCLUDE(cmake/check_mpi_dependency.cmake)
INCLUDE(cmake/check_rocm_dependency.cmake)
INCLUDE(cmake/check_available_functions.cmake)

# Set output directories for all binaries and libraries
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

SET(CORE_PROJECT_NAME       "ratelprof_core"    CACHE STRING "RATELProf for the core part")
SET(EXT_PROJECT_NAME        "ratelprof_ext"     CACHE STRING "RATELProf for the extension part")
SET(WRAPPER_PROJECT_NAME    "ratelprof_wrapper" CACHE STRING "RATELProf for the wrapper part")
SET(TOOL_PROJECT_NAME       "ratelprof"         CACHE STRING "RATELProf for the tool part")

SET(CMAKE_POSITION_INDEPENDENT_CODE ON)


ADD_COMPILE_OPTIONS(
        -O3
        -D__HIP_PLATFORM_AMD__
        -Wall)


SET(CONFIG_DIR ${CMAKE_SOURCE_DIR}/src/core/include/utils/config)

SET(HIP_HEADER  hip/hip_runtime.h)
SET(HSA_HEADER  hsa/hsa.h hsa/hsa_ext_amd.h)
SET(OMP_HEADER  omp.h)
SET(MPI_HEADER  mpi.h)
# SET(OMPT_HEADER omp-tools.h)

CHECK_MPI_DEPENDENCY(${MPI_HEADER})
IF(NOT MPI_FOUND)
    RETURN()
ENDIF()

CHECK_HSA_DEPENDENCY(${HSA_HEADER})
IF(NOT HSA_FOUND)
    RETURN()
ENDIF()

CHECK_HIP_DEPENDENCY(${HIP_HEADER})
IF(NOT HIP_FOUND)
    RETURN()
ENDIF()

CHECK_OMP_DEPENDENCY(${OMP_HEADER})
IF(NOT OMP_FOUND)
    RETURN()
ENDIF()

set(CHECK_SYMBOL_VERBOSE OFF) # default

if(DEFINED ENV{CHECK_SYMBOL_VERBOSE})
    set(CHECK_SYMBOL_VERBOSE $ENV{CHECK_SYMBOL_VERBOSE})
endif()

MESSAGE(STATUS "Verifying required symbols... Please wait.")
IF(CHECK_SYMBOL_VERBOSE)
    message(STATUS "(Quiet mode enabled for symbol checks.)")
ENDIF()

SET(CMAKE_REQUIRED_QUIET ${CHECK_SYMBOL_VERBOSE})
SET(CMAKE_REQUIRED_DEFINITIONS 	"-D__HIP_PLATFORM_AMD__")
CHECK_AVAILABLE_FUNCTION(hip         ${HIP_INCLUDE_DIR} "${HIP_HEADER}"                     ${CONFIG_DIR})
CHECK_AVAILABLE_FUNCTION(hsa         ${HSA_INCLUDE_DIR} "${HSA_HEADER}"                     ${CONFIG_DIR})
CHECK_AVAILABLE_FUNCTION(omp_routine ${OMP_INCLUDE_DIR} "${OMP_INCLUDE_DIR}/${OMP_HEADER}"  ${CONFIG_DIR})
CHECK_AVAILABLE_FUNCTION(omp_tgt_rtl "NO_CHECK"         "NO_CHECK"                          ${CONFIG_DIR})
CHECK_AVAILABLE_FUNCTION(mpi         ${MPI_INCLUDE_DIR} "${MPI_HEADER}"                     ${CONFIG_DIR})
set(CMAKE_REQUIRED_QUIET OFF)


INCLUDE_DIRECTORIES(
    ${CMAKE_SOURCE_DIR}/src/tools
    ${MPI_INCLUDE_DIR}
    ${OMP_INCLUDE_DIR}
    ${HSA_INCLUDE_DIR}
    ${HIP_INCLUDE_DIR}
)


# Add subdirectory for the shared library
ADD_SUBDIRECTORY(src/core)
ADD_SUBDIRECTORY(src/ext)
ADD_SUBDIRECTORY(src/tools)
ADD_SUBDIRECTORY(src/wrappers)
ADD_SUBDIRECTORY(src/plugins)
ADD_SUBDIRECTORY(src/lua)

FUNCTION(REMOVE_STATIC_BUILD TARGET_NAME)
    SET(LIB "${TARGET_NAME}-lib-static")
    IF (TARGET ${LIB})
        MESSAGE(STATUS "Removing target: ${LIB}")
        SET_TARGET_PROPERTIES(${LIB} PROPERTIES EXCLUDE_FROM_ALL TRUE)
    endif()
ENDFUNCTION()

# Remove static build (comment the following line if you want it)
# REMOVE_STATIC_BUILD(${CORE_PROJECT_NAME})
# REMOVE_STATIC_BUILD(${EXT_PROJECT_NAME})
REMOVE_STATIC_BUILD(${WRAPPER_PROJECT_NAME})
REMOVE_STATIC_BUILD(${TOOL_PROJECT_NAME})

# Install scripts
SET(INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/${TOOL_PROJECT_NAME})

INSTALL(DIRECTORY   ${CMAKE_SOURCE_DIR}/share/modules/                DESTINATION ${INSTALL_DIR}/share/modules)
INSTALL(DIRECTORY   ${CMAKE_SOURCE_DIR}/share/visualize/              DESTINATION ${INSTALL_DIR}/share/visualize)
INSTALL(DIRECTORY   ${CMAKE_BINARY_DIR}/lib/                          DESTINATION ${INSTALL_DIR}/lib)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/bin/ratelprof.sh RENAME "ratelprof" DESTINATION ${INSTALL_DIR}/bin 
            PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ)
INSTALL(DIRECTORY   ${CMAKE_SOURCE_DIR}/bin/lua/                      DESTINATION ${INSTALL_DIR}/bin/lua)
