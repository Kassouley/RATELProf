let timelineObject = null;
const csv_stats = ["@@CSV_STATS_DATA_HANDLER@@"];
const csv_analyze = ["@@CSV_ANALYZE_DATA_HANDLER@@"];
const b64_data = "@@B64_DATA_HANDLER@@";
const extension_string_array = "@@STRING_EXT_TABLE_HANDLER@@";
const domain_table = "@@DATA_DOMAIN_TABLE_HANDLER@@";
const lifecycle_table = "@@LIFECYLE_TABLE_HANDLER@@";

const groupsList = {};
const items = [{
      id: "init",
      content: "init",
      type: "background",
      start: lifecycle_table.init_start,
      end: lifecycle_table.main_start,
      is_visible: true
    },{
      id: "main",
      content: "main",
      type: "background",
      start: lifecycle_table.main_start,
      end: lifecycle_table.main_stop,
      className: "mainBackground",
      is_visible: true
    },{
      id: "fini",
      content: "fini",
      type: "background",
      start: lifecycle_table.main_stop,
      end: lifecycle_table.fini_stop,
      is_visible: true
    }];



const createNestedGroup = (parentGroup, id, content, value, treeLevel) => {
  if (!parentGroup.nested_groups[id]) {
    parentGroup.nested_groups[id] = {
      group: {
        className: "lvl-"+treeLevel+"-group-class",
        style: "color:var(--text-color);font-size:12px;text-align:right;background-color:var(--lvl-"+treeLevel+"-group-color)",
        id,
        content,
        value,
        treeLevel,
      },
      nested_groups: {},
    };
  }
  return parentGroup.nested_groups[id];
};


function get_group_id(event, d) {
  const group = groupsList[d];
  const args = event.args;

  let nestedGroupKey, nestedGroupName;
  if ([7, 8, 9].includes(d)) {
    const gpu_id = args.gpu_id;
    const q_id = args.queue_id;
    event._event_kind = d === 7 ? "KERNEL" : "BARRIER";

    nestedGroupKey  = `${d}_${gpu_id}`;
    nestedGroupName = `GPU ID. ${gpu_id}`;

    const nestedGroup = createNestedGroup(group, nestedGroupKey, nestedGroupName, gpu_id, 2);

    nestedGroupKey  = `${d}_${gpu_id}_${q_id}`;
    nestedGroupName = `Queue ID. ${q_id}`;

    createNestedGroup(nestedGroup, nestedGroupKey, nestedGroupName, q_id, 3);

    items.push({
        className:  'non-highlighted',
        id:         `Dispatch_${event.id}`,
        start:      args.dispatch_time,
        type:       "point",
        group:      nestedGroupKey,
        _event_kind: "DISPATCH",
        cid: event.id,
        args: {
          dispatched_event: event.content,
          dispatch_time: args.dispatch_time,
    }});

  } else if (d === 6) {
    const eng_id = args.engine_id;
    event._event_kind = "MEMORY";

    nestedGroupKey   = `${d}_${eng_id}`;
    nestedGroupName  = `SDMA ID. ${(eng_id == -1) ? "Unknown" : eng_id}`;
    
    createNestedGroup(group, nestedGroupKey, nestedGroupName, eng_id, 3);

  } else {
    const tid = args.tid;
    event._event_kind = "CPU";
    
    nestedGroupKey     = `${d}_${tid}`;
    nestedGroupName    = `TID. ${tid}`;
    
    createNestedGroup(group, nestedGroupKey, nestedGroupName, tid, 3);
  }

  return nestedGroupKey
}

function concatGroups(groupsList) {
  const result = [];

  for (const obj of Object.values(groupsList)) {
    const nestedIds = Object.values(obj.nested_groups).map(({ group }) => group.id);
    if (nestedIds.length > 0) {
      obj.group.nestedGroups = nestedIds;
    }
    result.push(obj.group);
    result.push(...concatGroups(obj.nested_groups));
  }
  return result;
}

for (const [id_str, data] of Object.entries(domain_table)) {
  const id = parseInt(id_str, 10);
  groupsList[id] = {
    group: {
      className:  "lvl-1-group-class",
      style:      "color:var(--text-color);background-color:var(--lvl-1-group-color);font-size:13px;text-align:left;",
      treeLevel:  1,
      id:         id,
      content:    data.name,
      title:       data.desc,
      showNested: id < 6 ? false : true,
      value:      id < 6 ? 100 + id : id,
    },
    nested_groups: {}
  };
};

function showMessage(message, container) {
  container.innerHTML = `
    <div style="display:flex;justify-content:center;align-items:center;height:100%;font-family:Arial,sans-serif;font-size:1.2rem;color:#333;background:#f0f0f0;text-align:center;padding:2rem;border-radius:8px;">
      ${message}
    </div>`;
}

function waitNextFrame() {
  return new Promise(resolve => requestAnimationFrame(() => resolve()));
}

async function main() {
  try {
      const container = document.getElementById("timeline");
      showMessage("Data decoding ...", container);
      await waitNextFrame();
      decodeB64(b64_data);
      showMessage("Groups Creation...", container);
      await waitNextFrame();
      const groups = concatGroups(groupsList);
      
      showMessage("Timeline Creation. Please wait . . .", container);
      await waitNextFrame();
      timelineObject = createTimeline(items, groups, container);
  } catch (error) {
      alert('Error loading trace data: ' + error.message);
      console.error('Error loading trace data:', error)
  }
}

main();