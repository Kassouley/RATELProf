/** THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA.
 */

#ifndef OMP_ROUTINE_PROFILED_FUNCTIONS_H
#define OMP_ROUTINE_PROFILED_FUNCTIONS_H

#include "omp.h" 

// OMP_ROUTINE API Function Prototype & Functions Types
#if HAVE_omp_target_memset       
    void * i_omp_target_memset(void * ptr, int value, size_t size, int device_num, void* return_address);
    typedef void * (*__omp_target_memset_t)(void * ptr, int value, size_t size, int device_num, void* return_address);
#endif

#if HAVE_omp_target_memcpy_async       
    int i_omp_target_memcpy_async(void * dst, const void * src, size_t size, size_t dst_offset, size_t src_offset, int dst_device_num, int src_device_num, int async_depend_info, omp_depend_t * depend, void* return_address);
    typedef int (*__omp_target_memcpy_async_t)(void * dst, const void * src, size_t size, size_t dst_offset, size_t src_offset, int dst_device_num, int src_device_num, int async_depend_info, omp_depend_t * depend, void* return_address);
#endif

#if HAVE_omp_target_memcpy_rect_async       
    int i_omp_target_memcpy_rect_async(void * dst, const void * src, size_t element_size, int num_dims, const size_t * volume, const size_t * dst_offsets, const size_t * src_offsets, const size_t * dst_dimensions, const size_t * src_dimensions, int dst_device_num, int src_device_num, int depobj_count, omp_depend_t * depobj_list, void* return_address);
    typedef int (*__omp_target_memcpy_rect_async_t)(void * dst, const void * src, size_t element_size, int num_dims, const size_t * volume, const size_t * dst_offsets, const size_t * src_offsets, const size_t * dst_dimensions, const size_t * src_dimensions, int dst_device_num, int src_device_num, int depobj_count, omp_depend_t * depobj_list, void* return_address);
#endif

#if HAVE_omp_target_alloc       
    void * i_omp_target_alloc(size_t size, int device_num, void* return_address);
    typedef void * (*__omp_target_alloc_t)(size_t size, int device_num, void* return_address);
#endif

#if HAVE_omp_target_free       
    void i_omp_target_free(void * device_ptr, int device_num, void* return_address);
    typedef void (*__omp_target_free_t)(void * device_ptr, int device_num, void* return_address);
#endif

#if HAVE_omp_target_memcpy_rect       
    int i_omp_target_memcpy_rect(void * dst, const void * src, size_t element_size, int num_dims, const size_t * volume, const size_t * dst_offsets, const size_t * src_offsets, const size_t * dst_dimensions, const size_t * src_dimensions, int dst_device_num, int src_device_num, void* return_address);
    typedef int (*__omp_target_memcpy_rect_t)(void * dst, const void * src, size_t element_size, int num_dims, const size_t * volume, const size_t * dst_offsets, const size_t * src_offsets, const size_t * dst_dimensions, const size_t * src_dimensions, int dst_device_num, int src_device_num, void* return_address);
#endif

#if HAVE_omp_target_disassociate_ptr       
    int i_omp_target_disassociate_ptr(const void * host_ptr, int device_num, void* return_address);
    typedef int (*__omp_target_disassociate_ptr_t)(const void * host_ptr, int device_num, void* return_address);
#endif

#if HAVE_omp_target_memcpy       
    int i_omp_target_memcpy(void * dst, const void * src, size_t size, size_t dst_offset, size_t src_offset, int dst_device_num, int src_device_num, void* return_address);
    typedef int (*__omp_target_memcpy_t)(void * dst, const void * src, size_t size, size_t dst_offset, size_t src_offset, int dst_device_num, int src_device_num, void* return_address);
#endif

#if HAVE_omp_target_memset_async       
    void * i_omp_target_memset_async(void * ptr, int value, size_t size, int device_num, int async_depend_info, omp_depend_t * depend, void* return_address);
    typedef void * (*__omp_target_memset_async_t)(void * ptr, int value, size_t size, int device_num, int async_depend_info, omp_depend_t * depend, void* return_address);
#endif

#if HAVE_omp_target_is_present       
    int i_omp_target_is_present(const void * host_ptr, int device_num, void* return_address);
    typedef int (*__omp_target_is_present_t)(const void * host_ptr, int device_num, void* return_address);
#endif

#if HAVE_omp_target_associate_ptr       
    int i_omp_target_associate_ptr(const void * host_ptr, const void * device_ptr, size_t size, size_t alignment, int device_num, void* return_address);
    typedef int (*__omp_target_associate_ptr_t)(const void * host_ptr, const void * device_ptr, size_t size, size_t alignment, int device_num, void* return_address);
#endif

#if HAVE_omp_get_initial_device       
    int i_omp_get_initial_device(void* return_address);
    typedef int (*__omp_get_initial_device_t)(void* return_address);
#endif

#if HAVE_llvm_omp_target_dynamic_shared_alloc       
    void * i_llvm_omp_target_dynamic_shared_alloc(void* return_address);
    typedef void * (*__llvm_omp_target_dynamic_shared_alloc_t)(void* return_address);
#endif

#if HAVE_omp_get_interop_int       
    omp_intptr_t i_omp_get_interop_int(const omp_interop_t interop, omp_interop_property_t prop, int * exists, void* return_address);
    typedef omp_intptr_t (*__omp_get_interop_int_t)(const omp_interop_t interop, omp_interop_property_t prop, int * exists, void* return_address);
#endif

#if HAVE_omp_get_interop_name       
    const char * i_omp_get_interop_name(const omp_interop_t interop, omp_interop_property_t prop, void* return_address);
    typedef const char * (*__omp_get_interop_name_t)(const omp_interop_t interop, omp_interop_property_t prop, void* return_address);
#endif

#if HAVE_omp_get_interop_ptr       
    void * i_omp_get_interop_ptr(const omp_interop_t interop, omp_interop_property_t prop, int * exists, void* return_address);
    typedef void * (*__omp_get_interop_ptr_t)(const omp_interop_t interop, omp_interop_property_t prop, int * exists, void* return_address);
#endif

#if HAVE_omp_get_interop_str       
    const char * i_omp_get_interop_str(const omp_interop_t interop, omp_interop_property_t prop, int * exists, void* return_address);
    typedef const char * (*__omp_get_interop_str_t)(const omp_interop_t interop, omp_interop_property_t prop, int * exists, void* return_address);
#endif

#if HAVE_omp_get_interop_type_desc       
    const char * i_omp_get_interop_type_desc(const omp_interop_t interop, omp_interop_property_t prop, void* return_address);
    typedef const char * (*__omp_get_interop_type_desc_t)(const omp_interop_t interop, omp_interop_property_t prop, void* return_address);
#endif

#if HAVE_omp_get_mapped_ptr       
    void * i_omp_get_mapped_ptr(const void * ptr, int device_num, void* return_address);
    typedef void * (*__omp_get_mapped_ptr_t)(const void * ptr, int device_num, void* return_address);
#endif

#if HAVE_omp_get_num_devices       
    int i_omp_get_num_devices(void* return_address);
    typedef int (*__omp_get_num_devices_t)(void* return_address);
#endif

#if HAVE_omp_is_coarse_grain_mem_region       
    int i_omp_is_coarse_grain_mem_region(void * ptr, size_t size, void* return_address);
    typedef int (*__omp_is_coarse_grain_mem_region_t)(void * ptr, size_t size, void* return_address);
#endif


#endif // OMP_ROUTINE_PROFILED_FUNCTIONS_H