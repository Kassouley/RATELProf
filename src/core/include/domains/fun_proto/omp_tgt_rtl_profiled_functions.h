/** THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 */
 

#ifndef OMP_TGT_RTL_PROFILED_FUNCTIONS_H 
#define OMP_TGT_RTL_PROFILED_FUNCTIONS_H 

#include "omp_support.h" 

// OMP_TGT_RTL API Function Prototype
int32_t i___tgt_rtl_query_async(int32_t device_id, __tgt_async_info * AsyncInfoPtr);
int32_t i___tgt_rtl_data_submit(int32_t device_id, void * target_ptr, void * host_ptr, int64_t size);
int i___tgt_rtl_are_allocations_for_maps_on_apus_disabled();
int32_t i___tgt_rtl_data_notify_mapped(int32_t device_id, void * host_ptr, int64_t size);
int32_t i___tgt_rtl_data_submit_async(int32_t device_id, void * target_ptr, void * host_ptr, int64_t size, __tgt_async_info * AsyncInfo);
int32_t i___tgt_rtl_init_async_info(int32_t device_id, __tgt_async_info ** async_info_ptr);
int32_t i___tgt_rtl_is_data_exchangable(int32_t src_dev_id, int32_t dst_dev_id);
int32_t i___tgt_rtl_data_retrieve_async(int32_t device_id, void * host_ptr, void * target_ptr, int64_t size, __tgt_async_info * AsyncInfo);
int32_t i___tgt_rtl_data_delete(int32_t device_id, void * target_ptr, int32_t kind);
int32_t i___tgt_rtl_data_exchange_async(int32_t src_dev_id, void * src_ptr, int32_t dst_dev_id, void * dst_ptr, int64_t size, __tgt_async_info * AsyncInfo);
int32_t i___tgt_rtl_prepopulate_page_table(int32_t device_id, void * ptr, int64_t size);
int32_t i___tgt_rtl_data_exchange(int32_t src_dev_id, void * src_ptr, int32_t dst_dev_id, void * dst_ptr, int64_t size);
int32_t i___tgt_rtl_launch_kernel(int32_t device_id, void * tgt_entry_ptr, void ** tgt_args, ptrdiff_t * tgt_offsets, KernelArgsTy * KernelArgs, __tgt_async_info * AsyncInfo);
int32_t i___tgt_rtl_is_valid_binary(__tgt_device_image * image);
int32_t i___tgt_rtl_data_retrieve(int32_t device_id, void * host_ptr, void * target_ptr, int64_t size);
int32_t i___tgt_rtl_data_lock(int32_t device_id, void * host_ptr, int64_t size, void ** LockedHostPtr);
int32_t i___tgt_rtl_supports_empty_images();
int32_t i___tgt_rtl_destroy_event(int32_t device_id, void * event);
int32_t i___tgt_rtl_number_of_devices();
int64_t i___tgt_rtl_init_requires(int64_t RequiresFlags);
int32_t i___tgt_rtl_data_notify_unmapped(int32_t device_id, void * host_ptr);
int32_t i___tgt_rtl_init_device_info(int32_t device_id, __tgt_device_info * device_info_ptr, const char ** err_str);
int32_t i___tgt_rtl_sync_event(int32_t device_id, void * event);
int32_t i___tgt_rtl_synchronize(int32_t device_id, __tgt_async_info * AsyncInfo);
void i___tgt_rtl_set_up_env();
int32_t i___tgt_rtl_data_unlock(int device_id, void * host_ptr);
int i___tgt_rtl_is_fine_grained_memory_enabled();
int i___tgt_rtl_has_USM_capable_dGPU();
int i___tgt_rtl_has_apu_device();
int32_t i___tgt_rtl_set_device_offset(int32_t DeviceIdOffset);
int32_t i___tgt_rtl_launch_kernel_sync(int32_t device_id, void * tgt_entry_ptr, void ** tgt_args, ptrdiff_t * tgt_offsets, KernelArgsTy * KernelArgs);
int32_t i___tgt_rtl_record_event(int32_t device_id, void * event, __tgt_async_info * AsyncInfo);
void i___tgt_rtl_set_info_flag(uint32_t NewInfoLevel);
int32_t i___tgt_rtl_create_event(int32_t device_id, void ** event);
void i___tgt_rtl_print_device_info(int32_t device_id);
int32_t i___tgt_rtl_get_function(__tgt_device_binary binary, const char * name, void ** kernel_ptr);
int32_t i___tgt_rtl_init_plugin();
int32_t i___tgt_rtl_number_of_team_procs(int device_id);
int32_t i___tgt_rtl_wait_event(int32_t device_id, void * event, __tgt_async_info * AsyncInfo);
void * i___tgt_rtl_data_alloc(int32_t device_id, int64_t size, void * host_ptr, int32_t kind);
int32_t i___tgt_rtl_init_device(int32_t device_id);
int32_t i___tgt_rtl_get_global(__tgt_device_binary binary, uint64_t size, const char * name, void ** device_ptr);
int i___tgt_rtl_requested_prepopulate_gpu_page_table(); 

// OMP_TGT_RTL Functions Types
typedef int32_t (*____tgt_rtl_query_async_t)(int32_t device_id, __tgt_async_info * AsyncInfoPtr);
typedef int32_t (*____tgt_rtl_data_submit_t)(int32_t device_id, void * target_ptr, void * host_ptr, int64_t size);
typedef int (*____tgt_rtl_are_allocations_for_maps_on_apus_disabled_t)();
typedef int32_t (*____tgt_rtl_data_notify_mapped_t)(int32_t device_id, void * host_ptr, int64_t size);
typedef int32_t (*____tgt_rtl_data_submit_async_t)(int32_t device_id, void * target_ptr, void * host_ptr, int64_t size, __tgt_async_info * AsyncInfo);
typedef int32_t (*____tgt_rtl_init_async_info_t)(int32_t device_id, __tgt_async_info ** async_info_ptr);
typedef int32_t (*____tgt_rtl_is_data_exchangable_t)(int32_t src_dev_id, int32_t dst_dev_id);
typedef int32_t (*____tgt_rtl_data_retrieve_async_t)(int32_t device_id, void * host_ptr, void * target_ptr, int64_t size, __tgt_async_info * AsyncInfo);
typedef int32_t (*____tgt_rtl_data_delete_t)(int32_t device_id, void * target_ptr, int32_t kind);
typedef int32_t (*____tgt_rtl_data_exchange_async_t)(int32_t src_dev_id, void * src_ptr, int32_t dst_dev_id, void * dst_ptr, int64_t size, __tgt_async_info * AsyncInfo);
typedef int32_t (*____tgt_rtl_prepopulate_page_table_t)(int32_t device_id, void * ptr, int64_t size);
typedef int32_t (*____tgt_rtl_data_exchange_t)(int32_t src_dev_id, void * src_ptr, int32_t dst_dev_id, void * dst_ptr, int64_t size);
typedef int32_t (*____tgt_rtl_launch_kernel_t)(int32_t device_id, void * tgt_entry_ptr, void ** tgt_args, ptrdiff_t * tgt_offsets, KernelArgsTy * KernelArgs, __tgt_async_info * AsyncInfo);
typedef int32_t (*____tgt_rtl_is_valid_binary_t)(__tgt_device_image * image);
typedef int32_t (*____tgt_rtl_data_retrieve_t)(int32_t device_id, void * host_ptr, void * target_ptr, int64_t size);
typedef int32_t (*____tgt_rtl_data_lock_t)(int32_t device_id, void * host_ptr, int64_t size, void ** LockedHostPtr);
typedef int32_t (*____tgt_rtl_supports_empty_images_t)();
typedef int32_t (*____tgt_rtl_destroy_event_t)(int32_t device_id, void * event);
typedef int32_t (*____tgt_rtl_number_of_devices_t)();
typedef int64_t (*____tgt_rtl_init_requires_t)(int64_t RequiresFlags);
typedef int32_t (*____tgt_rtl_data_notify_unmapped_t)(int32_t device_id, void * host_ptr);
typedef int32_t (*____tgt_rtl_init_device_info_t)(int32_t device_id, __tgt_device_info * device_info_ptr, const char ** err_str);
typedef int32_t (*____tgt_rtl_sync_event_t)(int32_t device_id, void * event);
typedef int32_t (*____tgt_rtl_synchronize_t)(int32_t device_id, __tgt_async_info * AsyncInfo);
typedef void (*____tgt_rtl_set_up_env_t)();
typedef int32_t (*____tgt_rtl_data_unlock_t)(int device_id, void * host_ptr);
typedef int (*____tgt_rtl_is_fine_grained_memory_enabled_t)();
typedef int (*____tgt_rtl_has_USM_capable_dGPU_t)();
typedef int (*____tgt_rtl_has_apu_device_t)();
typedef int32_t (*____tgt_rtl_set_device_offset_t)(int32_t DeviceIdOffset);
typedef int32_t (*____tgt_rtl_launch_kernel_sync_t)(int32_t device_id, void * tgt_entry_ptr, void ** tgt_args, ptrdiff_t * tgt_offsets, KernelArgsTy * KernelArgs);
typedef int32_t (*____tgt_rtl_record_event_t)(int32_t device_id, void * event, __tgt_async_info * AsyncInfo);
typedef void (*____tgt_rtl_set_info_flag_t)(uint32_t NewInfoLevel);
typedef int32_t (*____tgt_rtl_create_event_t)(int32_t device_id, void ** event);
typedef void (*____tgt_rtl_print_device_info_t)(int32_t device_id);
typedef int32_t (*____tgt_rtl_get_function_t)(__tgt_device_binary binary, const char * name, void ** kernel_ptr);
typedef int32_t (*____tgt_rtl_init_plugin_t)();
typedef int32_t (*____tgt_rtl_number_of_team_procs_t)(int device_id);
typedef int32_t (*____tgt_rtl_wait_event_t)(int32_t device_id, void * event, __tgt_async_info * AsyncInfo);
typedef void * (*____tgt_rtl_data_alloc_t)(int32_t device_id, int64_t size, void * host_ptr, int32_t kind);
typedef int32_t (*____tgt_rtl_init_device_t)(int32_t device_id);
typedef int32_t (*____tgt_rtl_get_global_t)(__tgt_device_binary binary, uint64_t size, const char * name, void ** device_ptr);
typedef int (*____tgt_rtl_requested_prepopulate_gpu_page_table_t)(); 

#endif // OMP_TGT_RTL_PROFILED_FUNCTIONS_H