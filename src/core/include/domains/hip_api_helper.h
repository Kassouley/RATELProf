/**
 * @file hip_api_helper.h
 * @brief Helper functions for managing HIP API calls in the profiling framework.
 *
 * This file contains various utility functions used to handle HIP API calls 
 * within the profiling system, including retrieving argument values and 
 * managing function identifiers.
 * 
 * @note THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 * 
 */

#ifndef HIP_API_HELPER_H
#define HIP_API_HELPER_H

#include <string.h>
#include <stdbool.h>
#include "domains/fun_proto/hip_profiled_functions.h"
#include "hip/hip_runtime.h" 

#define HIP_STRING_SIZE_MAX 128

#ifdef ADD_API_PREFIX
#undef ADD_API_PREFIX
#endif
#define ADD_API_PREFIX(str) HIP_API_##str


#define FOR_EACH_HIP_FUNC(macro) \
macro(hipMemPtrGetInfo)                  \
macro(hipGraphExecMemcpyNodeSetParams1D) \
macro(hipCtxEnablePeerAccess)            \
macro(hipHostUnregister)                 \
macro(hipDevicePrimaryCtxGetState)       \
macro(hipPointerGetAttribute)            \
macro(hipMemPoolGetAccess)               \
macro(hipMemsetD32)                      \
macro(hipTexRefGetMipMappedArray)        \
macro(hipMalloc3D)                       \
macro(hipMemsetD8)                       \
macro(hipMallocArray)                    \
macro(hipGraphEventWaitNodeGetEvent)     \
macro(hipDrvMemcpy3D)                    \
macro(hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags) \
macro(hipHostMalloc)                     \
macro(hipModuleGetTexRef)                \
macro(hipIpcGetMemHandle)                \
macro(hipMemcpyDtoHAsync)                \
macro(hipModuleLoad)                     \
macro(hipWaitExternalSemaphoresAsync)    \
macro(hipGraphKernelNodeGetParams)       \
macro(hipGraphLaunch)                    \
macro(hipHostAlloc)                      \
macro(hipSetDevice)                      \
macro(hipModuleOccupancyMaxPotentialBlockSizeWithFlags) \
macro(hipGraphNodeGetDependentNodes)     \
macro(hipExtStreamGetCUMask)             \
macro(hipMemsetD16)                      \
macro(hipLaunchKernel)                   \
macro(hipGetErrorString)                 \
macro(hipModuleLoadDataEx)               \
macro(hipTexRefGetFilterMode)            \
macro(hipGraphInstantiateWithParams)     \
macro(hipGraphMemcpyNodeSetParams1D)     \
macro(hipStreamSynchronize)              \
macro(hipGraphicsUnmapResources)         \
macro(hipMemcpy2DFromArray_spt)          \
macro(hipGraphExecMemcpyNodeSetParamsFromSymbol) \
macro(hipTexRefGetMipmapLevelBias)       \
macro(hipGraphAddExternalSemaphoresSignalNode) \
macro(hipExtGetLastError)                \
macro(hipMemMapArrayAsync)               \
macro(hipMemcpyAsync)                    \
macro(hipGraphKernelNodeSetAttribute)    \
macro(hipDrvMemcpy2DUnaligned)           \
macro(hipMemPoolDestroy)                 \
macro(hipGraphRemoveDependencies)        \
macro(hipGraphCreate)                    \
macro(hipExtLaunchMultiKernelMultiDevice) \
macro(hipGetDeviceCount)                 \
macro(hipMemUnmap)                       \
macro(hipTexObjectGetResourceDesc)       \
macro(hipGraphExecEventRecordNodeSetEvent) \
macro(hipInit)                           \
macro(hipThreadExchangeStreamCaptureMode) \
macro(hipDeviceGetP2PAttribute)          \
macro(hipDeviceGetByPCIBusId)            \
macro(hipHostFree)                       \
macro(hipExtGetLinkTypeAndHopCount)      \
macro(hipMemcpyToSymbolAsync_spt)        \
macro(hipCtxDisablePeerAccess)           \
macro(hipSetupArgument)                  \
macro(hipMemcpyAtoHAsync)                \
macro(hipCtxSetCacheConfig)              \
macro(hipMemRelease)                     \
macro(hipUnbindTexture)                  \
macro(hipDrvMemcpy3DAsync)               \
macro(hipIpcGetEventHandle)              \
macro(hipGraphReleaseUserObject)         \
macro(hipDeviceGetMemPool)               \
macro(hipGraphHostNodeSetParams)         \
macro(hipGraphAddEventWaitNode)          \
macro(hipMemcpy2DFromArrayAsync_spt)     \
macro(hipLaunchHostFunc_spt)             \
macro(hipStreamWaitEvent_spt)            \
macro(hipArrayGetDescriptor)             \
macro(hipGraphExecUpdate)                \
macro(hipMemGetAllocationPropertiesFromHandle) \
macro(hipMemcpyWithStream)               \
macro(hipGraphAddExternalSemaphoresWaitNode) \
macro(hipMemcpyAtoH)                     \
macro(hipStreamQuery)                    \
macro(hipIpcCloseMemHandle)              \
macro(hipMemsetAsync)                    \
macro(hipMemcpyDtoD)                     \
macro(hipModuleUnload)                   \
macro(hipGetDevicePropertiesR0600)       \
macro(hipMemcpyFromArray)                \
macro(hipDeviceCanAccessPeer)            \
macro(hipMemSetAccess)                   \
macro(hipStreamWaitValue32)              \
macro(hipApiName)                        \
macro(hipGraphicsSubResourceGetMappedArray) \
macro(hipMemcpy2DToArrayAsync)           \
macro(hipGraphDestroy)                   \
macro(hipTexRefGetBorderColor)           \
macro(hipGraphAddMemcpyNode1D)           \
macro(hipGraphGetNodes)                  \
macro(hipStreamGetFlags_spt)             \
macro(hipTexRefSetAddress2D)             \
macro(hipStreamGetPriority)              \
macro(hipStreamCreate)                   \
macro(hipMemcpyFromSymbol)               \
macro(hipGraphNodeGetEnabled)            \
macro(hipCreateChannelDesc)              \
macro(hipFreeMipmappedArray)             \
macro(hipGetTextureAlignmentOffset)      \
macro(hipGraphAddEventRecordNode)        \
macro(hipGraphNodeFindInClone)           \
macro(hipMemcpyFromSymbol_spt)           \
macro(hipMemset3DAsync_spt)              \
macro(hipMemsetD16Async)                 \
macro(hipDeviceGetCacheConfig)           \
macro(hipMemCreate)                      \
macro(hipGraphExternalSemaphoresWaitNodeGetParams) \
macro(hipStreamEndCapture)               \
macro(hipMemcpyFromSymbolAsync_spt)      \
macro(hipMemcpyHtoA)                     \
macro(hipGraphExecHostNodeSetParams)     \
macro(hipMalloc)                         \
macro(hipMalloc3DArray)                  \
macro(hipGraphExecKernelNodeSetParams)   \
macro(hipGetTextureObjectResourceDesc)   \
macro(__hipPushCallConfiguration)        \
macro(hipMemcpy3DAsync_spt)              \
macro(hipMemsetD8Async)                  \
macro(hipStreamAddCallback)              \
macro(hipMemPoolImportPointer)           \
macro(hipFuncGetAttributes)              \
macro(hipCtxGetCurrent)                  \
macro(hipGraphAddChildGraphNode)         \
macro(hipEventCreate)                    \
macro(hipHostGetDevicePointer)           \
macro(hipEventQuery)                     \
macro(hipMemcpyPeerAsync)                \
macro(hipMemMap)                         \
macro(hipBindTextureToArray)             \
macro(hipMemcpy2DAsync_spt)              \
macro(hipMemPoolSetAttribute)            \
macro(hipGetLastError)                   \
macro(hipStreamEndCapture_spt)           \
macro(hipModuleOccupancyMaxPotentialBlockSize) \
macro(hipKernelNameRefByPtr)             \
macro(hipGetDevice)                      \
macro(hipMemcpy3D_spt)                   \
macro(hipTexObjectGetTextureDesc)        \
macro(hipDeviceGet)                      \
macro(hipGraphExternalSemaphoresSignalNodeSetParams) \
macro(hipDestroySurfaceObject)           \
macro(hipStreamGetDevice)                \
macro(hipMemAllocPitch)                  \
macro(hipGraphAddNode)                   \
macro(hipDeviceSetSharedMemConfig)       \
macro(hipRuntimeGetVersion)              \
macro(hipGraphChildGraphNodeGetGraph)    \
macro(hipGraphExecMemsetNodeSetParams)   \
macro(hipGraphicsUnregisterResource)     \
macro(hipEventElapsedTime)               \
macro(hipFreeAsync)                      \
macro(hipStreamCreateWithFlags)          \
macro(hipTexRefSetAddress)               \
macro(hipStreamAddCallback_spt)          \
macro(hipGraphAddKernelNode)             \
macro(hipMemcpyDtoH)                     \
macro(hipDeviceTotalMem)                 \
macro(hipMemset2D)                       \
macro(hipMemcpy2DToArray_spt)            \
macro(hipMemAllocHost)                   \
macro(hipPointerSetAttribute)            \
macro(hipGraphHostNodeGetParams)         \
macro(hipMemset3D)                       \
macro(hipDestroyTextureObject)           \
macro(hipMemAdvise)                      \
macro(hipCtxGetCacheConfig)              \
macro(hipDrvPointerGetAttributes)        \
macro(hipModuleLaunchCooperativeKernelMultiDevice) \
macro(hipModuleGetGlobal)                \
macro(hipGraphEventRecordNodeGetEvent)   \
macro(hipGraphInstantiate)               \
macro(hipGraphRetainUserObject)          \
macro(hipGraphMemAllocNodeGetParams)     \
macro(hipStreamGetCaptureInfo)           \
macro(hipCtxPopCurrent)                  \
macro(hipPointerGetAttributes)           \
macro(hipDeviceDisablePeerAccess)        \
macro(hipMallocPitch)                    \
macro(hipMemcpy2DFromArrayAsync)         \
macro(hipDeviceComputeCapability)        \
macro(hipMemcpyHtoD)                     \
macro(hipOccupancyMaxActiveBlocksPerMultiprocessor) \
macro(hipSignalExternalSemaphoresAsync)  \
macro(hipArray3DGetDescriptor)           \
macro(__hipPopCallConfiguration)         \
macro(hipDevicePrimaryCtxRelease)        \
macro(hipLaunchCooperativeKernelMultiDevice) \
macro(hipFreeArray)                      \
macro(hipGraphMemsetNodeSetParams)       \
macro(hipMemPoolSetAccess)               \
macro(hipGetStreamDeviceId)              \
macro(hipExtStreamCreateWithCUMask)      \
macro(hipGetTextureObjectTextureDesc)    \
macro(hipEventRecord_spt)                \
macro(hipConfigureCall)                  \
macro(hipMemcpyFromArray_spt)            \
macro(hipModuleGetFunction)              \
macro(hipFuncSetCacheConfig)             \
macro(hipDeviceGetLimit)                 \
macro(hipTexRefGetMaxAnisotropy)         \
macro(hipLaunchKernel_spt)               \
macro(hipStreamBeginCaptureToGraph)      \
macro(hipTexRefGetFormat)                \
macro(hipStreamWaitValue64)              \
macro(hipDevicePrimaryCtxRetain)         \
macro(hipMallocManaged)                  \
macro(hipStreamCreateWithPriority)       \
macro(hipStreamGetCaptureInfo_spt)       \
macro(hipGraphAddHostNode)               \
macro(hipLaunchCooperativeKernel)        \
macro(hipHostRegister)                   \
macro(hipGetErrorName)                   \
macro(hipMemcpyToSymbol_spt)             \
macro(hipGraphMemsetNodeGetParams)       \
macro(hipStreamWriteValue32)             \
macro(hipStreamSynchronize_spt)          \
macro(hipDeviceGraphMemTrim)             \
macro(hipStreamDestroy)                  \
macro(hipTexRefSetArray)                 \
macro(hipMemcpyParam2DAsync)             \
macro(hipMemPoolExportPointer)           \
macro(hipGraphEventRecordNodeSetEvent)   \
macro(hipCtxDestroy)                     \
macro(hipArrayDestroy)                   \
macro(hipMemGetAllocationGranularity)    \
macro(hipGraphClone)                     \
macro(hipMemset2DAsync_spt)              \
macro(hipBindTexture2D)                  \
macro(hipArrayGetInfo)                   \
macro(hipGraphExternalSemaphoresSignalNodeGetParams) \
macro(hipDeviceGetStreamPriorityRange)   \
macro(hipGraphExecChildGraphNodeSetParams) \
macro(hipMemset2D_spt)                   \
macro(hipDeviceGetDefaultMemPool)        \
macro(hipCtxCreate)                      \
macro(hipStreamIsCapturing)              \
macro(hipStreamUpdateCaptureDependencies) \
macro(hipDeviceSynchronize)              \
macro(hipMemcpyFromSymbolAsync)          \
macro(hipGraphDestroyNode)               \
macro(hipUserObjectRetain)               \
macro(hipGraphExecEventWaitNodeSetEvent) \
macro(hipMemAddressReserve)              \
macro(hipGraphAddMemsetNode)             \
macro(hipGraphicsResourceGetMappedPointer) \
macro(hipStreamBeginCapture_spt)         \
macro(hipDeviceGetUuid)                  \
macro(hipModuleLaunchKernel)             \
macro(hipGraphAddEmptyNode)              \
macro(hipMemRangeGetAttribute)           \
macro(hipGraphInstantiateWithFlags)      \
macro(hipCtxPushCurrent)                 \
macro(hipCtxGetApiVersion)               \
macro(hipBindTexture)                    \
macro(hipStreamBeginCapture)             \
macro(hipProfilerStart)                  \
macro(hipMemcpyHtoDAsync)                \
macro(hipGetDeviceFlags)                 \
macro(hipMemRangeGetAttributes)          \
macro(hipDestroyExternalSemaphore)       \
macro(hipIpcOpenEventHandle)             \
macro(hipGraphUpload)                    \
macro(hipMallocAsync)                    \
macro(hipOccupancyMaxPotentialBlockSize) \
macro(hipDestroyExternalMemory)          \
macro(amd_dbgapi_get_build_name)         \
macro(hipGraphAddMemcpyNodeToSymbol)     \
macro(hipDeviceGetPCIBusId)              \
macro(hipGetChannelDesc)                 \
macro(hipDevicePrimaryCtxReset)          \
macro(hipImportExternalMemory)           \
macro(hipFuncSetSharedMemConfig)         \
macro(hipStreamWaitEvent)                \
macro(hipTexRefSetMipmapLevelBias)       \
macro(hipMemPoolImportFromShareableHandle) \
macro(hipMemPoolExportToShareableHandle) \
macro(hipGraphExecMemcpyNodeSetParamsToSymbol) \
macro(hipTexRefGetMipmapFilterMode)      \
macro(hipGetProcAddress)                 \
macro(hipCreateTextureObject)            \
macro(hipGraphKernelNodeCopyAttributes)  \
macro(hipTexRefGetFlags)                 \
macro(hipDrvGraphAddMemcpyNode)          \
macro(hipMemExportToShareableHandle)     \
macro(hipGraphLaunch_spt)                \
macro(hipGraphMemcpyNodeSetParamsFromSymbol) \
macro(hipGraphNodeGetDependencies)       \
macro(hipMemcpy3D)                       \
macro(hipGraphAddMemcpyNodeFromSymbol)   \
macro(hipStreamGetPriority_spt)          \
macro(hipModuleLoadData)                 \
macro(hipSetDeviceFlags)                 \
macro(hipExternalMemoryGetMappedBuffer)  \
macro(hipLaunchCooperativeKernel_spt)    \
macro(hipLaunchHostFunc)                 \
macro(hipMemcpyAsync_spt)                \
macro(hipMemcpyPeer)                     \
macro(hipDeviceReset)                    \
macro(hipMemAddressFree)                 \
macro(hipProfilerStop)                   \
macro(hipGraphEventWaitNodeSetEvent)     \
macro(hipModuleLaunchCooperativeKernel)  \
macro(hipDeviceGetName)                  \
macro(hipGraphNodeSetEnabled)            \
macro(hipTexRefSetAddressMode)           \
macro(hipEventSynchronize)               \
macro(hipGraphGetRootNodes)              \
macro(hipMemcpy2DFromArray)              \
macro(hipGraphExternalSemaphoresWaitNodeSetParams) \
macro(hipMemcpyDtoA)                     \
macro(hipGraphMemcpyNodeGetParams)       \
macro(hipMemcpy)                         \
macro(hipSetValidDevices)                \
macro(hipMemcpy2DAsync)                  \
macro(hipGraphExecExternalSemaphoresWaitNodeSetParams) \
macro(hipStreamAttachMemAsync)           \
macro(hipMemset2DAsync)                  \
macro(hipTexObjectGetResourceViewDesc)   \
macro(hipEventCreateWithFlags)           \
macro(hipMipmappedArrayCreate)           \
macro(hipMemcpy2D_spt)                   \
macro(hipGraphAddMemcpyNode)             \
macro(hipMemcpyToSymbolAsync)            \
macro(hipMallocFromPoolAsync)            \
macro(hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags) \
macro(hipGraphAddMemFreeNode)            \
macro(hipModuleOccupancyMaxActiveBlocksPerMultiprocessor) \
macro(hipEventDestroy)                   \
macro(hipDeviceSetCacheConfig)           \
macro(hipFree)                           \
macro(hipMemcpy2DToArrayAsync_spt)       \
macro(hipCtxGetFlags)                    \
macro(hipGetSymbolAddress)               \
macro(hipTexRefGetAddress)               \
macro(hipTexObjectCreate)                \
macro(hipDeviceGetSharedMemConfig)       \
macro(hipMemcpyHtoAAsync)                \
macro(hipMemPoolGetAttribute)            \
macro(hipGraphAddMemAllocNode)           \
macro(hipMemRetainAllocationHandle)      \
macro(hipGetFuncBySymbol)                \
macro(hipDeviceSetMemPool)               \
macro(hipDeviceSetLimit)                 \
macro(hipMemGetInfo)                     \
macro(hipMemcpyParam2D)                  \
macro(hipGraphDebugDotPrint)             \
macro(hipDeviceSetGraphMemAttribute)     \
macro(hipDrvGetErrorString)              \
macro(hipMemcpyDtoDAsync)                \
macro(hipCtxSynchronize)                 \
macro(hipTexObjectDestroy)               \
macro(hipTexRefGetAddressMode)           \
macro(__hipGetPCH)                       \
macro(hipStreamGetFlags)                 \
macro(hipMemGetAccess)                   \
macro(hipMemcpyAtoA)                     \
macro(hipMemcpyToSymbol)                 \
macro(hipCtxSetCurrent)                  \
macro(hipStreamQuery_spt)                \
macro(hipGetSymbolSize)                  \
macro(hipMipmappedArrayGetLevel)         \
macro(hipExternalMemoryGetMappedMipmappedArray) \
macro(hipGraphExecMemcpyNodeSetParams)   \
macro(hipUserObjectCreate)               \
macro(hipStreamGetCaptureInfo_v2)        \
macro(hipTexRefGetArray)                 \
macro(hipImportExternalSemaphore)        \
macro(hipDeviceGetAttribute)             \
macro(hipGraphMemFreeNodeGetParams)      \
macro(hipCtxGetSharedMemConfig)          \
macro(hipGraphMemcpyNodeSetParamsToSymbol) \
macro(hipMemcpy2DToArray)                \
macro(hipStreamIsCapturing_spt)          \
macro(hipFreeHost)                       \
macro(hipGraphKernelNodeSetParams)       \
macro(hipMallocHost)                     \
macro(hipMemset3D_spt)                   \
macro(hipStreamGetCaptureInfo_v2_spt)    \
macro(hipGetTextureReference)            \
macro(hipGraphExecExternalSemaphoresSignalNodeSetParams) \
macro(hipGraphAddDependencies)           \
macro(hipGraphNodeGetType)               \
macro(hipTexRefSetBorderColor)           \
macro(hipMemPrefetchAsync)               \
macro(hipCtxGetDevice)                   \
macro(hipMemcpy2DArrayToArray)           \
macro(hipUserObjectRelease)              \
macro(hipHostGetFlags)                   \
macro(hipDrvGraphAddMemsetNode)          \
macro(hipMemcpyAtoD)                     \
macro(hipMemPoolCreate)                  \
macro(hipKernelNameRef)                  \
macro(hipMemset3DAsync)                  \
macro(hipEventRecord)                    \
macro(hipMipmappedArrayDestroy)          \
macro(hipMemsetAsync_spt)                \
macro(hipDevicePrimaryCtxSetFlags)       \
macro(hipPeekAtLastError)                \
macro(hipDeviceGetGraphMemAttribute)     \
macro(hipDrvGetErrorName)                \
macro(hipMemcpy_spt)                     \
macro(hipCtxSetSharedMemConfig)          \
macro(hipCreateSurfaceObject)            \
macro(hipGetMipmappedArrayLevel)         \
macro(hipGraphExecDestroy)               \
macro(hipMemsetD32Async)                 \
macro(hipDeviceEnablePeerAccess)         \
macro(hipArray3DCreate)                  \
macro(hipIpcOpenMemHandle)               \
macro(hipMemPoolTrimTo)                  \
macro(hipMemcpy2D)                       \
macro(hipFuncGetAttribute)               \
macro(hipBindTextureToMipmappedArray)    \
macro(hipGraphicsMapResources)           \
macro(hipArrayCreate)                    \
macro(hipTexRefSetMaxAnisotropy)         \
macro(hipGraphKernelNodeGetAttribute)    \
macro(hipExtLaunchKernel)                \
macro(hipTexRefSetMipmapFilterMode)      \
macro(hipMemImportFromShareableHandle)   \
macro(hipTexRefSetFormat)                \
macro(amd_dbgapi_get_git_hash)           \
macro(hipLaunchByPtr)                    \
macro(amd_dbgapi_get_build_id)           \
macro(hipMemcpy3DAsync)                  \
macro(hipGetTextureObjectResourceViewDesc) \
macro(hipTexRefSetFilterMode)            \
macro(hipDriverGetVersion)               \
macro(hipStreamWriteValue64)             \
macro(hipMallocMipmappedArray)           \
macro(hipMemset_spt)                     \
macro(hipTexRefSetFlags)                 \
macro(hipMemGetAddressRange)             \
macro(hipTexRefSetMipmapLevelClamp)      \
macro(hipGraphMemcpyNodeSetParams)       \
macro(hipGraphGetEdges)                  \
macro(hipMemcpyToArray)                  \
macro(hipExtMallocWithFlags)             \
macro(hipFuncSetAttribute)               \
macro(hipChooseDeviceR0600)              \
macro(hipTexRefSetMipmappedArray)        \
macro(hipMemset)                         \
macro(hipTexRefGetMipmapLevelClamp)      \


/**
 * @enum hip_api_id_t 
 * @brief Enumeration of HIP API function identifiers.
 *
 * This enumeration defines unique identifiers for various HIP API functions. 
 * These identifiers are used for profiling, tracking, and identifying specific HIP function calls.
 */
typedef enum hip_api_id_e {
    FOR_EACH_HIP_FUNC(GET_FUNC_API_ID)
    HIP_API_ID_NB_FUNCTION,
    HIP_API_ID_UNKNOWN,
} hip_api_id_t;


/**
 * @brief Retrieves the function name corresponding to a given HIP API function ID.
 *
 * This function maps a HIP API function identifier (`hip_api_id_t`) to its corresponding function name
 * as a string. If the provided function ID does not match any known functions, the function returns `NULL`.
 *
 * @param id The HIP API function identifier of type `hip_api_id_t`.
 * @return A constant string representing the function name, or `NULL` if the ID is unknown.
 */
static inline const char* get_hip_funame_by_id(hip_api_id_t id) 
{
    switch(id) {
        FOR_EACH_HIP_FUNC(GET_FUNAME_BY_ID_OF)
        default : return NULL;
    }
    return NULL;
}


/**
 * @brief Retrieves the function pointer corresponding to a given HIP API function ID.
 *
 * This function maps a HIP API function ID (`hip_api_id_t`) to its corresponding function address.
 * If the provided function ID does not match any known functions, the function returns `NULL`.
 *
 * @param id The function ID of type `hip_api_id_t`.
 * @return A pointer to the corresponding HIP API function, or `NULL` if not found.
 */
static inline void* get_hip_funaddr_by_id(hip_api_id_t id) 
{
    switch(id) {
        FOR_EACH_HIP_FUNC(GET_FUNADDR_BY_ID_OF)
        default : return NULL;
    }
    return NULL;
}


/**
 * @brief Retrieves the HIP API function ID corresponding to a given function name.
 *
 * This function maps a HIP API function name (string) to its corresponding function ID (`hip_api_id_t`).
 * If the provided function name does not match any known functions, the function returns `HIP_API_ID_UNKNOWN`.
 *
 * @param name The function name as a null-terminated string.
 * @return The corresponding HIP API function ID of type `hip_api_id_t`, or `HIP_API_ID_UNKNOWN` if not found.
 */
static inline hip_api_id_t get_hip_funid_by_name(const char* name) 
{
    if (name == NULL) return HIP_API_ID_UNKNOWN;
    FOR_EACH_HIP_FUNC(GET_FUNID_BY_NAME_OF)
    return HIP_API_ID_UNKNOWN;
}


// HIP API Args Data
/**
 * @brief Structure to hold the arguments for the `hipMemPtrGetInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPtrGetInfo` function call.
 *
 * @struct args_hipMemPtrGetInfo_t
 *
 * @note 
 *	hipError_t
 *	hipMemPtrGetInfo (
 *			void * ptr (void *)
 *			size_t * size (unsigned long*)
 *	)
 */
struct args_hipMemPtrGetInfo_t {
	void * ptr;
	size_t * size;
	struct {
		size_t val;
	} size__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPtrGetInfo(activity) { \
	activity->hip_args.hipMemPtrGetInfo.ptr = (void *) ptr; \
	activity->hip_args.hipMemPtrGetInfo.size = (size_t *) size; \
};

#define GET_PTRS_VALUE_hipMemPtrGetInfo(args) { \
	if (args->hipMemPtrGetInfo.size != NULL) { \
		args->hipMemPtrGetInfo.size__ref.val = *args->hipMemPtrGetInfo.size; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParams1D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParams1D` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParams1D_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParams1D (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphExecMemcpyNodeSetParams1D_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	void * dst;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParams1D(activity) { \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams1D.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams1D.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams1D.dst = (void *) dst; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams1D.src = (void *) src; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams1D.count = (size_t) count; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams1D.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxEnablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxEnablePeerAccess` function call.
 *
 * @struct args_hipCtxEnablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipCtxEnablePeerAccess (
 *			hipCtx_t peerCtx (struct ihipCtx_t *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipCtxEnablePeerAccess_t {
	struct ihipCtx_t * peerCtx;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxEnablePeerAccess(activity) { \
	activity->hip_args.hipCtxEnablePeerAccess.peerCtx = (struct ihipCtx_t *) peerCtx; \
	activity->hip_args.hipCtxEnablePeerAccess.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipHostUnregister` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostUnregister` function call.
 *
 * @struct args_hipHostUnregister_t
 *
 * @note 
 *	hipError_t
 *	hipHostUnregister (
 *			void * hostPtr (void *)
 *	)
 */
struct args_hipHostUnregister_t {
	void * hostPtr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipHostUnregister(activity) { \
	activity->hip_args.hipHostUnregister.hostPtr = (void *) hostPtr; \
};

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxGetState` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxGetState` function call.
 *
 * @struct args_hipDevicePrimaryCtxGetState_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxGetState (
 *			hipDevice_t dev (int)
 *			unsigned int * flags (unsigned int *)
 *			int * active (int *)
 *	)
 */
struct args_hipDevicePrimaryCtxGetState_t {
	hipDevice_t dev;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	int * active;
	struct {
		int val;
	} active__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDevicePrimaryCtxGetState(activity) { \
	activity->hip_args.hipDevicePrimaryCtxGetState.dev = (hipDevice_t) dev; \
	activity->hip_args.hipDevicePrimaryCtxGetState.flags = (unsigned int *) flags; \
	activity->hip_args.hipDevicePrimaryCtxGetState.active = (int *) active; \
};

#define GET_PTRS_VALUE_hipDevicePrimaryCtxGetState(args) { \
	if (args->hipDevicePrimaryCtxGetState.flags != NULL) { \
		args->hipDevicePrimaryCtxGetState.flags__ref.val = *args->hipDevicePrimaryCtxGetState.flags; \
	} \
	if (args->hipDevicePrimaryCtxGetState.active != NULL) { \
		args->hipDevicePrimaryCtxGetState.active__ref.val = *args->hipDevicePrimaryCtxGetState.active; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipPointerGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPointerGetAttribute` function call.
 *
 * @struct args_hipPointerGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipPointerGetAttribute (
 *			void * data (void *)
 *			hipPointer_attribute attribute (enum hipPointer_attribute)
 *			hipDeviceptr_t ptr (void *)
 *	)
 */
struct args_hipPointerGetAttribute_t {
	void * data;
	hipPointer_attribute attribute;
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipPointerGetAttribute(activity) { \
	activity->hip_args.hipPointerGetAttribute.data = (void *) data; \
	activity->hip_args.hipPointerGetAttribute.attribute = (hipPointer_attribute) attribute; \
	activity->hip_args.hipPointerGetAttribute.ptr = (void *) ptr; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolGetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolGetAccess` function call.
 *
 * @struct args_hipMemPoolGetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolGetAccess (
 *			hipMemAccessFlags * flags (enum hipMemAccessFlags*)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemLocation * location (struct hipMemLocation*)
 *	)
 */
struct args_hipMemPoolGetAccess_t {
	hipMemAccessFlags * flags;
	struct {
		hipMemAccessFlags val;
	} flags__ref;
	struct ihipMemPoolHandle_t * mem_pool;
	hipMemLocation * location;
	struct {
		hipMemLocation val;
	} location__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolGetAccess(activity) { \
	activity->hip_args.hipMemPoolGetAccess.flags = (hipMemAccessFlags *) flags; \
	activity->hip_args.hipMemPoolGetAccess.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMemPoolGetAccess.location = (hipMemLocation *) location; \
};

#define GET_PTRS_VALUE_hipMemPoolGetAccess(args) { \
	if (args->hipMemPoolGetAccess.flags != NULL) { \
		args->hipMemPoolGetAccess.flags__ref.val = *args->hipMemPoolGetAccess.flags; \
	} \
	if (args->hipMemPoolGetAccess.location != NULL) { \
		args->hipMemPoolGetAccess.location__ref.val = *args->hipMemPoolGetAccess.location; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetD32` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD32` function call.
 *
 * @struct args_hipMemsetD32_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD32 (
 *			hipDeviceptr_t dest (void *)
 *			int value (int)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemsetD32_t {
	void * dest;
	int value;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetD32(activity) { \
	activity->hip_args.hipMemsetD32.dest = (void *) dest; \
	activity->hip_args.hipMemsetD32.value = (int) value; \
	activity->hip_args.hipMemsetD32.count = (size_t) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipMappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipMappedArray` function call.
 *
 * @struct args_hipTexRefGetMipMappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipMappedArray (
 *			hipMipmappedArray_t * pArray (struct hipMipmappedArray **)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetMipMappedArray_t {
	struct hipMipmappedArray ** pArray;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} pArray__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetMipMappedArray(activity) { \
	activity->hip_args.hipTexRefGetMipMappedArray.pArray = (struct hipMipmappedArray **) pArray; \
	activity->hip_args.hipTexRefGetMipMappedArray.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipMappedArray(args) { \
	if (args->hipTexRefGetMipMappedArray.pArray != NULL) { \
		args->hipTexRefGetMipMappedArray.pArray__ref.ptr1 = *args->hipTexRefGetMipMappedArray.pArray; \
		if (args->hipTexRefGetMipMappedArray.pArray__ref.ptr1 != NULL) { \
			args->hipTexRefGetMipMappedArray.pArray__ref.val = **args->hipTexRefGetMipMappedArray.pArray; \
		} \
	} \
	if (args->hipTexRefGetMipMappedArray.texRef != NULL) { \
		args->hipTexRefGetMipMappedArray.texRef__ref.val = *args->hipTexRefGetMipMappedArray.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMalloc3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMalloc3D` function call.
 *
 * @struct args_hipMalloc3D_t
 *
 * @note 
 *	hipError_t
 *	hipMalloc3D (
 *			hipPitchedPtr * pitchedDevPtr (struct hipPitchedPtr*)
 *			hipExtent extent (struct hipExtent)
 *	)
 */
struct args_hipMalloc3D_t {
	hipPitchedPtr * pitchedDevPtr;
	struct {
		hipPitchedPtr val;
	} pitchedDevPtr__ref;
	hipExtent extent;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMalloc3D(activity) { \
	activity->hip_args.hipMalloc3D.pitchedDevPtr = (hipPitchedPtr *) pitchedDevPtr; \
	activity->hip_args.hipMalloc3D.extent = (hipExtent) extent; \
};

#define GET_PTRS_VALUE_hipMalloc3D(args) { \
	if (args->hipMalloc3D.pitchedDevPtr != NULL) { \
		args->hipMalloc3D.pitchedDevPtr__ref.val = *args->hipMalloc3D.pitchedDevPtr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetD8` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD8` function call.
 *
 * @struct args_hipMemsetD8_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD8 (
 *			hipDeviceptr_t dest (void *)
 *			unsigned char value (unsigned char)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemsetD8_t {
	void * dest;
	unsigned char value;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetD8(activity) { \
	activity->hip_args.hipMemsetD8.dest = (void *) dest; \
	activity->hip_args.hipMemsetD8.value = (unsigned char) value; \
	activity->hip_args.hipMemsetD8.count = (size_t) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipMallocArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocArray` function call.
 *
 * @struct args_hipMallocArray_t
 *
 * @note 
 *	hipError_t
 *	hipMallocArray (
 *			hipArray_t * array (struct hipArray **)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipMallocArray_t {
	struct hipArray ** array;
	struct {
		void* ptr1;
	} array__ref;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	size_t width;
	size_t height;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMallocArray(activity) { \
	activity->hip_args.hipMallocArray.array = (struct hipArray **) array; \
	activity->hip_args.hipMallocArray.desc = (hipChannelFormatDesc *) desc; \
	activity->hip_args.hipMallocArray.width = (size_t) width; \
	activity->hip_args.hipMallocArray.height = (size_t) height; \
	activity->hip_args.hipMallocArray.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMallocArray(args) { \
	if (args->hipMallocArray.array != NULL) { \
		args->hipMallocArray.array__ref.ptr1 = *args->hipMallocArray.array; \
	} \
	if (args->hipMallocArray.desc != NULL) { \
		args->hipMallocArray.desc__ref.val = *args->hipMallocArray.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphEventWaitNodeGetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventWaitNodeGetEvent` function call.
 *
 * @struct args_hipGraphEventWaitNodeGetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventWaitNodeGetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t * event_out (struct ihipEvent_t **)
 *	)
 */
struct args_hipGraphEventWaitNodeGetEvent_t {
	struct hipGraphNode * node;
	struct ihipEvent_t ** event_out;
	struct {
		void* ptr1;
	} event_out__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphEventWaitNodeGetEvent(activity) { \
	activity->hip_args.hipGraphEventWaitNodeGetEvent.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphEventWaitNodeGetEvent.event_out = (struct ihipEvent_t **) event_out; \
};

#define GET_PTRS_VALUE_hipGraphEventWaitNodeGetEvent(args) { \
	if (args->hipGraphEventWaitNodeGetEvent.event_out != NULL) { \
		args->hipGraphEventWaitNodeGetEvent.event_out__ref.ptr1 = *args->hipGraphEventWaitNodeGetEvent.event_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvMemcpy3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvMemcpy3D` function call.
 *
 * @struct args_hipDrvMemcpy3D_t
 *
 * @note 
 *	hipError_t
 *	hipDrvMemcpy3D (
 *			const HIP_MEMCPY3D * pCopy (const struct HIP_MEMCPY3D *)
 *	)
 */
struct args_hipDrvMemcpy3D_t {
	HIP_MEMCPY3D * pCopy;
	struct {
		HIP_MEMCPY3D val;
	} pCopy__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvMemcpy3D(activity) { \
	activity->hip_args.hipDrvMemcpy3D.pCopy = (HIP_MEMCPY3D *) pCopy; \
};

#define GET_PTRS_VALUE_hipDrvMemcpy3D(args) { \
	if (args->hipDrvMemcpy3D.pCopy != NULL) { \
		args->hipDrvMemcpy3D.pCopy__ref.val = *args->hipDrvMemcpy3D.pCopy; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function call.
 *
 * @struct args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (
 *			int * numBlocks (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	struct ihipModuleSymbol_t * f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(activity) { \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks = (int *) numBlocks; \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.f = (struct ihipModuleSymbol_t *) f; \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.blockSize = (int) blockSize; \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args) { \
	if (args->hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks != NULL) { \
		args->hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks__ref.val = *args->hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipHostMalloc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostMalloc` function call.
 *
 * @struct args_hipHostMalloc_t
 *
 * @note 
 *	hipError_t
 *	hipHostMalloc (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipHostMalloc_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipHostMalloc(activity) { \
	activity->hip_args.hipHostMalloc.ptr = (void **) ptr; \
	activity->hip_args.hipHostMalloc.size = (size_t) size; \
	activity->hip_args.hipHostMalloc.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipHostMalloc(args) { \
	if (args->hipHostMalloc.ptr != NULL) { \
		args->hipHostMalloc.ptr__ref.ptr1 = *args->hipHostMalloc.ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleGetTexRef` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleGetTexRef` function call.
 *
 * @struct args_hipModuleGetTexRef_t
 *
 * @note 
 *	hipError_t
 *	hipModuleGetTexRef (
 *			textureReference ** texRef (struct textureReference**)
 *			hipModule_t hmod (struct ihipModule_t *)
 *			const char * name (const char *)
 *	)
 */
struct args_hipModuleGetTexRef_t {
	textureReference ** texRef;
	struct {
		void* ptr1;
		textureReference val;
	} texRef__ref;
	struct ihipModule_t * hmod;
	char * name;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} name__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleGetTexRef(activity) { \
	activity->hip_args.hipModuleGetTexRef.texRef = (textureReference **) texRef; \
	activity->hip_args.hipModuleGetTexRef.hmod = (struct ihipModule_t *) hmod; \
	activity->hip_args.hipModuleGetTexRef.name = (char *) name; \
};

#define GET_PTRS_VALUE_hipModuleGetTexRef(args) { \
	if (args->hipModuleGetTexRef.texRef != NULL) { \
		args->hipModuleGetTexRef.texRef__ref.ptr1 = *args->hipModuleGetTexRef.texRef; \
		if (args->hipModuleGetTexRef.texRef__ref.ptr1 != NULL) { \
			args->hipModuleGetTexRef.texRef__ref.val = **args->hipModuleGetTexRef.texRef; \
		} \
	} \
	if (args->hipModuleGetTexRef.name != NULL) { \
		strncpy(args->hipModuleGetTexRef.name__ref.val, args->hipModuleGetTexRef.name, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipIpcGetMemHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcGetMemHandle` function call.
 *
 * @struct args_hipIpcGetMemHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcGetMemHandle (
 *			hipIpcMemHandle_t * handle (struct hipIpcMemHandle_st*)
 *			void * devPtr (void *)
 *	)
 */
struct args_hipIpcGetMemHandle_t {
	hipIpcMemHandle_t * handle;
	struct {
		hipIpcMemHandle_t val;
	} handle__ref;
	void * devPtr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipIpcGetMemHandle(activity) { \
	activity->hip_args.hipIpcGetMemHandle.handle = (hipIpcMemHandle_t *) handle; \
	activity->hip_args.hipIpcGetMemHandle.devPtr = (void *) devPtr; \
};

#define GET_PTRS_VALUE_hipIpcGetMemHandle(args) { \
	if (args->hipIpcGetMemHandle.handle != NULL) { \
		args->hipIpcGetMemHandle.handle__ref.val = *args->hipIpcGetMemHandle.handle; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoHAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoHAsync` function call.
 *
 * @struct args_hipMemcpyDtoHAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoHAsync (
 *			void * dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyDtoHAsync_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyDtoHAsync(activity) { \
	activity->hip_args.hipMemcpyDtoHAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpyDtoHAsync.src = (void *) src; \
	activity->hip_args.hipMemcpyDtoHAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyDtoHAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleLoad` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLoad` function call.
 *
 * @struct args_hipModuleLoad_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLoad (
 *			hipModule_t * module (struct ihipModule_t **)
 *			const char * fname (const char *)
 *	)
 */
struct args_hipModuleLoad_t {
	struct ihipModule_t ** module;
	struct {
		void* ptr1;
	} module__ref;
	char * fname;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} fname__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleLoad(activity) { \
	activity->hip_args.hipModuleLoad.module = (struct ihipModule_t **) module; \
	activity->hip_args.hipModuleLoad.fname = (char *) fname; \
};

#define GET_PTRS_VALUE_hipModuleLoad(args) { \
	if (args->hipModuleLoad.module != NULL) { \
		args->hipModuleLoad.module__ref.ptr1 = *args->hipModuleLoad.module; \
	} \
	if (args->hipModuleLoad.fname != NULL) { \
		strncpy(args->hipModuleLoad.fname__ref.val, args->hipModuleLoad.fname, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipWaitExternalSemaphoresAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipWaitExternalSemaphoresAsync` function call.
 *
 * @struct args_hipWaitExternalSemaphoresAsync_t
 *
 * @note 
 *	hipError_t
 *	hipWaitExternalSemaphoresAsync (
 *			const hipExternalSemaphore_t * extSemArray (const void * *)
 *			const hipExternalSemaphoreWaitParams * paramsArray (const struct hipExternalSemaphoreWaitParams_st *)
 *			unsigned int numExtSems (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipWaitExternalSemaphoresAsync_t {
	void * * extSemArray;
	struct {
		void* ptr1;
	} extSemArray__ref;
	hipExternalSemaphoreWaitParams * paramsArray;
	struct {
		hipExternalSemaphoreWaitParams val;
	} paramsArray__ref;
	unsigned int numExtSems;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipWaitExternalSemaphoresAsync(activity) { \
	activity->hip_args.hipWaitExternalSemaphoresAsync.extSemArray = (void * *) extSemArray; \
	activity->hip_args.hipWaitExternalSemaphoresAsync.paramsArray = (hipExternalSemaphoreWaitParams *) paramsArray; \
	activity->hip_args.hipWaitExternalSemaphoresAsync.numExtSems = (unsigned int) numExtSems; \
	activity->hip_args.hipWaitExternalSemaphoresAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipWaitExternalSemaphoresAsync(args) { \
	if (args->hipWaitExternalSemaphoresAsync.extSemArray != NULL) { \
		args->hipWaitExternalSemaphoresAsync.extSemArray__ref.ptr1 = *args->hipWaitExternalSemaphoresAsync.extSemArray; \
	} \
	if (args->hipWaitExternalSemaphoresAsync.paramsArray != NULL) { \
		args->hipWaitExternalSemaphoresAsync.paramsArray__ref.val = *args->hipWaitExternalSemaphoresAsync.paramsArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeGetParams` function call.
 *
 * @struct args_hipGraphKernelNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipKernelNodeParams * pNodeParams (struct hipKernelNodeParams*)
 *	)
 */
struct args_hipGraphKernelNodeGetParams_t {
	struct hipGraphNode * node;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphKernelNodeGetParams(activity) { \
	activity->hip_args.hipGraphKernelNodeGetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphKernelNodeGetParams.pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeGetParams(args) { \
	if (args->hipGraphKernelNodeGetParams.pNodeParams != NULL) { \
		args->hipGraphKernelNodeGetParams.pNodeParams__ref.val = *args->hipGraphKernelNodeGetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphLaunch` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphLaunch` function call.
 *
 * @struct args_hipGraphLaunch_t
 *
 * @note 
 *	hipError_t
 *	hipGraphLaunch (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipGraphLaunch_t {
	struct hipGraphExec * graphExec;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphLaunch(activity) { \
	activity->hip_args.hipGraphLaunch.graphExec = (struct hipGraphExec *) graphExec; \
	activity->hip_args.hipGraphLaunch.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipHostAlloc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostAlloc` function call.
 *
 * @struct args_hipHostAlloc_t
 *
 * @note 
 *	hipError_t
 *	hipHostAlloc (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipHostAlloc_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipHostAlloc(activity) { \
	activity->hip_args.hipHostAlloc.ptr = (void **) ptr; \
	activity->hip_args.hipHostAlloc.size = (size_t) size; \
	activity->hip_args.hipHostAlloc.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipHostAlloc(args) { \
	if (args->hipHostAlloc.ptr != NULL) { \
		args->hipHostAlloc.ptr__ref.ptr1 = *args->hipHostAlloc.ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipSetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetDevice` function call.
 *
 * @struct args_hipSetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipSetDevice (
 *			int deviceId (int)
 *	)
 */
struct args_hipSetDevice_t {
	int deviceId;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipSetDevice(activity) { \
	activity->hip_args.hipSetDevice.deviceId = (int) deviceId; \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxPotentialBlockSizeWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxPotentialBlockSizeWithFlags` function call.
 *
 * @struct args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxPotentialBlockSizeWithFlags (
 *			int * gridSize (int *)
 *			int * blockSize (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			int blockSizeLimit (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t {
	int * gridSize;
	struct {
		int val;
	} gridSize__ref;
	int * blockSize;
	struct {
		int val;
	} blockSize__ref;
	struct ihipModuleSymbol_t * f;
	size_t dynSharedMemPerBlk;
	int blockSizeLimit;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags(activity) { \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSizeWithFlags.gridSize = (int *) gridSize; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSizeWithFlags.blockSize = (int *) blockSize; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSizeWithFlags.f = (struct ihipModuleSymbol_t *) f; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSizeWithFlags.dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSizeWithFlags.blockSizeLimit = (int) blockSizeLimit; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSizeWithFlags.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags(args) { \
	if (args->hipModuleOccupancyMaxPotentialBlockSizeWithFlags.gridSize != NULL) { \
		args->hipModuleOccupancyMaxPotentialBlockSizeWithFlags.gridSize__ref.val = *args->hipModuleOccupancyMaxPotentialBlockSizeWithFlags.gridSize; \
	} \
	if (args->hipModuleOccupancyMaxPotentialBlockSizeWithFlags.blockSize != NULL) { \
		args->hipModuleOccupancyMaxPotentialBlockSizeWithFlags.blockSize__ref.val = *args->hipModuleOccupancyMaxPotentialBlockSizeWithFlags.blockSize; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetDependentNodes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetDependentNodes` function call.
 *
 * @struct args_hipGraphNodeGetDependentNodes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetDependentNodes (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraphNode_t * pDependentNodes (struct hipGraphNode **)
 *			size_t * pNumDependentNodes (unsigned long*)
 *	)
 */
struct args_hipGraphNodeGetDependentNodes_t {
	struct hipGraphNode * node;
	struct hipGraphNode ** pDependentNodes;
	struct {
		void* ptr1;
	} pDependentNodes__ref;
	size_t * pNumDependentNodes;
	struct {
		size_t val;
	} pNumDependentNodes__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphNodeGetDependentNodes(activity) { \
	activity->hip_args.hipGraphNodeGetDependentNodes.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphNodeGetDependentNodes.pDependentNodes = (struct hipGraphNode **) pDependentNodes; \
	activity->hip_args.hipGraphNodeGetDependentNodes.pNumDependentNodes = (size_t *) pNumDependentNodes; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetDependentNodes(args) { \
	if (args->hipGraphNodeGetDependentNodes.pDependentNodes != NULL) { \
		args->hipGraphNodeGetDependentNodes.pDependentNodes__ref.ptr1 = *args->hipGraphNodeGetDependentNodes.pDependentNodes; \
	} \
	if (args->hipGraphNodeGetDependentNodes.pNumDependentNodes != NULL) { \
		args->hipGraphNodeGetDependentNodes.pNumDependentNodes__ref.val = *args->hipGraphNodeGetDependentNodes.pNumDependentNodes; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipExtStreamGetCUMask` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtStreamGetCUMask` function call.
 *
 * @struct args_hipExtStreamGetCUMask_t
 *
 * @note 
 *	hipError_t
 *	hipExtStreamGetCUMask (
 *			hipStream_t stream (struct ihipStream_t *)
 *			uint32_t cuMaskSize (unsigned int)
 *			uint32_t * cuMask (unsigned int*)
 *	)
 */
struct args_hipExtStreamGetCUMask_t {
	struct ihipStream_t * stream;
	uint32_t cuMaskSize;
	uint32_t * cuMask;
	struct {
		uint32_t val;
	} cuMask__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExtStreamGetCUMask(activity) { \
	activity->hip_args.hipExtStreamGetCUMask.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipExtStreamGetCUMask.cuMaskSize = (uint32_t) cuMaskSize; \
	activity->hip_args.hipExtStreamGetCUMask.cuMask = (uint32_t *) cuMask; \
};

#define GET_PTRS_VALUE_hipExtStreamGetCUMask(args) { \
	if (args->hipExtStreamGetCUMask.cuMask != NULL) { \
		args->hipExtStreamGetCUMask.cuMask__ref.val = *args->hipExtStreamGetCUMask.cuMask; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetD16` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD16` function call.
 *
 * @struct args_hipMemsetD16_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD16 (
 *			hipDeviceptr_t dest (void *)
 *			unsigned short value (unsigned short)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemsetD16_t {
	void * dest;
	unsigned short value;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetD16(activity) { \
	activity->hip_args.hipMemsetD16.dest = (void *) dest; \
	activity->hip_args.hipMemsetD16.value = (unsigned short) value; \
	activity->hip_args.hipMemsetD16.count = (size_t) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchKernel` function call.
 *
 * @struct args_hipLaunchKernel_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchKernel (
 *			const void * function_address (const void *)
 *			dim3 numBlocks (struct dim3)
 *			dim3 dimBlocks (struct dim3)
 *			void ** args (void **)
 *			size_t sharedMemBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipLaunchKernel_t {
	void * function_address;
	dim3 numBlocks;
	dim3 dimBlocks;
	void ** args;
	struct {
		void* ptr1;
	} args__ref;
	size_t sharedMemBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchKernel(activity) { \
	activity->hip_args.hipLaunchKernel.function_address = (void *) function_address; \
	activity->hip_args.hipLaunchKernel.numBlocks = (dim3) numBlocks; \
	activity->hip_args.hipLaunchKernel.dimBlocks = (dim3) dimBlocks; \
	activity->hip_args.hipLaunchKernel.args = (void **) args; \
	activity->hip_args.hipLaunchKernel.sharedMemBytes = (size_t) sharedMemBytes; \
	activity->hip_args.hipLaunchKernel.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipLaunchKernel(args) { \
	if (args->hipLaunchKernel.args != NULL) { \
		args->hipLaunchKernel.args__ref.ptr1 = *args->hipLaunchKernel.args; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetErrorString` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetErrorString` function call.
 *
 * @struct args_hipGetErrorString_t
 *
 * @note 
 *	const char *
 *	hipGetErrorString (
 *			hipError_t hipError (enum hipError_t)
 *	)
 */
struct args_hipGetErrorString_t {
	hipError_t hipError;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
};

#define GET_ARGS_VALUE_hipGetErrorString(activity) { \
	activity->hip_args.hipGetErrorString.hipError = (hipError_t) hipError; \
};

#define GET_PTRS_RET_VALUE_hipGetErrorString(args) { \
	if (args->hipGetErrorString.retval != NULL) { \
		strncpy(args->hipGetErrorString.retval__ref.val, args->hipGetErrorString.retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleLoadDataEx` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLoadDataEx` function call.
 *
 * @struct args_hipModuleLoadDataEx_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLoadDataEx (
 *			hipModule_t * module (struct ihipModule_t **)
 *			const void * image (const void *)
 *			unsigned int numOptions (unsigned int)
 *			hipJitOption * options (enum hipJitOption*)
 *			void ** optionValues (void **)
 *	)
 */
struct args_hipModuleLoadDataEx_t {
	struct ihipModule_t ** module;
	struct {
		void* ptr1;
	} module__ref;
	void * image;
	unsigned int numOptions;
	hipJitOption * options;
	struct {
		hipJitOption val;
	} options__ref;
	void ** optionValues;
	struct {
		void* ptr1;
	} optionValues__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleLoadDataEx(activity) { \
	activity->hip_args.hipModuleLoadDataEx.module = (struct ihipModule_t **) module; \
	activity->hip_args.hipModuleLoadDataEx.image = (void *) image; \
	activity->hip_args.hipModuleLoadDataEx.numOptions = (unsigned int) numOptions; \
	activity->hip_args.hipModuleLoadDataEx.options = (hipJitOption *) options; \
	activity->hip_args.hipModuleLoadDataEx.optionValues = (void **) optionValues; \
};

#define GET_PTRS_VALUE_hipModuleLoadDataEx(args) { \
	if (args->hipModuleLoadDataEx.module != NULL) { \
		args->hipModuleLoadDataEx.module__ref.ptr1 = *args->hipModuleLoadDataEx.module; \
	} \
	if (args->hipModuleLoadDataEx.options != NULL) { \
		args->hipModuleLoadDataEx.options__ref.val = *args->hipModuleLoadDataEx.options; \
	} \
	if (args->hipModuleLoadDataEx.optionValues != NULL) { \
		args->hipModuleLoadDataEx.optionValues__ref.ptr1 = *args->hipModuleLoadDataEx.optionValues; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetFilterMode` function call.
 *
 * @struct args_hipTexRefGetFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetFilterMode (
 *			enum hipTextureFilterMode * pfm (enum hipTextureFilterMode *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetFilterMode_t {
	enum hipTextureFilterMode * pfm;
	struct {
		enum hipTextureFilterMode val;
	} pfm__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetFilterMode(activity) { \
	activity->hip_args.hipTexRefGetFilterMode.pfm = (enum hipTextureFilterMode *) pfm; \
	activity->hip_args.hipTexRefGetFilterMode.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetFilterMode(args) { \
	if (args->hipTexRefGetFilterMode.pfm != NULL) { \
		args->hipTexRefGetFilterMode.pfm__ref.val = *args->hipTexRefGetFilterMode.pfm; \
	} \
	if (args->hipTexRefGetFilterMode.texRef != NULL) { \
		args->hipTexRefGetFilterMode.texRef__ref.val = *args->hipTexRefGetFilterMode.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphInstantiateWithParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphInstantiateWithParams` function call.
 *
 * @struct args_hipGraphInstantiateWithParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphInstantiateWithParams (
 *			hipGraphExec_t * pGraphExec (struct hipGraphExec **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphInstantiateParams * instantiateParams (struct hipGraphInstantiateParams*)
 *	)
 */
struct args_hipGraphInstantiateWithParams_t {
	struct hipGraphExec ** pGraphExec;
	struct {
		void* ptr1;
	} pGraphExec__ref;
	struct ihipGraph * graph;
	hipGraphInstantiateParams * instantiateParams;
	struct {
		hipGraphInstantiateParams val;
	} instantiateParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphInstantiateWithParams(activity) { \
	activity->hip_args.hipGraphInstantiateWithParams.pGraphExec = (struct hipGraphExec **) pGraphExec; \
	activity->hip_args.hipGraphInstantiateWithParams.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphInstantiateWithParams.instantiateParams = (hipGraphInstantiateParams *) instantiateParams; \
};

#define GET_PTRS_VALUE_hipGraphInstantiateWithParams(args) { \
	if (args->hipGraphInstantiateWithParams.pGraphExec != NULL) { \
		args->hipGraphInstantiateWithParams.pGraphExec__ref.ptr1 = *args->hipGraphInstantiateWithParams.pGraphExec; \
	} \
	if (args->hipGraphInstantiateWithParams.instantiateParams != NULL) { \
		args->hipGraphInstantiateWithParams.instantiateParams__ref.val = *args->hipGraphInstantiateWithParams.instantiateParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParams1D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParams1D` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParams1D_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParams1D (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphMemcpyNodeSetParams1D_t {
	struct hipGraphNode * node;
	void * dst;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParams1D(activity) { \
	activity->hip_args.hipGraphMemcpyNodeSetParams1D.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemcpyNodeSetParams1D.dst = (void *) dst; \
	activity->hip_args.hipGraphMemcpyNodeSetParams1D.src = (void *) src; \
	activity->hip_args.hipGraphMemcpyNodeSetParams1D.count = (size_t) count; \
	activity->hip_args.hipGraphMemcpyNodeSetParams1D.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamSynchronize` function call.
 *
 * @struct args_hipStreamSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipStreamSynchronize (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipStreamSynchronize_t {
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamSynchronize(activity) { \
	activity->hip_args.hipStreamSynchronize.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphicsUnmapResources` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsUnmapResources` function call.
 *
 * @struct args_hipGraphicsUnmapResources_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsUnmapResources (
 *			int count (int)
 *			hipGraphicsResource_t * resources (struct _hipGraphicsResource**)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipGraphicsUnmapResources_t {
	int count;
	struct _hipGraphicsResource** resources;
	struct {
		void* ptr1;
	} resources__ref;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphicsUnmapResources(activity) { \
	activity->hip_args.hipGraphicsUnmapResources.count = (int) count; \
	activity->hip_args.hipGraphicsUnmapResources.resources = (struct _hipGraphicsResource**) resources; \
	activity->hip_args.hipGraphicsUnmapResources.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipGraphicsUnmapResources(args) { \
	if (args->hipGraphicsUnmapResources.resources != NULL) { \
		args->hipGraphicsUnmapResources.resources__ref.ptr1 = *args->hipGraphicsUnmapResources.resources; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArray_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArray_spt` function call.
 *
 * @struct args_hipMemcpy2DFromArray_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArray_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy2DFromArray_spt_t {
	void * dst;
	size_t dpitch;
	struct hipArray * src;
	size_t wOffset;
	size_t hOffset;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DFromArray_spt(activity) { \
	activity->hip_args.hipMemcpy2DFromArray_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2DFromArray_spt.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2DFromArray_spt.src = (struct hipArray *) src; \
	activity->hip_args.hipMemcpy2DFromArray_spt.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpy2DFromArray_spt.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpy2DFromArray_spt.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DFromArray_spt.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DFromArray_spt.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParamsFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParamsFromSymbol` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParamsFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParamsFromSymbol (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphExecMemcpyNodeSetParamsFromSymbol_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	void * dst;
	void * symbol;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParamsFromSymbol(activity) { \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsFromSymbol.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsFromSymbol.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsFromSymbol.dst = (void *) dst; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsFromSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsFromSymbol.count = (size_t) count; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsFromSymbol.offset = (size_t) offset; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsFromSymbol.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipmapLevelBias` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipmapLevelBias` function call.
 *
 * @struct args_hipTexRefGetMipmapLevelBias_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipmapLevelBias (
 *			float * pbias (float *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetMipmapLevelBias_t {
	float * pbias;
	struct {
		float val;
	} pbias__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetMipmapLevelBias(activity) { \
	activity->hip_args.hipTexRefGetMipmapLevelBias.pbias = (float *) pbias; \
	activity->hip_args.hipTexRefGetMipmapLevelBias.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipmapLevelBias(args) { \
	if (args->hipTexRefGetMipmapLevelBias.pbias != NULL) { \
		args->hipTexRefGetMipmapLevelBias.pbias__ref.val = *args->hipTexRefGetMipmapLevelBias.pbias; \
	} \
	if (args->hipTexRefGetMipmapLevelBias.texRef != NULL) { \
		args->hipTexRefGetMipmapLevelBias.texRef__ref.val = *args->hipTexRefGetMipmapLevelBias.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddExternalSemaphoresSignalNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddExternalSemaphoresSignalNode` function call.
 *
 * @struct args_hipGraphAddExternalSemaphoresSignalNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddExternalSemaphoresSignalNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipExternalSemaphoreSignalNodeParams * nodeParams (const struct hipExternalSemaphoreSignalNodeParams *)
 *	)
 */
struct args_hipGraphAddExternalSemaphoresSignalNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipExternalSemaphoreSignalNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddExternalSemaphoresSignalNode(activity) { \
	activity->hip_args.hipGraphAddExternalSemaphoresSignalNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddExternalSemaphoresSignalNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddExternalSemaphoresSignalNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddExternalSemaphoresSignalNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddExternalSemaphoresSignalNode.nodeParams = (hipExternalSemaphoreSignalNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddExternalSemaphoresSignalNode(args) { \
	if (args->hipGraphAddExternalSemaphoresSignalNode.pGraphNode != NULL) { \
		args->hipGraphAddExternalSemaphoresSignalNode.pGraphNode__ref.ptr1 = *args->hipGraphAddExternalSemaphoresSignalNode.pGraphNode; \
	} \
	if (args->hipGraphAddExternalSemaphoresSignalNode.pDependencies != NULL) { \
		args->hipGraphAddExternalSemaphoresSignalNode.pDependencies__ref.ptr1 = *args->hipGraphAddExternalSemaphoresSignalNode.pDependencies; \
	} \
	if (args->hipGraphAddExternalSemaphoresSignalNode.nodeParams != NULL) { \
		args->hipGraphAddExternalSemaphoresSignalNode.nodeParams__ref.val = *args->hipGraphAddExternalSemaphoresSignalNode.nodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipExtGetLastError` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtGetLastError` function call.
 *
 * @struct args_hipExtGetLastError_t
 *
 * @note 
 *	hipError_t
 *	hipExtGetLastError (
 *	)
 */
struct args_hipExtGetLastError_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipMemMapArrayAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemMapArrayAsync` function call.
 *
 * @struct args_hipMemMapArrayAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemMapArrayAsync (
 *			hipArrayMapInfo * mapInfoList (struct hipArrayMapInfo*)
 *			unsigned int count (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemMapArrayAsync_t {
	hipArrayMapInfo * mapInfoList;
	struct {
		hipArrayMapInfo val;
	} mapInfoList__ref;
	unsigned int count;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemMapArrayAsync(activity) { \
	activity->hip_args.hipMemMapArrayAsync.mapInfoList = (hipArrayMapInfo *) mapInfoList; \
	activity->hip_args.hipMemMapArrayAsync.count = (unsigned int) count; \
	activity->hip_args.hipMemMapArrayAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipMemMapArrayAsync(args) { \
	if (args->hipMemMapArrayAsync.mapInfoList != NULL) { \
		args->hipMemMapArrayAsync.mapInfoList__ref.val = *args->hipMemMapArrayAsync.mapInfoList; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAsync` function call.
 *
 * @struct args_hipMemcpyAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAsync (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyAsync_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyAsync(activity) { \
	activity->hip_args.hipMemcpyAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpyAsync.src = (void *) src; \
	activity->hip_args.hipMemcpyAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyAsync.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpyAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeSetAttribute` function call.
 *
 * @struct args_hipGraphKernelNodeSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeSetAttribute (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipLaunchAttributeID attr (enum hipLaunchAttributeID)
 *			const hipLaunchAttributeValue * value (const union hipLaunchAttributeValue *)
 *	)
 */
struct args_hipGraphKernelNodeSetAttribute_t {
	struct hipGraphNode * hNode;
	hipLaunchAttributeID attr;
	hipLaunchAttributeValue * value;
	struct {
		hipLaunchAttributeValue val;
	} value__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphKernelNodeSetAttribute(activity) { \
	activity->hip_args.hipGraphKernelNodeSetAttribute.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphKernelNodeSetAttribute.attr = (hipLaunchAttributeID) attr; \
	activity->hip_args.hipGraphKernelNodeSetAttribute.value = (hipLaunchAttributeValue *) value; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeSetAttribute(args) { \
	if (args->hipGraphKernelNodeSetAttribute.value != NULL) { \
		args->hipGraphKernelNodeSetAttribute.value__ref.val = *args->hipGraphKernelNodeSetAttribute.value; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvMemcpy2DUnaligned` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvMemcpy2DUnaligned` function call.
 *
 * @struct args_hipDrvMemcpy2DUnaligned_t
 *
 * @note 
 *	hipError_t
 *	hipDrvMemcpy2DUnaligned (
 *			const hip_Memcpy2D * pCopy (const struct hip_Memcpy2D *)
 *	)
 */
struct args_hipDrvMemcpy2DUnaligned_t {
	hip_Memcpy2D * pCopy;
	struct {
		hip_Memcpy2D val;
	} pCopy__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvMemcpy2DUnaligned(activity) { \
	activity->hip_args.hipDrvMemcpy2DUnaligned.pCopy = (hip_Memcpy2D *) pCopy; \
};

#define GET_PTRS_VALUE_hipDrvMemcpy2DUnaligned(args) { \
	if (args->hipDrvMemcpy2DUnaligned.pCopy != NULL) { \
		args->hipDrvMemcpy2DUnaligned.pCopy__ref.val = *args->hipDrvMemcpy2DUnaligned.pCopy; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolDestroy` function call.
 *
 * @struct args_hipMemPoolDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolDestroy (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *	)
 */
struct args_hipMemPoolDestroy_t {
	struct ihipMemPoolHandle_t * mem_pool;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolDestroy(activity) { \
	activity->hip_args.hipMemPoolDestroy.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphRemoveDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphRemoveDependencies` function call.
 *
 * @struct args_hipGraphRemoveDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipGraphRemoveDependencies (
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * from (const struct hipGraphNode * *)
 *			const hipGraphNode_t * to (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *	)
 */
struct args_hipGraphRemoveDependencies_t {
	struct ihipGraph * graph;
	struct hipGraphNode * * from;
	struct {
		void* ptr1;
	} from__ref;
	struct hipGraphNode * * to;
	struct {
		void* ptr1;
	} to__ref;
	size_t numDependencies;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphRemoveDependencies(activity) { \
	activity->hip_args.hipGraphRemoveDependencies.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphRemoveDependencies.from = (struct hipGraphNode * *) from; \
	activity->hip_args.hipGraphRemoveDependencies.to = (struct hipGraphNode * *) to; \
	activity->hip_args.hipGraphRemoveDependencies.numDependencies = (size_t) numDependencies; \
};

#define GET_PTRS_VALUE_hipGraphRemoveDependencies(args) { \
	if (args->hipGraphRemoveDependencies.from != NULL) { \
		args->hipGraphRemoveDependencies.from__ref.ptr1 = *args->hipGraphRemoveDependencies.from; \
	} \
	if (args->hipGraphRemoveDependencies.to != NULL) { \
		args->hipGraphRemoveDependencies.to__ref.ptr1 = *args->hipGraphRemoveDependencies.to; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphCreate` function call.
 *
 * @struct args_hipGraphCreate_t
 *
 * @note 
 *	hipError_t
 *	hipGraphCreate (
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipGraphCreate_t {
	struct ihipGraph ** pGraph;
	struct {
		void* ptr1;
	} pGraph__ref;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphCreate(activity) { \
	activity->hip_args.hipGraphCreate.pGraph = (struct ihipGraph **) pGraph; \
	activity->hip_args.hipGraphCreate.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipGraphCreate(args) { \
	if (args->hipGraphCreate.pGraph != NULL) { \
		args->hipGraphCreate.pGraph__ref.ptr1 = *args->hipGraphCreate.pGraph; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipExtLaunchMultiKernelMultiDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtLaunchMultiKernelMultiDevice` function call.
 *
 * @struct args_hipExtLaunchMultiKernelMultiDevice_t
 *
 * @note 
 *	hipError_t
 *	hipExtLaunchMultiKernelMultiDevice (
 *			hipLaunchParams * launchParamsList (struct hipLaunchParams_t*)
 *			int numDevices (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipExtLaunchMultiKernelMultiDevice_t {
	hipLaunchParams * launchParamsList;
	struct {
		hipLaunchParams val;
	} launchParamsList__ref;
	int numDevices;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExtLaunchMultiKernelMultiDevice(activity) { \
	activity->hip_args.hipExtLaunchMultiKernelMultiDevice.launchParamsList = (hipLaunchParams *) launchParamsList; \
	activity->hip_args.hipExtLaunchMultiKernelMultiDevice.numDevices = (int) numDevices; \
	activity->hip_args.hipExtLaunchMultiKernelMultiDevice.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipExtLaunchMultiKernelMultiDevice(args) { \
	if (args->hipExtLaunchMultiKernelMultiDevice.launchParamsList != NULL) { \
		args->hipExtLaunchMultiKernelMultiDevice.launchParamsList__ref.val = *args->hipExtLaunchMultiKernelMultiDevice.launchParamsList; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetDeviceCount` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDeviceCount` function call.
 *
 * @struct args_hipGetDeviceCount_t
 *
 * @note 
 *	hipError_t
 *	hipGetDeviceCount (
 *			int * count (int *)
 *	)
 */
struct args_hipGetDeviceCount_t {
	int * count;
	struct {
		int val;
	} count__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetDeviceCount(activity) { \
	activity->hip_args.hipGetDeviceCount.count = (int *) count; \
};

#define GET_PTRS_VALUE_hipGetDeviceCount(args) { \
	if (args->hipGetDeviceCount.count != NULL) { \
		args->hipGetDeviceCount.count__ref.val = *args->hipGetDeviceCount.count; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemUnmap` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemUnmap` function call.
 *
 * @struct args_hipMemUnmap_t
 *
 * @note 
 *	hipError_t
 *	hipMemUnmap (
 *			void * ptr (void *)
 *			size_t size (unsigned long)
 *	)
 */
struct args_hipMemUnmap_t {
	void * ptr;
	size_t size;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemUnmap(activity) { \
	activity->hip_args.hipMemUnmap.ptr = (void *) ptr; \
	activity->hip_args.hipMemUnmap.size = (size_t) size; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexObjectGetResourceDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectGetResourceDesc` function call.
 *
 * @struct args_hipTexObjectGetResourceDesc_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectGetResourceDesc (
 *			HIP_RESOURCE_DESC * pResDesc (struct HIP_RESOURCE_DESC_st*)
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
struct args_hipTexObjectGetResourceDesc_t {
	HIP_RESOURCE_DESC * pResDesc;
	struct {
		HIP_RESOURCE_DESC val;
	} pResDesc__ref;
	struct __hip_texture * texObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexObjectGetResourceDesc(activity) { \
	activity->hip_args.hipTexObjectGetResourceDesc.pResDesc = (HIP_RESOURCE_DESC *) pResDesc; \
	activity->hip_args.hipTexObjectGetResourceDesc.texObject = (struct __hip_texture *) texObject; \
};

#define GET_PTRS_VALUE_hipTexObjectGetResourceDesc(args) { \
	if (args->hipTexObjectGetResourceDesc.pResDesc != NULL) { \
		args->hipTexObjectGetResourceDesc.pResDesc__ref.val = *args->hipTexObjectGetResourceDesc.pResDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecEventRecordNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecEventRecordNodeSetEvent` function call.
 *
 * @struct args_hipGraphExecEventRecordNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecEventRecordNodeSetEvent (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipGraphExecEventRecordNodeSetEvent_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * hNode;
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecEventRecordNodeSetEvent(activity) { \
	activity->hip_args.hipGraphExecEventRecordNodeSetEvent.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecEventRecordNodeSetEvent.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExecEventRecordNodeSetEvent.event = (struct ihipEvent_t *) event; \
};

/**
 * @brief Structure to hold the arguments for the `hipInit` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipInit` function call.
 *
 * @struct args_hipInit_t
 *
 * @note 
 *	hipError_t
 *	hipInit (
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipInit_t {
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipInit(activity) { \
	activity->hip_args.hipInit.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipThreadExchangeStreamCaptureMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipThreadExchangeStreamCaptureMode` function call.
 *
 * @struct args_hipThreadExchangeStreamCaptureMode_t
 *
 * @note 
 *	hipError_t
 *	hipThreadExchangeStreamCaptureMode (
 *			hipStreamCaptureMode * mode (enum hipStreamCaptureMode*)
 *	)
 */
struct args_hipThreadExchangeStreamCaptureMode_t {
	hipStreamCaptureMode * mode;
	struct {
		hipStreamCaptureMode val;
	} mode__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipThreadExchangeStreamCaptureMode(activity) { \
	activity->hip_args.hipThreadExchangeStreamCaptureMode.mode = (hipStreamCaptureMode *) mode; \
};

#define GET_PTRS_VALUE_hipThreadExchangeStreamCaptureMode(args) { \
	if (args->hipThreadExchangeStreamCaptureMode.mode != NULL) { \
		args->hipThreadExchangeStreamCaptureMode.mode__ref.val = *args->hipThreadExchangeStreamCaptureMode.mode; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetP2PAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetP2PAttribute` function call.
 *
 * @struct args_hipDeviceGetP2PAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetP2PAttribute (
 *			int * value (int *)
 *			hipDeviceP2PAttr attr (enum hipDeviceP2PAttr)
 *			int srcDevice (int)
 *			int dstDevice (int)
 *	)
 */
struct args_hipDeviceGetP2PAttribute_t {
	int * value;
	struct {
		int val;
	} value__ref;
	hipDeviceP2PAttr attr;
	int srcDevice;
	int dstDevice;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetP2PAttribute(activity) { \
	activity->hip_args.hipDeviceGetP2PAttribute.value = (int *) value; \
	activity->hip_args.hipDeviceGetP2PAttribute.attr = (hipDeviceP2PAttr) attr; \
	activity->hip_args.hipDeviceGetP2PAttribute.srcDevice = (int) srcDevice; \
	activity->hip_args.hipDeviceGetP2PAttribute.dstDevice = (int) dstDevice; \
};

#define GET_PTRS_VALUE_hipDeviceGetP2PAttribute(args) { \
	if (args->hipDeviceGetP2PAttribute.value != NULL) { \
		args->hipDeviceGetP2PAttribute.value__ref.val = *args->hipDeviceGetP2PAttribute.value; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetByPCIBusId` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetByPCIBusId` function call.
 *
 * @struct args_hipDeviceGetByPCIBusId_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetByPCIBusId (
 *			int * device (int *)
 *			const char * pciBusId (const char *)
 *	)
 */
struct args_hipDeviceGetByPCIBusId_t {
	int * device;
	struct {
		int val;
	} device__ref;
	char * pciBusId;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} pciBusId__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetByPCIBusId(activity) { \
	activity->hip_args.hipDeviceGetByPCIBusId.device = (int *) device; \
	activity->hip_args.hipDeviceGetByPCIBusId.pciBusId = (char *) pciBusId; \
};

#define GET_PTRS_VALUE_hipDeviceGetByPCIBusId(args) { \
	if (args->hipDeviceGetByPCIBusId.device != NULL) { \
		args->hipDeviceGetByPCIBusId.device__ref.val = *args->hipDeviceGetByPCIBusId.device; \
	} \
	if (args->hipDeviceGetByPCIBusId.pciBusId != NULL) { \
		strncpy(args->hipDeviceGetByPCIBusId.pciBusId__ref.val, args->hipDeviceGetByPCIBusId.pciBusId, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipHostFree` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostFree` function call.
 *
 * @struct args_hipHostFree_t
 *
 * @note 
 *	hipError_t
 *	hipHostFree (
 *			void * ptr (void *)
 *	)
 */
struct args_hipHostFree_t {
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipHostFree(activity) { \
	activity->hip_args.hipHostFree.ptr = (void *) ptr; \
};

/**
 * @brief Structure to hold the arguments for the `hipExtGetLinkTypeAndHopCount` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtGetLinkTypeAndHopCount` function call.
 *
 * @struct args_hipExtGetLinkTypeAndHopCount_t
 *
 * @note 
 *	hipError_t
 *	hipExtGetLinkTypeAndHopCount (
 *			int device1 (int)
 *			int device2 (int)
 *			uint32_t * linktype (unsigned int*)
 *			uint32_t * hopcount (unsigned int*)
 *	)
 */
struct args_hipExtGetLinkTypeAndHopCount_t {
	int device1;
	int device2;
	uint32_t * linktype;
	struct {
		uint32_t val;
	} linktype__ref;
	uint32_t * hopcount;
	struct {
		uint32_t val;
	} hopcount__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExtGetLinkTypeAndHopCount(activity) { \
	activity->hip_args.hipExtGetLinkTypeAndHopCount.device1 = (int) device1; \
	activity->hip_args.hipExtGetLinkTypeAndHopCount.device2 = (int) device2; \
	activity->hip_args.hipExtGetLinkTypeAndHopCount.linktype = (uint32_t *) linktype; \
	activity->hip_args.hipExtGetLinkTypeAndHopCount.hopcount = (uint32_t *) hopcount; \
};

#define GET_PTRS_VALUE_hipExtGetLinkTypeAndHopCount(args) { \
	if (args->hipExtGetLinkTypeAndHopCount.linktype != NULL) { \
		args->hipExtGetLinkTypeAndHopCount.linktype__ref.val = *args->hipExtGetLinkTypeAndHopCount.linktype; \
	} \
	if (args->hipExtGetLinkTypeAndHopCount.hopcount != NULL) { \
		args->hipExtGetLinkTypeAndHopCount.hopcount__ref.val = *args->hipExtGetLinkTypeAndHopCount.hopcount; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbolAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbolAsync_spt` function call.
 *
 * @struct args_hipMemcpyToSymbolAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbolAsync_spt (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyToSymbolAsync_spt_t {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyToSymbolAsync_spt(activity) { \
	activity->hip_args.hipMemcpyToSymbolAsync_spt.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyToSymbolAsync_spt.src = (void *) src; \
	activity->hip_args.hipMemcpyToSymbolAsync_spt.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyToSymbolAsync_spt.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyToSymbolAsync_spt.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpyToSymbolAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxDisablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxDisablePeerAccess` function call.
 *
 * @struct args_hipCtxDisablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipCtxDisablePeerAccess (
 *			hipCtx_t peerCtx (struct ihipCtx_t *)
 *	)
 */
struct args_hipCtxDisablePeerAccess_t {
	struct ihipCtx_t * peerCtx;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxDisablePeerAccess(activity) { \
	activity->hip_args.hipCtxDisablePeerAccess.peerCtx = (struct ihipCtx_t *) peerCtx; \
};

/**
 * @brief Structure to hold the arguments for the `hipSetupArgument` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetupArgument` function call.
 *
 * @struct args_hipSetupArgument_t
 *
 * @note 
 *	hipError_t
 *	hipSetupArgument (
 *			const void * arg (const void *)
 *			size_t size (unsigned long)
 *			size_t offset (unsigned long)
 *	)
 */
struct args_hipSetupArgument_t {
	void * arg;
	size_t size;
	size_t offset;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipSetupArgument(activity) { \
	activity->hip_args.hipSetupArgument.arg = (void *) arg; \
	activity->hip_args.hipSetupArgument.size = (size_t) size; \
	activity->hip_args.hipSetupArgument.offset = (size_t) offset; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoHAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoHAsync` function call.
 *
 * @struct args_hipMemcpyAtoHAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoHAsync (
 *			void * dstHost (void *)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t ByteCount (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyAtoHAsync_t {
	void * dstHost;
	struct hipArray * srcArray;
	size_t srcOffset;
	size_t ByteCount;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyAtoHAsync(activity) { \
	activity->hip_args.hipMemcpyAtoHAsync.dstHost = (void *) dstHost; \
	activity->hip_args.hipMemcpyAtoHAsync.srcArray = (struct hipArray *) srcArray; \
	activity->hip_args.hipMemcpyAtoHAsync.srcOffset = (size_t) srcOffset; \
	activity->hip_args.hipMemcpyAtoHAsync.ByteCount = (size_t) ByteCount; \
	activity->hip_args.hipMemcpyAtoHAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxSetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSetCacheConfig` function call.
 *
 * @struct args_hipCtxSetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSetCacheConfig (
 *			hipFuncCache_t cacheConfig (enum hipFuncCache_t)
 *	)
 */
struct args_hipCtxSetCacheConfig_t {
	hipFuncCache_t cacheConfig;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxSetCacheConfig(activity) { \
	activity->hip_args.hipCtxSetCacheConfig.cacheConfig = (hipFuncCache_t) cacheConfig; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemRelease` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRelease` function call.
 *
 * @struct args_hipMemRelease_t
 *
 * @note 
 *	hipError_t
 *	hipMemRelease (
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *	)
 */
struct args_hipMemRelease_t {
	struct ihipMemGenericAllocationHandle * handle;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemRelease(activity) { \
	activity->hip_args.hipMemRelease.handle = (struct ihipMemGenericAllocationHandle *) handle; \
};

/**
 * @brief Structure to hold the arguments for the `hipUnbindTexture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUnbindTexture` function call.
 *
 * @struct args_hipUnbindTexture_t
 *
 * @note 
 *	hipError_t
 *	hipUnbindTexture (
 *			const textureReference * tex (const struct textureReference *)
 *	)
 */
struct args_hipUnbindTexture_t {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipUnbindTexture(activity) { \
	activity->hip_args.hipUnbindTexture.tex = (textureReference *) tex; \
};

#define GET_PTRS_VALUE_hipUnbindTexture(args) { \
	if (args->hipUnbindTexture.tex != NULL) { \
		args->hipUnbindTexture.tex__ref.val = *args->hipUnbindTexture.tex; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvMemcpy3DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvMemcpy3DAsync` function call.
 *
 * @struct args_hipDrvMemcpy3DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipDrvMemcpy3DAsync (
 *			const HIP_MEMCPY3D * pCopy (const struct HIP_MEMCPY3D *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipDrvMemcpy3DAsync_t {
	HIP_MEMCPY3D * pCopy;
	struct {
		HIP_MEMCPY3D val;
	} pCopy__ref;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvMemcpy3DAsync(activity) { \
	activity->hip_args.hipDrvMemcpy3DAsync.pCopy = (HIP_MEMCPY3D *) pCopy; \
	activity->hip_args.hipDrvMemcpy3DAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipDrvMemcpy3DAsync(args) { \
	if (args->hipDrvMemcpy3DAsync.pCopy != NULL) { \
		args->hipDrvMemcpy3DAsync.pCopy__ref.val = *args->hipDrvMemcpy3DAsync.pCopy; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipIpcGetEventHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcGetEventHandle` function call.
 *
 * @struct args_hipIpcGetEventHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcGetEventHandle (
 *			hipIpcEventHandle_t * handle (struct hipIpcEventHandle_st*)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipIpcGetEventHandle_t {
	hipIpcEventHandle_t * handle;
	struct {
		hipIpcEventHandle_t val;
	} handle__ref;
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipIpcGetEventHandle(activity) { \
	activity->hip_args.hipIpcGetEventHandle.handle = (hipIpcEventHandle_t *) handle; \
	activity->hip_args.hipIpcGetEventHandle.event = (struct ihipEvent_t *) event; \
};

#define GET_PTRS_VALUE_hipIpcGetEventHandle(args) { \
	if (args->hipIpcGetEventHandle.handle != NULL) { \
		args->hipIpcGetEventHandle.handle__ref.val = *args->hipIpcGetEventHandle.handle; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphReleaseUserObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphReleaseUserObject` function call.
 *
 * @struct args_hipGraphReleaseUserObject_t
 *
 * @note 
 *	hipError_t
 *	hipGraphReleaseUserObject (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *	)
 */
struct args_hipGraphReleaseUserObject_t {
	struct ihipGraph * graph;
	struct hipUserObject * object;
	unsigned int count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphReleaseUserObject(activity) { \
	activity->hip_args.hipGraphReleaseUserObject.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphReleaseUserObject.object = (struct hipUserObject *) object; \
	activity->hip_args.hipGraphReleaseUserObject.count = (unsigned int) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetMemPool` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetMemPool` function call.
 *
 * @struct args_hipDeviceGetMemPool_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetMemPool (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			int device (int)
 *	)
 */
struct args_hipDeviceGetMemPool_t {
	struct ihipMemPoolHandle_t ** mem_pool;
	struct {
		void* ptr1;
	} mem_pool__ref;
	int device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetMemPool(activity) { \
	activity->hip_args.hipDeviceGetMemPool.mem_pool = (struct ihipMemPoolHandle_t **) mem_pool; \
	activity->hip_args.hipDeviceGetMemPool.device = (int) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetMemPool(args) { \
	if (args->hipDeviceGetMemPool.mem_pool != NULL) { \
		args->hipDeviceGetMemPool.mem_pool__ref.ptr1 = *args->hipDeviceGetMemPool.mem_pool; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphHostNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphHostNodeSetParams` function call.
 *
 * @struct args_hipGraphHostNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphHostNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipHostNodeParams * pNodeParams (const struct hipHostNodeParams *)
 *	)
 */
struct args_hipGraphHostNodeSetParams_t {
	struct hipGraphNode * node;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphHostNodeSetParams(activity) { \
	activity->hip_args.hipGraphHostNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphHostNodeSetParams.pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphHostNodeSetParams(args) { \
	if (args->hipGraphHostNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphHostNodeSetParams.pNodeParams__ref.val = *args->hipGraphHostNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddEventWaitNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddEventWaitNode` function call.
 *
 * @struct args_hipGraphAddEventWaitNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddEventWaitNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipGraphAddEventWaitNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddEventWaitNode(activity) { \
	activity->hip_args.hipGraphAddEventWaitNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddEventWaitNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddEventWaitNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddEventWaitNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddEventWaitNode.event = (struct ihipEvent_t *) event; \
};

#define GET_PTRS_VALUE_hipGraphAddEventWaitNode(args) { \
	if (args->hipGraphAddEventWaitNode.pGraphNode != NULL) { \
		args->hipGraphAddEventWaitNode.pGraphNode__ref.ptr1 = *args->hipGraphAddEventWaitNode.pGraphNode; \
	} \
	if (args->hipGraphAddEventWaitNode.pDependencies != NULL) { \
		args->hipGraphAddEventWaitNode.pDependencies__ref.ptr1 = *args->hipGraphAddEventWaitNode.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArrayAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArrayAsync_spt` function call.
 *
 * @struct args_hipMemcpy2DFromArrayAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArrayAsync_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffsetSrc (unsigned long)
 *			size_t hOffsetSrc (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy2DFromArrayAsync_spt_t {
	void * dst;
	size_t dpitch;
	struct hipArray * src;
	size_t wOffsetSrc;
	size_t hOffsetSrc;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DFromArrayAsync_spt(activity) { \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.src = (struct hipArray *) src; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.wOffsetSrc = (size_t) wOffsetSrc; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.hOffsetSrc = (size_t) hOffsetSrc; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpy2DFromArrayAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchHostFunc_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchHostFunc_spt` function call.
 *
 * @struct args_hipLaunchHostFunc_spt_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchHostFunc_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipHostFn_t fn (void (*)(void *))
 *			void * userData (void *)
 *	)
 */
struct args_hipLaunchHostFunc_spt_t {
	struct ihipStream_t * stream;
	hipHostFn_t fn;
	void * userData;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchHostFunc_spt(activity) { \
	activity->hip_args.hipLaunchHostFunc_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipLaunchHostFunc_spt.fn = (hipHostFn_t) fn; \
	activity->hip_args.hipLaunchHostFunc_spt.userData = (void *) userData; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitEvent_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitEvent_spt` function call.
 *
 * @struct args_hipStreamWaitEvent_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitEvent_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamWaitEvent_spt_t {
	struct ihipStream_t * stream;
	struct ihipEvent_t * event;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamWaitEvent_spt(activity) { \
	activity->hip_args.hipStreamWaitEvent_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamWaitEvent_spt.event = (struct ihipEvent_t *) event; \
	activity->hip_args.hipStreamWaitEvent_spt.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipArrayGetDescriptor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayGetDescriptor` function call.
 *
 * @struct args_hipArrayGetDescriptor_t
 *
 * @note 
 *	hipError_t
 *	hipArrayGetDescriptor (
 *			HIP_ARRAY_DESCRIPTOR * pArrayDescriptor (struct HIP_ARRAY_DESCRIPTOR*)
 *			hipArray_t array (struct hipArray *)
 *	)
 */
struct args_hipArrayGetDescriptor_t {
	HIP_ARRAY_DESCRIPTOR * pArrayDescriptor;
	struct {
		HIP_ARRAY_DESCRIPTOR val;
	} pArrayDescriptor__ref;
	struct hipArray * array;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipArrayGetDescriptor(activity) { \
	activity->hip_args.hipArrayGetDescriptor.pArrayDescriptor = (HIP_ARRAY_DESCRIPTOR *) pArrayDescriptor; \
	activity->hip_args.hipArrayGetDescriptor.array = (struct hipArray *) array; \
};

#define GET_PTRS_VALUE_hipArrayGetDescriptor(args) { \
	if (args->hipArrayGetDescriptor.pArrayDescriptor != NULL) { \
		args->hipArrayGetDescriptor.pArrayDescriptor__ref.val = *args->hipArrayGetDescriptor.pArrayDescriptor; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecUpdate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecUpdate` function call.
 *
 * @struct args_hipGraphExecUpdate_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecUpdate (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraph_t hGraph (struct ihipGraph *)
 *			hipGraphNode_t * hErrorNode_out (struct hipGraphNode **)
 *			hipGraphExecUpdateResult * updateResult_out (enum hipGraphExecUpdateResult*)
 *	)
 */
struct args_hipGraphExecUpdate_t {
	struct hipGraphExec * hGraphExec;
	struct ihipGraph * hGraph;
	struct hipGraphNode ** hErrorNode_out;
	struct {
		void* ptr1;
	} hErrorNode_out__ref;
	hipGraphExecUpdateResult * updateResult_out;
	struct {
		hipGraphExecUpdateResult val;
	} updateResult_out__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecUpdate(activity) { \
	activity->hip_args.hipGraphExecUpdate.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecUpdate.hGraph = (struct ihipGraph *) hGraph; \
	activity->hip_args.hipGraphExecUpdate.hErrorNode_out = (struct hipGraphNode **) hErrorNode_out; \
	activity->hip_args.hipGraphExecUpdate.updateResult_out = (hipGraphExecUpdateResult *) updateResult_out; \
};

#define GET_PTRS_VALUE_hipGraphExecUpdate(args) { \
	if (args->hipGraphExecUpdate.hErrorNode_out != NULL) { \
		args->hipGraphExecUpdate.hErrorNode_out__ref.ptr1 = *args->hipGraphExecUpdate.hErrorNode_out; \
	} \
	if (args->hipGraphExecUpdate.updateResult_out != NULL) { \
		args->hipGraphExecUpdate.updateResult_out__ref.val = *args->hipGraphExecUpdate.updateResult_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemGetAllocationPropertiesFromHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAllocationPropertiesFromHandle` function call.
 *
 * @struct args_hipMemGetAllocationPropertiesFromHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAllocationPropertiesFromHandle (
 *			hipMemAllocationProp * prop (struct hipMemAllocationProp*)
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *	)
 */
struct args_hipMemGetAllocationPropertiesFromHandle_t {
	hipMemAllocationProp * prop;
	struct {
		hipMemAllocationProp val;
	} prop__ref;
	struct ihipMemGenericAllocationHandle * handle;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemGetAllocationPropertiesFromHandle(activity) { \
	activity->hip_args.hipMemGetAllocationPropertiesFromHandle.prop = (hipMemAllocationProp *) prop; \
	activity->hip_args.hipMemGetAllocationPropertiesFromHandle.handle = (struct ihipMemGenericAllocationHandle *) handle; \
};

#define GET_PTRS_VALUE_hipMemGetAllocationPropertiesFromHandle(args) { \
	if (args->hipMemGetAllocationPropertiesFromHandle.prop != NULL) { \
		args->hipMemGetAllocationPropertiesFromHandle.prop__ref.val = *args->hipMemGetAllocationPropertiesFromHandle.prop; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyWithStream` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyWithStream` function call.
 *
 * @struct args_hipMemcpyWithStream_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyWithStream (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyWithStream_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyWithStream(activity) { \
	activity->hip_args.hipMemcpyWithStream.dst = (void *) dst; \
	activity->hip_args.hipMemcpyWithStream.src = (void *) src; \
	activity->hip_args.hipMemcpyWithStream.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyWithStream.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpyWithStream.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddExternalSemaphoresWaitNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddExternalSemaphoresWaitNode` function call.
 *
 * @struct args_hipGraphAddExternalSemaphoresWaitNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddExternalSemaphoresWaitNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipExternalSemaphoreWaitNodeParams * nodeParams (const struct hipExternalSemaphoreWaitNodeParams *)
 *	)
 */
struct args_hipGraphAddExternalSemaphoresWaitNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipExternalSemaphoreWaitNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddExternalSemaphoresWaitNode(activity) { \
	activity->hip_args.hipGraphAddExternalSemaphoresWaitNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddExternalSemaphoresWaitNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddExternalSemaphoresWaitNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddExternalSemaphoresWaitNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddExternalSemaphoresWaitNode.nodeParams = (hipExternalSemaphoreWaitNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddExternalSemaphoresWaitNode(args) { \
	if (args->hipGraphAddExternalSemaphoresWaitNode.pGraphNode != NULL) { \
		args->hipGraphAddExternalSemaphoresWaitNode.pGraphNode__ref.ptr1 = *args->hipGraphAddExternalSemaphoresWaitNode.pGraphNode; \
	} \
	if (args->hipGraphAddExternalSemaphoresWaitNode.pDependencies != NULL) { \
		args->hipGraphAddExternalSemaphoresWaitNode.pDependencies__ref.ptr1 = *args->hipGraphAddExternalSemaphoresWaitNode.pDependencies; \
	} \
	if (args->hipGraphAddExternalSemaphoresWaitNode.nodeParams != NULL) { \
		args->hipGraphAddExternalSemaphoresWaitNode.nodeParams__ref.val = *args->hipGraphAddExternalSemaphoresWaitNode.nodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoH` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoH` function call.
 *
 * @struct args_hipMemcpyAtoH_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoH (
 *			void * dst (void *)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemcpyAtoH_t {
	void * dst;
	struct hipArray * srcArray;
	size_t srcOffset;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyAtoH(activity) { \
	activity->hip_args.hipMemcpyAtoH.dst = (void *) dst; \
	activity->hip_args.hipMemcpyAtoH.srcArray = (struct hipArray *) srcArray; \
	activity->hip_args.hipMemcpyAtoH.srcOffset = (size_t) srcOffset; \
	activity->hip_args.hipMemcpyAtoH.count = (size_t) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamQuery` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamQuery` function call.
 *
 * @struct args_hipStreamQuery_t
 *
 * @note 
 *	hipError_t
 *	hipStreamQuery (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipStreamQuery_t {
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamQuery(activity) { \
	activity->hip_args.hipStreamQuery.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipIpcCloseMemHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcCloseMemHandle` function call.
 *
 * @struct args_hipIpcCloseMemHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcCloseMemHandle (
 *			void * devPtr (void *)
 *	)
 */
struct args_hipIpcCloseMemHandle_t {
	void * devPtr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipIpcCloseMemHandle(activity) { \
	activity->hip_args.hipIpcCloseMemHandle.devPtr = (void *) devPtr; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetAsync` function call.
 *
 * @struct args_hipMemsetAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetAsync (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemsetAsync_t {
	void * dst;
	int value;
	size_t sizeBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetAsync(activity) { \
	activity->hip_args.hipMemsetAsync.dst = (void *) dst; \
	activity->hip_args.hipMemsetAsync.value = (int) value; \
	activity->hip_args.hipMemsetAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemsetAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoD` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoD` function call.
 *
 * @struct args_hipMemcpyDtoD_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoD (
 *			hipDeviceptr_t dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
struct args_hipMemcpyDtoD_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyDtoD(activity) { \
	activity->hip_args.hipMemcpyDtoD.dst = (void *) dst; \
	activity->hip_args.hipMemcpyDtoD.src = (void *) src; \
	activity->hip_args.hipMemcpyDtoD.sizeBytes = (size_t) sizeBytes; \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleUnload` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleUnload` function call.
 *
 * @struct args_hipModuleUnload_t
 *
 * @note 
 *	hipError_t
 *	hipModuleUnload (
 *			hipModule_t module (struct ihipModule_t *)
 *	)
 */
struct args_hipModuleUnload_t {
	struct ihipModule_t * module;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleUnload(activity) { \
	activity->hip_args.hipModuleUnload.module = (struct ihipModule_t *) module; \
};

/**
 * @brief Structure to hold the arguments for the `hipGetDevicePropertiesR0600` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDevicePropertiesR0600` function call.
 *
 * @struct args_hipGetDevicePropertiesR0600_t
 *
 * @note 
 *	hipError_t
 *	hipGetDevicePropertiesR0600 (
 *			hipDeviceProp_tR0600 * prop (struct hipDeviceProp_tR0600*)
 *			int deviceId (int)
 *	)
 */
struct args_hipGetDevicePropertiesR0600_t {
	hipDeviceProp_tR0600 * prop;
	struct {
		hipDeviceProp_tR0600 val;
	} prop__ref;
	int deviceId;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetDevicePropertiesR0600(activity) { \
	activity->hip_args.hipGetDevicePropertiesR0600.prop = (hipDeviceProp_tR0600 *) prop; \
	activity->hip_args.hipGetDevicePropertiesR0600.deviceId = (int) deviceId; \
};

#define GET_PTRS_VALUE_hipGetDevicePropertiesR0600(args) { \
	if (args->hipGetDevicePropertiesR0600.prop != NULL) { \
		args->hipGetDevicePropertiesR0600.prop__ref.val = *args->hipGetDevicePropertiesR0600.prop; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromArray` function call.
 *
 * @struct args_hipMemcpyFromArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromArray (
 *			void * dst (void *)
 *			hipArray_const_t srcArray (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpyFromArray_t {
	void * dst;
	struct hipArray * srcArray;
	size_t wOffset;
	size_t hOffset;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyFromArray(activity) { \
	activity->hip_args.hipMemcpyFromArray.dst = (void *) dst; \
	activity->hip_args.hipMemcpyFromArray.srcArray = (struct hipArray *) srcArray; \
	activity->hip_args.hipMemcpyFromArray.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpyFromArray.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpyFromArray.count = (size_t) count; \
	activity->hip_args.hipMemcpyFromArray.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceCanAccessPeer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceCanAccessPeer` function call.
 *
 * @struct args_hipDeviceCanAccessPeer_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceCanAccessPeer (
 *			int * canAccessPeer (int *)
 *			int deviceId (int)
 *			int peerDeviceId (int)
 *	)
 */
struct args_hipDeviceCanAccessPeer_t {
	int * canAccessPeer;
	struct {
		int val;
	} canAccessPeer__ref;
	int deviceId;
	int peerDeviceId;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceCanAccessPeer(activity) { \
	activity->hip_args.hipDeviceCanAccessPeer.canAccessPeer = (int *) canAccessPeer; \
	activity->hip_args.hipDeviceCanAccessPeer.deviceId = (int) deviceId; \
	activity->hip_args.hipDeviceCanAccessPeer.peerDeviceId = (int) peerDeviceId; \
};

#define GET_PTRS_VALUE_hipDeviceCanAccessPeer(args) { \
	if (args->hipDeviceCanAccessPeer.canAccessPeer != NULL) { \
		args->hipDeviceCanAccessPeer.canAccessPeer__ref.val = *args->hipDeviceCanAccessPeer.canAccessPeer; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemSetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemSetAccess` function call.
 *
 * @struct args_hipMemSetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemSetAccess (
 *			void * ptr (void *)
 *			size_t size (unsigned long)
 *			const hipMemAccessDesc * desc (const struct hipMemAccessDesc *)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemSetAccess_t {
	void * ptr;
	size_t size;
	hipMemAccessDesc * desc;
	struct {
		hipMemAccessDesc val;
	} desc__ref;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemSetAccess(activity) { \
	activity->hip_args.hipMemSetAccess.ptr = (void *) ptr; \
	activity->hip_args.hipMemSetAccess.size = (size_t) size; \
	activity->hip_args.hipMemSetAccess.desc = (hipMemAccessDesc *) desc; \
	activity->hip_args.hipMemSetAccess.count = (size_t) count; \
};

#define GET_PTRS_VALUE_hipMemSetAccess(args) { \
	if (args->hipMemSetAccess.desc != NULL) { \
		args->hipMemSetAccess.desc__ref.val = *args->hipMemSetAccess.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitValue32` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitValue32` function call.
 *
 * @struct args_hipStreamWaitValue32_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitValue32 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint32_t value (unsigned int)
 *			unsigned int flags (unsigned int)
 *			uint32_t mask (unsigned int)
 *	)
 */
struct args_hipStreamWaitValue32_t {
	struct ihipStream_t * stream;
	void * ptr;
	uint32_t value;
	unsigned int flags;
	uint32_t mask;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamWaitValue32(activity) { \
	activity->hip_args.hipStreamWaitValue32.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamWaitValue32.ptr = (void *) ptr; \
	activity->hip_args.hipStreamWaitValue32.value = (uint32_t) value; \
	activity->hip_args.hipStreamWaitValue32.flags = (unsigned int) flags; \
	activity->hip_args.hipStreamWaitValue32.mask = (uint32_t) mask; \
};

/**
 * @brief Structure to hold the arguments for the `hipApiName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipApiName` function call.
 *
 * @struct args_hipApiName_t
 *
 * @note 
 *	const char *
 *	hipApiName (
 *			uint32_t id (unsigned int)
 *	)
 */
struct args_hipApiName_t {
	uint32_t id;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
};

#define GET_ARGS_VALUE_hipApiName(activity) { \
	activity->hip_args.hipApiName.id = (uint32_t) id; \
};

#define GET_PTRS_RET_VALUE_hipApiName(args) { \
	if (args->hipApiName.retval != NULL) { \
		strncpy(args->hipApiName.retval__ref.val, args->hipApiName.retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphicsSubResourceGetMappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsSubResourceGetMappedArray` function call.
 *
 * @struct args_hipGraphicsSubResourceGetMappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsSubResourceGetMappedArray (
 *			hipArray_t * array (struct hipArray **)
 *			hipGraphicsResource_t resource (struct _hipGraphicsResource*)
 *			unsigned int arrayIndex (unsigned int)
 *			unsigned int mipLevel (unsigned int)
 *	)
 */
struct args_hipGraphicsSubResourceGetMappedArray_t {
	struct hipArray ** array;
	struct {
		void* ptr1;
	} array__ref;
	struct _hipGraphicsResource* resource;
	unsigned int arrayIndex;
	unsigned int mipLevel;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphicsSubResourceGetMappedArray(activity) { \
	activity->hip_args.hipGraphicsSubResourceGetMappedArray.array = (struct hipArray **) array; \
	activity->hip_args.hipGraphicsSubResourceGetMappedArray.resource = (struct _hipGraphicsResource*) resource; \
	activity->hip_args.hipGraphicsSubResourceGetMappedArray.arrayIndex = (unsigned int) arrayIndex; \
	activity->hip_args.hipGraphicsSubResourceGetMappedArray.mipLevel = (unsigned int) mipLevel; \
};

#define GET_PTRS_VALUE_hipGraphicsSubResourceGetMappedArray(args) { \
	if (args->hipGraphicsSubResourceGetMappedArray.array != NULL) { \
		args->hipGraphicsSubResourceGetMappedArray.array__ref.ptr1 = *args->hipGraphicsSubResourceGetMappedArray.array; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArrayAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArrayAsync` function call.
 *
 * @struct args_hipMemcpy2DToArrayAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArrayAsync (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy2DToArrayAsync_t {
	struct hipArray * dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DToArrayAsync(activity) { \
	activity->hip_args.hipMemcpy2DToArrayAsync.dst = (struct hipArray *) dst; \
	activity->hip_args.hipMemcpy2DToArrayAsync.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpy2DToArrayAsync.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpy2DToArrayAsync.src = (void *) src; \
	activity->hip_args.hipMemcpy2DToArrayAsync.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2DToArrayAsync.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DToArrayAsync.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DToArrayAsync.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpy2DToArrayAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphDestroy` function call.
 *
 * @struct args_hipGraphDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipGraphDestroy (
 *			hipGraph_t graph (struct ihipGraph *)
 *	)
 */
struct args_hipGraphDestroy_t {
	struct ihipGraph * graph;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphDestroy(activity) { \
	activity->hip_args.hipGraphDestroy.graph = (struct ihipGraph *) graph; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetBorderColor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetBorderColor` function call.
 *
 * @struct args_hipTexRefGetBorderColor_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetBorderColor (
 *			float * pBorderColor (float *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetBorderColor_t {
	float * pBorderColor;
	struct {
		float val;
	} pBorderColor__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetBorderColor(activity) { \
	activity->hip_args.hipTexRefGetBorderColor.pBorderColor = (float *) pBorderColor; \
	activity->hip_args.hipTexRefGetBorderColor.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetBorderColor(args) { \
	if (args->hipTexRefGetBorderColor.pBorderColor != NULL) { \
		args->hipTexRefGetBorderColor.pBorderColor__ref.val = *args->hipTexRefGetBorderColor.pBorderColor; \
	} \
	if (args->hipTexRefGetBorderColor.texRef != NULL) { \
		args->hipTexRefGetBorderColor.texRef__ref.val = *args->hipTexRefGetBorderColor.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNode1D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNode1D` function call.
 *
 * @struct args_hipGraphAddMemcpyNode1D_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNode1D (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphAddMemcpyNode1D_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	void * dst;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddMemcpyNode1D(activity) { \
	activity->hip_args.hipGraphAddMemcpyNode1D.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddMemcpyNode1D.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddMemcpyNode1D.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddMemcpyNode1D.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddMemcpyNode1D.dst = (void *) dst; \
	activity->hip_args.hipGraphAddMemcpyNode1D.src = (void *) src; \
	activity->hip_args.hipGraphAddMemcpyNode1D.count = (size_t) count; \
	activity->hip_args.hipGraphAddMemcpyNode1D.kind = (hipMemcpyKind) kind; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNode1D(args) { \
	if (args->hipGraphAddMemcpyNode1D.pGraphNode != NULL) { \
		args->hipGraphAddMemcpyNode1D.pGraphNode__ref.ptr1 = *args->hipGraphAddMemcpyNode1D.pGraphNode; \
	} \
	if (args->hipGraphAddMemcpyNode1D.pDependencies != NULL) { \
		args->hipGraphAddMemcpyNode1D.pDependencies__ref.ptr1 = *args->hipGraphAddMemcpyNode1D.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphGetNodes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphGetNodes` function call.
 *
 * @struct args_hipGraphGetNodes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphGetNodes (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * nodes (struct hipGraphNode **)
 *			size_t * numNodes (unsigned long*)
 *	)
 */
struct args_hipGraphGetNodes_t {
	struct ihipGraph * graph;
	struct hipGraphNode ** nodes;
	struct {
		void* ptr1;
	} nodes__ref;
	size_t * numNodes;
	struct {
		size_t val;
	} numNodes__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphGetNodes(activity) { \
	activity->hip_args.hipGraphGetNodes.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphGetNodes.nodes = (struct hipGraphNode **) nodes; \
	activity->hip_args.hipGraphGetNodes.numNodes = (size_t *) numNodes; \
};

#define GET_PTRS_VALUE_hipGraphGetNodes(args) { \
	if (args->hipGraphGetNodes.nodes != NULL) { \
		args->hipGraphGetNodes.nodes__ref.ptr1 = *args->hipGraphGetNodes.nodes; \
	} \
	if (args->hipGraphGetNodes.numNodes != NULL) { \
		args->hipGraphGetNodes.numNodes__ref.val = *args->hipGraphGetNodes.numNodes; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetFlags_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetFlags_spt` function call.
 *
 * @struct args_hipStreamGetFlags_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetFlags_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			unsigned int * flags (unsigned int *)
 *	)
 */
struct args_hipStreamGetFlags_spt_t {
	struct ihipStream_t * stream;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetFlags_spt(activity) { \
	activity->hip_args.hipStreamGetFlags_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetFlags_spt.flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipStreamGetFlags_spt(args) { \
	if (args->hipStreamGetFlags_spt.flags != NULL) { \
		args->hipStreamGetFlags_spt.flags__ref.val = *args->hipStreamGetFlags_spt.flags; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetAddress2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetAddress2D` function call.
 *
 * @struct args_hipTexRefSetAddress2D_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetAddress2D (
 *			textureReference * texRef (struct textureReference*)
 *			const HIP_ARRAY_DESCRIPTOR * desc (const struct HIP_ARRAY_DESCRIPTOR *)
 *			hipDeviceptr_t dptr (void *)
 *			size_t Pitch (unsigned long)
 *	)
 */
struct args_hipTexRefSetAddress2D_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	HIP_ARRAY_DESCRIPTOR * desc;
	struct {
		HIP_ARRAY_DESCRIPTOR val;
	} desc__ref;
	void * dptr;
	size_t Pitch;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetAddress2D(activity) { \
	activity->hip_args.hipTexRefSetAddress2D.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetAddress2D.desc = (HIP_ARRAY_DESCRIPTOR *) desc; \
	activity->hip_args.hipTexRefSetAddress2D.dptr = (void *) dptr; \
	activity->hip_args.hipTexRefSetAddress2D.Pitch = (size_t) Pitch; \
};

#define GET_PTRS_VALUE_hipTexRefSetAddress2D(args) { \
	if (args->hipTexRefSetAddress2D.texRef != NULL) { \
		args->hipTexRefSetAddress2D.texRef__ref.val = *args->hipTexRefSetAddress2D.texRef; \
	} \
	if (args->hipTexRefSetAddress2D.desc != NULL) { \
		args->hipTexRefSetAddress2D.desc__ref.val = *args->hipTexRefSetAddress2D.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetPriority` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetPriority` function call.
 *
 * @struct args_hipStreamGetPriority_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetPriority (
 *			hipStream_t stream (struct ihipStream_t *)
 *			int * priority (int *)
 *	)
 */
struct args_hipStreamGetPriority_t {
	struct ihipStream_t * stream;
	int * priority;
	struct {
		int val;
	} priority__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetPriority(activity) { \
	activity->hip_args.hipStreamGetPriority.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetPriority.priority = (int *) priority; \
};

#define GET_PTRS_VALUE_hipStreamGetPriority(args) { \
	if (args->hipStreamGetPriority.priority != NULL) { \
		args->hipStreamGetPriority.priority__ref.val = *args->hipStreamGetPriority.priority; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamCreate` function call.
 *
 * @struct args_hipStreamCreate_t
 *
 * @note 
 *	hipError_t
 *	hipStreamCreate (
 *			hipStream_t * stream (struct ihipStream_t **)
 *	)
 */
struct args_hipStreamCreate_t {
	struct ihipStream_t ** stream;
	struct {
		void* ptr1;
	} stream__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamCreate(activity) { \
	activity->hip_args.hipStreamCreate.stream = (struct ihipStream_t **) stream; \
};

#define GET_PTRS_VALUE_hipStreamCreate(args) { \
	if (args->hipStreamCreate.stream != NULL) { \
		args->hipStreamCreate.stream__ref.ptr1 = *args->hipStreamCreate.stream; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbol` function call.
 *
 * @struct args_hipMemcpyFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbol (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpyFromSymbol_t {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyFromSymbol(activity) { \
	activity->hip_args.hipMemcpyFromSymbol.dst = (void *) dst; \
	activity->hip_args.hipMemcpyFromSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyFromSymbol.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyFromSymbol.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyFromSymbol.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetEnabled` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetEnabled` function call.
 *
 * @struct args_hipGraphNodeGetEnabled_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetEnabled (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			unsigned int * isEnabled (unsigned int *)
 *	)
 */
struct args_hipGraphNodeGetEnabled_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * hNode;
	unsigned int * isEnabled;
	struct {
		unsigned int val;
	} isEnabled__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphNodeGetEnabled(activity) { \
	activity->hip_args.hipGraphNodeGetEnabled.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphNodeGetEnabled.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphNodeGetEnabled.isEnabled = (unsigned int *) isEnabled; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetEnabled(args) { \
	if (args->hipGraphNodeGetEnabled.isEnabled != NULL) { \
		args->hipGraphNodeGetEnabled.isEnabled__ref.val = *args->hipGraphNodeGetEnabled.isEnabled; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipCreateChannelDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCreateChannelDesc` function call.
 *
 * @struct args_hipCreateChannelDesc_t
 *
 * @note 
 *	struct hipChannelFormatDesc
 *	hipCreateChannelDesc (
 *			int x (int)
 *			int y (int)
 *			int z (int)
 *			int w (int)
 *			enum hipChannelFormatKind f (enum hipChannelFormatKind)
 *	)
 */
struct args_hipCreateChannelDesc_t {
	int x;
	int y;
	int z;
	int w;
	enum hipChannelFormatKind f;
	struct hipChannelFormatDesc retval;
};

#define GET_ARGS_VALUE_hipCreateChannelDesc(activity) { \
	activity->hip_args.hipCreateChannelDesc.x = (int) x; \
	activity->hip_args.hipCreateChannelDesc.y = (int) y; \
	activity->hip_args.hipCreateChannelDesc.z = (int) z; \
	activity->hip_args.hipCreateChannelDesc.w = (int) w; \
	activity->hip_args.hipCreateChannelDesc.f = (enum hipChannelFormatKind) f; \
};

/**
 * @brief Structure to hold the arguments for the `hipFreeMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeMipmappedArray` function call.
 *
 * @struct args_hipFreeMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipFreeMipmappedArray (
 *			hipMipmappedArray_t mipmappedArray (struct hipMipmappedArray *)
 *	)
 */
struct args_hipFreeMipmappedArray_t {
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFreeMipmappedArray(activity) { \
	activity->hip_args.hipFreeMipmappedArray.mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
};

#define GET_PTRS_VALUE_hipFreeMipmappedArray(args) { \
	if (args->hipFreeMipmappedArray.mipmappedArray != NULL) { \
		args->hipFreeMipmappedArray.mipmappedArray__ref.val = *args->hipFreeMipmappedArray.mipmappedArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetTextureAlignmentOffset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureAlignmentOffset` function call.
 *
 * @struct args_hipGetTextureAlignmentOffset_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureAlignmentOffset (
 *			size_t * offset (unsigned long*)
 *			const textureReference * texref (const struct textureReference *)
 *	)
 */
struct args_hipGetTextureAlignmentOffset_t {
	size_t * offset;
	struct {
		size_t val;
	} offset__ref;
	textureReference * texref;
	struct {
		textureReference val;
	} texref__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetTextureAlignmentOffset(activity) { \
	activity->hip_args.hipGetTextureAlignmentOffset.offset = (size_t *) offset; \
	activity->hip_args.hipGetTextureAlignmentOffset.texref = (textureReference *) texref; \
};

#define GET_PTRS_VALUE_hipGetTextureAlignmentOffset(args) { \
	if (args->hipGetTextureAlignmentOffset.offset != NULL) { \
		args->hipGetTextureAlignmentOffset.offset__ref.val = *args->hipGetTextureAlignmentOffset.offset; \
	} \
	if (args->hipGetTextureAlignmentOffset.texref != NULL) { \
		args->hipGetTextureAlignmentOffset.texref__ref.val = *args->hipGetTextureAlignmentOffset.texref; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddEventRecordNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddEventRecordNode` function call.
 *
 * @struct args_hipGraphAddEventRecordNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddEventRecordNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipGraphAddEventRecordNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddEventRecordNode(activity) { \
	activity->hip_args.hipGraphAddEventRecordNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddEventRecordNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddEventRecordNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddEventRecordNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddEventRecordNode.event = (struct ihipEvent_t *) event; \
};

#define GET_PTRS_VALUE_hipGraphAddEventRecordNode(args) { \
	if (args->hipGraphAddEventRecordNode.pGraphNode != NULL) { \
		args->hipGraphAddEventRecordNode.pGraphNode__ref.ptr1 = *args->hipGraphAddEventRecordNode.pGraphNode; \
	} \
	if (args->hipGraphAddEventRecordNode.pDependencies != NULL) { \
		args->hipGraphAddEventRecordNode.pDependencies__ref.ptr1 = *args->hipGraphAddEventRecordNode.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeFindInClone` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeFindInClone` function call.
 *
 * @struct args_hipGraphNodeFindInClone_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeFindInClone (
 *			hipGraphNode_t * pNode (struct hipGraphNode **)
 *			hipGraphNode_t originalNode (struct hipGraphNode *)
 *			hipGraph_t clonedGraph (struct ihipGraph *)
 *	)
 */
struct args_hipGraphNodeFindInClone_t {
	struct hipGraphNode ** pNode;
	struct {
		void* ptr1;
	} pNode__ref;
	struct hipGraphNode * originalNode;
	struct ihipGraph * clonedGraph;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphNodeFindInClone(activity) { \
	activity->hip_args.hipGraphNodeFindInClone.pNode = (struct hipGraphNode **) pNode; \
	activity->hip_args.hipGraphNodeFindInClone.originalNode = (struct hipGraphNode *) originalNode; \
	activity->hip_args.hipGraphNodeFindInClone.clonedGraph = (struct ihipGraph *) clonedGraph; \
};

#define GET_PTRS_VALUE_hipGraphNodeFindInClone(args) { \
	if (args->hipGraphNodeFindInClone.pNode != NULL) { \
		args->hipGraphNodeFindInClone.pNode__ref.ptr1 = *args->hipGraphNodeFindInClone.pNode; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbol_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbol_spt` function call.
 *
 * @struct args_hipMemcpyFromSymbol_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbol_spt (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpyFromSymbol_spt_t {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyFromSymbol_spt(activity) { \
	activity->hip_args.hipMemcpyFromSymbol_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpyFromSymbol_spt.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyFromSymbol_spt.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyFromSymbol_spt.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyFromSymbol_spt.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset3DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3DAsync_spt` function call.
 *
 * @struct args_hipMemset3DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3DAsync_spt (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemset3DAsync_spt_t {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset3DAsync_spt(activity) { \
	activity->hip_args.hipMemset3DAsync_spt.pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	activity->hip_args.hipMemset3DAsync_spt.value = (int) value; \
	activity->hip_args.hipMemset3DAsync_spt.extent = (hipExtent) extent; \
	activity->hip_args.hipMemset3DAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetD16Async` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD16Async` function call.
 *
 * @struct args_hipMemsetD16Async_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD16Async (
 *			hipDeviceptr_t dest (void *)
 *			unsigned short value (unsigned short)
 *			size_t count (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemsetD16Async_t {
	void * dest;
	unsigned short value;
	size_t count;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetD16Async(activity) { \
	activity->hip_args.hipMemsetD16Async.dest = (void *) dest; \
	activity->hip_args.hipMemsetD16Async.value = (unsigned short) value; \
	activity->hip_args.hipMemsetD16Async.count = (size_t) count; \
	activity->hip_args.hipMemsetD16Async.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetCacheConfig` function call.
 *
 * @struct args_hipDeviceGetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetCacheConfig (
 *			hipFuncCache_t * cacheConfig (enum hipFuncCache_t*)
 *	)
 */
struct args_hipDeviceGetCacheConfig_t {
	hipFuncCache_t * cacheConfig;
	struct {
		hipFuncCache_t val;
	} cacheConfig__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetCacheConfig(activity) { \
	activity->hip_args.hipDeviceGetCacheConfig.cacheConfig = (hipFuncCache_t *) cacheConfig; \
};

#define GET_PTRS_VALUE_hipDeviceGetCacheConfig(args) { \
	if (args->hipDeviceGetCacheConfig.cacheConfig != NULL) { \
		args->hipDeviceGetCacheConfig.cacheConfig__ref.val = *args->hipDeviceGetCacheConfig.cacheConfig; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemCreate` function call.
 *
 * @struct args_hipMemCreate_t
 *
 * @note 
 *	hipError_t
 *	hipMemCreate (
 *			hipMemGenericAllocationHandle_t * handle (struct ihipMemGenericAllocationHandle **)
 *			size_t size (unsigned long)
 *			const hipMemAllocationProp * prop (const struct hipMemAllocationProp *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
struct args_hipMemCreate_t {
	struct ihipMemGenericAllocationHandle ** handle;
	struct {
		void* ptr1;
	} handle__ref;
	size_t size;
	hipMemAllocationProp * prop;
	struct {
		hipMemAllocationProp val;
	} prop__ref;
	unsigned long long flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemCreate(activity) { \
	activity->hip_args.hipMemCreate.handle = (struct ihipMemGenericAllocationHandle **) handle; \
	activity->hip_args.hipMemCreate.size = (size_t) size; \
	activity->hip_args.hipMemCreate.prop = (hipMemAllocationProp *) prop; \
	activity->hip_args.hipMemCreate.flags = (unsigned long long) flags; \
};

#define GET_PTRS_VALUE_hipMemCreate(args) { \
	if (args->hipMemCreate.handle != NULL) { \
		args->hipMemCreate.handle__ref.ptr1 = *args->hipMemCreate.handle; \
	} \
	if (args->hipMemCreate.prop != NULL) { \
		args->hipMemCreate.prop__ref.val = *args->hipMemCreate.prop; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresWaitNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresWaitNodeGetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresWaitNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresWaitNodeGetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipExternalSemaphoreWaitNodeParams * params_out (struct hipExternalSemaphoreWaitNodeParams*)
 *	)
 */
struct args_hipGraphExternalSemaphoresWaitNodeGetParams_t {
	struct hipGraphNode * hNode;
	hipExternalSemaphoreWaitNodeParams * params_out;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} params_out__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresWaitNodeGetParams(activity) { \
	activity->hip_args.hipGraphExternalSemaphoresWaitNodeGetParams.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExternalSemaphoresWaitNodeGetParams.params_out = (hipExternalSemaphoreWaitNodeParams *) params_out; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeGetParams(args) { \
	if (args->hipGraphExternalSemaphoresWaitNodeGetParams.params_out != NULL) { \
		args->hipGraphExternalSemaphoresWaitNodeGetParams.params_out__ref.val = *args->hipGraphExternalSemaphoresWaitNodeGetParams.params_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamEndCapture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamEndCapture` function call.
 *
 * @struct args_hipStreamEndCapture_t
 *
 * @note 
 *	hipError_t
 *	hipStreamEndCapture (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *	)
 */
struct args_hipStreamEndCapture_t {
	struct ihipStream_t * stream;
	struct ihipGraph ** pGraph;
	struct {
		void* ptr1;
	} pGraph__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamEndCapture(activity) { \
	activity->hip_args.hipStreamEndCapture.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamEndCapture.pGraph = (struct ihipGraph **) pGraph; \
};

#define GET_PTRS_VALUE_hipStreamEndCapture(args) { \
	if (args->hipStreamEndCapture.pGraph != NULL) { \
		args->hipStreamEndCapture.pGraph__ref.ptr1 = *args->hipStreamEndCapture.pGraph; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbolAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbolAsync_spt` function call.
 *
 * @struct args_hipMemcpyFromSymbolAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbolAsync_spt (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyFromSymbolAsync_spt_t {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyFromSymbolAsync_spt(activity) { \
	activity->hip_args.hipMemcpyFromSymbolAsync_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpyFromSymbolAsync_spt.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyFromSymbolAsync_spt.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyFromSymbolAsync_spt.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyFromSymbolAsync_spt.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpyFromSymbolAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoA` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoA` function call.
 *
 * @struct args_hipMemcpyHtoA_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoA (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			const void * srcHost (const void *)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemcpyHtoA_t {
	struct hipArray * dstArray;
	size_t dstOffset;
	void * srcHost;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyHtoA(activity) { \
	activity->hip_args.hipMemcpyHtoA.dstArray = (struct hipArray *) dstArray; \
	activity->hip_args.hipMemcpyHtoA.dstOffset = (size_t) dstOffset; \
	activity->hip_args.hipMemcpyHtoA.srcHost = (void *) srcHost; \
	activity->hip_args.hipMemcpyHtoA.count = (size_t) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecHostNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecHostNodeSetParams` function call.
 *
 * @struct args_hipGraphExecHostNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecHostNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipHostNodeParams * pNodeParams (const struct hipHostNodeParams *)
 *	)
 */
struct args_hipGraphExecHostNodeSetParams_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecHostNodeSetParams(activity) { \
	activity->hip_args.hipGraphExecHostNodeSetParams.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecHostNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecHostNodeSetParams.pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecHostNodeSetParams(args) { \
	if (args->hipGraphExecHostNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphExecHostNodeSetParams.pNodeParams__ref.val = *args->hipGraphExecHostNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMalloc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMalloc` function call.
 *
 * @struct args_hipMalloc_t
 *
 * @note 
 *	hipError_t
 *	hipMalloc (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *	)
 */
struct args_hipMalloc_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMalloc(activity) { \
	activity->hip_args.hipMalloc.ptr = (void **) ptr; \
	activity->hip_args.hipMalloc.size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipMalloc(args) { \
	if (args->hipMalloc.ptr != NULL) { \
		args->hipMalloc.ptr__ref.ptr1 = *args->hipMalloc.ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMalloc3DArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMalloc3DArray` function call.
 *
 * @struct args_hipMalloc3DArray_t
 *
 * @note 
 *	hipError_t
 *	hipMalloc3DArray (
 *			hipArray_t * array (struct hipArray **)
 *			const struct hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			struct hipExtent extent (struct hipExtent)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipMalloc3DArray_t {
	struct hipArray ** array;
	struct {
		void* ptr1;
	} array__ref;
	struct hipChannelFormatDesc * desc;
	struct {
		struct hipChannelFormatDesc val;
	} desc__ref;
	struct hipExtent extent;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMalloc3DArray(activity) { \
	activity->hip_args.hipMalloc3DArray.array = (struct hipArray **) array; \
	activity->hip_args.hipMalloc3DArray.desc = (struct hipChannelFormatDesc *) desc; \
	activity->hip_args.hipMalloc3DArray.extent = (struct hipExtent) extent; \
	activity->hip_args.hipMalloc3DArray.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMalloc3DArray(args) { \
	if (args->hipMalloc3DArray.array != NULL) { \
		args->hipMalloc3DArray.array__ref.ptr1 = *args->hipMalloc3DArray.array; \
	} \
	if (args->hipMalloc3DArray.desc != NULL) { \
		args->hipMalloc3DArray.desc__ref.val = *args->hipMalloc3DArray.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecKernelNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecKernelNodeSetParams` function call.
 *
 * @struct args_hipGraphExecKernelNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecKernelNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipKernelNodeParams * pNodeParams (const struct hipKernelNodeParams *)
 *	)
 */
struct args_hipGraphExecKernelNodeSetParams_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecKernelNodeSetParams(activity) { \
	activity->hip_args.hipGraphExecKernelNodeSetParams.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecKernelNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecKernelNodeSetParams.pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecKernelNodeSetParams(args) { \
	if (args->hipGraphExecKernelNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphExecKernelNodeSetParams.pNodeParams__ref.val = *args->hipGraphExecKernelNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetTextureObjectResourceDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureObjectResourceDesc` function call.
 *
 * @struct args_hipGetTextureObjectResourceDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureObjectResourceDesc (
 *			hipResourceDesc * pResDesc (struct hipResourceDesc*)
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
struct args_hipGetTextureObjectResourceDesc_t {
	hipResourceDesc * pResDesc;
	struct {
		hipResourceDesc val;
	} pResDesc__ref;
	struct __hip_texture * textureObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetTextureObjectResourceDesc(activity) { \
	activity->hip_args.hipGetTextureObjectResourceDesc.pResDesc = (hipResourceDesc *) pResDesc; \
	activity->hip_args.hipGetTextureObjectResourceDesc.textureObject = (struct __hip_texture *) textureObject; \
};

#define GET_PTRS_VALUE_hipGetTextureObjectResourceDesc(args) { \
	if (args->hipGetTextureObjectResourceDesc.pResDesc != NULL) { \
		args->hipGetTextureObjectResourceDesc.pResDesc__ref.val = *args->hipGetTextureObjectResourceDesc.pResDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `__hipPushCallConfiguration` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `__hipPushCallConfiguration` function call.
 *
 * @struct args___hipPushCallConfiguration_t
 *
 * @note 
 *	hipError_t
 *	__hipPushCallConfiguration (
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDim (struct dim3)
 *			size_t sharedMem (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args___hipPushCallConfiguration_t {
	dim3 gridDim;
	dim3 blockDim;
	size_t sharedMem;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE___hipPushCallConfiguration(activity) { \
	activity->hip_args.__hipPushCallConfiguration.gridDim = (dim3) gridDim; \
	activity->hip_args.__hipPushCallConfiguration.blockDim = (dim3) blockDim; \
	activity->hip_args.__hipPushCallConfiguration.sharedMem = (size_t) sharedMem; \
	activity->hip_args.__hipPushCallConfiguration.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3DAsync_spt` function call.
 *
 * @struct args_hipMemcpy3DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3DAsync_spt (
 *			const hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy3DAsync_spt_t {
	hipMemcpy3DParms * p;
	struct {
		hipMemcpy3DParms val;
	} p__ref;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy3DAsync_spt(activity) { \
	activity->hip_args.hipMemcpy3DAsync_spt.p = (hipMemcpy3DParms *) p; \
	activity->hip_args.hipMemcpy3DAsync_spt.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipMemcpy3DAsync_spt(args) { \
	if (args->hipMemcpy3DAsync_spt.p != NULL) { \
		args->hipMemcpy3DAsync_spt.p__ref.val = *args->hipMemcpy3DAsync_spt.p; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetD8Async` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD8Async` function call.
 *
 * @struct args_hipMemsetD8Async_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD8Async (
 *			hipDeviceptr_t dest (void *)
 *			unsigned char value (unsigned char)
 *			size_t count (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemsetD8Async_t {
	void * dest;
	unsigned char value;
	size_t count;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetD8Async(activity) { \
	activity->hip_args.hipMemsetD8Async.dest = (void *) dest; \
	activity->hip_args.hipMemsetD8Async.value = (unsigned char) value; \
	activity->hip_args.hipMemsetD8Async.count = (size_t) count; \
	activity->hip_args.hipMemsetD8Async.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamAddCallback` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamAddCallback` function call.
 *
 * @struct args_hipStreamAddCallback_t
 *
 * @note 
 *	hipError_t
 *	hipStreamAddCallback (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCallback_t callback (void (*)(struct ihipStream_t *, enum hipError_t, void *))
 *			void * userData (void *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamAddCallback_t {
	struct ihipStream_t * stream;
	hipStreamCallback_t callback;
	void * userData;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamAddCallback(activity) { \
	activity->hip_args.hipStreamAddCallback.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamAddCallback.callback = (hipStreamCallback_t) callback; \
	activity->hip_args.hipStreamAddCallback.userData = (void *) userData; \
	activity->hip_args.hipStreamAddCallback.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolImportPointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolImportPointer` function call.
 *
 * @struct args_hipMemPoolImportPointer_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolImportPointer (
 *			void ** dev_ptr (void **)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemPoolPtrExportData * export_data (struct hipMemPoolPtrExportData*)
 *	)
 */
struct args_hipMemPoolImportPointer_t {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	struct ihipMemPoolHandle_t * mem_pool;
	hipMemPoolPtrExportData * export_data;
	struct {
		hipMemPoolPtrExportData val;
	} export_data__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolImportPointer(activity) { \
	activity->hip_args.hipMemPoolImportPointer.dev_ptr = (void **) dev_ptr; \
	activity->hip_args.hipMemPoolImportPointer.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMemPoolImportPointer.export_data = (hipMemPoolPtrExportData *) export_data; \
};

#define GET_PTRS_VALUE_hipMemPoolImportPointer(args) { \
	if (args->hipMemPoolImportPointer.dev_ptr != NULL) { \
		args->hipMemPoolImportPointer.dev_ptr__ref.ptr1 = *args->hipMemPoolImportPointer.dev_ptr; \
	} \
	if (args->hipMemPoolImportPointer.export_data != NULL) { \
		args->hipMemPoolImportPointer.export_data__ref.val = *args->hipMemPoolImportPointer.export_data; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipFuncGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncGetAttributes` function call.
 *
 * @struct args_hipFuncGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipFuncGetAttributes (
 *			struct hipFuncAttributes * attr (struct hipFuncAttributes *)
 *			const void * func (const void *)
 *	)
 */
struct args_hipFuncGetAttributes_t {
	struct hipFuncAttributes * attr;
	struct {
		struct hipFuncAttributes val;
	} attr__ref;
	void * func;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFuncGetAttributes(activity) { \
	activity->hip_args.hipFuncGetAttributes.attr = (struct hipFuncAttributes *) attr; \
	activity->hip_args.hipFuncGetAttributes.func = (void *) func; \
};

#define GET_PTRS_VALUE_hipFuncGetAttributes(args) { \
	if (args->hipFuncGetAttributes.attr != NULL) { \
		args->hipFuncGetAttributes.attr__ref.val = *args->hipFuncGetAttributes.attr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxGetCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetCurrent` function call.
 *
 * @struct args_hipCtxGetCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetCurrent (
 *			hipCtx_t * ctx (struct ihipCtx_t **)
 *	)
 */
struct args_hipCtxGetCurrent_t {
	struct ihipCtx_t ** ctx;
	struct {
		void* ptr1;
	} ctx__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxGetCurrent(activity) { \
	activity->hip_args.hipCtxGetCurrent.ctx = (struct ihipCtx_t **) ctx; \
};

#define GET_PTRS_VALUE_hipCtxGetCurrent(args) { \
	if (args->hipCtxGetCurrent.ctx != NULL) { \
		args->hipCtxGetCurrent.ctx__ref.ptr1 = *args->hipCtxGetCurrent.ctx; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddChildGraphNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddChildGraphNode` function call.
 *
 * @struct args_hipGraphAddChildGraphNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddChildGraphNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipGraph_t childGraph (struct ihipGraph *)
 *	)
 */
struct args_hipGraphAddChildGraphNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	struct ihipGraph * childGraph;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddChildGraphNode(activity) { \
	activity->hip_args.hipGraphAddChildGraphNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddChildGraphNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddChildGraphNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddChildGraphNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddChildGraphNode.childGraph = (struct ihipGraph *) childGraph; \
};

#define GET_PTRS_VALUE_hipGraphAddChildGraphNode(args) { \
	if (args->hipGraphAddChildGraphNode.pGraphNode != NULL) { \
		args->hipGraphAddChildGraphNode.pGraphNode__ref.ptr1 = *args->hipGraphAddChildGraphNode.pGraphNode; \
	} \
	if (args->hipGraphAddChildGraphNode.pDependencies != NULL) { \
		args->hipGraphAddChildGraphNode.pDependencies__ref.ptr1 = *args->hipGraphAddChildGraphNode.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipEventCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventCreate` function call.
 *
 * @struct args_hipEventCreate_t
 *
 * @note 
 *	hipError_t
 *	hipEventCreate (
 *			hipEvent_t * event (struct ihipEvent_t **)
 *	)
 */
struct args_hipEventCreate_t {
	struct ihipEvent_t ** event;
	struct {
		void* ptr1;
	} event__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventCreate(activity) { \
	activity->hip_args.hipEventCreate.event = (struct ihipEvent_t **) event; \
};

#define GET_PTRS_VALUE_hipEventCreate(args) { \
	if (args->hipEventCreate.event != NULL) { \
		args->hipEventCreate.event__ref.ptr1 = *args->hipEventCreate.event; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipHostGetDevicePointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostGetDevicePointer` function call.
 *
 * @struct args_hipHostGetDevicePointer_t
 *
 * @note 
 *	hipError_t
 *	hipHostGetDevicePointer (
 *			void ** devPtr (void **)
 *			void * hstPtr (void *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipHostGetDevicePointer_t {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	void * hstPtr;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipHostGetDevicePointer(activity) { \
	activity->hip_args.hipHostGetDevicePointer.devPtr = (void **) devPtr; \
	activity->hip_args.hipHostGetDevicePointer.hstPtr = (void *) hstPtr; \
	activity->hip_args.hipHostGetDevicePointer.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipHostGetDevicePointer(args) { \
	if (args->hipHostGetDevicePointer.devPtr != NULL) { \
		args->hipHostGetDevicePointer.devPtr__ref.ptr1 = *args->hipHostGetDevicePointer.devPtr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipEventQuery` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventQuery` function call.
 *
 * @struct args_hipEventQuery_t
 *
 * @note 
 *	hipError_t
 *	hipEventQuery (
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipEventQuery_t {
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventQuery(activity) { \
	activity->hip_args.hipEventQuery.event = (struct ihipEvent_t *) event; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyPeerAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyPeerAsync` function call.
 *
 * @struct args_hipMemcpyPeerAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyPeerAsync (
 *			void * dst (void *)
 *			int dstDeviceId (int)
 *			const void * src (const void *)
 *			int srcDevice (int)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyPeerAsync_t {
	void * dst;
	int dstDeviceId;
	void * src;
	int srcDevice;
	size_t sizeBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyPeerAsync(activity) { \
	activity->hip_args.hipMemcpyPeerAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpyPeerAsync.dstDeviceId = (int) dstDeviceId; \
	activity->hip_args.hipMemcpyPeerAsync.src = (void *) src; \
	activity->hip_args.hipMemcpyPeerAsync.srcDevice = (int) srcDevice; \
	activity->hip_args.hipMemcpyPeerAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyPeerAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemMap` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemMap` function call.
 *
 * @struct args_hipMemMap_t
 *
 * @note 
 *	hipError_t
 *	hipMemMap (
 *			void * ptr (void *)
 *			size_t size (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
struct args_hipMemMap_t {
	void * ptr;
	size_t size;
	size_t offset;
	struct ihipMemGenericAllocationHandle * handle;
	unsigned long long flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemMap(activity) { \
	activity->hip_args.hipMemMap.ptr = (void *) ptr; \
	activity->hip_args.hipMemMap.size = (size_t) size; \
	activity->hip_args.hipMemMap.offset = (size_t) offset; \
	activity->hip_args.hipMemMap.handle = (struct ihipMemGenericAllocationHandle *) handle; \
	activity->hip_args.hipMemMap.flags = (unsigned long long) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipBindTextureToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTextureToArray` function call.
 *
 * @struct args_hipBindTextureToArray_t
 *
 * @note 
 *	hipError_t
 *	hipBindTextureToArray (
 *			const textureReference * tex (const struct textureReference *)
 *			hipArray_const_t array (const struct hipArray *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *	)
 */
struct args_hipBindTextureToArray_t {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	struct hipArray * array;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipBindTextureToArray(activity) { \
	activity->hip_args.hipBindTextureToArray.tex = (textureReference *) tex; \
	activity->hip_args.hipBindTextureToArray.array = (struct hipArray *) array; \
	activity->hip_args.hipBindTextureToArray.desc = (hipChannelFormatDesc *) desc; \
};

#define GET_PTRS_VALUE_hipBindTextureToArray(args) { \
	if (args->hipBindTextureToArray.tex != NULL) { \
		args->hipBindTextureToArray.tex__ref.val = *args->hipBindTextureToArray.tex; \
	} \
	if (args->hipBindTextureToArray.desc != NULL) { \
		args->hipBindTextureToArray.desc__ref.val = *args->hipBindTextureToArray.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DAsync_spt` function call.
 *
 * @struct args_hipMemcpy2DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DAsync_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy2DAsync_spt_t {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DAsync_spt(activity) { \
	activity->hip_args.hipMemcpy2DAsync_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2DAsync_spt.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2DAsync_spt.src = (void *) src; \
	activity->hip_args.hipMemcpy2DAsync_spt.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2DAsync_spt.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DAsync_spt.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DAsync_spt.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpy2DAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolSetAttribute` function call.
 *
 * @struct args_hipMemPoolSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolSetAttribute (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemPoolAttr attr (enum hipMemPoolAttr)
 *			void * value (void *)
 *	)
 */
struct args_hipMemPoolSetAttribute_t {
	struct ihipMemPoolHandle_t * mem_pool;
	hipMemPoolAttr attr;
	void * value;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolSetAttribute(activity) { \
	activity->hip_args.hipMemPoolSetAttribute.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMemPoolSetAttribute.attr = (hipMemPoolAttr) attr; \
	activity->hip_args.hipMemPoolSetAttribute.value = (void *) value; \
};

/**
 * @brief Structure to hold the arguments for the `hipGetLastError` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetLastError` function call.
 *
 * @struct args_hipGetLastError_t
 *
 * @note 
 *	hipError_t
 *	hipGetLastError (
 *	)
 */
struct args_hipGetLastError_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipStreamEndCapture_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamEndCapture_spt` function call.
 *
 * @struct args_hipStreamEndCapture_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamEndCapture_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *	)
 */
struct args_hipStreamEndCapture_spt_t {
	struct ihipStream_t * stream;
	struct ihipGraph ** pGraph;
	struct {
		void* ptr1;
	} pGraph__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamEndCapture_spt(activity) { \
	activity->hip_args.hipStreamEndCapture_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamEndCapture_spt.pGraph = (struct ihipGraph **) pGraph; \
};

#define GET_PTRS_VALUE_hipStreamEndCapture_spt(args) { \
	if (args->hipStreamEndCapture_spt.pGraph != NULL) { \
		args->hipStreamEndCapture_spt.pGraph__ref.ptr1 = *args->hipStreamEndCapture_spt.pGraph; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxPotentialBlockSize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxPotentialBlockSize` function call.
 *
 * @struct args_hipModuleOccupancyMaxPotentialBlockSize_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxPotentialBlockSize (
 *			int * gridSize (int *)
 *			int * blockSize (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			int blockSizeLimit (int)
 *	)
 */
struct args_hipModuleOccupancyMaxPotentialBlockSize_t {
	int * gridSize;
	struct {
		int val;
	} gridSize__ref;
	int * blockSize;
	struct {
		int val;
	} blockSize__ref;
	struct ihipModuleSymbol_t * f;
	size_t dynSharedMemPerBlk;
	int blockSizeLimit;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleOccupancyMaxPotentialBlockSize(activity) { \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSize.gridSize = (int *) gridSize; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSize.blockSize = (int *) blockSize; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSize.f = (struct ihipModuleSymbol_t *) f; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSize.dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	activity->hip_args.hipModuleOccupancyMaxPotentialBlockSize.blockSizeLimit = (int) blockSizeLimit; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSize(args) { \
	if (args->hipModuleOccupancyMaxPotentialBlockSize.gridSize != NULL) { \
		args->hipModuleOccupancyMaxPotentialBlockSize.gridSize__ref.val = *args->hipModuleOccupancyMaxPotentialBlockSize.gridSize; \
	} \
	if (args->hipModuleOccupancyMaxPotentialBlockSize.blockSize != NULL) { \
		args->hipModuleOccupancyMaxPotentialBlockSize.blockSize__ref.val = *args->hipModuleOccupancyMaxPotentialBlockSize.blockSize; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipKernelNameRefByPtr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipKernelNameRefByPtr` function call.
 *
 * @struct args_hipKernelNameRefByPtr_t
 *
 * @note 
 *	const char *
 *	hipKernelNameRefByPtr (
 *			const void * hostFunction (const void *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipKernelNameRefByPtr_t {
	void * hostFunction;
	struct ihipStream_t * stream;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
};

#define GET_ARGS_VALUE_hipKernelNameRefByPtr(activity) { \
	activity->hip_args.hipKernelNameRefByPtr.hostFunction = (void *) hostFunction; \
	activity->hip_args.hipKernelNameRefByPtr.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_RET_VALUE_hipKernelNameRefByPtr(args) { \
	if (args->hipKernelNameRefByPtr.retval != NULL) { \
		strncpy(args->hipKernelNameRefByPtr.retval__ref.val, args->hipKernelNameRefByPtr.retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDevice` function call.
 *
 * @struct args_hipGetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipGetDevice (
 *			int * deviceId (int *)
 *	)
 */
struct args_hipGetDevice_t {
	int * deviceId;
	struct {
		int val;
	} deviceId__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetDevice(activity) { \
	activity->hip_args.hipGetDevice.deviceId = (int *) deviceId; \
};

#define GET_PTRS_VALUE_hipGetDevice(args) { \
	if (args->hipGetDevice.deviceId != NULL) { \
		args->hipGetDevice.deviceId__ref.val = *args->hipGetDevice.deviceId; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3D_spt` function call.
 *
 * @struct args_hipMemcpy3D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3D_spt (
 *			const struct hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *	)
 */
struct args_hipMemcpy3D_spt_t {
	struct hipMemcpy3DParms * p;
	struct {
		struct hipMemcpy3DParms val;
	} p__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy3D_spt(activity) { \
	activity->hip_args.hipMemcpy3D_spt.p = (struct hipMemcpy3DParms *) p; \
};

#define GET_PTRS_VALUE_hipMemcpy3D_spt(args) { \
	if (args->hipMemcpy3D_spt.p != NULL) { \
		args->hipMemcpy3D_spt.p__ref.val = *args->hipMemcpy3D_spt.p; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexObjectGetTextureDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectGetTextureDesc` function call.
 *
 * @struct args_hipTexObjectGetTextureDesc_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectGetTextureDesc (
 *			HIP_TEXTURE_DESC * pTexDesc (struct HIP_TEXTURE_DESC_st*)
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
struct args_hipTexObjectGetTextureDesc_t {
	HIP_TEXTURE_DESC * pTexDesc;
	struct {
		HIP_TEXTURE_DESC val;
	} pTexDesc__ref;
	struct __hip_texture * texObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexObjectGetTextureDesc(activity) { \
	activity->hip_args.hipTexObjectGetTextureDesc.pTexDesc = (HIP_TEXTURE_DESC *) pTexDesc; \
	activity->hip_args.hipTexObjectGetTextureDesc.texObject = (struct __hip_texture *) texObject; \
};

#define GET_PTRS_VALUE_hipTexObjectGetTextureDesc(args) { \
	if (args->hipTexObjectGetTextureDesc.pTexDesc != NULL) { \
		args->hipTexObjectGetTextureDesc.pTexDesc__ref.val = *args->hipTexObjectGetTextureDesc.pTexDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGet` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGet` function call.
 *
 * @struct args_hipDeviceGet_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGet (
 *			hipDevice_t * device (int*)
 *			int ordinal (int)
 *	)
 */
struct args_hipDeviceGet_t {
	hipDevice_t * device;
	struct {
		hipDevice_t val;
	} device__ref;
	int ordinal;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGet(activity) { \
	activity->hip_args.hipDeviceGet.device = (hipDevice_t *) device; \
	activity->hip_args.hipDeviceGet.ordinal = (int) ordinal; \
};

#define GET_PTRS_VALUE_hipDeviceGet(args) { \
	if (args->hipDeviceGet.device != NULL) { \
		args->hipDeviceGet.device__ref.val = *args->hipDeviceGet.device; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresSignalNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresSignalNodeSetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresSignalNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresSignalNodeSetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreSignalNodeParams * nodeParams (const struct hipExternalSemaphoreSignalNodeParams *)
 *	)
 */
struct args_hipGraphExternalSemaphoresSignalNodeSetParams_t {
	struct hipGraphNode * hNode;
	hipExternalSemaphoreSignalNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresSignalNodeSetParams(activity) { \
	activity->hip_args.hipGraphExternalSemaphoresSignalNodeSetParams.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExternalSemaphoresSignalNodeSetParams.nodeParams = (hipExternalSemaphoreSignalNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeSetParams(args) { \
	if (args->hipGraphExternalSemaphoresSignalNodeSetParams.nodeParams != NULL) { \
		args->hipGraphExternalSemaphoresSignalNodeSetParams.nodeParams__ref.val = *args->hipGraphExternalSemaphoresSignalNodeSetParams.nodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDestroySurfaceObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroySurfaceObject` function call.
 *
 * @struct args_hipDestroySurfaceObject_t
 *
 * @note 
 *	hipError_t
 *	hipDestroySurfaceObject (
 *			hipSurfaceObject_t surfaceObject (struct __hip_surface *)
 *	)
 */
struct args_hipDestroySurfaceObject_t {
	struct __hip_surface * surfaceObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDestroySurfaceObject(activity) { \
	activity->hip_args.hipDestroySurfaceObject.surfaceObject = (struct __hip_surface *) surfaceObject; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetDevice` function call.
 *
 * @struct args_hipStreamGetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetDevice (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipDevice_t * device (int*)
 *	)
 */
struct args_hipStreamGetDevice_t {
	struct ihipStream_t * stream;
	hipDevice_t * device;
	struct {
		hipDevice_t val;
	} device__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetDevice(activity) { \
	activity->hip_args.hipStreamGetDevice.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetDevice.device = (hipDevice_t *) device; \
};

#define GET_PTRS_VALUE_hipStreamGetDevice(args) { \
	if (args->hipStreamGetDevice.device != NULL) { \
		args->hipStreamGetDevice.device__ref.val = *args->hipStreamGetDevice.device; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemAllocPitch` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAllocPitch` function call.
 *
 * @struct args_hipMemAllocPitch_t
 *
 * @note 
 *	hipError_t
 *	hipMemAllocPitch (
 *			hipDeviceptr_t * dptr (void **)
 *			size_t * pitch (unsigned long*)
 *			size_t widthInBytes (unsigned long)
 *			size_t height (unsigned long)
 *			unsigned int elementSizeBytes (unsigned int)
 *	)
 */
struct args_hipMemAllocPitch_t {
	void ** dptr;
	struct {
		void* ptr1;
	} dptr__ref;
	size_t * pitch;
	struct {
		size_t val;
	} pitch__ref;
	size_t widthInBytes;
	size_t height;
	unsigned int elementSizeBytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemAllocPitch(activity) { \
	activity->hip_args.hipMemAllocPitch.dptr = (void **) dptr; \
	activity->hip_args.hipMemAllocPitch.pitch = (size_t *) pitch; \
	activity->hip_args.hipMemAllocPitch.widthInBytes = (size_t) widthInBytes; \
	activity->hip_args.hipMemAllocPitch.height = (size_t) height; \
	activity->hip_args.hipMemAllocPitch.elementSizeBytes = (unsigned int) elementSizeBytes; \
};

#define GET_PTRS_VALUE_hipMemAllocPitch(args) { \
	if (args->hipMemAllocPitch.dptr != NULL) { \
		args->hipMemAllocPitch.dptr__ref.ptr1 = *args->hipMemAllocPitch.dptr; \
	} \
	if (args->hipMemAllocPitch.pitch != NULL) { \
		args->hipMemAllocPitch.pitch__ref.val = *args->hipMemAllocPitch.pitch; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddNode` function call.
 *
 * @struct args_hipGraphAddNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipGraphNodeParams * nodeParams (struct hipGraphNodeParams*)
 *	)
 */
struct args_hipGraphAddNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipGraphNodeParams * nodeParams;
	struct {
		hipGraphNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddNode(activity) { \
	activity->hip_args.hipGraphAddNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddNode.nodeParams = (hipGraphNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddNode(args) { \
	if (args->hipGraphAddNode.pGraphNode != NULL) { \
		args->hipGraphAddNode.pGraphNode__ref.ptr1 = *args->hipGraphAddNode.pGraphNode; \
	} \
	if (args->hipGraphAddNode.pDependencies != NULL) { \
		args->hipGraphAddNode.pDependencies__ref.ptr1 = *args->hipGraphAddNode.pDependencies; \
	} \
	if (args->hipGraphAddNode.nodeParams != NULL) { \
		args->hipGraphAddNode.nodeParams__ref.val = *args->hipGraphAddNode.nodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetSharedMemConfig` function call.
 *
 * @struct args_hipDeviceSetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetSharedMemConfig (
 *			hipSharedMemConfig config (enum hipSharedMemConfig)
 *	)
 */
struct args_hipDeviceSetSharedMemConfig_t {
	hipSharedMemConfig config;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceSetSharedMemConfig(activity) { \
	activity->hip_args.hipDeviceSetSharedMemConfig.config = (hipSharedMemConfig) config; \
};

/**
 * @brief Structure to hold the arguments for the `hipRuntimeGetVersion` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipRuntimeGetVersion` function call.
 *
 * @struct args_hipRuntimeGetVersion_t
 *
 * @note 
 *	hipError_t
 *	hipRuntimeGetVersion (
 *			int * runtimeVersion (int *)
 *	)
 */
struct args_hipRuntimeGetVersion_t {
	int * runtimeVersion;
	struct {
		int val;
	} runtimeVersion__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipRuntimeGetVersion(activity) { \
	activity->hip_args.hipRuntimeGetVersion.runtimeVersion = (int *) runtimeVersion; \
};

#define GET_PTRS_VALUE_hipRuntimeGetVersion(args) { \
	if (args->hipRuntimeGetVersion.runtimeVersion != NULL) { \
		args->hipRuntimeGetVersion.runtimeVersion__ref.val = *args->hipRuntimeGetVersion.runtimeVersion; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphChildGraphNodeGetGraph` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphChildGraphNodeGetGraph` function call.
 *
 * @struct args_hipGraphChildGraphNodeGetGraph_t
 *
 * @note 
 *	hipError_t
 *	hipGraphChildGraphNodeGetGraph (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *	)
 */
struct args_hipGraphChildGraphNodeGetGraph_t {
	struct hipGraphNode * node;
	struct ihipGraph ** pGraph;
	struct {
		void* ptr1;
	} pGraph__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphChildGraphNodeGetGraph(activity) { \
	activity->hip_args.hipGraphChildGraphNodeGetGraph.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphChildGraphNodeGetGraph.pGraph = (struct ihipGraph **) pGraph; \
};

#define GET_PTRS_VALUE_hipGraphChildGraphNodeGetGraph(args) { \
	if (args->hipGraphChildGraphNodeGetGraph.pGraph != NULL) { \
		args->hipGraphChildGraphNodeGetGraph.pGraph__ref.ptr1 = *args->hipGraphChildGraphNodeGetGraph.pGraph; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemsetNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemsetNodeSetParams` function call.
 *
 * @struct args_hipGraphExecMemsetNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemsetNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipMemsetParams * pNodeParams (const struct hipMemsetParams *)
 *	)
 */
struct args_hipGraphExecMemsetNodeSetParams_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	hipMemsetParams * pNodeParams;
	struct {
		hipMemsetParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecMemsetNodeSetParams(activity) { \
	activity->hip_args.hipGraphExecMemsetNodeSetParams.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecMemsetNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecMemsetNodeSetParams.pNodeParams = (hipMemsetParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecMemsetNodeSetParams(args) { \
	if (args->hipGraphExecMemsetNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphExecMemsetNodeSetParams.pNodeParams__ref.val = *args->hipGraphExecMemsetNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphicsUnregisterResource` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsUnregisterResource` function call.
 *
 * @struct args_hipGraphicsUnregisterResource_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsUnregisterResource (
 *			hipGraphicsResource_t resource (struct _hipGraphicsResource*)
 *	)
 */
struct args_hipGraphicsUnregisterResource_t {
	struct _hipGraphicsResource* resource;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphicsUnregisterResource(activity) { \
	activity->hip_args.hipGraphicsUnregisterResource.resource = (struct _hipGraphicsResource*) resource; \
};

/**
 * @brief Structure to hold the arguments for the `hipEventElapsedTime` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventElapsedTime` function call.
 *
 * @struct args_hipEventElapsedTime_t
 *
 * @note 
 *	hipError_t
 *	hipEventElapsedTime (
 *			float * ms (float *)
 *			hipEvent_t start (struct ihipEvent_t *)
 *			hipEvent_t stop (struct ihipEvent_t *)
 *	)
 */
struct args_hipEventElapsedTime_t {
	float * ms;
	struct {
		float val;
	} ms__ref;
	struct ihipEvent_t * start;
	struct ihipEvent_t * stop;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventElapsedTime(activity) { \
	activity->hip_args.hipEventElapsedTime.ms = (float *) ms; \
	activity->hip_args.hipEventElapsedTime.start = (struct ihipEvent_t *) start; \
	activity->hip_args.hipEventElapsedTime.stop = (struct ihipEvent_t *) stop; \
};

#define GET_PTRS_VALUE_hipEventElapsedTime(args) { \
	if (args->hipEventElapsedTime.ms != NULL) { \
		args->hipEventElapsedTime.ms__ref.val = *args->hipEventElapsedTime.ms; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipFreeAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeAsync` function call.
 *
 * @struct args_hipFreeAsync_t
 *
 * @note 
 *	hipError_t
 *	hipFreeAsync (
 *			void * dev_ptr (void *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipFreeAsync_t {
	void * dev_ptr;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFreeAsync(activity) { \
	activity->hip_args.hipFreeAsync.dev_ptr = (void *) dev_ptr; \
	activity->hip_args.hipFreeAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamCreateWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamCreateWithFlags` function call.
 *
 * @struct args_hipStreamCreateWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipStreamCreateWithFlags (
 *			hipStream_t * stream (struct ihipStream_t **)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamCreateWithFlags_t {
	struct ihipStream_t ** stream;
	struct {
		void* ptr1;
	} stream__ref;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamCreateWithFlags(activity) { \
	activity->hip_args.hipStreamCreateWithFlags.stream = (struct ihipStream_t **) stream; \
	activity->hip_args.hipStreamCreateWithFlags.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipStreamCreateWithFlags(args) { \
	if (args->hipStreamCreateWithFlags.stream != NULL) { \
		args->hipStreamCreateWithFlags.stream__ref.ptr1 = *args->hipStreamCreateWithFlags.stream; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetAddress` function call.
 *
 * @struct args_hipTexRefSetAddress_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetAddress (
 *			size_t * ByteOffset (unsigned long*)
 *			textureReference * texRef (struct textureReference*)
 *			hipDeviceptr_t dptr (void *)
 *			size_t bytes (unsigned long)
 *	)
 */
struct args_hipTexRefSetAddress_t {
	size_t * ByteOffset;
	struct {
		size_t val;
	} ByteOffset__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	void * dptr;
	size_t bytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetAddress(activity) { \
	activity->hip_args.hipTexRefSetAddress.ByteOffset = (size_t *) ByteOffset; \
	activity->hip_args.hipTexRefSetAddress.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetAddress.dptr = (void *) dptr; \
	activity->hip_args.hipTexRefSetAddress.bytes = (size_t) bytes; \
};

#define GET_PTRS_VALUE_hipTexRefSetAddress(args) { \
	if (args->hipTexRefSetAddress.ByteOffset != NULL) { \
		args->hipTexRefSetAddress.ByteOffset__ref.val = *args->hipTexRefSetAddress.ByteOffset; \
	} \
	if (args->hipTexRefSetAddress.texRef != NULL) { \
		args->hipTexRefSetAddress.texRef__ref.val = *args->hipTexRefSetAddress.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamAddCallback_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamAddCallback_spt` function call.
 *
 * @struct args_hipStreamAddCallback_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamAddCallback_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCallback_t callback (void (*)(struct ihipStream_t *, enum hipError_t, void *))
 *			void * userData (void *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamAddCallback_spt_t {
	struct ihipStream_t * stream;
	hipStreamCallback_t callback;
	void * userData;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamAddCallback_spt(activity) { \
	activity->hip_args.hipStreamAddCallback_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamAddCallback_spt.callback = (hipStreamCallback_t) callback; \
	activity->hip_args.hipStreamAddCallback_spt.userData = (void *) userData; \
	activity->hip_args.hipStreamAddCallback_spt.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddKernelNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddKernelNode` function call.
 *
 * @struct args_hipGraphAddKernelNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddKernelNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipKernelNodeParams * pNodeParams (const struct hipKernelNodeParams *)
 *	)
 */
struct args_hipGraphAddKernelNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddKernelNode(activity) { \
	activity->hip_args.hipGraphAddKernelNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddKernelNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddKernelNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddKernelNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddKernelNode.pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddKernelNode(args) { \
	if (args->hipGraphAddKernelNode.pGraphNode != NULL) { \
		args->hipGraphAddKernelNode.pGraphNode__ref.ptr1 = *args->hipGraphAddKernelNode.pGraphNode; \
	} \
	if (args->hipGraphAddKernelNode.pDependencies != NULL) { \
		args->hipGraphAddKernelNode.pDependencies__ref.ptr1 = *args->hipGraphAddKernelNode.pDependencies; \
	} \
	if (args->hipGraphAddKernelNode.pNodeParams != NULL) { \
		args->hipGraphAddKernelNode.pNodeParams__ref.val = *args->hipGraphAddKernelNode.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoH` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoH` function call.
 *
 * @struct args_hipMemcpyDtoH_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoH (
 *			void * dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
struct args_hipMemcpyDtoH_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyDtoH(activity) { \
	activity->hip_args.hipMemcpyDtoH.dst = (void *) dst; \
	activity->hip_args.hipMemcpyDtoH.src = (void *) src; \
	activity->hip_args.hipMemcpyDtoH.sizeBytes = (size_t) sizeBytes; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceTotalMem` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceTotalMem` function call.
 *
 * @struct args_hipDeviceTotalMem_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceTotalMem (
 *			size_t * bytes (unsigned long*)
 *			hipDevice_t device (int)
 *	)
 */
struct args_hipDeviceTotalMem_t {
	size_t * bytes;
	struct {
		size_t val;
	} bytes__ref;
	hipDevice_t device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceTotalMem(activity) { \
	activity->hip_args.hipDeviceTotalMem.bytes = (size_t *) bytes; \
	activity->hip_args.hipDeviceTotalMem.device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceTotalMem(args) { \
	if (args->hipDeviceTotalMem.bytes != NULL) { \
		args->hipDeviceTotalMem.bytes__ref.val = *args->hipDeviceTotalMem.bytes; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2D` function call.
 *
 * @struct args_hipMemset2D_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2D (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *	)
 */
struct args_hipMemset2D_t {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset2D(activity) { \
	activity->hip_args.hipMemset2D.dst = (void *) dst; \
	activity->hip_args.hipMemset2D.pitch = (size_t) pitch; \
	activity->hip_args.hipMemset2D.value = (int) value; \
	activity->hip_args.hipMemset2D.width = (size_t) width; \
	activity->hip_args.hipMemset2D.height = (size_t) height; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArray_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArray_spt` function call.
 *
 * @struct args_hipMemcpy2DToArray_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArray_spt (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy2DToArray_spt_t {
	struct hipArray * dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DToArray_spt(activity) { \
	activity->hip_args.hipMemcpy2DToArray_spt.dst = (struct hipArray *) dst; \
	activity->hip_args.hipMemcpy2DToArray_spt.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpy2DToArray_spt.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpy2DToArray_spt.src = (void *) src; \
	activity->hip_args.hipMemcpy2DToArray_spt.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2DToArray_spt.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DToArray_spt.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DToArray_spt.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemAllocHost` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAllocHost` function call.
 *
 * @struct args_hipMemAllocHost_t
 *
 * @note 
 *	hipError_t
 *	hipMemAllocHost (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *	)
 */
struct args_hipMemAllocHost_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemAllocHost(activity) { \
	activity->hip_args.hipMemAllocHost.ptr = (void **) ptr; \
	activity->hip_args.hipMemAllocHost.size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipMemAllocHost(args) { \
	if (args->hipMemAllocHost.ptr != NULL) { \
		args->hipMemAllocHost.ptr__ref.ptr1 = *args->hipMemAllocHost.ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipPointerSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPointerSetAttribute` function call.
 *
 * @struct args_hipPointerSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipPointerSetAttribute (
 *			const void * value (const void *)
 *			hipPointer_attribute attribute (enum hipPointer_attribute)
 *			hipDeviceptr_t ptr (void *)
 *	)
 */
struct args_hipPointerSetAttribute_t {
	void * value;
	hipPointer_attribute attribute;
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipPointerSetAttribute(activity) { \
	activity->hip_args.hipPointerSetAttribute.value = (void *) value; \
	activity->hip_args.hipPointerSetAttribute.attribute = (hipPointer_attribute) attribute; \
	activity->hip_args.hipPointerSetAttribute.ptr = (void *) ptr; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphHostNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphHostNodeGetParams` function call.
 *
 * @struct args_hipGraphHostNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphHostNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipHostNodeParams * pNodeParams (struct hipHostNodeParams*)
 *	)
 */
struct args_hipGraphHostNodeGetParams_t {
	struct hipGraphNode * node;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphHostNodeGetParams(activity) { \
	activity->hip_args.hipGraphHostNodeGetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphHostNodeGetParams.pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphHostNodeGetParams(args) { \
	if (args->hipGraphHostNodeGetParams.pNodeParams != NULL) { \
		args->hipGraphHostNodeGetParams.pNodeParams__ref.val = *args->hipGraphHostNodeGetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3D` function call.
 *
 * @struct args_hipMemset3D_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3D (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *	)
 */
struct args_hipMemset3D_t {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset3D(activity) { \
	activity->hip_args.hipMemset3D.pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	activity->hip_args.hipMemset3D.value = (int) value; \
	activity->hip_args.hipMemset3D.extent = (hipExtent) extent; \
};

/**
 * @brief Structure to hold the arguments for the `hipDestroyTextureObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroyTextureObject` function call.
 *
 * @struct args_hipDestroyTextureObject_t
 *
 * @note 
 *	hipError_t
 *	hipDestroyTextureObject (
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
struct args_hipDestroyTextureObject_t {
	struct __hip_texture * textureObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDestroyTextureObject(activity) { \
	activity->hip_args.hipDestroyTextureObject.textureObject = (struct __hip_texture *) textureObject; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemAdvise` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAdvise` function call.
 *
 * @struct args_hipMemAdvise_t
 *
 * @note 
 *	hipError_t
 *	hipMemAdvise (
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *			hipMemoryAdvise advice (enum hipMemoryAdvise)
 *			int device (int)
 *	)
 */
struct args_hipMemAdvise_t {
	void * dev_ptr;
	size_t count;
	hipMemoryAdvise advice;
	int device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemAdvise(activity) { \
	activity->hip_args.hipMemAdvise.dev_ptr = (void *) dev_ptr; \
	activity->hip_args.hipMemAdvise.count = (size_t) count; \
	activity->hip_args.hipMemAdvise.advice = (hipMemoryAdvise) advice; \
	activity->hip_args.hipMemAdvise.device = (int) device; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxGetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetCacheConfig` function call.
 *
 * @struct args_hipCtxGetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetCacheConfig (
 *			hipFuncCache_t * cacheConfig (enum hipFuncCache_t*)
 *	)
 */
struct args_hipCtxGetCacheConfig_t {
	hipFuncCache_t * cacheConfig;
	struct {
		hipFuncCache_t val;
	} cacheConfig__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxGetCacheConfig(activity) { \
	activity->hip_args.hipCtxGetCacheConfig.cacheConfig = (hipFuncCache_t *) cacheConfig; \
};

#define GET_PTRS_VALUE_hipCtxGetCacheConfig(args) { \
	if (args->hipCtxGetCacheConfig.cacheConfig != NULL) { \
		args->hipCtxGetCacheConfig.cacheConfig__ref.val = *args->hipCtxGetCacheConfig.cacheConfig; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvPointerGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvPointerGetAttributes` function call.
 *
 * @struct args_hipDrvPointerGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipDrvPointerGetAttributes (
 *			unsigned int numAttributes (unsigned int)
 *			hipPointer_attribute * attributes (enum hipPointer_attribute*)
 *			void ** data (void **)
 *			hipDeviceptr_t ptr (void *)
 *	)
 */
struct args_hipDrvPointerGetAttributes_t {
	unsigned int numAttributes;
	hipPointer_attribute * attributes;
	struct {
		hipPointer_attribute val;
	} attributes__ref;
	void ** data;
	struct {
		void* ptr1;
	} data__ref;
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvPointerGetAttributes(activity) { \
	activity->hip_args.hipDrvPointerGetAttributes.numAttributes = (unsigned int) numAttributes; \
	activity->hip_args.hipDrvPointerGetAttributes.attributes = (hipPointer_attribute *) attributes; \
	activity->hip_args.hipDrvPointerGetAttributes.data = (void **) data; \
	activity->hip_args.hipDrvPointerGetAttributes.ptr = (void *) ptr; \
};

#define GET_PTRS_VALUE_hipDrvPointerGetAttributes(args) { \
	if (args->hipDrvPointerGetAttributes.attributes != NULL) { \
		args->hipDrvPointerGetAttributes.attributes__ref.val = *args->hipDrvPointerGetAttributes.attributes; \
	} \
	if (args->hipDrvPointerGetAttributes.data != NULL) { \
		args->hipDrvPointerGetAttributes.data__ref.ptr1 = *args->hipDrvPointerGetAttributes.data; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleLaunchCooperativeKernelMultiDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLaunchCooperativeKernelMultiDevice` function call.
 *
 * @struct args_hipModuleLaunchCooperativeKernelMultiDevice_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLaunchCooperativeKernelMultiDevice (
 *			hipFunctionLaunchParams * launchParamsList (struct hipFunctionLaunchParams_t*)
 *			unsigned int numDevices (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipModuleLaunchCooperativeKernelMultiDevice_t {
	hipFunctionLaunchParams * launchParamsList;
	struct {
		hipFunctionLaunchParams val;
	} launchParamsList__ref;
	unsigned int numDevices;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleLaunchCooperativeKernelMultiDevice(activity) { \
	activity->hip_args.hipModuleLaunchCooperativeKernelMultiDevice.launchParamsList = (hipFunctionLaunchParams *) launchParamsList; \
	activity->hip_args.hipModuleLaunchCooperativeKernelMultiDevice.numDevices = (unsigned int) numDevices; \
	activity->hip_args.hipModuleLaunchCooperativeKernelMultiDevice.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipModuleLaunchCooperativeKernelMultiDevice(args) { \
	if (args->hipModuleLaunchCooperativeKernelMultiDevice.launchParamsList != NULL) { \
		args->hipModuleLaunchCooperativeKernelMultiDevice.launchParamsList__ref.val = *args->hipModuleLaunchCooperativeKernelMultiDevice.launchParamsList; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleGetGlobal` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleGetGlobal` function call.
 *
 * @struct args_hipModuleGetGlobal_t
 *
 * @note 
 *	hipError_t
 *	hipModuleGetGlobal (
 *			hipDeviceptr_t * dptr (void **)
 *			size_t * bytes (unsigned long*)
 *			hipModule_t hmod (struct ihipModule_t *)
 *			const char * name (const char *)
 *	)
 */
struct args_hipModuleGetGlobal_t {
	void ** dptr;
	struct {
		void* ptr1;
	} dptr__ref;
	size_t * bytes;
	struct {
		size_t val;
	} bytes__ref;
	struct ihipModule_t * hmod;
	char * name;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} name__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleGetGlobal(activity) { \
	activity->hip_args.hipModuleGetGlobal.dptr = (void **) dptr; \
	activity->hip_args.hipModuleGetGlobal.bytes = (size_t *) bytes; \
	activity->hip_args.hipModuleGetGlobal.hmod = (struct ihipModule_t *) hmod; \
	activity->hip_args.hipModuleGetGlobal.name = (char *) name; \
};

#define GET_PTRS_VALUE_hipModuleGetGlobal(args) { \
	if (args->hipModuleGetGlobal.dptr != NULL) { \
		args->hipModuleGetGlobal.dptr__ref.ptr1 = *args->hipModuleGetGlobal.dptr; \
	} \
	if (args->hipModuleGetGlobal.bytes != NULL) { \
		args->hipModuleGetGlobal.bytes__ref.val = *args->hipModuleGetGlobal.bytes; \
	} \
	if (args->hipModuleGetGlobal.name != NULL) { \
		strncpy(args->hipModuleGetGlobal.name__ref.val, args->hipModuleGetGlobal.name, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphEventRecordNodeGetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventRecordNodeGetEvent` function call.
 *
 * @struct args_hipGraphEventRecordNodeGetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventRecordNodeGetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t * event_out (struct ihipEvent_t **)
 *	)
 */
struct args_hipGraphEventRecordNodeGetEvent_t {
	struct hipGraphNode * node;
	struct ihipEvent_t ** event_out;
	struct {
		void* ptr1;
	} event_out__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphEventRecordNodeGetEvent(activity) { \
	activity->hip_args.hipGraphEventRecordNodeGetEvent.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphEventRecordNodeGetEvent.event_out = (struct ihipEvent_t **) event_out; \
};

#define GET_PTRS_VALUE_hipGraphEventRecordNodeGetEvent(args) { \
	if (args->hipGraphEventRecordNodeGetEvent.event_out != NULL) { \
		args->hipGraphEventRecordNodeGetEvent.event_out__ref.ptr1 = *args->hipGraphEventRecordNodeGetEvent.event_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphInstantiate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphInstantiate` function call.
 *
 * @struct args_hipGraphInstantiate_t
 *
 * @note 
 *	hipError_t
 *	hipGraphInstantiate (
 *			hipGraphExec_t * pGraphExec (struct hipGraphExec **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * pErrorNode (struct hipGraphNode **)
 *			char * pLogBuffer (char *)
 *			size_t bufferSize (unsigned long)
 *	)
 */
struct args_hipGraphInstantiate_t {
	struct hipGraphExec ** pGraphExec;
	struct {
		void* ptr1;
	} pGraphExec__ref;
	struct ihipGraph * graph;
	struct hipGraphNode ** pErrorNode;
	struct {
		void* ptr1;
	} pErrorNode__ref;
	char * pLogBuffer;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} pLogBuffer__ref;
	size_t bufferSize;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphInstantiate(activity) { \
	activity->hip_args.hipGraphInstantiate.pGraphExec = (struct hipGraphExec **) pGraphExec; \
	activity->hip_args.hipGraphInstantiate.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphInstantiate.pErrorNode = (struct hipGraphNode **) pErrorNode; \
	activity->hip_args.hipGraphInstantiate.pLogBuffer = (char *) pLogBuffer; \
	activity->hip_args.hipGraphInstantiate.bufferSize = (size_t) bufferSize; \
};

#define GET_PTRS_VALUE_hipGraphInstantiate(args) { \
	if (args->hipGraphInstantiate.pGraphExec != NULL) { \
		args->hipGraphInstantiate.pGraphExec__ref.ptr1 = *args->hipGraphInstantiate.pGraphExec; \
	} \
	if (args->hipGraphInstantiate.pErrorNode != NULL) { \
		args->hipGraphInstantiate.pErrorNode__ref.ptr1 = *args->hipGraphInstantiate.pErrorNode; \
	} \
	if (args->hipGraphInstantiate.pLogBuffer != NULL) { \
		strncpy(args->hipGraphInstantiate.pLogBuffer__ref.val, args->hipGraphInstantiate.pLogBuffer, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphRetainUserObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphRetainUserObject` function call.
 *
 * @struct args_hipGraphRetainUserObject_t
 *
 * @note 
 *	hipError_t
 *	hipGraphRetainUserObject (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipGraphRetainUserObject_t {
	struct ihipGraph * graph;
	struct hipUserObject * object;
	unsigned int count;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphRetainUserObject(activity) { \
	activity->hip_args.hipGraphRetainUserObject.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphRetainUserObject.object = (struct hipUserObject *) object; \
	activity->hip_args.hipGraphRetainUserObject.count = (unsigned int) count; \
	activity->hip_args.hipGraphRetainUserObject.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemAllocNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemAllocNodeGetParams` function call.
 *
 * @struct args_hipGraphMemAllocNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemAllocNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemAllocNodeParams * pNodeParams (struct hipMemAllocNodeParams*)
 *	)
 */
struct args_hipGraphMemAllocNodeGetParams_t {
	struct hipGraphNode * node;
	hipMemAllocNodeParams * pNodeParams;
	struct {
		hipMemAllocNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemAllocNodeGetParams(activity) { \
	activity->hip_args.hipGraphMemAllocNodeGetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemAllocNodeGetParams.pNodeParams = (hipMemAllocNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemAllocNodeGetParams(args) { \
	if (args->hipGraphMemAllocNodeGetParams.pNodeParams != NULL) { \
		args->hipGraphMemAllocNodeGetParams.pNodeParams__ref.val = *args->hipGraphMemAllocNodeGetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *			unsigned long long * pId (unsigned long long *)
 *	)
 */
struct args_hipStreamGetCaptureInfo_t {
	struct ihipStream_t * stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	unsigned long long * pId;
	struct {
		unsigned long long val;
	} pId__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo(activity) { \
	activity->hip_args.hipStreamGetCaptureInfo.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetCaptureInfo.pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
	activity->hip_args.hipStreamGetCaptureInfo.pId = (unsigned long long *) pId; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo(args) { \
	if (args->hipStreamGetCaptureInfo.pCaptureStatus != NULL) { \
		args->hipStreamGetCaptureInfo.pCaptureStatus__ref.val = *args->hipStreamGetCaptureInfo.pCaptureStatus; \
	} \
	if (args->hipStreamGetCaptureInfo.pId != NULL) { \
		args->hipStreamGetCaptureInfo.pId__ref.val = *args->hipStreamGetCaptureInfo.pId; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxPopCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxPopCurrent` function call.
 *
 * @struct args_hipCtxPopCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxPopCurrent (
 *			hipCtx_t * ctx (struct ihipCtx_t **)
 *	)
 */
struct args_hipCtxPopCurrent_t {
	struct ihipCtx_t ** ctx;
	struct {
		void* ptr1;
	} ctx__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxPopCurrent(activity) { \
	activity->hip_args.hipCtxPopCurrent.ctx = (struct ihipCtx_t **) ctx; \
};

#define GET_PTRS_VALUE_hipCtxPopCurrent(args) { \
	if (args->hipCtxPopCurrent.ctx != NULL) { \
		args->hipCtxPopCurrent.ctx__ref.ptr1 = *args->hipCtxPopCurrent.ctx; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipPointerGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPointerGetAttributes` function call.
 *
 * @struct args_hipPointerGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipPointerGetAttributes (
 *			hipPointerAttribute_t * attributes (struct hipPointerAttribute_t*)
 *			const void * ptr (const void *)
 *	)
 */
struct args_hipPointerGetAttributes_t {
	hipPointerAttribute_t * attributes;
	struct {
		hipPointerAttribute_t val;
	} attributes__ref;
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipPointerGetAttributes(activity) { \
	activity->hip_args.hipPointerGetAttributes.attributes = (hipPointerAttribute_t *) attributes; \
	activity->hip_args.hipPointerGetAttributes.ptr = (void *) ptr; \
};

#define GET_PTRS_VALUE_hipPointerGetAttributes(args) { \
	if (args->hipPointerGetAttributes.attributes != NULL) { \
		args->hipPointerGetAttributes.attributes__ref.val = *args->hipPointerGetAttributes.attributes; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceDisablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceDisablePeerAccess` function call.
 *
 * @struct args_hipDeviceDisablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceDisablePeerAccess (
 *			int peerDeviceId (int)
 *	)
 */
struct args_hipDeviceDisablePeerAccess_t {
	int peerDeviceId;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceDisablePeerAccess(activity) { \
	activity->hip_args.hipDeviceDisablePeerAccess.peerDeviceId = (int) peerDeviceId; \
};

/**
 * @brief Structure to hold the arguments for the `hipMallocPitch` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocPitch` function call.
 *
 * @struct args_hipMallocPitch_t
 *
 * @note 
 *	hipError_t
 *	hipMallocPitch (
 *			void ** ptr (void **)
 *			size_t * pitch (unsigned long*)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *	)
 */
struct args_hipMallocPitch_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t * pitch;
	struct {
		size_t val;
	} pitch__ref;
	size_t width;
	size_t height;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMallocPitch(activity) { \
	activity->hip_args.hipMallocPitch.ptr = (void **) ptr; \
	activity->hip_args.hipMallocPitch.pitch = (size_t *) pitch; \
	activity->hip_args.hipMallocPitch.width = (size_t) width; \
	activity->hip_args.hipMallocPitch.height = (size_t) height; \
};

#define GET_PTRS_VALUE_hipMallocPitch(args) { \
	if (args->hipMallocPitch.ptr != NULL) { \
		args->hipMallocPitch.ptr__ref.ptr1 = *args->hipMallocPitch.ptr; \
	} \
	if (args->hipMallocPitch.pitch != NULL) { \
		args->hipMallocPitch.pitch__ref.val = *args->hipMallocPitch.pitch; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArrayAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArrayAsync` function call.
 *
 * @struct args_hipMemcpy2DFromArrayAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArrayAsync (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy2DFromArrayAsync_t {
	void * dst;
	size_t dpitch;
	struct hipArray * src;
	size_t wOffset;
	size_t hOffset;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DFromArrayAsync(activity) { \
	activity->hip_args.hipMemcpy2DFromArrayAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.src = (struct hipArray *) src; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpy2DFromArrayAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceComputeCapability` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceComputeCapability` function call.
 *
 * @struct args_hipDeviceComputeCapability_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceComputeCapability (
 *			int * major (int *)
 *			int * minor (int *)
 *			hipDevice_t device (int)
 *	)
 */
struct args_hipDeviceComputeCapability_t {
	int * major;
	struct {
		int val;
	} major__ref;
	int * minor;
	struct {
		int val;
	} minor__ref;
	hipDevice_t device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceComputeCapability(activity) { \
	activity->hip_args.hipDeviceComputeCapability.major = (int *) major; \
	activity->hip_args.hipDeviceComputeCapability.minor = (int *) minor; \
	activity->hip_args.hipDeviceComputeCapability.device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceComputeCapability(args) { \
	if (args->hipDeviceComputeCapability.major != NULL) { \
		args->hipDeviceComputeCapability.major__ref.val = *args->hipDeviceComputeCapability.major; \
	} \
	if (args->hipDeviceComputeCapability.minor != NULL) { \
		args->hipDeviceComputeCapability.minor__ref.val = *args->hipDeviceComputeCapability.minor; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoD` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoD` function call.
 *
 * @struct args_hipMemcpyHtoD_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoD (
 *			hipDeviceptr_t dst (void *)
 *			void * src (void *)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
struct args_hipMemcpyHtoD_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyHtoD(activity) { \
	activity->hip_args.hipMemcpyHtoD.dst = (void *) dst; \
	activity->hip_args.hipMemcpyHtoD.src = (void *) src; \
	activity->hip_args.hipMemcpyHtoD.sizeBytes = (size_t) sizeBytes; \
};

/**
 * @brief Structure to hold the arguments for the `hipOccupancyMaxActiveBlocksPerMultiprocessor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipOccupancyMaxActiveBlocksPerMultiprocessor` function call.
 *
 * @struct args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t
 *
 * @note 
 *	hipError_t
 *	hipOccupancyMaxActiveBlocksPerMultiprocessor (
 *			int * numBlocks (int *)
 *			const void * f (const void *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *	)
 */
struct args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	void * f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessor(activity) { \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks = (int *) numBlocks; \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessor.f = (void *) f; \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessor.blockSize = (int) blockSize; \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessor.dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
};

#define GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessor(args) { \
	if (args->hipOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks != NULL) { \
		args->hipOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks__ref.val = *args->hipOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipSignalExternalSemaphoresAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSignalExternalSemaphoresAsync` function call.
 *
 * @struct args_hipSignalExternalSemaphoresAsync_t
 *
 * @note 
 *	hipError_t
 *	hipSignalExternalSemaphoresAsync (
 *			const hipExternalSemaphore_t * extSemArray (const void * *)
 *			const hipExternalSemaphoreSignalParams * paramsArray (const struct hipExternalSemaphoreSignalParams_st *)
 *			unsigned int numExtSems (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipSignalExternalSemaphoresAsync_t {
	void * * extSemArray;
	struct {
		void* ptr1;
	} extSemArray__ref;
	hipExternalSemaphoreSignalParams * paramsArray;
	struct {
		hipExternalSemaphoreSignalParams val;
	} paramsArray__ref;
	unsigned int numExtSems;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipSignalExternalSemaphoresAsync(activity) { \
	activity->hip_args.hipSignalExternalSemaphoresAsync.extSemArray = (void * *) extSemArray; \
	activity->hip_args.hipSignalExternalSemaphoresAsync.paramsArray = (hipExternalSemaphoreSignalParams *) paramsArray; \
	activity->hip_args.hipSignalExternalSemaphoresAsync.numExtSems = (unsigned int) numExtSems; \
	activity->hip_args.hipSignalExternalSemaphoresAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipSignalExternalSemaphoresAsync(args) { \
	if (args->hipSignalExternalSemaphoresAsync.extSemArray != NULL) { \
		args->hipSignalExternalSemaphoresAsync.extSemArray__ref.ptr1 = *args->hipSignalExternalSemaphoresAsync.extSemArray; \
	} \
	if (args->hipSignalExternalSemaphoresAsync.paramsArray != NULL) { \
		args->hipSignalExternalSemaphoresAsync.paramsArray__ref.val = *args->hipSignalExternalSemaphoresAsync.paramsArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipArray3DGetDescriptor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArray3DGetDescriptor` function call.
 *
 * @struct args_hipArray3DGetDescriptor_t
 *
 * @note 
 *	hipError_t
 *	hipArray3DGetDescriptor (
 *			HIP_ARRAY3D_DESCRIPTOR * pArrayDescriptor (struct HIP_ARRAY3D_DESCRIPTOR*)
 *			hipArray_t array (struct hipArray *)
 *	)
 */
struct args_hipArray3DGetDescriptor_t {
	HIP_ARRAY3D_DESCRIPTOR * pArrayDescriptor;
	struct {
		HIP_ARRAY3D_DESCRIPTOR val;
	} pArrayDescriptor__ref;
	struct hipArray * array;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipArray3DGetDescriptor(activity) { \
	activity->hip_args.hipArray3DGetDescriptor.pArrayDescriptor = (HIP_ARRAY3D_DESCRIPTOR *) pArrayDescriptor; \
	activity->hip_args.hipArray3DGetDescriptor.array = (struct hipArray *) array; \
};

#define GET_PTRS_VALUE_hipArray3DGetDescriptor(args) { \
	if (args->hipArray3DGetDescriptor.pArrayDescriptor != NULL) { \
		args->hipArray3DGetDescriptor.pArrayDescriptor__ref.val = *args->hipArray3DGetDescriptor.pArrayDescriptor; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `__hipPopCallConfiguration` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `__hipPopCallConfiguration` function call.
 *
 * @struct args___hipPopCallConfiguration_t
 *
 * @note 
 *	hipError_t
 *	__hipPopCallConfiguration (
 *			dim3 * gridDim (struct dim3*)
 *			dim3 * blockDim (struct dim3*)
 *			size_t * sharedMem (unsigned long*)
 *			hipStream_t * stream (struct ihipStream_t **)
 *	)
 */
struct args___hipPopCallConfiguration_t {
	dim3 * gridDim;
	struct {
		dim3 val;
	} gridDim__ref;
	dim3 * blockDim;
	struct {
		dim3 val;
	} blockDim__ref;
	size_t * sharedMem;
	struct {
		size_t val;
	} sharedMem__ref;
	struct ihipStream_t ** stream;
	struct {
		void* ptr1;
	} stream__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE___hipPopCallConfiguration(activity) { \
	activity->hip_args.__hipPopCallConfiguration.gridDim = (dim3 *) gridDim; \
	activity->hip_args.__hipPopCallConfiguration.blockDim = (dim3 *) blockDim; \
	activity->hip_args.__hipPopCallConfiguration.sharedMem = (size_t *) sharedMem; \
	activity->hip_args.__hipPopCallConfiguration.stream = (struct ihipStream_t **) stream; \
};

#define GET_PTRS_VALUE___hipPopCallConfiguration(args) { \
	if (args->__hipPopCallConfiguration.gridDim != NULL) { \
		args->__hipPopCallConfiguration.gridDim__ref.val = *args->__hipPopCallConfiguration.gridDim; \
	} \
	if (args->__hipPopCallConfiguration.blockDim != NULL) { \
		args->__hipPopCallConfiguration.blockDim__ref.val = *args->__hipPopCallConfiguration.blockDim; \
	} \
	if (args->__hipPopCallConfiguration.sharedMem != NULL) { \
		args->__hipPopCallConfiguration.sharedMem__ref.val = *args->__hipPopCallConfiguration.sharedMem; \
	} \
	if (args->__hipPopCallConfiguration.stream != NULL) { \
		args->__hipPopCallConfiguration.stream__ref.ptr1 = *args->__hipPopCallConfiguration.stream; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxRelease` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxRelease` function call.
 *
 * @struct args_hipDevicePrimaryCtxRelease_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxRelease (
 *			hipDevice_t dev (int)
 *	)
 */
struct args_hipDevicePrimaryCtxRelease_t {
	hipDevice_t dev;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDevicePrimaryCtxRelease(activity) { \
	activity->hip_args.hipDevicePrimaryCtxRelease.dev = (hipDevice_t) dev; \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchCooperativeKernelMultiDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchCooperativeKernelMultiDevice` function call.
 *
 * @struct args_hipLaunchCooperativeKernelMultiDevice_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchCooperativeKernelMultiDevice (
 *			hipLaunchParams * launchParamsList (struct hipLaunchParams_t*)
 *			int numDevices (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipLaunchCooperativeKernelMultiDevice_t {
	hipLaunchParams * launchParamsList;
	struct {
		hipLaunchParams val;
	} launchParamsList__ref;
	int numDevices;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchCooperativeKernelMultiDevice(activity) { \
	activity->hip_args.hipLaunchCooperativeKernelMultiDevice.launchParamsList = (hipLaunchParams *) launchParamsList; \
	activity->hip_args.hipLaunchCooperativeKernelMultiDevice.numDevices = (int) numDevices; \
	activity->hip_args.hipLaunchCooperativeKernelMultiDevice.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipLaunchCooperativeKernelMultiDevice(args) { \
	if (args->hipLaunchCooperativeKernelMultiDevice.launchParamsList != NULL) { \
		args->hipLaunchCooperativeKernelMultiDevice.launchParamsList__ref.val = *args->hipLaunchCooperativeKernelMultiDevice.launchParamsList; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipFreeArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeArray` function call.
 *
 * @struct args_hipFreeArray_t
 *
 * @note 
 *	hipError_t
 *	hipFreeArray (
 *			hipArray_t array (struct hipArray *)
 *	)
 */
struct args_hipFreeArray_t {
	struct hipArray * array;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFreeArray(activity) { \
	activity->hip_args.hipFreeArray.array = (struct hipArray *) array; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemsetNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemsetNodeSetParams` function call.
 *
 * @struct args_hipGraphMemsetNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemsetNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipMemsetParams * pNodeParams (const struct hipMemsetParams *)
 *	)
 */
struct args_hipGraphMemsetNodeSetParams_t {
	struct hipGraphNode * node;
	hipMemsetParams * pNodeParams;
	struct {
		hipMemsetParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemsetNodeSetParams(activity) { \
	activity->hip_args.hipGraphMemsetNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemsetNodeSetParams.pNodeParams = (hipMemsetParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemsetNodeSetParams(args) { \
	if (args->hipGraphMemsetNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphMemsetNodeSetParams.pNodeParams__ref.val = *args->hipGraphMemsetNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolSetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolSetAccess` function call.
 *
 * @struct args_hipMemPoolSetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolSetAccess (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			const hipMemAccessDesc * desc_list (const struct hipMemAccessDesc *)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemPoolSetAccess_t {
	struct ihipMemPoolHandle_t * mem_pool;
	hipMemAccessDesc * desc_list;
	struct {
		hipMemAccessDesc val;
	} desc_list__ref;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolSetAccess(activity) { \
	activity->hip_args.hipMemPoolSetAccess.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMemPoolSetAccess.desc_list = (hipMemAccessDesc *) desc_list; \
	activity->hip_args.hipMemPoolSetAccess.count = (size_t) count; \
};

#define GET_PTRS_VALUE_hipMemPoolSetAccess(args) { \
	if (args->hipMemPoolSetAccess.desc_list != NULL) { \
		args->hipMemPoolSetAccess.desc_list__ref.val = *args->hipMemPoolSetAccess.desc_list; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetStreamDeviceId` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetStreamDeviceId` function call.
 *
 * @struct args_hipGetStreamDeviceId_t
 *
 * @note 
 *	int
 *	hipGetStreamDeviceId (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipGetStreamDeviceId_t {
	struct ihipStream_t * stream;
	int retval;
};

#define GET_ARGS_VALUE_hipGetStreamDeviceId(activity) { \
	activity->hip_args.hipGetStreamDeviceId.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipExtStreamCreateWithCUMask` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtStreamCreateWithCUMask` function call.
 *
 * @struct args_hipExtStreamCreateWithCUMask_t
 *
 * @note 
 *	hipError_t
 *	hipExtStreamCreateWithCUMask (
 *			hipStream_t * stream (struct ihipStream_t **)
 *			uint32_t cuMaskSize (unsigned int)
 *			const uint32_t * cuMask (const unsigned int *)
 *	)
 */
struct args_hipExtStreamCreateWithCUMask_t {
	struct ihipStream_t ** stream;
	struct {
		void* ptr1;
	} stream__ref;
	uint32_t cuMaskSize;
	uint32_t * cuMask;
	struct {
		uint32_t val;
	} cuMask__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExtStreamCreateWithCUMask(activity) { \
	activity->hip_args.hipExtStreamCreateWithCUMask.stream = (struct ihipStream_t **) stream; \
	activity->hip_args.hipExtStreamCreateWithCUMask.cuMaskSize = (uint32_t) cuMaskSize; \
	activity->hip_args.hipExtStreamCreateWithCUMask.cuMask = (uint32_t *) cuMask; \
};

#define GET_PTRS_VALUE_hipExtStreamCreateWithCUMask(args) { \
	if (args->hipExtStreamCreateWithCUMask.stream != NULL) { \
		args->hipExtStreamCreateWithCUMask.stream__ref.ptr1 = *args->hipExtStreamCreateWithCUMask.stream; \
	} \
	if (args->hipExtStreamCreateWithCUMask.cuMask != NULL) { \
		args->hipExtStreamCreateWithCUMask.cuMask__ref.val = *args->hipExtStreamCreateWithCUMask.cuMask; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetTextureObjectTextureDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureObjectTextureDesc` function call.
 *
 * @struct args_hipGetTextureObjectTextureDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureObjectTextureDesc (
 *			hipTextureDesc * pTexDesc (struct hipTextureDesc*)
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
struct args_hipGetTextureObjectTextureDesc_t {
	hipTextureDesc * pTexDesc;
	struct {
		hipTextureDesc val;
	} pTexDesc__ref;
	struct __hip_texture * textureObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetTextureObjectTextureDesc(activity) { \
	activity->hip_args.hipGetTextureObjectTextureDesc.pTexDesc = (hipTextureDesc *) pTexDesc; \
	activity->hip_args.hipGetTextureObjectTextureDesc.textureObject = (struct __hip_texture *) textureObject; \
};

#define GET_PTRS_VALUE_hipGetTextureObjectTextureDesc(args) { \
	if (args->hipGetTextureObjectTextureDesc.pTexDesc != NULL) { \
		args->hipGetTextureObjectTextureDesc.pTexDesc__ref.val = *args->hipGetTextureObjectTextureDesc.pTexDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipEventRecord_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventRecord_spt` function call.
 *
 * @struct args_hipEventRecord_spt_t
 *
 * @note 
 *	hipError_t
 *	hipEventRecord_spt (
 *			hipEvent_t event (struct ihipEvent_t *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipEventRecord_spt_t {
	struct ihipEvent_t * event;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventRecord_spt(activity) { \
	activity->hip_args.hipEventRecord_spt.event = (struct ihipEvent_t *) event; \
	activity->hip_args.hipEventRecord_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipConfigureCall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipConfigureCall` function call.
 *
 * @struct args_hipConfigureCall_t
 *
 * @note 
 *	hipError_t
 *	hipConfigureCall (
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDim (struct dim3)
 *			size_t sharedMem (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipConfigureCall_t {
	dim3 gridDim;
	dim3 blockDim;
	size_t sharedMem;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipConfigureCall(activity) { \
	activity->hip_args.hipConfigureCall.gridDim = (dim3) gridDim; \
	activity->hip_args.hipConfigureCall.blockDim = (dim3) blockDim; \
	activity->hip_args.hipConfigureCall.sharedMem = (size_t) sharedMem; \
	activity->hip_args.hipConfigureCall.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromArray_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromArray_spt` function call.
 *
 * @struct args_hipMemcpyFromArray_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromArray_spt (
 *			void * dst (void *)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffsetSrc (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpyFromArray_spt_t {
	void * dst;
	struct hipArray * src;
	size_t wOffsetSrc;
	size_t hOffset;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyFromArray_spt(activity) { \
	activity->hip_args.hipMemcpyFromArray_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpyFromArray_spt.src = (struct hipArray *) src; \
	activity->hip_args.hipMemcpyFromArray_spt.wOffsetSrc = (size_t) wOffsetSrc; \
	activity->hip_args.hipMemcpyFromArray_spt.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpyFromArray_spt.count = (size_t) count; \
	activity->hip_args.hipMemcpyFromArray_spt.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleGetFunction` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleGetFunction` function call.
 *
 * @struct args_hipModuleGetFunction_t
 *
 * @note 
 *	hipError_t
 *	hipModuleGetFunction (
 *			hipFunction_t * function (struct ihipModuleSymbol_t **)
 *			hipModule_t module (struct ihipModule_t *)
 *			const char * kname (const char *)
 *	)
 */
struct args_hipModuleGetFunction_t {
	struct ihipModuleSymbol_t ** function;
	struct {
		void* ptr1;
	} function__ref;
	struct ihipModule_t * module;
	char * kname;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} kname__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleGetFunction(activity) { \
	activity->hip_args.hipModuleGetFunction.function = (struct ihipModuleSymbol_t **) function; \
	activity->hip_args.hipModuleGetFunction.module = (struct ihipModule_t *) module; \
	activity->hip_args.hipModuleGetFunction.kname = (char *) kname; \
};

#define GET_PTRS_VALUE_hipModuleGetFunction(args) { \
	if (args->hipModuleGetFunction.function != NULL) { \
		args->hipModuleGetFunction.function__ref.ptr1 = *args->hipModuleGetFunction.function; \
	} \
	if (args->hipModuleGetFunction.kname != NULL) { \
		strncpy(args->hipModuleGetFunction.kname__ref.val, args->hipModuleGetFunction.kname, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipFuncSetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncSetCacheConfig` function call.
 *
 * @struct args_hipFuncSetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipFuncSetCacheConfig (
 *			const void * func (const void *)
 *			hipFuncCache_t config (enum hipFuncCache_t)
 *	)
 */
struct args_hipFuncSetCacheConfig_t {
	void * func;
	hipFuncCache_t config;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFuncSetCacheConfig(activity) { \
	activity->hip_args.hipFuncSetCacheConfig.func = (void *) func; \
	activity->hip_args.hipFuncSetCacheConfig.config = (hipFuncCache_t) config; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetLimit` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetLimit` function call.
 *
 * @struct args_hipDeviceGetLimit_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetLimit (
 *			size_t * pValue (unsigned long*)
 *			enum hipLimit_t limit (enum hipLimit_t)
 *	)
 */
struct args_hipDeviceGetLimit_t {
	size_t * pValue;
	struct {
		size_t val;
	} pValue__ref;
	enum hipLimit_t limit;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetLimit(activity) { \
	activity->hip_args.hipDeviceGetLimit.pValue = (size_t *) pValue; \
	activity->hip_args.hipDeviceGetLimit.limit = (enum hipLimit_t) limit; \
};

#define GET_PTRS_VALUE_hipDeviceGetLimit(args) { \
	if (args->hipDeviceGetLimit.pValue != NULL) { \
		args->hipDeviceGetLimit.pValue__ref.val = *args->hipDeviceGetLimit.pValue; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMaxAnisotropy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMaxAnisotropy` function call.
 *
 * @struct args_hipTexRefGetMaxAnisotropy_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMaxAnisotropy (
 *			int * pmaxAnsio (int *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetMaxAnisotropy_t {
	int * pmaxAnsio;
	struct {
		int val;
	} pmaxAnsio__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetMaxAnisotropy(activity) { \
	activity->hip_args.hipTexRefGetMaxAnisotropy.pmaxAnsio = (int *) pmaxAnsio; \
	activity->hip_args.hipTexRefGetMaxAnisotropy.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMaxAnisotropy(args) { \
	if (args->hipTexRefGetMaxAnisotropy.pmaxAnsio != NULL) { \
		args->hipTexRefGetMaxAnisotropy.pmaxAnsio__ref.val = *args->hipTexRefGetMaxAnisotropy.pmaxAnsio; \
	} \
	if (args->hipTexRefGetMaxAnisotropy.texRef != NULL) { \
		args->hipTexRefGetMaxAnisotropy.texRef__ref.val = *args->hipTexRefGetMaxAnisotropy.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchKernel_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchKernel_spt` function call.
 *
 * @struct args_hipLaunchKernel_spt_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchKernel_spt (
 *			const void * function_address (const void *)
 *			dim3 numBlocks (struct dim3)
 *			dim3 dimBlocks (struct dim3)
 *			void ** args (void **)
 *			size_t sharedMemBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipLaunchKernel_spt_t {
	void * function_address;
	dim3 numBlocks;
	dim3 dimBlocks;
	void ** args;
	struct {
		void* ptr1;
	} args__ref;
	size_t sharedMemBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchKernel_spt(activity) { \
	activity->hip_args.hipLaunchKernel_spt.function_address = (void *) function_address; \
	activity->hip_args.hipLaunchKernel_spt.numBlocks = (dim3) numBlocks; \
	activity->hip_args.hipLaunchKernel_spt.dimBlocks = (dim3) dimBlocks; \
	activity->hip_args.hipLaunchKernel_spt.args = (void **) args; \
	activity->hip_args.hipLaunchKernel_spt.sharedMemBytes = (size_t) sharedMemBytes; \
	activity->hip_args.hipLaunchKernel_spt.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipLaunchKernel_spt(args) { \
	if (args->hipLaunchKernel_spt.args != NULL) { \
		args->hipLaunchKernel_spt.args__ref.ptr1 = *args->hipLaunchKernel_spt.args; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamBeginCaptureToGraph` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamBeginCaptureToGraph` function call.
 *
 * @struct args_hipStreamBeginCaptureToGraph_t
 *
 * @note 
 *	hipError_t
 *	hipStreamBeginCaptureToGraph (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * dependencies (const struct hipGraphNode * *)
 *			const hipGraphEdgeData * dependencyData (const struct hipGraphEdgeData *)
 *			size_t numDependencies (unsigned long)
 *			hipStreamCaptureMode mode (enum hipStreamCaptureMode)
 *	)
 */
struct args_hipStreamBeginCaptureToGraph_t {
	struct ihipStream_t * stream;
	struct ihipGraph * graph;
	struct hipGraphNode * * dependencies;
	struct {
		void* ptr1;
	} dependencies__ref;
	hipGraphEdgeData * dependencyData;
	struct {
		hipGraphEdgeData val;
	} dependencyData__ref;
	size_t numDependencies;
	hipStreamCaptureMode mode;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamBeginCaptureToGraph(activity) { \
	activity->hip_args.hipStreamBeginCaptureToGraph.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamBeginCaptureToGraph.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipStreamBeginCaptureToGraph.dependencies = (struct hipGraphNode * *) dependencies; \
	activity->hip_args.hipStreamBeginCaptureToGraph.dependencyData = (hipGraphEdgeData *) dependencyData; \
	activity->hip_args.hipStreamBeginCaptureToGraph.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipStreamBeginCaptureToGraph.mode = (hipStreamCaptureMode) mode; \
};

#define GET_PTRS_VALUE_hipStreamBeginCaptureToGraph(args) { \
	if (args->hipStreamBeginCaptureToGraph.dependencies != NULL) { \
		args->hipStreamBeginCaptureToGraph.dependencies__ref.ptr1 = *args->hipStreamBeginCaptureToGraph.dependencies; \
	} \
	if (args->hipStreamBeginCaptureToGraph.dependencyData != NULL) { \
		args->hipStreamBeginCaptureToGraph.dependencyData__ref.val = *args->hipStreamBeginCaptureToGraph.dependencyData; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetFormat` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetFormat` function call.
 *
 * @struct args_hipTexRefGetFormat_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetFormat (
 *			hipArray_Format * pFormat (enum hipArray_Format*)
 *			int * pNumChannels (int *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetFormat_t {
	hipArray_Format * pFormat;
	struct {
		hipArray_Format val;
	} pFormat__ref;
	int * pNumChannels;
	struct {
		int val;
	} pNumChannels__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetFormat(activity) { \
	activity->hip_args.hipTexRefGetFormat.pFormat = (hipArray_Format *) pFormat; \
	activity->hip_args.hipTexRefGetFormat.pNumChannels = (int *) pNumChannels; \
	activity->hip_args.hipTexRefGetFormat.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetFormat(args) { \
	if (args->hipTexRefGetFormat.pFormat != NULL) { \
		args->hipTexRefGetFormat.pFormat__ref.val = *args->hipTexRefGetFormat.pFormat; \
	} \
	if (args->hipTexRefGetFormat.pNumChannels != NULL) { \
		args->hipTexRefGetFormat.pNumChannels__ref.val = *args->hipTexRefGetFormat.pNumChannels; \
	} \
	if (args->hipTexRefGetFormat.texRef != NULL) { \
		args->hipTexRefGetFormat.texRef__ref.val = *args->hipTexRefGetFormat.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitValue64` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitValue64` function call.
 *
 * @struct args_hipStreamWaitValue64_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitValue64 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint64_t value (unsigned long)
 *			unsigned int flags (unsigned int)
 *			uint64_t mask (unsigned long)
 *	)
 */
struct args_hipStreamWaitValue64_t {
	struct ihipStream_t * stream;
	void * ptr;
	uint64_t value;
	unsigned int flags;
	uint64_t mask;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamWaitValue64(activity) { \
	activity->hip_args.hipStreamWaitValue64.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamWaitValue64.ptr = (void *) ptr; \
	activity->hip_args.hipStreamWaitValue64.value = (uint64_t) value; \
	activity->hip_args.hipStreamWaitValue64.flags = (unsigned int) flags; \
	activity->hip_args.hipStreamWaitValue64.mask = (uint64_t) mask; \
};

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxRetain` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxRetain` function call.
 *
 * @struct args_hipDevicePrimaryCtxRetain_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxRetain (
 *			hipCtx_t * pctx (struct ihipCtx_t **)
 *			hipDevice_t dev (int)
 *	)
 */
struct args_hipDevicePrimaryCtxRetain_t {
	struct ihipCtx_t ** pctx;
	struct {
		void* ptr1;
	} pctx__ref;
	hipDevice_t dev;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDevicePrimaryCtxRetain(activity) { \
	activity->hip_args.hipDevicePrimaryCtxRetain.pctx = (struct ihipCtx_t **) pctx; \
	activity->hip_args.hipDevicePrimaryCtxRetain.dev = (hipDevice_t) dev; \
};

#define GET_PTRS_VALUE_hipDevicePrimaryCtxRetain(args) { \
	if (args->hipDevicePrimaryCtxRetain.pctx != NULL) { \
		args->hipDevicePrimaryCtxRetain.pctx__ref.ptr1 = *args->hipDevicePrimaryCtxRetain.pctx; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMallocManaged` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocManaged` function call.
 *
 * @struct args_hipMallocManaged_t
 *
 * @note 
 *	hipError_t
 *	hipMallocManaged (
 *			void ** dev_ptr (void **)
 *			size_t size (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipMallocManaged_t {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	size_t size;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMallocManaged(activity) { \
	activity->hip_args.hipMallocManaged.dev_ptr = (void **) dev_ptr; \
	activity->hip_args.hipMallocManaged.size = (size_t) size; \
	activity->hip_args.hipMallocManaged.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMallocManaged(args) { \
	if (args->hipMallocManaged.dev_ptr != NULL) { \
		args->hipMallocManaged.dev_ptr__ref.ptr1 = *args->hipMallocManaged.dev_ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamCreateWithPriority` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamCreateWithPriority` function call.
 *
 * @struct args_hipStreamCreateWithPriority_t
 *
 * @note 
 *	hipError_t
 *	hipStreamCreateWithPriority (
 *			hipStream_t * stream (struct ihipStream_t **)
 *			unsigned int flags (unsigned int)
 *			int priority (int)
 *	)
 */
struct args_hipStreamCreateWithPriority_t {
	struct ihipStream_t ** stream;
	struct {
		void* ptr1;
	} stream__ref;
	unsigned int flags;
	int priority;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamCreateWithPriority(activity) { \
	activity->hip_args.hipStreamCreateWithPriority.stream = (struct ihipStream_t **) stream; \
	activity->hip_args.hipStreamCreateWithPriority.flags = (unsigned int) flags; \
	activity->hip_args.hipStreamCreateWithPriority.priority = (int) priority; \
};

#define GET_PTRS_VALUE_hipStreamCreateWithPriority(args) { \
	if (args->hipStreamCreateWithPriority.stream != NULL) { \
		args->hipStreamCreateWithPriority.stream__ref.ptr1 = *args->hipStreamCreateWithPriority.stream; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo_spt` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *			unsigned long long * pId (unsigned long long *)
 *	)
 */
struct args_hipStreamGetCaptureInfo_spt_t {
	struct ihipStream_t * stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	unsigned long long * pId;
	struct {
		unsigned long long val;
	} pId__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo_spt(activity) { \
	activity->hip_args.hipStreamGetCaptureInfo_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetCaptureInfo_spt.pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
	activity->hip_args.hipStreamGetCaptureInfo_spt.pId = (unsigned long long *) pId; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo_spt(args) { \
	if (args->hipStreamGetCaptureInfo_spt.pCaptureStatus != NULL) { \
		args->hipStreamGetCaptureInfo_spt.pCaptureStatus__ref.val = *args->hipStreamGetCaptureInfo_spt.pCaptureStatus; \
	} \
	if (args->hipStreamGetCaptureInfo_spt.pId != NULL) { \
		args->hipStreamGetCaptureInfo_spt.pId__ref.val = *args->hipStreamGetCaptureInfo_spt.pId; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddHostNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddHostNode` function call.
 *
 * @struct args_hipGraphAddHostNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddHostNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipHostNodeParams * pNodeParams (const struct hipHostNodeParams *)
 *	)
 */
struct args_hipGraphAddHostNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddHostNode(activity) { \
	activity->hip_args.hipGraphAddHostNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddHostNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddHostNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddHostNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddHostNode.pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddHostNode(args) { \
	if (args->hipGraphAddHostNode.pGraphNode != NULL) { \
		args->hipGraphAddHostNode.pGraphNode__ref.ptr1 = *args->hipGraphAddHostNode.pGraphNode; \
	} \
	if (args->hipGraphAddHostNode.pDependencies != NULL) { \
		args->hipGraphAddHostNode.pDependencies__ref.ptr1 = *args->hipGraphAddHostNode.pDependencies; \
	} \
	if (args->hipGraphAddHostNode.pNodeParams != NULL) { \
		args->hipGraphAddHostNode.pNodeParams__ref.val = *args->hipGraphAddHostNode.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchCooperativeKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchCooperativeKernel` function call.
 *
 * @struct args_hipLaunchCooperativeKernel_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchCooperativeKernel (
 *			const void * f (const void *)
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDimX (struct dim3)
 *			void ** kernelParams (void **)
 *			unsigned int sharedMemBytes (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipLaunchCooperativeKernel_t {
	void * f;
	dim3 gridDim;
	dim3 blockDimX;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	unsigned int sharedMemBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchCooperativeKernel(activity) { \
	activity->hip_args.hipLaunchCooperativeKernel.f = (void *) f; \
	activity->hip_args.hipLaunchCooperativeKernel.gridDim = (dim3) gridDim; \
	activity->hip_args.hipLaunchCooperativeKernel.blockDimX = (dim3) blockDimX; \
	activity->hip_args.hipLaunchCooperativeKernel.kernelParams = (void **) kernelParams; \
	activity->hip_args.hipLaunchCooperativeKernel.sharedMemBytes = (unsigned int) sharedMemBytes; \
	activity->hip_args.hipLaunchCooperativeKernel.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipLaunchCooperativeKernel(args) { \
	if (args->hipLaunchCooperativeKernel.kernelParams != NULL) { \
		args->hipLaunchCooperativeKernel.kernelParams__ref.ptr1 = *args->hipLaunchCooperativeKernel.kernelParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipHostRegister` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostRegister` function call.
 *
 * @struct args_hipHostRegister_t
 *
 * @note 
 *	hipError_t
 *	hipHostRegister (
 *			void * hostPtr (void *)
 *			size_t sizeBytes (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipHostRegister_t {
	void * hostPtr;
	size_t sizeBytes;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipHostRegister(activity) { \
	activity->hip_args.hipHostRegister.hostPtr = (void *) hostPtr; \
	activity->hip_args.hipHostRegister.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipHostRegister.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipGetErrorName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetErrorName` function call.
 *
 * @struct args_hipGetErrorName_t
 *
 * @note 
 *	const char *
 *	hipGetErrorName (
 *			hipError_t hip_error (enum hipError_t)
 *	)
 */
struct args_hipGetErrorName_t {
	hipError_t hip_error;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
};

#define GET_ARGS_VALUE_hipGetErrorName(activity) { \
	activity->hip_args.hipGetErrorName.hip_error = (hipError_t) hip_error; \
};

#define GET_PTRS_RET_VALUE_hipGetErrorName(args) { \
	if (args->hipGetErrorName.retval != NULL) { \
		strncpy(args->hipGetErrorName.retval__ref.val, args->hipGetErrorName.retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbol_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbol_spt` function call.
 *
 * @struct args_hipMemcpyToSymbol_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbol_spt (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpyToSymbol_spt_t {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyToSymbol_spt(activity) { \
	activity->hip_args.hipMemcpyToSymbol_spt.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyToSymbol_spt.src = (void *) src; \
	activity->hip_args.hipMemcpyToSymbol_spt.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyToSymbol_spt.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyToSymbol_spt.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemsetNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemsetNodeGetParams` function call.
 *
 * @struct args_hipGraphMemsetNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemsetNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemsetParams * pNodeParams (struct hipMemsetParams*)
 *	)
 */
struct args_hipGraphMemsetNodeGetParams_t {
	struct hipGraphNode * node;
	hipMemsetParams * pNodeParams;
	struct {
		hipMemsetParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemsetNodeGetParams(activity) { \
	activity->hip_args.hipGraphMemsetNodeGetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemsetNodeGetParams.pNodeParams = (hipMemsetParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemsetNodeGetParams(args) { \
	if (args->hipGraphMemsetNodeGetParams.pNodeParams != NULL) { \
		args->hipGraphMemsetNodeGetParams.pNodeParams__ref.val = *args->hipGraphMemsetNodeGetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamWriteValue32` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWriteValue32` function call.
 *
 * @struct args_hipStreamWriteValue32_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWriteValue32 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint32_t value (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamWriteValue32_t {
	struct ihipStream_t * stream;
	void * ptr;
	uint32_t value;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamWriteValue32(activity) { \
	activity->hip_args.hipStreamWriteValue32.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamWriteValue32.ptr = (void *) ptr; \
	activity->hip_args.hipStreamWriteValue32.value = (uint32_t) value; \
	activity->hip_args.hipStreamWriteValue32.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamSynchronize_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamSynchronize_spt` function call.
 *
 * @struct args_hipStreamSynchronize_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamSynchronize_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipStreamSynchronize_spt_t {
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamSynchronize_spt(activity) { \
	activity->hip_args.hipStreamSynchronize_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGraphMemTrim` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGraphMemTrim` function call.
 *
 * @struct args_hipDeviceGraphMemTrim_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGraphMemTrim (
 *			int device (int)
 *	)
 */
struct args_hipDeviceGraphMemTrim_t {
	int device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGraphMemTrim(activity) { \
	activity->hip_args.hipDeviceGraphMemTrim.device = (int) device; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamDestroy` function call.
 *
 * @struct args_hipStreamDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipStreamDestroy (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipStreamDestroy_t {
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamDestroy(activity) { \
	activity->hip_args.hipStreamDestroy.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetArray` function call.
 *
 * @struct args_hipTexRefSetArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetArray (
 *			textureReference * tex (struct textureReference*)
 *			hipArray_const_t array (const struct hipArray *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipTexRefSetArray_t {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	struct hipArray * array;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetArray(activity) { \
	activity->hip_args.hipTexRefSetArray.tex = (textureReference *) tex; \
	activity->hip_args.hipTexRefSetArray.array = (struct hipArray *) array; \
	activity->hip_args.hipTexRefSetArray.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipTexRefSetArray(args) { \
	if (args->hipTexRefSetArray.tex != NULL) { \
		args->hipTexRefSetArray.tex__ref.val = *args->hipTexRefSetArray.tex; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyParam2DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyParam2DAsync` function call.
 *
 * @struct args_hipMemcpyParam2DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyParam2DAsync (
 *			const hip_Memcpy2D * pCopy (const struct hip_Memcpy2D *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyParam2DAsync_t {
	hip_Memcpy2D * pCopy;
	struct {
		hip_Memcpy2D val;
	} pCopy__ref;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyParam2DAsync(activity) { \
	activity->hip_args.hipMemcpyParam2DAsync.pCopy = (hip_Memcpy2D *) pCopy; \
	activity->hip_args.hipMemcpyParam2DAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipMemcpyParam2DAsync(args) { \
	if (args->hipMemcpyParam2DAsync.pCopy != NULL) { \
		args->hipMemcpyParam2DAsync.pCopy__ref.val = *args->hipMemcpyParam2DAsync.pCopy; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolExportPointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolExportPointer` function call.
 *
 * @struct args_hipMemPoolExportPointer_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolExportPointer (
 *			hipMemPoolPtrExportData * export_data (struct hipMemPoolPtrExportData*)
 *			void * dev_ptr (void *)
 *	)
 */
struct args_hipMemPoolExportPointer_t {
	hipMemPoolPtrExportData * export_data;
	struct {
		hipMemPoolPtrExportData val;
	} export_data__ref;
	void * dev_ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolExportPointer(activity) { \
	activity->hip_args.hipMemPoolExportPointer.export_data = (hipMemPoolPtrExportData *) export_data; \
	activity->hip_args.hipMemPoolExportPointer.dev_ptr = (void *) dev_ptr; \
};

#define GET_PTRS_VALUE_hipMemPoolExportPointer(args) { \
	if (args->hipMemPoolExportPointer.export_data != NULL) { \
		args->hipMemPoolExportPointer.export_data__ref.val = *args->hipMemPoolExportPointer.export_data; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphEventRecordNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventRecordNodeSetEvent` function call.
 *
 * @struct args_hipGraphEventRecordNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventRecordNodeSetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipGraphEventRecordNodeSetEvent_t {
	struct hipGraphNode * node;
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphEventRecordNodeSetEvent(activity) { \
	activity->hip_args.hipGraphEventRecordNodeSetEvent.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphEventRecordNodeSetEvent.event = (struct ihipEvent_t *) event; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxDestroy` function call.
 *
 * @struct args_hipCtxDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipCtxDestroy (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
struct args_hipCtxDestroy_t {
	struct ihipCtx_t * ctx;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxDestroy(activity) { \
	activity->hip_args.hipCtxDestroy.ctx = (struct ihipCtx_t *) ctx; \
};

/**
 * @brief Structure to hold the arguments for the `hipArrayDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayDestroy` function call.
 *
 * @struct args_hipArrayDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipArrayDestroy (
 *			hipArray_t array (struct hipArray *)
 *	)
 */
struct args_hipArrayDestroy_t {
	struct hipArray * array;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipArrayDestroy(activity) { \
	activity->hip_args.hipArrayDestroy.array = (struct hipArray *) array; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemGetAllocationGranularity` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAllocationGranularity` function call.
 *
 * @struct args_hipMemGetAllocationGranularity_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAllocationGranularity (
 *			size_t * granularity (unsigned long*)
 *			const hipMemAllocationProp * prop (const struct hipMemAllocationProp *)
 *			hipMemAllocationGranularity_flags option (enum hipMemAllocationGranularity_flags)
 *	)
 */
struct args_hipMemGetAllocationGranularity_t {
	size_t * granularity;
	struct {
		size_t val;
	} granularity__ref;
	hipMemAllocationProp * prop;
	struct {
		hipMemAllocationProp val;
	} prop__ref;
	hipMemAllocationGranularity_flags option;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemGetAllocationGranularity(activity) { \
	activity->hip_args.hipMemGetAllocationGranularity.granularity = (size_t *) granularity; \
	activity->hip_args.hipMemGetAllocationGranularity.prop = (hipMemAllocationProp *) prop; \
	activity->hip_args.hipMemGetAllocationGranularity.option = (hipMemAllocationGranularity_flags) option; \
};

#define GET_PTRS_VALUE_hipMemGetAllocationGranularity(args) { \
	if (args->hipMemGetAllocationGranularity.granularity != NULL) { \
		args->hipMemGetAllocationGranularity.granularity__ref.val = *args->hipMemGetAllocationGranularity.granularity; \
	} \
	if (args->hipMemGetAllocationGranularity.prop != NULL) { \
		args->hipMemGetAllocationGranularity.prop__ref.val = *args->hipMemGetAllocationGranularity.prop; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphClone` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphClone` function call.
 *
 * @struct args_hipGraphClone_t
 *
 * @note 
 *	hipError_t
 *	hipGraphClone (
 *			hipGraph_t * pGraphClone (struct ihipGraph **)
 *			hipGraph_t originalGraph (struct ihipGraph *)
 *	)
 */
struct args_hipGraphClone_t {
	struct ihipGraph ** pGraphClone;
	struct {
		void* ptr1;
	} pGraphClone__ref;
	struct ihipGraph * originalGraph;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphClone(activity) { \
	activity->hip_args.hipGraphClone.pGraphClone = (struct ihipGraph **) pGraphClone; \
	activity->hip_args.hipGraphClone.originalGraph = (struct ihipGraph *) originalGraph; \
};

#define GET_PTRS_VALUE_hipGraphClone(args) { \
	if (args->hipGraphClone.pGraphClone != NULL) { \
		args->hipGraphClone.pGraphClone__ref.ptr1 = *args->hipGraphClone.pGraphClone; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset2DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2DAsync_spt` function call.
 *
 * @struct args_hipMemset2DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2DAsync_spt (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemset2DAsync_spt_t {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset2DAsync_spt(activity) { \
	activity->hip_args.hipMemset2DAsync_spt.dst = (void *) dst; \
	activity->hip_args.hipMemset2DAsync_spt.pitch = (size_t) pitch; \
	activity->hip_args.hipMemset2DAsync_spt.value = (int) value; \
	activity->hip_args.hipMemset2DAsync_spt.width = (size_t) width; \
	activity->hip_args.hipMemset2DAsync_spt.height = (size_t) height; \
	activity->hip_args.hipMemset2DAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipBindTexture2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTexture2D` function call.
 *
 * @struct args_hipBindTexture2D_t
 *
 * @note 
 *	hipError_t
 *	hipBindTexture2D (
 *			size_t * offset (unsigned long*)
 *			const textureReference * tex (const struct textureReference *)
 *			const void * devPtr (const void *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			size_t pitch (unsigned long)
 *	)
 */
struct args_hipBindTexture2D_t {
	size_t * offset;
	struct {
		size_t val;
	} offset__ref;
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	void * devPtr;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	size_t width;
	size_t height;
	size_t pitch;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipBindTexture2D(activity) { \
	activity->hip_args.hipBindTexture2D.offset = (size_t *) offset; \
	activity->hip_args.hipBindTexture2D.tex = (textureReference *) tex; \
	activity->hip_args.hipBindTexture2D.devPtr = (void *) devPtr; \
	activity->hip_args.hipBindTexture2D.desc = (hipChannelFormatDesc *) desc; \
	activity->hip_args.hipBindTexture2D.width = (size_t) width; \
	activity->hip_args.hipBindTexture2D.height = (size_t) height; \
	activity->hip_args.hipBindTexture2D.pitch = (size_t) pitch; \
};

#define GET_PTRS_VALUE_hipBindTexture2D(args) { \
	if (args->hipBindTexture2D.offset != NULL) { \
		args->hipBindTexture2D.offset__ref.val = *args->hipBindTexture2D.offset; \
	} \
	if (args->hipBindTexture2D.tex != NULL) { \
		args->hipBindTexture2D.tex__ref.val = *args->hipBindTexture2D.tex; \
	} \
	if (args->hipBindTexture2D.desc != NULL) { \
		args->hipBindTexture2D.desc__ref.val = *args->hipBindTexture2D.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipArrayGetInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayGetInfo` function call.
 *
 * @struct args_hipArrayGetInfo_t
 *
 * @note 
 *	hipError_t
 *	hipArrayGetInfo (
 *			hipChannelFormatDesc * desc (struct hipChannelFormatDesc*)
 *			hipExtent * extent (struct hipExtent*)
 *			unsigned int * flags (unsigned int *)
 *			hipArray_t array (struct hipArray *)
 *	)
 */
struct args_hipArrayGetInfo_t {
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	hipExtent * extent;
	struct {
		hipExtent val;
	} extent__ref;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	struct hipArray * array;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipArrayGetInfo(activity) { \
	activity->hip_args.hipArrayGetInfo.desc = (hipChannelFormatDesc *) desc; \
	activity->hip_args.hipArrayGetInfo.extent = (hipExtent *) extent; \
	activity->hip_args.hipArrayGetInfo.flags = (unsigned int *) flags; \
	activity->hip_args.hipArrayGetInfo.array = (struct hipArray *) array; \
};

#define GET_PTRS_VALUE_hipArrayGetInfo(args) { \
	if (args->hipArrayGetInfo.desc != NULL) { \
		args->hipArrayGetInfo.desc__ref.val = *args->hipArrayGetInfo.desc; \
	} \
	if (args->hipArrayGetInfo.extent != NULL) { \
		args->hipArrayGetInfo.extent__ref.val = *args->hipArrayGetInfo.extent; \
	} \
	if (args->hipArrayGetInfo.flags != NULL) { \
		args->hipArrayGetInfo.flags__ref.val = *args->hipArrayGetInfo.flags; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresSignalNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresSignalNodeGetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresSignalNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresSignalNodeGetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipExternalSemaphoreSignalNodeParams * params_out (struct hipExternalSemaphoreSignalNodeParams*)
 *	)
 */
struct args_hipGraphExternalSemaphoresSignalNodeGetParams_t {
	struct hipGraphNode * hNode;
	hipExternalSemaphoreSignalNodeParams * params_out;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} params_out__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresSignalNodeGetParams(activity) { \
	activity->hip_args.hipGraphExternalSemaphoresSignalNodeGetParams.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExternalSemaphoresSignalNodeGetParams.params_out = (hipExternalSemaphoreSignalNodeParams *) params_out; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeGetParams(args) { \
	if (args->hipGraphExternalSemaphoresSignalNodeGetParams.params_out != NULL) { \
		args->hipGraphExternalSemaphoresSignalNodeGetParams.params_out__ref.val = *args->hipGraphExternalSemaphoresSignalNodeGetParams.params_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetStreamPriorityRange` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetStreamPriorityRange` function call.
 *
 * @struct args_hipDeviceGetStreamPriorityRange_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetStreamPriorityRange (
 *			int * leastPriority (int *)
 *			int * greatestPriority (int *)
 *	)
 */
struct args_hipDeviceGetStreamPriorityRange_t {
	int * leastPriority;
	struct {
		int val;
	} leastPriority__ref;
	int * greatestPriority;
	struct {
		int val;
	} greatestPriority__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetStreamPriorityRange(activity) { \
	activity->hip_args.hipDeviceGetStreamPriorityRange.leastPriority = (int *) leastPriority; \
	activity->hip_args.hipDeviceGetStreamPriorityRange.greatestPriority = (int *) greatestPriority; \
};

#define GET_PTRS_VALUE_hipDeviceGetStreamPriorityRange(args) { \
	if (args->hipDeviceGetStreamPriorityRange.leastPriority != NULL) { \
		args->hipDeviceGetStreamPriorityRange.leastPriority__ref.val = *args->hipDeviceGetStreamPriorityRange.leastPriority; \
	} \
	if (args->hipDeviceGetStreamPriorityRange.greatestPriority != NULL) { \
		args->hipDeviceGetStreamPriorityRange.greatestPriority__ref.val = *args->hipDeviceGetStreamPriorityRange.greatestPriority; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecChildGraphNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecChildGraphNodeSetParams` function call.
 *
 * @struct args_hipGraphExecChildGraphNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecChildGraphNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraph_t childGraph (struct ihipGraph *)
 *	)
 */
struct args_hipGraphExecChildGraphNodeSetParams_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	struct ihipGraph * childGraph;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecChildGraphNodeSetParams(activity) { \
	activity->hip_args.hipGraphExecChildGraphNodeSetParams.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecChildGraphNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecChildGraphNodeSetParams.childGraph = (struct ihipGraph *) childGraph; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset2D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2D_spt` function call.
 *
 * @struct args_hipMemset2D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2D_spt (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *	)
 */
struct args_hipMemset2D_spt_t {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset2D_spt(activity) { \
	activity->hip_args.hipMemset2D_spt.dst = (void *) dst; \
	activity->hip_args.hipMemset2D_spt.pitch = (size_t) pitch; \
	activity->hip_args.hipMemset2D_spt.value = (int) value; \
	activity->hip_args.hipMemset2D_spt.width = (size_t) width; \
	activity->hip_args.hipMemset2D_spt.height = (size_t) height; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetDefaultMemPool` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetDefaultMemPool` function call.
 *
 * @struct args_hipDeviceGetDefaultMemPool_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetDefaultMemPool (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			int device (int)
 *	)
 */
struct args_hipDeviceGetDefaultMemPool_t {
	struct ihipMemPoolHandle_t ** mem_pool;
	struct {
		void* ptr1;
	} mem_pool__ref;
	int device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetDefaultMemPool(activity) { \
	activity->hip_args.hipDeviceGetDefaultMemPool.mem_pool = (struct ihipMemPoolHandle_t **) mem_pool; \
	activity->hip_args.hipDeviceGetDefaultMemPool.device = (int) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetDefaultMemPool(args) { \
	if (args->hipDeviceGetDefaultMemPool.mem_pool != NULL) { \
		args->hipDeviceGetDefaultMemPool.mem_pool__ref.ptr1 = *args->hipDeviceGetDefaultMemPool.mem_pool; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxCreate` function call.
 *
 * @struct args_hipCtxCreate_t
 *
 * @note 
 *	hipError_t
 *	hipCtxCreate (
 *			hipCtx_t * ctx (struct ihipCtx_t **)
 *			unsigned int flags (unsigned int)
 *			hipDevice_t device (int)
 *	)
 */
struct args_hipCtxCreate_t {
	struct ihipCtx_t ** ctx;
	struct {
		void* ptr1;
	} ctx__ref;
	unsigned int flags;
	hipDevice_t device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxCreate(activity) { \
	activity->hip_args.hipCtxCreate.ctx = (struct ihipCtx_t **) ctx; \
	activity->hip_args.hipCtxCreate.flags = (unsigned int) flags; \
	activity->hip_args.hipCtxCreate.device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipCtxCreate(args) { \
	if (args->hipCtxCreate.ctx != NULL) { \
		args->hipCtxCreate.ctx__ref.ptr1 = *args->hipCtxCreate.ctx; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamIsCapturing` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamIsCapturing` function call.
 *
 * @struct args_hipStreamIsCapturing_t
 *
 * @note 
 *	hipError_t
 *	hipStreamIsCapturing (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *	)
 */
struct args_hipStreamIsCapturing_t {
	struct ihipStream_t * stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamIsCapturing(activity) { \
	activity->hip_args.hipStreamIsCapturing.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamIsCapturing.pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
};

#define GET_PTRS_VALUE_hipStreamIsCapturing(args) { \
	if (args->hipStreamIsCapturing.pCaptureStatus != NULL) { \
		args->hipStreamIsCapturing.pCaptureStatus__ref.val = *args->hipStreamIsCapturing.pCaptureStatus; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamUpdateCaptureDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamUpdateCaptureDependencies` function call.
 *
 * @struct args_hipStreamUpdateCaptureDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipStreamUpdateCaptureDependencies (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraphNode_t * dependencies (struct hipGraphNode **)
 *			size_t numDependencies (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamUpdateCaptureDependencies_t {
	struct ihipStream_t * stream;
	struct hipGraphNode ** dependencies;
	struct {
		void* ptr1;
	} dependencies__ref;
	size_t numDependencies;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamUpdateCaptureDependencies(activity) { \
	activity->hip_args.hipStreamUpdateCaptureDependencies.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamUpdateCaptureDependencies.dependencies = (struct hipGraphNode **) dependencies; \
	activity->hip_args.hipStreamUpdateCaptureDependencies.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipStreamUpdateCaptureDependencies.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipStreamUpdateCaptureDependencies(args) { \
	if (args->hipStreamUpdateCaptureDependencies.dependencies != NULL) { \
		args->hipStreamUpdateCaptureDependencies.dependencies__ref.ptr1 = *args->hipStreamUpdateCaptureDependencies.dependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSynchronize` function call.
 *
 * @struct args_hipDeviceSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSynchronize (
 *	)
 */
struct args_hipDeviceSynchronize_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbolAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbolAsync` function call.
 *
 * @struct args_hipMemcpyFromSymbolAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbolAsync (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyFromSymbolAsync_t {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyFromSymbolAsync(activity) { \
	activity->hip_args.hipMemcpyFromSymbolAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpyFromSymbolAsync.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyFromSymbolAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyFromSymbolAsync.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyFromSymbolAsync.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpyFromSymbolAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphDestroyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphDestroyNode` function call.
 *
 * @struct args_hipGraphDestroyNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphDestroyNode (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *	)
 */
struct args_hipGraphDestroyNode_t {
	struct hipGraphNode * node;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphDestroyNode(activity) { \
	activity->hip_args.hipGraphDestroyNode.node = (struct hipGraphNode *) node; \
};

/**
 * @brief Structure to hold the arguments for the `hipUserObjectRetain` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUserObjectRetain` function call.
 *
 * @struct args_hipUserObjectRetain_t
 *
 * @note 
 *	hipError_t
 *	hipUserObjectRetain (
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *	)
 */
struct args_hipUserObjectRetain_t {
	struct hipUserObject * object;
	unsigned int count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipUserObjectRetain(activity) { \
	activity->hip_args.hipUserObjectRetain.object = (struct hipUserObject *) object; \
	activity->hip_args.hipUserObjectRetain.count = (unsigned int) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecEventWaitNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecEventWaitNodeSetEvent` function call.
 *
 * @struct args_hipGraphExecEventWaitNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecEventWaitNodeSetEvent (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipGraphExecEventWaitNodeSetEvent_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * hNode;
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecEventWaitNodeSetEvent(activity) { \
	activity->hip_args.hipGraphExecEventWaitNodeSetEvent.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecEventWaitNodeSetEvent.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExecEventWaitNodeSetEvent.event = (struct ihipEvent_t *) event; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemAddressReserve` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAddressReserve` function call.
 *
 * @struct args_hipMemAddressReserve_t
 *
 * @note 
 *	hipError_t
 *	hipMemAddressReserve (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *			size_t alignment (unsigned long)
 *			void * addr (void *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
struct args_hipMemAddressReserve_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	size_t alignment;
	void * addr;
	unsigned long long flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemAddressReserve(activity) { \
	activity->hip_args.hipMemAddressReserve.ptr = (void **) ptr; \
	activity->hip_args.hipMemAddressReserve.size = (size_t) size; \
	activity->hip_args.hipMemAddressReserve.alignment = (size_t) alignment; \
	activity->hip_args.hipMemAddressReserve.addr = (void *) addr; \
	activity->hip_args.hipMemAddressReserve.flags = (unsigned long long) flags; \
};

#define GET_PTRS_VALUE_hipMemAddressReserve(args) { \
	if (args->hipMemAddressReserve.ptr != NULL) { \
		args->hipMemAddressReserve.ptr__ref.ptr1 = *args->hipMemAddressReserve.ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemsetNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemsetNode` function call.
 *
 * @struct args_hipGraphAddMemsetNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemsetNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipMemsetParams * pMemsetParams (const struct hipMemsetParams *)
 *	)
 */
struct args_hipGraphAddMemsetNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipMemsetParams * pMemsetParams;
	struct {
		hipMemsetParams val;
	} pMemsetParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddMemsetNode(activity) { \
	activity->hip_args.hipGraphAddMemsetNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddMemsetNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddMemsetNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddMemsetNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddMemsetNode.pMemsetParams = (hipMemsetParams *) pMemsetParams; \
};

#define GET_PTRS_VALUE_hipGraphAddMemsetNode(args) { \
	if (args->hipGraphAddMemsetNode.pGraphNode != NULL) { \
		args->hipGraphAddMemsetNode.pGraphNode__ref.ptr1 = *args->hipGraphAddMemsetNode.pGraphNode; \
	} \
	if (args->hipGraphAddMemsetNode.pDependencies != NULL) { \
		args->hipGraphAddMemsetNode.pDependencies__ref.ptr1 = *args->hipGraphAddMemsetNode.pDependencies; \
	} \
	if (args->hipGraphAddMemsetNode.pMemsetParams != NULL) { \
		args->hipGraphAddMemsetNode.pMemsetParams__ref.val = *args->hipGraphAddMemsetNode.pMemsetParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphicsResourceGetMappedPointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsResourceGetMappedPointer` function call.
 *
 * @struct args_hipGraphicsResourceGetMappedPointer_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsResourceGetMappedPointer (
 *			void ** devPtr (void **)
 *			size_t * size (unsigned long*)
 *			hipGraphicsResource_t resource (struct _hipGraphicsResource*)
 *	)
 */
struct args_hipGraphicsResourceGetMappedPointer_t {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	size_t * size;
	struct {
		size_t val;
	} size__ref;
	struct _hipGraphicsResource* resource;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphicsResourceGetMappedPointer(activity) { \
	activity->hip_args.hipGraphicsResourceGetMappedPointer.devPtr = (void **) devPtr; \
	activity->hip_args.hipGraphicsResourceGetMappedPointer.size = (size_t *) size; \
	activity->hip_args.hipGraphicsResourceGetMappedPointer.resource = (struct _hipGraphicsResource*) resource; \
};

#define GET_PTRS_VALUE_hipGraphicsResourceGetMappedPointer(args) { \
	if (args->hipGraphicsResourceGetMappedPointer.devPtr != NULL) { \
		args->hipGraphicsResourceGetMappedPointer.devPtr__ref.ptr1 = *args->hipGraphicsResourceGetMappedPointer.devPtr; \
	} \
	if (args->hipGraphicsResourceGetMappedPointer.size != NULL) { \
		args->hipGraphicsResourceGetMappedPointer.size__ref.val = *args->hipGraphicsResourceGetMappedPointer.size; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamBeginCapture_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamBeginCapture_spt` function call.
 *
 * @struct args_hipStreamBeginCapture_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamBeginCapture_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureMode mode (enum hipStreamCaptureMode)
 *	)
 */
struct args_hipStreamBeginCapture_spt_t {
	struct ihipStream_t * stream;
	hipStreamCaptureMode mode;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamBeginCapture_spt(activity) { \
	activity->hip_args.hipStreamBeginCapture_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamBeginCapture_spt.mode = (hipStreamCaptureMode) mode; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetUuid` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetUuid` function call.
 *
 * @struct args_hipDeviceGetUuid_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetUuid (
 *			hipUUID * uuid (struct hipUUID_t*)
 *			hipDevice_t device (int)
 *	)
 */
struct args_hipDeviceGetUuid_t {
	hipUUID * uuid;
	struct {
		hipUUID val;
	} uuid__ref;
	hipDevice_t device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetUuid(activity) { \
	activity->hip_args.hipDeviceGetUuid.uuid = (hipUUID *) uuid; \
	activity->hip_args.hipDeviceGetUuid.device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetUuid(args) { \
	if (args->hipDeviceGetUuid.uuid != NULL) { \
		args->hipDeviceGetUuid.uuid__ref.val = *args->hipDeviceGetUuid.uuid; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleLaunchKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLaunchKernel` function call.
 *
 * @struct args_hipModuleLaunchKernel_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLaunchKernel (
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			unsigned int gridDimX (unsigned int)
 *			unsigned int gridDimY (unsigned int)
 *			unsigned int gridDimZ (unsigned int)
 *			unsigned int blockDimX (unsigned int)
 *			unsigned int blockDimY (unsigned int)
 *			unsigned int blockDimZ (unsigned int)
 *			unsigned int sharedMemBytes (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *			void ** kernelParams (void **)
 *			void ** extra (void **)
 *	)
 */
struct args_hipModuleLaunchKernel_t {
	struct ihipModuleSymbol_t * f;
	unsigned int gridDimX;
	unsigned int gridDimY;
	unsigned int gridDimZ;
	unsigned int blockDimX;
	unsigned int blockDimY;
	unsigned int blockDimZ;
	unsigned int sharedMemBytes;
	struct ihipStream_t * stream;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	void ** extra;
	struct {
		void* ptr1;
	} extra__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleLaunchKernel(activity) { \
	activity->hip_args.hipModuleLaunchKernel.f = (struct ihipModuleSymbol_t *) f; \
	activity->hip_args.hipModuleLaunchKernel.gridDimX = (unsigned int) gridDimX; \
	activity->hip_args.hipModuleLaunchKernel.gridDimY = (unsigned int) gridDimY; \
	activity->hip_args.hipModuleLaunchKernel.gridDimZ = (unsigned int) gridDimZ; \
	activity->hip_args.hipModuleLaunchKernel.blockDimX = (unsigned int) blockDimX; \
	activity->hip_args.hipModuleLaunchKernel.blockDimY = (unsigned int) blockDimY; \
	activity->hip_args.hipModuleLaunchKernel.blockDimZ = (unsigned int) blockDimZ; \
	activity->hip_args.hipModuleLaunchKernel.sharedMemBytes = (unsigned int) sharedMemBytes; \
	activity->hip_args.hipModuleLaunchKernel.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipModuleLaunchKernel.kernelParams = (void **) kernelParams; \
	activity->hip_args.hipModuleLaunchKernel.extra = (void **) extra; \
};

#define GET_PTRS_VALUE_hipModuleLaunchKernel(args) { \
	if (args->hipModuleLaunchKernel.kernelParams != NULL) { \
		args->hipModuleLaunchKernel.kernelParams__ref.ptr1 = *args->hipModuleLaunchKernel.kernelParams; \
	} \
	if (args->hipModuleLaunchKernel.extra != NULL) { \
		args->hipModuleLaunchKernel.extra__ref.ptr1 = *args->hipModuleLaunchKernel.extra; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddEmptyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddEmptyNode` function call.
 *
 * @struct args_hipGraphAddEmptyNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddEmptyNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *	)
 */
struct args_hipGraphAddEmptyNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddEmptyNode(activity) { \
	activity->hip_args.hipGraphAddEmptyNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddEmptyNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddEmptyNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddEmptyNode.numDependencies = (size_t) numDependencies; \
};

#define GET_PTRS_VALUE_hipGraphAddEmptyNode(args) { \
	if (args->hipGraphAddEmptyNode.pGraphNode != NULL) { \
		args->hipGraphAddEmptyNode.pGraphNode__ref.ptr1 = *args->hipGraphAddEmptyNode.pGraphNode; \
	} \
	if (args->hipGraphAddEmptyNode.pDependencies != NULL) { \
		args->hipGraphAddEmptyNode.pDependencies__ref.ptr1 = *args->hipGraphAddEmptyNode.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemRangeGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRangeGetAttribute` function call.
 *
 * @struct args_hipMemRangeGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipMemRangeGetAttribute (
 *			void * data (void *)
 *			size_t data_size (unsigned long)
 *			hipMemRangeAttribute attribute (enum hipMemRangeAttribute)
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemRangeGetAttribute_t {
	void * data;
	size_t data_size;
	hipMemRangeAttribute attribute;
	void * dev_ptr;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemRangeGetAttribute(activity) { \
	activity->hip_args.hipMemRangeGetAttribute.data = (void *) data; \
	activity->hip_args.hipMemRangeGetAttribute.data_size = (size_t) data_size; \
	activity->hip_args.hipMemRangeGetAttribute.attribute = (hipMemRangeAttribute) attribute; \
	activity->hip_args.hipMemRangeGetAttribute.dev_ptr = (void *) dev_ptr; \
	activity->hip_args.hipMemRangeGetAttribute.count = (size_t) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphInstantiateWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphInstantiateWithFlags` function call.
 *
 * @struct args_hipGraphInstantiateWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipGraphInstantiateWithFlags (
 *			hipGraphExec_t * pGraphExec (struct hipGraphExec **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
struct args_hipGraphInstantiateWithFlags_t {
	struct hipGraphExec ** pGraphExec;
	struct {
		void* ptr1;
	} pGraphExec__ref;
	struct ihipGraph * graph;
	unsigned long long flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphInstantiateWithFlags(activity) { \
	activity->hip_args.hipGraphInstantiateWithFlags.pGraphExec = (struct hipGraphExec **) pGraphExec; \
	activity->hip_args.hipGraphInstantiateWithFlags.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphInstantiateWithFlags.flags = (unsigned long long) flags; \
};

#define GET_PTRS_VALUE_hipGraphInstantiateWithFlags(args) { \
	if (args->hipGraphInstantiateWithFlags.pGraphExec != NULL) { \
		args->hipGraphInstantiateWithFlags.pGraphExec__ref.ptr1 = *args->hipGraphInstantiateWithFlags.pGraphExec; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxPushCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxPushCurrent` function call.
 *
 * @struct args_hipCtxPushCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxPushCurrent (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
struct args_hipCtxPushCurrent_t {
	struct ihipCtx_t * ctx;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxPushCurrent(activity) { \
	activity->hip_args.hipCtxPushCurrent.ctx = (struct ihipCtx_t *) ctx; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxGetApiVersion` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetApiVersion` function call.
 *
 * @struct args_hipCtxGetApiVersion_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetApiVersion (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *			int * apiVersion (int *)
 *	)
 */
struct args_hipCtxGetApiVersion_t {
	struct ihipCtx_t * ctx;
	int * apiVersion;
	struct {
		int val;
	} apiVersion__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxGetApiVersion(activity) { \
	activity->hip_args.hipCtxGetApiVersion.ctx = (struct ihipCtx_t *) ctx; \
	activity->hip_args.hipCtxGetApiVersion.apiVersion = (int *) apiVersion; \
};

#define GET_PTRS_VALUE_hipCtxGetApiVersion(args) { \
	if (args->hipCtxGetApiVersion.apiVersion != NULL) { \
		args->hipCtxGetApiVersion.apiVersion__ref.val = *args->hipCtxGetApiVersion.apiVersion; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipBindTexture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTexture` function call.
 *
 * @struct args_hipBindTexture_t
 *
 * @note 
 *	hipError_t
 *	hipBindTexture (
 *			size_t * offset (unsigned long*)
 *			const textureReference * tex (const struct textureReference *)
 *			const void * devPtr (const void *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			size_t size (unsigned long)
 *	)
 */
struct args_hipBindTexture_t {
	size_t * offset;
	struct {
		size_t val;
	} offset__ref;
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	void * devPtr;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	size_t size;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipBindTexture(activity) { \
	activity->hip_args.hipBindTexture.offset = (size_t *) offset; \
	activity->hip_args.hipBindTexture.tex = (textureReference *) tex; \
	activity->hip_args.hipBindTexture.devPtr = (void *) devPtr; \
	activity->hip_args.hipBindTexture.desc = (hipChannelFormatDesc *) desc; \
	activity->hip_args.hipBindTexture.size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipBindTexture(args) { \
	if (args->hipBindTexture.offset != NULL) { \
		args->hipBindTexture.offset__ref.val = *args->hipBindTexture.offset; \
	} \
	if (args->hipBindTexture.tex != NULL) { \
		args->hipBindTexture.tex__ref.val = *args->hipBindTexture.tex; \
	} \
	if (args->hipBindTexture.desc != NULL) { \
		args->hipBindTexture.desc__ref.val = *args->hipBindTexture.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamBeginCapture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamBeginCapture` function call.
 *
 * @struct args_hipStreamBeginCapture_t
 *
 * @note 
 *	hipError_t
 *	hipStreamBeginCapture (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureMode mode (enum hipStreamCaptureMode)
 *	)
 */
struct args_hipStreamBeginCapture_t {
	struct ihipStream_t * stream;
	hipStreamCaptureMode mode;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamBeginCapture(activity) { \
	activity->hip_args.hipStreamBeginCapture.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamBeginCapture.mode = (hipStreamCaptureMode) mode; \
};

/**
 * @brief Structure to hold the arguments for the `hipProfilerStart` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipProfilerStart` function call.
 *
 * @struct args_hipProfilerStart_t
 *
 * @note 
 *	hipError_t
 *	hipProfilerStart (
 *	)
 */
struct args_hipProfilerStart_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoDAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoDAsync` function call.
 *
 * @struct args_hipMemcpyHtoDAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoDAsync (
 *			hipDeviceptr_t dst (void *)
 *			void * src (void *)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyHtoDAsync_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyHtoDAsync(activity) { \
	activity->hip_args.hipMemcpyHtoDAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpyHtoDAsync.src = (void *) src; \
	activity->hip_args.hipMemcpyHtoDAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyHtoDAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGetDeviceFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDeviceFlags` function call.
 *
 * @struct args_hipGetDeviceFlags_t
 *
 * @note 
 *	hipError_t
 *	hipGetDeviceFlags (
 *			unsigned int * flags (unsigned int *)
 *	)
 */
struct args_hipGetDeviceFlags_t {
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetDeviceFlags(activity) { \
	activity->hip_args.hipGetDeviceFlags.flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipGetDeviceFlags(args) { \
	if (args->hipGetDeviceFlags.flags != NULL) { \
		args->hipGetDeviceFlags.flags__ref.val = *args->hipGetDeviceFlags.flags; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemRangeGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRangeGetAttributes` function call.
 *
 * @struct args_hipMemRangeGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipMemRangeGetAttributes (
 *			void ** data (void **)
 *			size_t * data_sizes (unsigned long*)
 *			hipMemRangeAttribute * attributes (enum hipMemRangeAttribute*)
 *			size_t num_attributes (unsigned long)
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *	)
 */
struct args_hipMemRangeGetAttributes_t {
	void ** data;
	struct {
		void* ptr1;
	} data__ref;
	size_t * data_sizes;
	struct {
		size_t val;
	} data_sizes__ref;
	hipMemRangeAttribute * attributes;
	struct {
		hipMemRangeAttribute val;
	} attributes__ref;
	size_t num_attributes;
	void * dev_ptr;
	size_t count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemRangeGetAttributes(activity) { \
	activity->hip_args.hipMemRangeGetAttributes.data = (void **) data; \
	activity->hip_args.hipMemRangeGetAttributes.data_sizes = (size_t *) data_sizes; \
	activity->hip_args.hipMemRangeGetAttributes.attributes = (hipMemRangeAttribute *) attributes; \
	activity->hip_args.hipMemRangeGetAttributes.num_attributes = (size_t) num_attributes; \
	activity->hip_args.hipMemRangeGetAttributes.dev_ptr = (void *) dev_ptr; \
	activity->hip_args.hipMemRangeGetAttributes.count = (size_t) count; \
};

#define GET_PTRS_VALUE_hipMemRangeGetAttributes(args) { \
	if (args->hipMemRangeGetAttributes.data != NULL) { \
		args->hipMemRangeGetAttributes.data__ref.ptr1 = *args->hipMemRangeGetAttributes.data; \
	} \
	if (args->hipMemRangeGetAttributes.data_sizes != NULL) { \
		args->hipMemRangeGetAttributes.data_sizes__ref.val = *args->hipMemRangeGetAttributes.data_sizes; \
	} \
	if (args->hipMemRangeGetAttributes.attributes != NULL) { \
		args->hipMemRangeGetAttributes.attributes__ref.val = *args->hipMemRangeGetAttributes.attributes; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDestroyExternalSemaphore` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroyExternalSemaphore` function call.
 *
 * @struct args_hipDestroyExternalSemaphore_t
 *
 * @note 
 *	hipError_t
 *	hipDestroyExternalSemaphore (
 *			hipExternalSemaphore_t extSem (void *)
 *	)
 */
struct args_hipDestroyExternalSemaphore_t {
	void * extSem;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDestroyExternalSemaphore(activity) { \
	activity->hip_args.hipDestroyExternalSemaphore.extSem = (void *) extSem; \
};

/**
 * @brief Structure to hold the arguments for the `hipIpcOpenEventHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcOpenEventHandle` function call.
 *
 * @struct args_hipIpcOpenEventHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcOpenEventHandle (
 *			hipEvent_t * event (struct ihipEvent_t **)
 *			hipIpcEventHandle_t handle (struct hipIpcEventHandle_st)
 *	)
 */
struct args_hipIpcOpenEventHandle_t {
	struct ihipEvent_t ** event;
	struct {
		void* ptr1;
	} event__ref;
	hipIpcEventHandle_t handle;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipIpcOpenEventHandle(activity) { \
	activity->hip_args.hipIpcOpenEventHandle.event = (struct ihipEvent_t **) event; \
	activity->hip_args.hipIpcOpenEventHandle.handle = (hipIpcEventHandle_t) handle; \
};

#define GET_PTRS_VALUE_hipIpcOpenEventHandle(args) { \
	if (args->hipIpcOpenEventHandle.event != NULL) { \
		args->hipIpcOpenEventHandle.event__ref.ptr1 = *args->hipIpcOpenEventHandle.event; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphUpload` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphUpload` function call.
 *
 * @struct args_hipGraphUpload_t
 *
 * @note 
 *	hipError_t
 *	hipGraphUpload (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipGraphUpload_t {
	struct hipGraphExec * graphExec;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphUpload(activity) { \
	activity->hip_args.hipGraphUpload.graphExec = (struct hipGraphExec *) graphExec; \
	activity->hip_args.hipGraphUpload.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMallocAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocAsync` function call.
 *
 * @struct args_hipMallocAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMallocAsync (
 *			void ** dev_ptr (void **)
 *			size_t size (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMallocAsync_t {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	size_t size;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMallocAsync(activity) { \
	activity->hip_args.hipMallocAsync.dev_ptr = (void **) dev_ptr; \
	activity->hip_args.hipMallocAsync.size = (size_t) size; \
	activity->hip_args.hipMallocAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipMallocAsync(args) { \
	if (args->hipMallocAsync.dev_ptr != NULL) { \
		args->hipMallocAsync.dev_ptr__ref.ptr1 = *args->hipMallocAsync.dev_ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipOccupancyMaxPotentialBlockSize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipOccupancyMaxPotentialBlockSize` function call.
 *
 * @struct args_hipOccupancyMaxPotentialBlockSize_t
 *
 * @note 
 *	hipError_t
 *	hipOccupancyMaxPotentialBlockSize (
 *			int * gridSize (int *)
 *			int * blockSize (int *)
 *			const void * f (const void *)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			int blockSizeLimit (int)
 *	)
 */
struct args_hipOccupancyMaxPotentialBlockSize_t {
	int * gridSize;
	struct {
		int val;
	} gridSize__ref;
	int * blockSize;
	struct {
		int val;
	} blockSize__ref;
	void * f;
	size_t dynSharedMemPerBlk;
	int blockSizeLimit;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipOccupancyMaxPotentialBlockSize(activity) { \
	activity->hip_args.hipOccupancyMaxPotentialBlockSize.gridSize = (int *) gridSize; \
	activity->hip_args.hipOccupancyMaxPotentialBlockSize.blockSize = (int *) blockSize; \
	activity->hip_args.hipOccupancyMaxPotentialBlockSize.f = (void *) f; \
	activity->hip_args.hipOccupancyMaxPotentialBlockSize.dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	activity->hip_args.hipOccupancyMaxPotentialBlockSize.blockSizeLimit = (int) blockSizeLimit; \
};

#define GET_PTRS_VALUE_hipOccupancyMaxPotentialBlockSize(args) { \
	if (args->hipOccupancyMaxPotentialBlockSize.gridSize != NULL) { \
		args->hipOccupancyMaxPotentialBlockSize.gridSize__ref.val = *args->hipOccupancyMaxPotentialBlockSize.gridSize; \
	} \
	if (args->hipOccupancyMaxPotentialBlockSize.blockSize != NULL) { \
		args->hipOccupancyMaxPotentialBlockSize.blockSize__ref.val = *args->hipOccupancyMaxPotentialBlockSize.blockSize; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDestroyExternalMemory` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroyExternalMemory` function call.
 *
 * @struct args_hipDestroyExternalMemory_t
 *
 * @note 
 *	hipError_t
 *	hipDestroyExternalMemory (
 *			hipExternalMemory_t extMem (void *)
 *	)
 */
struct args_hipDestroyExternalMemory_t {
	void * extMem;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDestroyExternalMemory(activity) { \
	activity->hip_args.hipDestroyExternalMemory.extMem = (void *) extMem; \
};

/**
 * @brief Structure to hold the arguments for the `amd_dbgapi_get_build_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `amd_dbgapi_get_build_name` function call.
 *
 * @struct args_amd_dbgapi_get_build_name_t
 *
 * @note 
 *	const char *
 *	amd_dbgapi_get_build_name (
 *	)
 */
struct args_amd_dbgapi_get_build_name_t {
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
};

#define GET_PTRS_RET_VALUE_amd_dbgapi_get_build_name(args) { \
	if (args->amd_dbgapi_get_build_name.retval != NULL) { \
		strncpy(args->amd_dbgapi_get_build_name.retval__ref.val, args->amd_dbgapi_get_build_name.retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNodeToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNodeToSymbol` function call.
 *
 * @struct args_hipGraphAddMemcpyNodeToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNodeToSymbol (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphAddMemcpyNodeToSymbol_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	void * symbol;
	void * src;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddMemcpyNodeToSymbol(activity) { \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.src = (void *) src; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.count = (size_t) count; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.offset = (size_t) offset; \
	activity->hip_args.hipGraphAddMemcpyNodeToSymbol.kind = (hipMemcpyKind) kind; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNodeToSymbol(args) { \
	if (args->hipGraphAddMemcpyNodeToSymbol.pGraphNode != NULL) { \
		args->hipGraphAddMemcpyNodeToSymbol.pGraphNode__ref.ptr1 = *args->hipGraphAddMemcpyNodeToSymbol.pGraphNode; \
	} \
	if (args->hipGraphAddMemcpyNodeToSymbol.pDependencies != NULL) { \
		args->hipGraphAddMemcpyNodeToSymbol.pDependencies__ref.ptr1 = *args->hipGraphAddMemcpyNodeToSymbol.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetPCIBusId` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetPCIBusId` function call.
 *
 * @struct args_hipDeviceGetPCIBusId_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetPCIBusId (
 *			char * pciBusId (char *)
 *			int len (int)
 *			int device (int)
 *	)
 */
struct args_hipDeviceGetPCIBusId_t {
	char * pciBusId;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} pciBusId__ref;
	int len;
	int device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetPCIBusId(activity) { \
	activity->hip_args.hipDeviceGetPCIBusId.pciBusId = (char *) pciBusId; \
	activity->hip_args.hipDeviceGetPCIBusId.len = (int) len; \
	activity->hip_args.hipDeviceGetPCIBusId.device = (int) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetPCIBusId(args) { \
	if (args->hipDeviceGetPCIBusId.pciBusId != NULL) { \
		strncpy(args->hipDeviceGetPCIBusId.pciBusId__ref.val, args->hipDeviceGetPCIBusId.pciBusId, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetChannelDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetChannelDesc` function call.
 *
 * @struct args_hipGetChannelDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetChannelDesc (
 *			hipChannelFormatDesc * desc (struct hipChannelFormatDesc*)
 *			hipArray_const_t array (const struct hipArray *)
 *	)
 */
struct args_hipGetChannelDesc_t {
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	struct hipArray * array;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetChannelDesc(activity) { \
	activity->hip_args.hipGetChannelDesc.desc = (hipChannelFormatDesc *) desc; \
	activity->hip_args.hipGetChannelDesc.array = (struct hipArray *) array; \
};

#define GET_PTRS_VALUE_hipGetChannelDesc(args) { \
	if (args->hipGetChannelDesc.desc != NULL) { \
		args->hipGetChannelDesc.desc__ref.val = *args->hipGetChannelDesc.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxReset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxReset` function call.
 *
 * @struct args_hipDevicePrimaryCtxReset_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxReset (
 *			hipDevice_t dev (int)
 *	)
 */
struct args_hipDevicePrimaryCtxReset_t {
	hipDevice_t dev;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDevicePrimaryCtxReset(activity) { \
	activity->hip_args.hipDevicePrimaryCtxReset.dev = (hipDevice_t) dev; \
};

/**
 * @brief Structure to hold the arguments for the `hipImportExternalMemory` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipImportExternalMemory` function call.
 *
 * @struct args_hipImportExternalMemory_t
 *
 * @note 
 *	hipError_t
 *	hipImportExternalMemory (
 *			hipExternalMemory_t * extMem_out (void **)
 *			const hipExternalMemoryHandleDesc * memHandleDesc (const struct hipExternalMemoryHandleDesc_st *)
 *	)
 */
struct args_hipImportExternalMemory_t {
	void ** extMem_out;
	struct {
		void* ptr1;
	} extMem_out__ref;
	hipExternalMemoryHandleDesc * memHandleDesc;
	struct {
		hipExternalMemoryHandleDesc val;
	} memHandleDesc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipImportExternalMemory(activity) { \
	activity->hip_args.hipImportExternalMemory.extMem_out = (void **) extMem_out; \
	activity->hip_args.hipImportExternalMemory.memHandleDesc = (hipExternalMemoryHandleDesc *) memHandleDesc; \
};

#define GET_PTRS_VALUE_hipImportExternalMemory(args) { \
	if (args->hipImportExternalMemory.extMem_out != NULL) { \
		args->hipImportExternalMemory.extMem_out__ref.ptr1 = *args->hipImportExternalMemory.extMem_out; \
	} \
	if (args->hipImportExternalMemory.memHandleDesc != NULL) { \
		args->hipImportExternalMemory.memHandleDesc__ref.val = *args->hipImportExternalMemory.memHandleDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipFuncSetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncSetSharedMemConfig` function call.
 *
 * @struct args_hipFuncSetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipFuncSetSharedMemConfig (
 *			const void * func (const void *)
 *			hipSharedMemConfig config (enum hipSharedMemConfig)
 *	)
 */
struct args_hipFuncSetSharedMemConfig_t {
	void * func;
	hipSharedMemConfig config;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFuncSetSharedMemConfig(activity) { \
	activity->hip_args.hipFuncSetSharedMemConfig.func = (void *) func; \
	activity->hip_args.hipFuncSetSharedMemConfig.config = (hipSharedMemConfig) config; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitEvent` function call.
 *
 * @struct args_hipStreamWaitEvent_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitEvent (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamWaitEvent_t {
	struct ihipStream_t * stream;
	struct ihipEvent_t * event;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamWaitEvent(activity) { \
	activity->hip_args.hipStreamWaitEvent.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamWaitEvent.event = (struct ihipEvent_t *) event; \
	activity->hip_args.hipStreamWaitEvent.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmapLevelBias` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmapLevelBias` function call.
 *
 * @struct args_hipTexRefSetMipmapLevelBias_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmapLevelBias (
 *			textureReference * texRef (struct textureReference*)
 *			float bias (float)
 *	)
 */
struct args_hipTexRefSetMipmapLevelBias_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	float bias;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetMipmapLevelBias(activity) { \
	activity->hip_args.hipTexRefSetMipmapLevelBias.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetMipmapLevelBias.bias = (float) bias; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmapLevelBias(args) { \
	if (args->hipTexRefSetMipmapLevelBias.texRef != NULL) { \
		args->hipTexRefSetMipmapLevelBias.texRef__ref.val = *args->hipTexRefSetMipmapLevelBias.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolImportFromShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolImportFromShareableHandle` function call.
 *
 * @struct args_hipMemPoolImportFromShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolImportFromShareableHandle (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			void * shared_handle (void *)
 *			hipMemAllocationHandleType handle_type (enum hipMemAllocationHandleType)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipMemPoolImportFromShareableHandle_t {
	struct ihipMemPoolHandle_t ** mem_pool;
	struct {
		void* ptr1;
	} mem_pool__ref;
	void * shared_handle;
	hipMemAllocationHandleType handle_type;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolImportFromShareableHandle(activity) { \
	activity->hip_args.hipMemPoolImportFromShareableHandle.mem_pool = (struct ihipMemPoolHandle_t **) mem_pool; \
	activity->hip_args.hipMemPoolImportFromShareableHandle.shared_handle = (void *) shared_handle; \
	activity->hip_args.hipMemPoolImportFromShareableHandle.handle_type = (hipMemAllocationHandleType) handle_type; \
	activity->hip_args.hipMemPoolImportFromShareableHandle.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMemPoolImportFromShareableHandle(args) { \
	if (args->hipMemPoolImportFromShareableHandle.mem_pool != NULL) { \
		args->hipMemPoolImportFromShareableHandle.mem_pool__ref.ptr1 = *args->hipMemPoolImportFromShareableHandle.mem_pool; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolExportToShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolExportToShareableHandle` function call.
 *
 * @struct args_hipMemPoolExportToShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolExportToShareableHandle (
 *			void * shared_handle (void *)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemAllocationHandleType handle_type (enum hipMemAllocationHandleType)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipMemPoolExportToShareableHandle_t {
	void * shared_handle;
	struct ihipMemPoolHandle_t * mem_pool;
	hipMemAllocationHandleType handle_type;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolExportToShareableHandle(activity) { \
	activity->hip_args.hipMemPoolExportToShareableHandle.shared_handle = (void *) shared_handle; \
	activity->hip_args.hipMemPoolExportToShareableHandle.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMemPoolExportToShareableHandle.handle_type = (hipMemAllocationHandleType) handle_type; \
	activity->hip_args.hipMemPoolExportToShareableHandle.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParamsToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParamsToSymbol` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParamsToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParamsToSymbol (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphExecMemcpyNodeSetParamsToSymbol_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	void * symbol;
	void * src;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParamsToSymbol(activity) { \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsToSymbol.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsToSymbol.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsToSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsToSymbol.src = (void *) src; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsToSymbol.count = (size_t) count; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsToSymbol.offset = (size_t) offset; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParamsToSymbol.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipmapFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipmapFilterMode` function call.
 *
 * @struct args_hipTexRefGetMipmapFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipmapFilterMode (
 *			enum hipTextureFilterMode * pfm (enum hipTextureFilterMode *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetMipmapFilterMode_t {
	enum hipTextureFilterMode * pfm;
	struct {
		enum hipTextureFilterMode val;
	} pfm__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetMipmapFilterMode(activity) { \
	activity->hip_args.hipTexRefGetMipmapFilterMode.pfm = (enum hipTextureFilterMode *) pfm; \
	activity->hip_args.hipTexRefGetMipmapFilterMode.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipmapFilterMode(args) { \
	if (args->hipTexRefGetMipmapFilterMode.pfm != NULL) { \
		args->hipTexRefGetMipmapFilterMode.pfm__ref.val = *args->hipTexRefGetMipmapFilterMode.pfm; \
	} \
	if (args->hipTexRefGetMipmapFilterMode.texRef != NULL) { \
		args->hipTexRefGetMipmapFilterMode.texRef__ref.val = *args->hipTexRefGetMipmapFilterMode.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetProcAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetProcAddress` function call.
 *
 * @struct args_hipGetProcAddress_t
 *
 * @note 
 *	hipError_t
 *	hipGetProcAddress (
 *			const char * symbol (const char *)
 *			void ** pfn (void **)
 *			int hipVersion (int)
 *			uint64_t flags (unsigned long)
 *			hipDriverProcAddressQueryResult * symbolStatus (enum hipDriverProcAddressQueryResult*)
 *	)
 */
struct args_hipGetProcAddress_t {
	char * symbol;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} symbol__ref;
	void ** pfn;
	struct {
		void* ptr1;
	} pfn__ref;
	int hipVersion;
	uint64_t flags;
	hipDriverProcAddressQueryResult * symbolStatus;
	struct {
		hipDriverProcAddressQueryResult val;
	} symbolStatus__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetProcAddress(activity) { \
	activity->hip_args.hipGetProcAddress.symbol = (char *) symbol; \
	activity->hip_args.hipGetProcAddress.pfn = (void **) pfn; \
	activity->hip_args.hipGetProcAddress.hipVersion = (int) hipVersion; \
	activity->hip_args.hipGetProcAddress.flags = (uint64_t) flags; \
	activity->hip_args.hipGetProcAddress.symbolStatus = (hipDriverProcAddressQueryResult *) symbolStatus; \
};

#define GET_PTRS_VALUE_hipGetProcAddress(args) { \
	if (args->hipGetProcAddress.symbol != NULL) { \
		strncpy(args->hipGetProcAddress.symbol__ref.val, args->hipGetProcAddress.symbol, HIP_STRING_SIZE_MAX-1); \
	} \
	if (args->hipGetProcAddress.pfn != NULL) { \
		args->hipGetProcAddress.pfn__ref.ptr1 = *args->hipGetProcAddress.pfn; \
	} \
	if (args->hipGetProcAddress.symbolStatus != NULL) { \
		args->hipGetProcAddress.symbolStatus__ref.val = *args->hipGetProcAddress.symbolStatus; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipCreateTextureObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCreateTextureObject` function call.
 *
 * @struct args_hipCreateTextureObject_t
 *
 * @note 
 *	hipError_t
 *	hipCreateTextureObject (
 *			hipTextureObject_t * pTexObject (struct __hip_texture **)
 *			const hipResourceDesc * pResDesc (const struct hipResourceDesc *)
 *			const hipTextureDesc * pTexDesc (const struct hipTextureDesc *)
 *			const struct hipResourceViewDesc * pResViewDesc (const struct hipResourceViewDesc *)
 *	)
 */
struct args_hipCreateTextureObject_t {
	struct __hip_texture ** pTexObject;
	struct {
		void* ptr1;
	} pTexObject__ref;
	hipResourceDesc * pResDesc;
	struct {
		hipResourceDesc val;
	} pResDesc__ref;
	hipTextureDesc * pTexDesc;
	struct {
		hipTextureDesc val;
	} pTexDesc__ref;
	struct hipResourceViewDesc * pResViewDesc;
	struct {
		struct hipResourceViewDesc val;
	} pResViewDesc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCreateTextureObject(activity) { \
	activity->hip_args.hipCreateTextureObject.pTexObject = (struct __hip_texture **) pTexObject; \
	activity->hip_args.hipCreateTextureObject.pResDesc = (hipResourceDesc *) pResDesc; \
	activity->hip_args.hipCreateTextureObject.pTexDesc = (hipTextureDesc *) pTexDesc; \
	activity->hip_args.hipCreateTextureObject.pResViewDesc = (struct hipResourceViewDesc *) pResViewDesc; \
};

#define GET_PTRS_VALUE_hipCreateTextureObject(args) { \
	if (args->hipCreateTextureObject.pTexObject != NULL) { \
		args->hipCreateTextureObject.pTexObject__ref.ptr1 = *args->hipCreateTextureObject.pTexObject; \
	} \
	if (args->hipCreateTextureObject.pResDesc != NULL) { \
		args->hipCreateTextureObject.pResDesc__ref.val = *args->hipCreateTextureObject.pResDesc; \
	} \
	if (args->hipCreateTextureObject.pTexDesc != NULL) { \
		args->hipCreateTextureObject.pTexDesc__ref.val = *args->hipCreateTextureObject.pTexDesc; \
	} \
	if (args->hipCreateTextureObject.pResViewDesc != NULL) { \
		args->hipCreateTextureObject.pResViewDesc__ref.val = *args->hipCreateTextureObject.pResViewDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeCopyAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeCopyAttributes` function call.
 *
 * @struct args_hipGraphKernelNodeCopyAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeCopyAttributes (
 *			hipGraphNode_t hSrc (struct hipGraphNode *)
 *			hipGraphNode_t hDst (struct hipGraphNode *)
 *	)
 */
struct args_hipGraphKernelNodeCopyAttributes_t {
	struct hipGraphNode * hSrc;
	struct hipGraphNode * hDst;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphKernelNodeCopyAttributes(activity) { \
	activity->hip_args.hipGraphKernelNodeCopyAttributes.hSrc = (struct hipGraphNode *) hSrc; \
	activity->hip_args.hipGraphKernelNodeCopyAttributes.hDst = (struct hipGraphNode *) hDst; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetFlags` function call.
 *
 * @struct args_hipTexRefGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetFlags (
 *			unsigned int * pFlags (unsigned int *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetFlags_t {
	unsigned int * pFlags;
	struct {
		unsigned int val;
	} pFlags__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetFlags(activity) { \
	activity->hip_args.hipTexRefGetFlags.pFlags = (unsigned int *) pFlags; \
	activity->hip_args.hipTexRefGetFlags.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetFlags(args) { \
	if (args->hipTexRefGetFlags.pFlags != NULL) { \
		args->hipTexRefGetFlags.pFlags__ref.val = *args->hipTexRefGetFlags.pFlags; \
	} \
	if (args->hipTexRefGetFlags.texRef != NULL) { \
		args->hipTexRefGetFlags.texRef__ref.val = *args->hipTexRefGetFlags.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvGraphAddMemcpyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGraphAddMemcpyNode` function call.
 *
 * @struct args_hipDrvGraphAddMemcpyNode_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGraphAddMemcpyNode (
 *			hipGraphNode_t * phGraphNode (struct hipGraphNode **)
 *			hipGraph_t hGraph (struct ihipGraph *)
 *			const hipGraphNode_t * dependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const HIP_MEMCPY3D * copyParams (const struct HIP_MEMCPY3D *)
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
struct args_hipDrvGraphAddMemcpyNode_t {
	struct hipGraphNode ** phGraphNode;
	struct {
		void* ptr1;
	} phGraphNode__ref;
	struct ihipGraph * hGraph;
	struct hipGraphNode * * dependencies;
	struct {
		void* ptr1;
	} dependencies__ref;
	size_t numDependencies;
	HIP_MEMCPY3D * copyParams;
	struct {
		HIP_MEMCPY3D val;
	} copyParams__ref;
	struct ihipCtx_t * ctx;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvGraphAddMemcpyNode(activity) { \
	activity->hip_args.hipDrvGraphAddMemcpyNode.phGraphNode = (struct hipGraphNode **) phGraphNode; \
	activity->hip_args.hipDrvGraphAddMemcpyNode.hGraph = (struct ihipGraph *) hGraph; \
	activity->hip_args.hipDrvGraphAddMemcpyNode.dependencies = (struct hipGraphNode * *) dependencies; \
	activity->hip_args.hipDrvGraphAddMemcpyNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipDrvGraphAddMemcpyNode.copyParams = (HIP_MEMCPY3D *) copyParams; \
	activity->hip_args.hipDrvGraphAddMemcpyNode.ctx = (struct ihipCtx_t *) ctx; \
};

#define GET_PTRS_VALUE_hipDrvGraphAddMemcpyNode(args) { \
	if (args->hipDrvGraphAddMemcpyNode.phGraphNode != NULL) { \
		args->hipDrvGraphAddMemcpyNode.phGraphNode__ref.ptr1 = *args->hipDrvGraphAddMemcpyNode.phGraphNode; \
	} \
	if (args->hipDrvGraphAddMemcpyNode.dependencies != NULL) { \
		args->hipDrvGraphAddMemcpyNode.dependencies__ref.ptr1 = *args->hipDrvGraphAddMemcpyNode.dependencies; \
	} \
	if (args->hipDrvGraphAddMemcpyNode.copyParams != NULL) { \
		args->hipDrvGraphAddMemcpyNode.copyParams__ref.val = *args->hipDrvGraphAddMemcpyNode.copyParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemExportToShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemExportToShareableHandle` function call.
 *
 * @struct args_hipMemExportToShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemExportToShareableHandle (
 *			void * shareableHandle (void *)
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *			hipMemAllocationHandleType handleType (enum hipMemAllocationHandleType)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
struct args_hipMemExportToShareableHandle_t {
	void * shareableHandle;
	struct ihipMemGenericAllocationHandle * handle;
	hipMemAllocationHandleType handleType;
	unsigned long long flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemExportToShareableHandle(activity) { \
	activity->hip_args.hipMemExportToShareableHandle.shareableHandle = (void *) shareableHandle; \
	activity->hip_args.hipMemExportToShareableHandle.handle = (struct ihipMemGenericAllocationHandle *) handle; \
	activity->hip_args.hipMemExportToShareableHandle.handleType = (hipMemAllocationHandleType) handleType; \
	activity->hip_args.hipMemExportToShareableHandle.flags = (unsigned long long) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphLaunch_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphLaunch_spt` function call.
 *
 * @struct args_hipGraphLaunch_spt_t
 *
 * @note 
 *	hipError_t
 *	hipGraphLaunch_spt (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipGraphLaunch_spt_t {
	struct hipGraphExec * graphExec;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphLaunch_spt(activity) { \
	activity->hip_args.hipGraphLaunch_spt.graphExec = (struct hipGraphExec *) graphExec; \
	activity->hip_args.hipGraphLaunch_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParamsFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParamsFromSymbol` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParamsFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParamsFromSymbol (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphMemcpyNodeSetParamsFromSymbol_t {
	struct hipGraphNode * node;
	void * dst;
	void * symbol;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParamsFromSymbol(activity) { \
	activity->hip_args.hipGraphMemcpyNodeSetParamsFromSymbol.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsFromSymbol.dst = (void *) dst; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsFromSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsFromSymbol.count = (size_t) count; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsFromSymbol.offset = (size_t) offset; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsFromSymbol.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetDependencies` function call.
 *
 * @struct args_hipGraphNodeGetDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetDependencies (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraphNode_t * pDependencies (struct hipGraphNode **)
 *			size_t * pNumDependencies (unsigned long*)
 *	)
 */
struct args_hipGraphNodeGetDependencies_t {
	struct hipGraphNode * node;
	struct hipGraphNode ** pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t * pNumDependencies;
	struct {
		size_t val;
	} pNumDependencies__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphNodeGetDependencies(activity) { \
	activity->hip_args.hipGraphNodeGetDependencies.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphNodeGetDependencies.pDependencies = (struct hipGraphNode **) pDependencies; \
	activity->hip_args.hipGraphNodeGetDependencies.pNumDependencies = (size_t *) pNumDependencies; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetDependencies(args) { \
	if (args->hipGraphNodeGetDependencies.pDependencies != NULL) { \
		args->hipGraphNodeGetDependencies.pDependencies__ref.ptr1 = *args->hipGraphNodeGetDependencies.pDependencies; \
	} \
	if (args->hipGraphNodeGetDependencies.pNumDependencies != NULL) { \
		args->hipGraphNodeGetDependencies.pNumDependencies__ref.val = *args->hipGraphNodeGetDependencies.pNumDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3D` function call.
 *
 * @struct args_hipMemcpy3D_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3D (
 *			const struct hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *	)
 */
struct args_hipMemcpy3D_t {
	struct hipMemcpy3DParms * p;
	struct {
		struct hipMemcpy3DParms val;
	} p__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy3D(activity) { \
	activity->hip_args.hipMemcpy3D.p = (struct hipMemcpy3DParms *) p; \
};

#define GET_PTRS_VALUE_hipMemcpy3D(args) { \
	if (args->hipMemcpy3D.p != NULL) { \
		args->hipMemcpy3D.p__ref.val = *args->hipMemcpy3D.p; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNodeFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNodeFromSymbol` function call.
 *
 * @struct args_hipGraphAddMemcpyNodeFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNodeFromSymbol (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphAddMemcpyNodeFromSymbol_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	void * dst;
	void * symbol;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddMemcpyNodeFromSymbol(activity) { \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.dst = (void *) dst; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.count = (size_t) count; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.offset = (size_t) offset; \
	activity->hip_args.hipGraphAddMemcpyNodeFromSymbol.kind = (hipMemcpyKind) kind; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNodeFromSymbol(args) { \
	if (args->hipGraphAddMemcpyNodeFromSymbol.pGraphNode != NULL) { \
		args->hipGraphAddMemcpyNodeFromSymbol.pGraphNode__ref.ptr1 = *args->hipGraphAddMemcpyNodeFromSymbol.pGraphNode; \
	} \
	if (args->hipGraphAddMemcpyNodeFromSymbol.pDependencies != NULL) { \
		args->hipGraphAddMemcpyNodeFromSymbol.pDependencies__ref.ptr1 = *args->hipGraphAddMemcpyNodeFromSymbol.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetPriority_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetPriority_spt` function call.
 *
 * @struct args_hipStreamGetPriority_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetPriority_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			int * priority (int *)
 *	)
 */
struct args_hipStreamGetPriority_spt_t {
	struct ihipStream_t * stream;
	int * priority;
	struct {
		int val;
	} priority__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetPriority_spt(activity) { \
	activity->hip_args.hipStreamGetPriority_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetPriority_spt.priority = (int *) priority; \
};

#define GET_PTRS_VALUE_hipStreamGetPriority_spt(args) { \
	if (args->hipStreamGetPriority_spt.priority != NULL) { \
		args->hipStreamGetPriority_spt.priority__ref.val = *args->hipStreamGetPriority_spt.priority; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleLoadData` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLoadData` function call.
 *
 * @struct args_hipModuleLoadData_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLoadData (
 *			hipModule_t * module (struct ihipModule_t **)
 *			const void * image (const void *)
 *	)
 */
struct args_hipModuleLoadData_t {
	struct ihipModule_t ** module;
	struct {
		void* ptr1;
	} module__ref;
	void * image;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleLoadData(activity) { \
	activity->hip_args.hipModuleLoadData.module = (struct ihipModule_t **) module; \
	activity->hip_args.hipModuleLoadData.image = (void *) image; \
};

#define GET_PTRS_VALUE_hipModuleLoadData(args) { \
	if (args->hipModuleLoadData.module != NULL) { \
		args->hipModuleLoadData.module__ref.ptr1 = *args->hipModuleLoadData.module; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipSetDeviceFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetDeviceFlags` function call.
 *
 * @struct args_hipSetDeviceFlags_t
 *
 * @note 
 *	hipError_t
 *	hipSetDeviceFlags (
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipSetDeviceFlags_t {
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipSetDeviceFlags(activity) { \
	activity->hip_args.hipSetDeviceFlags.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipExternalMemoryGetMappedBuffer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExternalMemoryGetMappedBuffer` function call.
 *
 * @struct args_hipExternalMemoryGetMappedBuffer_t
 *
 * @note 
 *	hipError_t
 *	hipExternalMemoryGetMappedBuffer (
 *			void ** devPtr (void **)
 *			hipExternalMemory_t extMem (void *)
 *			const hipExternalMemoryBufferDesc * bufferDesc (const struct hipExternalMemoryBufferDesc_st *)
 *	)
 */
struct args_hipExternalMemoryGetMappedBuffer_t {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	void * extMem;
	hipExternalMemoryBufferDesc * bufferDesc;
	struct {
		hipExternalMemoryBufferDesc val;
	} bufferDesc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExternalMemoryGetMappedBuffer(activity) { \
	activity->hip_args.hipExternalMemoryGetMappedBuffer.devPtr = (void **) devPtr; \
	activity->hip_args.hipExternalMemoryGetMappedBuffer.extMem = (void *) extMem; \
	activity->hip_args.hipExternalMemoryGetMappedBuffer.bufferDesc = (hipExternalMemoryBufferDesc *) bufferDesc; \
};

#define GET_PTRS_VALUE_hipExternalMemoryGetMappedBuffer(args) { \
	if (args->hipExternalMemoryGetMappedBuffer.devPtr != NULL) { \
		args->hipExternalMemoryGetMappedBuffer.devPtr__ref.ptr1 = *args->hipExternalMemoryGetMappedBuffer.devPtr; \
	} \
	if (args->hipExternalMemoryGetMappedBuffer.bufferDesc != NULL) { \
		args->hipExternalMemoryGetMappedBuffer.bufferDesc__ref.val = *args->hipExternalMemoryGetMappedBuffer.bufferDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchCooperativeKernel_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchCooperativeKernel_spt` function call.
 *
 * @struct args_hipLaunchCooperativeKernel_spt_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchCooperativeKernel_spt (
 *			const void * f (const void *)
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDim (struct dim3)
 *			void ** kernelParams (void **)
 *			uint32_t sharedMemBytes (unsigned int)
 *			hipStream_t hStream (struct ihipStream_t *)
 *	)
 */
struct args_hipLaunchCooperativeKernel_spt_t {
	void * f;
	dim3 gridDim;
	dim3 blockDim;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	uint32_t sharedMemBytes;
	struct ihipStream_t * hStream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchCooperativeKernel_spt(activity) { \
	activity->hip_args.hipLaunchCooperativeKernel_spt.f = (void *) f; \
	activity->hip_args.hipLaunchCooperativeKernel_spt.gridDim = (dim3) gridDim; \
	activity->hip_args.hipLaunchCooperativeKernel_spt.blockDim = (dim3) blockDim; \
	activity->hip_args.hipLaunchCooperativeKernel_spt.kernelParams = (void **) kernelParams; \
	activity->hip_args.hipLaunchCooperativeKernel_spt.sharedMemBytes = (uint32_t) sharedMemBytes; \
	activity->hip_args.hipLaunchCooperativeKernel_spt.hStream = (struct ihipStream_t *) hStream; \
};

#define GET_PTRS_VALUE_hipLaunchCooperativeKernel_spt(args) { \
	if (args->hipLaunchCooperativeKernel_spt.kernelParams != NULL) { \
		args->hipLaunchCooperativeKernel_spt.kernelParams__ref.ptr1 = *args->hipLaunchCooperativeKernel_spt.kernelParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchHostFunc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchHostFunc` function call.
 *
 * @struct args_hipLaunchHostFunc_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchHostFunc (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipHostFn_t fn (void (*)(void *))
 *			void * userData (void *)
 *	)
 */
struct args_hipLaunchHostFunc_t {
	struct ihipStream_t * stream;
	hipHostFn_t fn;
	void * userData;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchHostFunc(activity) { \
	activity->hip_args.hipLaunchHostFunc.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipLaunchHostFunc.fn = (hipHostFn_t) fn; \
	activity->hip_args.hipLaunchHostFunc.userData = (void *) userData; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAsync_spt` function call.
 *
 * @struct args_hipMemcpyAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAsync_spt (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyAsync_spt_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyAsync_spt(activity) { \
	activity->hip_args.hipMemcpyAsync_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpyAsync_spt.src = (void *) src; \
	activity->hip_args.hipMemcpyAsync_spt.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyAsync_spt.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpyAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyPeer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyPeer` function call.
 *
 * @struct args_hipMemcpyPeer_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyPeer (
 *			void * dst (void *)
 *			int dstDeviceId (int)
 *			const void * src (const void *)
 *			int srcDeviceId (int)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
struct args_hipMemcpyPeer_t {
	void * dst;
	int dstDeviceId;
	void * src;
	int srcDeviceId;
	size_t sizeBytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyPeer(activity) { \
	activity->hip_args.hipMemcpyPeer.dst = (void *) dst; \
	activity->hip_args.hipMemcpyPeer.dstDeviceId = (int) dstDeviceId; \
	activity->hip_args.hipMemcpyPeer.src = (void *) src; \
	activity->hip_args.hipMemcpyPeer.srcDeviceId = (int) srcDeviceId; \
	activity->hip_args.hipMemcpyPeer.sizeBytes = (size_t) sizeBytes; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceReset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceReset` function call.
 *
 * @struct args_hipDeviceReset_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceReset (
 *	)
 */
struct args_hipDeviceReset_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipMemAddressFree` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAddressFree` function call.
 *
 * @struct args_hipMemAddressFree_t
 *
 * @note 
 *	hipError_t
 *	hipMemAddressFree (
 *			void * devPtr (void *)
 *			size_t size (unsigned long)
 *	)
 */
struct args_hipMemAddressFree_t {
	void * devPtr;
	size_t size;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemAddressFree(activity) { \
	activity->hip_args.hipMemAddressFree.devPtr = (void *) devPtr; \
	activity->hip_args.hipMemAddressFree.size = (size_t) size; \
};

/**
 * @brief Structure to hold the arguments for the `hipProfilerStop` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipProfilerStop` function call.
 *
 * @struct args_hipProfilerStop_t
 *
 * @note 
 *	hipError_t
 *	hipProfilerStop (
 *	)
 */
struct args_hipProfilerStop_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipGraphEventWaitNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventWaitNodeSetEvent` function call.
 *
 * @struct args_hipGraphEventWaitNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventWaitNodeSetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipGraphEventWaitNodeSetEvent_t {
	struct hipGraphNode * node;
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphEventWaitNodeSetEvent(activity) { \
	activity->hip_args.hipGraphEventWaitNodeSetEvent.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphEventWaitNodeSetEvent.event = (struct ihipEvent_t *) event; \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleLaunchCooperativeKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLaunchCooperativeKernel` function call.
 *
 * @struct args_hipModuleLaunchCooperativeKernel_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLaunchCooperativeKernel (
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			unsigned int gridDimX (unsigned int)
 *			unsigned int gridDimY (unsigned int)
 *			unsigned int gridDimZ (unsigned int)
 *			unsigned int blockDimX (unsigned int)
 *			unsigned int blockDimY (unsigned int)
 *			unsigned int blockDimZ (unsigned int)
 *			unsigned int sharedMemBytes (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *			void ** kernelParams (void **)
 *	)
 */
struct args_hipModuleLaunchCooperativeKernel_t {
	struct ihipModuleSymbol_t * f;
	unsigned int gridDimX;
	unsigned int gridDimY;
	unsigned int gridDimZ;
	unsigned int blockDimX;
	unsigned int blockDimY;
	unsigned int blockDimZ;
	unsigned int sharedMemBytes;
	struct ihipStream_t * stream;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleLaunchCooperativeKernel(activity) { \
	activity->hip_args.hipModuleLaunchCooperativeKernel.f = (struct ihipModuleSymbol_t *) f; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.gridDimX = (unsigned int) gridDimX; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.gridDimY = (unsigned int) gridDimY; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.gridDimZ = (unsigned int) gridDimZ; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.blockDimX = (unsigned int) blockDimX; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.blockDimY = (unsigned int) blockDimY; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.blockDimZ = (unsigned int) blockDimZ; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.sharedMemBytes = (unsigned int) sharedMemBytes; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipModuleLaunchCooperativeKernel.kernelParams = (void **) kernelParams; \
};

#define GET_PTRS_VALUE_hipModuleLaunchCooperativeKernel(args) { \
	if (args->hipModuleLaunchCooperativeKernel.kernelParams != NULL) { \
		args->hipModuleLaunchCooperativeKernel.kernelParams__ref.ptr1 = *args->hipModuleLaunchCooperativeKernel.kernelParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetName` function call.
 *
 * @struct args_hipDeviceGetName_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetName (
 *			char * name (char *)
 *			int len (int)
 *			hipDevice_t device (int)
 *	)
 */
struct args_hipDeviceGetName_t {
	char * name;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} name__ref;
	int len;
	hipDevice_t device;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetName(activity) { \
	activity->hip_args.hipDeviceGetName.name = (char *) name; \
	activity->hip_args.hipDeviceGetName.len = (int) len; \
	activity->hip_args.hipDeviceGetName.device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetName(args) { \
	if (args->hipDeviceGetName.name != NULL) { \
		strncpy(args->hipDeviceGetName.name__ref.val, args->hipDeviceGetName.name, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeSetEnabled` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeSetEnabled` function call.
 *
 * @struct args_hipGraphNodeSetEnabled_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeSetEnabled (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			unsigned int isEnabled (unsigned int)
 *	)
 */
struct args_hipGraphNodeSetEnabled_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * hNode;
	unsigned int isEnabled;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphNodeSetEnabled(activity) { \
	activity->hip_args.hipGraphNodeSetEnabled.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphNodeSetEnabled.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphNodeSetEnabled.isEnabled = (unsigned int) isEnabled; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetAddressMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetAddressMode` function call.
 *
 * @struct args_hipTexRefSetAddressMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetAddressMode (
 *			textureReference * texRef (struct textureReference*)
 *			int dim (int)
 *			enum hipTextureAddressMode am (enum hipTextureAddressMode)
 *	)
 */
struct args_hipTexRefSetAddressMode_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	int dim;
	enum hipTextureAddressMode am;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetAddressMode(activity) { \
	activity->hip_args.hipTexRefSetAddressMode.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetAddressMode.dim = (int) dim; \
	activity->hip_args.hipTexRefSetAddressMode.am = (enum hipTextureAddressMode) am; \
};

#define GET_PTRS_VALUE_hipTexRefSetAddressMode(args) { \
	if (args->hipTexRefSetAddressMode.texRef != NULL) { \
		args->hipTexRefSetAddressMode.texRef__ref.val = *args->hipTexRefSetAddressMode.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipEventSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventSynchronize` function call.
 *
 * @struct args_hipEventSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipEventSynchronize (
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipEventSynchronize_t {
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventSynchronize(activity) { \
	activity->hip_args.hipEventSynchronize.event = (struct ihipEvent_t *) event; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphGetRootNodes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphGetRootNodes` function call.
 *
 * @struct args_hipGraphGetRootNodes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphGetRootNodes (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * pRootNodes (struct hipGraphNode **)
 *			size_t * pNumRootNodes (unsigned long*)
 *	)
 */
struct args_hipGraphGetRootNodes_t {
	struct ihipGraph * graph;
	struct hipGraphNode ** pRootNodes;
	struct {
		void* ptr1;
	} pRootNodes__ref;
	size_t * pNumRootNodes;
	struct {
		size_t val;
	} pNumRootNodes__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphGetRootNodes(activity) { \
	activity->hip_args.hipGraphGetRootNodes.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphGetRootNodes.pRootNodes = (struct hipGraphNode **) pRootNodes; \
	activity->hip_args.hipGraphGetRootNodes.pNumRootNodes = (size_t *) pNumRootNodes; \
};

#define GET_PTRS_VALUE_hipGraphGetRootNodes(args) { \
	if (args->hipGraphGetRootNodes.pRootNodes != NULL) { \
		args->hipGraphGetRootNodes.pRootNodes__ref.ptr1 = *args->hipGraphGetRootNodes.pRootNodes; \
	} \
	if (args->hipGraphGetRootNodes.pNumRootNodes != NULL) { \
		args->hipGraphGetRootNodes.pNumRootNodes__ref.val = *args->hipGraphGetRootNodes.pNumRootNodes; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArray` function call.
 *
 * @struct args_hipMemcpy2DFromArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArray (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy2DFromArray_t {
	void * dst;
	size_t dpitch;
	struct hipArray * src;
	size_t wOffset;
	size_t hOffset;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DFromArray(activity) { \
	activity->hip_args.hipMemcpy2DFromArray.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2DFromArray.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2DFromArray.src = (struct hipArray *) src; \
	activity->hip_args.hipMemcpy2DFromArray.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpy2DFromArray.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpy2DFromArray.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DFromArray.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DFromArray.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresWaitNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresWaitNodeSetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresWaitNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresWaitNodeSetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreWaitNodeParams * nodeParams (const struct hipExternalSemaphoreWaitNodeParams *)
 *	)
 */
struct args_hipGraphExternalSemaphoresWaitNodeSetParams_t {
	struct hipGraphNode * hNode;
	hipExternalSemaphoreWaitNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresWaitNodeSetParams(activity) { \
	activity->hip_args.hipGraphExternalSemaphoresWaitNodeSetParams.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExternalSemaphoresWaitNodeSetParams.nodeParams = (hipExternalSemaphoreWaitNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeSetParams(args) { \
	if (args->hipGraphExternalSemaphoresWaitNodeSetParams.nodeParams != NULL) { \
		args->hipGraphExternalSemaphoresWaitNodeSetParams.nodeParams__ref.val = *args->hipGraphExternalSemaphoresWaitNodeSetParams.nodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoA` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoA` function call.
 *
 * @struct args_hipMemcpyDtoA_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoA (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			hipDeviceptr_t srcDevice (void *)
 *			size_t ByteCount (unsigned long)
 *	)
 */
struct args_hipMemcpyDtoA_t {
	struct hipArray * dstArray;
	size_t dstOffset;
	void * srcDevice;
	size_t ByteCount;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyDtoA(activity) { \
	activity->hip_args.hipMemcpyDtoA.dstArray = (struct hipArray *) dstArray; \
	activity->hip_args.hipMemcpyDtoA.dstOffset = (size_t) dstOffset; \
	activity->hip_args.hipMemcpyDtoA.srcDevice = (void *) srcDevice; \
	activity->hip_args.hipMemcpyDtoA.ByteCount = (size_t) ByteCount; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeGetParams` function call.
 *
 * @struct args_hipGraphMemcpyNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemcpy3DParms * pNodeParams (struct hipMemcpy3DParms*)
 *	)
 */
struct args_hipGraphMemcpyNodeGetParams_t {
	struct hipGraphNode * node;
	hipMemcpy3DParms * pNodeParams;
	struct {
		hipMemcpy3DParms val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemcpyNodeGetParams(activity) { \
	activity->hip_args.hipGraphMemcpyNodeGetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemcpyNodeGetParams.pNodeParams = (hipMemcpy3DParms *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemcpyNodeGetParams(args) { \
	if (args->hipGraphMemcpyNodeGetParams.pNodeParams != NULL) { \
		args->hipGraphMemcpyNodeGetParams.pNodeParams__ref.val = *args->hipGraphMemcpyNodeGetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy` function call.
 *
 * @struct args_hipMemcpy_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy(activity) { \
	activity->hip_args.hipMemcpy.dst = (void *) dst; \
	activity->hip_args.hipMemcpy.src = (void *) src; \
	activity->hip_args.hipMemcpy.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpy.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipSetValidDevices` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetValidDevices` function call.
 *
 * @struct args_hipSetValidDevices_t
 *
 * @note 
 *	hipError_t
 *	hipSetValidDevices (
 *			int * device_arr (int *)
 *			int len (int)
 *	)
 */
struct args_hipSetValidDevices_t {
	int * device_arr;
	struct {
		int val;
	} device_arr__ref;
	int len;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipSetValidDevices(activity) { \
	activity->hip_args.hipSetValidDevices.device_arr = (int *) device_arr; \
	activity->hip_args.hipSetValidDevices.len = (int) len; \
};

#define GET_PTRS_VALUE_hipSetValidDevices(args) { \
	if (args->hipSetValidDevices.device_arr != NULL) { \
		args->hipSetValidDevices.device_arr__ref.val = *args->hipSetValidDevices.device_arr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DAsync` function call.
 *
 * @struct args_hipMemcpy2DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DAsync (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy2DAsync_t {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DAsync(activity) { \
	activity->hip_args.hipMemcpy2DAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2DAsync.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2DAsync.src = (void *) src; \
	activity->hip_args.hipMemcpy2DAsync.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2DAsync.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DAsync.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DAsync.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpy2DAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecExternalSemaphoresWaitNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecExternalSemaphoresWaitNodeSetParams` function call.
 *
 * @struct args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecExternalSemaphoresWaitNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreWaitNodeParams * nodeParams (const struct hipExternalSemaphoreWaitNodeParams *)
 *	)
 */
struct args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * hNode;
	hipExternalSemaphoreWaitNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecExternalSemaphoresWaitNodeSetParams(activity) { \
	activity->hip_args.hipGraphExecExternalSemaphoresWaitNodeSetParams.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecExternalSemaphoresWaitNodeSetParams.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExecExternalSemaphoresWaitNodeSetParams.nodeParams = (hipExternalSemaphoreWaitNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecExternalSemaphoresWaitNodeSetParams(args) { \
	if (args->hipGraphExecExternalSemaphoresWaitNodeSetParams.nodeParams != NULL) { \
		args->hipGraphExecExternalSemaphoresWaitNodeSetParams.nodeParams__ref.val = *args->hipGraphExecExternalSemaphoresWaitNodeSetParams.nodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamAttachMemAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamAttachMemAsync` function call.
 *
 * @struct args_hipStreamAttachMemAsync_t
 *
 * @note 
 *	hipError_t
 *	hipStreamAttachMemAsync (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * dev_ptr (void *)
 *			size_t length (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamAttachMemAsync_t {
	struct ihipStream_t * stream;
	void * dev_ptr;
	size_t length;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamAttachMemAsync(activity) { \
	activity->hip_args.hipStreamAttachMemAsync.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamAttachMemAsync.dev_ptr = (void *) dev_ptr; \
	activity->hip_args.hipStreamAttachMemAsync.length = (size_t) length; \
	activity->hip_args.hipStreamAttachMemAsync.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset2DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2DAsync` function call.
 *
 * @struct args_hipMemset2DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2DAsync (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemset2DAsync_t {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset2DAsync(activity) { \
	activity->hip_args.hipMemset2DAsync.dst = (void *) dst; \
	activity->hip_args.hipMemset2DAsync.pitch = (size_t) pitch; \
	activity->hip_args.hipMemset2DAsync.value = (int) value; \
	activity->hip_args.hipMemset2DAsync.width = (size_t) width; \
	activity->hip_args.hipMemset2DAsync.height = (size_t) height; \
	activity->hip_args.hipMemset2DAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexObjectGetResourceViewDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectGetResourceViewDesc` function call.
 *
 * @struct args_hipTexObjectGetResourceViewDesc_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectGetResourceViewDesc (
 *			HIP_RESOURCE_VIEW_DESC * pResViewDesc (struct HIP_RESOURCE_VIEW_DESC_st*)
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
struct args_hipTexObjectGetResourceViewDesc_t {
	HIP_RESOURCE_VIEW_DESC * pResViewDesc;
	struct {
		HIP_RESOURCE_VIEW_DESC val;
	} pResViewDesc__ref;
	struct __hip_texture * texObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexObjectGetResourceViewDesc(activity) { \
	activity->hip_args.hipTexObjectGetResourceViewDesc.pResViewDesc = (HIP_RESOURCE_VIEW_DESC *) pResViewDesc; \
	activity->hip_args.hipTexObjectGetResourceViewDesc.texObject = (struct __hip_texture *) texObject; \
};

#define GET_PTRS_VALUE_hipTexObjectGetResourceViewDesc(args) { \
	if (args->hipTexObjectGetResourceViewDesc.pResViewDesc != NULL) { \
		args->hipTexObjectGetResourceViewDesc.pResViewDesc__ref.val = *args->hipTexObjectGetResourceViewDesc.pResViewDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipEventCreateWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventCreateWithFlags` function call.
 *
 * @struct args_hipEventCreateWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipEventCreateWithFlags (
 *			hipEvent_t * event (struct ihipEvent_t **)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipEventCreateWithFlags_t {
	struct ihipEvent_t ** event;
	struct {
		void* ptr1;
	} event__ref;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventCreateWithFlags(activity) { \
	activity->hip_args.hipEventCreateWithFlags.event = (struct ihipEvent_t **) event; \
	activity->hip_args.hipEventCreateWithFlags.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipEventCreateWithFlags(args) { \
	if (args->hipEventCreateWithFlags.event != NULL) { \
		args->hipEventCreateWithFlags.event__ref.ptr1 = *args->hipEventCreateWithFlags.event; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMipmappedArrayCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMipmappedArrayCreate` function call.
 *
 * @struct args_hipMipmappedArrayCreate_t
 *
 * @note 
 *	hipError_t
 *	hipMipmappedArrayCreate (
 *			hipMipmappedArray_t * pHandle (struct hipMipmappedArray **)
 *			HIP_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc (struct HIP_ARRAY3D_DESCRIPTOR*)
 *			unsigned int numMipmapLevels (unsigned int)
 *	)
 */
struct args_hipMipmappedArrayCreate_t {
	struct hipMipmappedArray ** pHandle;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} pHandle__ref;
	HIP_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc;
	struct {
		HIP_ARRAY3D_DESCRIPTOR val;
	} pMipmappedArrayDesc__ref;
	unsigned int numMipmapLevels;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMipmappedArrayCreate(activity) { \
	activity->hip_args.hipMipmappedArrayCreate.pHandle = (struct hipMipmappedArray **) pHandle; \
	activity->hip_args.hipMipmappedArrayCreate.pMipmappedArrayDesc = (HIP_ARRAY3D_DESCRIPTOR *) pMipmappedArrayDesc; \
	activity->hip_args.hipMipmappedArrayCreate.numMipmapLevels = (unsigned int) numMipmapLevels; \
};

#define GET_PTRS_VALUE_hipMipmappedArrayCreate(args) { \
	if (args->hipMipmappedArrayCreate.pHandle != NULL) { \
		args->hipMipmappedArrayCreate.pHandle__ref.ptr1 = *args->hipMipmappedArrayCreate.pHandle; \
		if (args->hipMipmappedArrayCreate.pHandle__ref.ptr1 != NULL) { \
			args->hipMipmappedArrayCreate.pHandle__ref.val = **args->hipMipmappedArrayCreate.pHandle; \
		} \
	} \
	if (args->hipMipmappedArrayCreate.pMipmappedArrayDesc != NULL) { \
		args->hipMipmappedArrayCreate.pMipmappedArrayDesc__ref.val = *args->hipMipmappedArrayCreate.pMipmappedArrayDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2D_spt` function call.
 *
 * @struct args_hipMemcpy2D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2D_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy2D_spt_t {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2D_spt(activity) { \
	activity->hip_args.hipMemcpy2D_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2D_spt.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2D_spt.src = (void *) src; \
	activity->hip_args.hipMemcpy2D_spt.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2D_spt.width = (size_t) width; \
	activity->hip_args.hipMemcpy2D_spt.height = (size_t) height; \
	activity->hip_args.hipMemcpy2D_spt.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNode` function call.
 *
 * @struct args_hipGraphAddMemcpyNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipMemcpy3DParms * pCopyParams (const struct hipMemcpy3DParms *)
 *	)
 */
struct args_hipGraphAddMemcpyNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipMemcpy3DParms * pCopyParams;
	struct {
		hipMemcpy3DParms val;
	} pCopyParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddMemcpyNode(activity) { \
	activity->hip_args.hipGraphAddMemcpyNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddMemcpyNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddMemcpyNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddMemcpyNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddMemcpyNode.pCopyParams = (hipMemcpy3DParms *) pCopyParams; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNode(args) { \
	if (args->hipGraphAddMemcpyNode.pGraphNode != NULL) { \
		args->hipGraphAddMemcpyNode.pGraphNode__ref.ptr1 = *args->hipGraphAddMemcpyNode.pGraphNode; \
	} \
	if (args->hipGraphAddMemcpyNode.pDependencies != NULL) { \
		args->hipGraphAddMemcpyNode.pDependencies__ref.ptr1 = *args->hipGraphAddMemcpyNode.pDependencies; \
	} \
	if (args->hipGraphAddMemcpyNode.pCopyParams != NULL) { \
		args->hipGraphAddMemcpyNode.pCopyParams__ref.val = *args->hipGraphAddMemcpyNode.pCopyParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbolAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbolAsync` function call.
 *
 * @struct args_hipMemcpyToSymbolAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbolAsync (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyToSymbolAsync_t {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyToSymbolAsync(activity) { \
	activity->hip_args.hipMemcpyToSymbolAsync.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyToSymbolAsync.src = (void *) src; \
	activity->hip_args.hipMemcpyToSymbolAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyToSymbolAsync.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyToSymbolAsync.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpyToSymbolAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMallocFromPoolAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocFromPoolAsync` function call.
 *
 * @struct args_hipMallocFromPoolAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMallocFromPoolAsync (
 *			void ** dev_ptr (void **)
 *			size_t size (unsigned long)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMallocFromPoolAsync_t {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	size_t size;
	struct ihipMemPoolHandle_t * mem_pool;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMallocFromPoolAsync(activity) { \
	activity->hip_args.hipMallocFromPoolAsync.dev_ptr = (void **) dev_ptr; \
	activity->hip_args.hipMallocFromPoolAsync.size = (size_t) size; \
	activity->hip_args.hipMallocFromPoolAsync.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMallocFromPoolAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipMallocFromPoolAsync(args) { \
	if (args->hipMallocFromPoolAsync.dev_ptr != NULL) { \
		args->hipMallocFromPoolAsync.dev_ptr__ref.ptr1 = *args->hipMallocFromPoolAsync.dev_ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function call.
 *
 * @struct args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (
 *			int * numBlocks (int *)
 *			const void * f (const void *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	void * f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(activity) { \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks = (int *) numBlocks; \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.f = (void *) f; \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.blockSize = (int) blockSize; \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	activity->hip_args.hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args) { \
	if (args->hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks != NULL) { \
		args->hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks__ref.val = *args->hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.numBlocks; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemFreeNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemFreeNode` function call.
 *
 * @struct args_hipGraphAddMemFreeNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemFreeNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			void * dev_ptr (void *)
 *	)
 */
struct args_hipGraphAddMemFreeNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	void * dev_ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddMemFreeNode(activity) { \
	activity->hip_args.hipGraphAddMemFreeNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddMemFreeNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddMemFreeNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddMemFreeNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddMemFreeNode.dev_ptr = (void *) dev_ptr; \
};

#define GET_PTRS_VALUE_hipGraphAddMemFreeNode(args) { \
	if (args->hipGraphAddMemFreeNode.pGraphNode != NULL) { \
		args->hipGraphAddMemFreeNode.pGraphNode__ref.ptr1 = *args->hipGraphAddMemFreeNode.pGraphNode; \
	} \
	if (args->hipGraphAddMemFreeNode.pDependencies != NULL) { \
		args->hipGraphAddMemFreeNode.pDependencies__ref.ptr1 = *args->hipGraphAddMemFreeNode.pDependencies; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxActiveBlocksPerMultiprocessor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxActiveBlocksPerMultiprocessor` function call.
 *
 * @struct args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxActiveBlocksPerMultiprocessor (
 *			int * numBlocks (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *	)
 */
struct args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	struct ihipModuleSymbol_t * f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor(activity) { \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks = (int *) numBlocks; \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.f = (struct ihipModuleSymbol_t *) f; \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.blockSize = (int) blockSize; \
	activity->hip_args.hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor(args) { \
	if (args->hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks != NULL) { \
		args->hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks__ref.val = *args->hipModuleOccupancyMaxActiveBlocksPerMultiprocessor.numBlocks; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipEventDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventDestroy` function call.
 *
 * @struct args_hipEventDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipEventDestroy (
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
struct args_hipEventDestroy_t {
	struct ihipEvent_t * event;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventDestroy(activity) { \
	activity->hip_args.hipEventDestroy.event = (struct ihipEvent_t *) event; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetCacheConfig` function call.
 *
 * @struct args_hipDeviceSetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetCacheConfig (
 *			hipFuncCache_t cacheConfig (enum hipFuncCache_t)
 *	)
 */
struct args_hipDeviceSetCacheConfig_t {
	hipFuncCache_t cacheConfig;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceSetCacheConfig(activity) { \
	activity->hip_args.hipDeviceSetCacheConfig.cacheConfig = (hipFuncCache_t) cacheConfig; \
};

/**
 * @brief Structure to hold the arguments for the `hipFree` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFree` function call.
 *
 * @struct args_hipFree_t
 *
 * @note 
 *	hipError_t
 *	hipFree (
 *			void * ptr (void *)
 *	)
 */
struct args_hipFree_t {
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFree(activity) { \
	activity->hip_args.hipFree.ptr = (void *) ptr; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArrayAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArrayAsync_spt` function call.
 *
 * @struct args_hipMemcpy2DToArrayAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArrayAsync_spt (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy2DToArrayAsync_spt_t {
	struct hipArray * dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DToArrayAsync_spt(activity) { \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.dst = (struct hipArray *) dst; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.src = (void *) src; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.kind = (hipMemcpyKind) kind; \
	activity->hip_args.hipMemcpy2DToArrayAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetFlags` function call.
 *
 * @struct args_hipCtxGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetFlags (
 *			unsigned int * flags (unsigned int *)
 *	)
 */
struct args_hipCtxGetFlags_t {
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxGetFlags(activity) { \
	activity->hip_args.hipCtxGetFlags.flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipCtxGetFlags(args) { \
	if (args->hipCtxGetFlags.flags != NULL) { \
		args->hipCtxGetFlags.flags__ref.val = *args->hipCtxGetFlags.flags; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetSymbolAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetSymbolAddress` function call.
 *
 * @struct args_hipGetSymbolAddress_t
 *
 * @note 
 *	hipError_t
 *	hipGetSymbolAddress (
 *			void ** devPtr (void **)
 *			const void * symbol (const void *)
 *	)
 */
struct args_hipGetSymbolAddress_t {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	void * symbol;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetSymbolAddress(activity) { \
	activity->hip_args.hipGetSymbolAddress.devPtr = (void **) devPtr; \
	activity->hip_args.hipGetSymbolAddress.symbol = (void *) symbol; \
};

#define GET_PTRS_VALUE_hipGetSymbolAddress(args) { \
	if (args->hipGetSymbolAddress.devPtr != NULL) { \
		args->hipGetSymbolAddress.devPtr__ref.ptr1 = *args->hipGetSymbolAddress.devPtr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetAddress` function call.
 *
 * @struct args_hipTexRefGetAddress_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetAddress (
 *			hipDeviceptr_t * dev_ptr (void **)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetAddress_t {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetAddress(activity) { \
	activity->hip_args.hipTexRefGetAddress.dev_ptr = (void **) dev_ptr; \
	activity->hip_args.hipTexRefGetAddress.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetAddress(args) { \
	if (args->hipTexRefGetAddress.dev_ptr != NULL) { \
		args->hipTexRefGetAddress.dev_ptr__ref.ptr1 = *args->hipTexRefGetAddress.dev_ptr; \
	} \
	if (args->hipTexRefGetAddress.texRef != NULL) { \
		args->hipTexRefGetAddress.texRef__ref.val = *args->hipTexRefGetAddress.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexObjectCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectCreate` function call.
 *
 * @struct args_hipTexObjectCreate_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectCreate (
 *			hipTextureObject_t * pTexObject (struct __hip_texture **)
 *			const HIP_RESOURCE_DESC * pResDesc (const struct HIP_RESOURCE_DESC_st *)
 *			const HIP_TEXTURE_DESC * pTexDesc (const struct HIP_TEXTURE_DESC_st *)
 *			const HIP_RESOURCE_VIEW_DESC * pResViewDesc (const struct HIP_RESOURCE_VIEW_DESC_st *)
 *	)
 */
struct args_hipTexObjectCreate_t {
	struct __hip_texture ** pTexObject;
	struct {
		void* ptr1;
	} pTexObject__ref;
	HIP_RESOURCE_DESC * pResDesc;
	struct {
		HIP_RESOURCE_DESC val;
	} pResDesc__ref;
	HIP_TEXTURE_DESC * pTexDesc;
	struct {
		HIP_TEXTURE_DESC val;
	} pTexDesc__ref;
	HIP_RESOURCE_VIEW_DESC * pResViewDesc;
	struct {
		HIP_RESOURCE_VIEW_DESC val;
	} pResViewDesc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexObjectCreate(activity) { \
	activity->hip_args.hipTexObjectCreate.pTexObject = (struct __hip_texture **) pTexObject; \
	activity->hip_args.hipTexObjectCreate.pResDesc = (HIP_RESOURCE_DESC *) pResDesc; \
	activity->hip_args.hipTexObjectCreate.pTexDesc = (HIP_TEXTURE_DESC *) pTexDesc; \
	activity->hip_args.hipTexObjectCreate.pResViewDesc = (HIP_RESOURCE_VIEW_DESC *) pResViewDesc; \
};

#define GET_PTRS_VALUE_hipTexObjectCreate(args) { \
	if (args->hipTexObjectCreate.pTexObject != NULL) { \
		args->hipTexObjectCreate.pTexObject__ref.ptr1 = *args->hipTexObjectCreate.pTexObject; \
	} \
	if (args->hipTexObjectCreate.pResDesc != NULL) { \
		args->hipTexObjectCreate.pResDesc__ref.val = *args->hipTexObjectCreate.pResDesc; \
	} \
	if (args->hipTexObjectCreate.pTexDesc != NULL) { \
		args->hipTexObjectCreate.pTexDesc__ref.val = *args->hipTexObjectCreate.pTexDesc; \
	} \
	if (args->hipTexObjectCreate.pResViewDesc != NULL) { \
		args->hipTexObjectCreate.pResViewDesc__ref.val = *args->hipTexObjectCreate.pResViewDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetSharedMemConfig` function call.
 *
 * @struct args_hipDeviceGetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetSharedMemConfig (
 *			hipSharedMemConfig * pConfig (enum hipSharedMemConfig*)
 *	)
 */
struct args_hipDeviceGetSharedMemConfig_t {
	hipSharedMemConfig * pConfig;
	struct {
		hipSharedMemConfig val;
	} pConfig__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetSharedMemConfig(activity) { \
	activity->hip_args.hipDeviceGetSharedMemConfig.pConfig = (hipSharedMemConfig *) pConfig; \
};

#define GET_PTRS_VALUE_hipDeviceGetSharedMemConfig(args) { \
	if (args->hipDeviceGetSharedMemConfig.pConfig != NULL) { \
		args->hipDeviceGetSharedMemConfig.pConfig__ref.val = *args->hipDeviceGetSharedMemConfig.pConfig; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoAAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoAAsync` function call.
 *
 * @struct args_hipMemcpyHtoAAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoAAsync (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			const void * srcHost (const void *)
 *			size_t ByteCount (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyHtoAAsync_t {
	struct hipArray * dstArray;
	size_t dstOffset;
	void * srcHost;
	size_t ByteCount;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyHtoAAsync(activity) { \
	activity->hip_args.hipMemcpyHtoAAsync.dstArray = (struct hipArray *) dstArray; \
	activity->hip_args.hipMemcpyHtoAAsync.dstOffset = (size_t) dstOffset; \
	activity->hip_args.hipMemcpyHtoAAsync.srcHost = (void *) srcHost; \
	activity->hip_args.hipMemcpyHtoAAsync.ByteCount = (size_t) ByteCount; \
	activity->hip_args.hipMemcpyHtoAAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolGetAttribute` function call.
 *
 * @struct args_hipMemPoolGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolGetAttribute (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemPoolAttr attr (enum hipMemPoolAttr)
 *			void * value (void *)
 *	)
 */
struct args_hipMemPoolGetAttribute_t {
	struct ihipMemPoolHandle_t * mem_pool;
	hipMemPoolAttr attr;
	void * value;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolGetAttribute(activity) { \
	activity->hip_args.hipMemPoolGetAttribute.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMemPoolGetAttribute.attr = (hipMemPoolAttr) attr; \
	activity->hip_args.hipMemPoolGetAttribute.value = (void *) value; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemAllocNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemAllocNode` function call.
 *
 * @struct args_hipGraphAddMemAllocNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemAllocNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipMemAllocNodeParams * pNodeParams (struct hipMemAllocNodeParams*)
 *	)
 */
struct args_hipGraphAddMemAllocNode_t {
	struct hipGraphNode ** pGraphNode;
	struct {
		void* ptr1;
	} pGraphNode__ref;
	struct ihipGraph * graph;
	struct hipGraphNode * * pDependencies;
	struct {
		void* ptr1;
	} pDependencies__ref;
	size_t numDependencies;
	hipMemAllocNodeParams * pNodeParams;
	struct {
		hipMemAllocNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddMemAllocNode(activity) { \
	activity->hip_args.hipGraphAddMemAllocNode.pGraphNode = (struct hipGraphNode **) pGraphNode; \
	activity->hip_args.hipGraphAddMemAllocNode.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddMemAllocNode.pDependencies = (struct hipGraphNode * *) pDependencies; \
	activity->hip_args.hipGraphAddMemAllocNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipGraphAddMemAllocNode.pNodeParams = (hipMemAllocNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddMemAllocNode(args) { \
	if (args->hipGraphAddMemAllocNode.pGraphNode != NULL) { \
		args->hipGraphAddMemAllocNode.pGraphNode__ref.ptr1 = *args->hipGraphAddMemAllocNode.pGraphNode; \
	} \
	if (args->hipGraphAddMemAllocNode.pDependencies != NULL) { \
		args->hipGraphAddMemAllocNode.pDependencies__ref.ptr1 = *args->hipGraphAddMemAllocNode.pDependencies; \
	} \
	if (args->hipGraphAddMemAllocNode.pNodeParams != NULL) { \
		args->hipGraphAddMemAllocNode.pNodeParams__ref.val = *args->hipGraphAddMemAllocNode.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemRetainAllocationHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRetainAllocationHandle` function call.
 *
 * @struct args_hipMemRetainAllocationHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemRetainAllocationHandle (
 *			hipMemGenericAllocationHandle_t * handle (struct ihipMemGenericAllocationHandle **)
 *			void * addr (void *)
 *	)
 */
struct args_hipMemRetainAllocationHandle_t {
	struct ihipMemGenericAllocationHandle ** handle;
	struct {
		void* ptr1;
	} handle__ref;
	void * addr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemRetainAllocationHandle(activity) { \
	activity->hip_args.hipMemRetainAllocationHandle.handle = (struct ihipMemGenericAllocationHandle **) handle; \
	activity->hip_args.hipMemRetainAllocationHandle.addr = (void *) addr; \
};

#define GET_PTRS_VALUE_hipMemRetainAllocationHandle(args) { \
	if (args->hipMemRetainAllocationHandle.handle != NULL) { \
		args->hipMemRetainAllocationHandle.handle__ref.ptr1 = *args->hipMemRetainAllocationHandle.handle; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetFuncBySymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetFuncBySymbol` function call.
 *
 * @struct args_hipGetFuncBySymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGetFuncBySymbol (
 *			hipFunction_t * functionPtr (struct ihipModuleSymbol_t **)
 *			const void * symbolPtr (const void *)
 *	)
 */
struct args_hipGetFuncBySymbol_t {
	struct ihipModuleSymbol_t ** functionPtr;
	struct {
		void* ptr1;
	} functionPtr__ref;
	void * symbolPtr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetFuncBySymbol(activity) { \
	activity->hip_args.hipGetFuncBySymbol.functionPtr = (struct ihipModuleSymbol_t **) functionPtr; \
	activity->hip_args.hipGetFuncBySymbol.symbolPtr = (void *) symbolPtr; \
};

#define GET_PTRS_VALUE_hipGetFuncBySymbol(args) { \
	if (args->hipGetFuncBySymbol.functionPtr != NULL) { \
		args->hipGetFuncBySymbol.functionPtr__ref.ptr1 = *args->hipGetFuncBySymbol.functionPtr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetMemPool` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetMemPool` function call.
 *
 * @struct args_hipDeviceSetMemPool_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetMemPool (
 *			int device (int)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *	)
 */
struct args_hipDeviceSetMemPool_t {
	int device;
	struct ihipMemPoolHandle_t * mem_pool;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceSetMemPool(activity) { \
	activity->hip_args.hipDeviceSetMemPool.device = (int) device; \
	activity->hip_args.hipDeviceSetMemPool.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetLimit` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetLimit` function call.
 *
 * @struct args_hipDeviceSetLimit_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetLimit (
 *			enum hipLimit_t limit (enum hipLimit_t)
 *			size_t value (unsigned long)
 *	)
 */
struct args_hipDeviceSetLimit_t {
	enum hipLimit_t limit;
	size_t value;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceSetLimit(activity) { \
	activity->hip_args.hipDeviceSetLimit.limit = (enum hipLimit_t) limit; \
	activity->hip_args.hipDeviceSetLimit.value = (size_t) value; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemGetInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetInfo` function call.
 *
 * @struct args_hipMemGetInfo_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetInfo (
 *			size_t * free (unsigned long*)
 *			size_t * total (unsigned long*)
 *	)
 */
struct args_hipMemGetInfo_t {
	size_t * free;
	struct {
		size_t val;
	} free__ref;
	size_t * total;
	struct {
		size_t val;
	} total__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemGetInfo(activity) { \
	activity->hip_args.hipMemGetInfo.free = (size_t *) free; \
	activity->hip_args.hipMemGetInfo.total = (size_t *) total; \
};

#define GET_PTRS_VALUE_hipMemGetInfo(args) { \
	if (args->hipMemGetInfo.free != NULL) { \
		args->hipMemGetInfo.free__ref.val = *args->hipMemGetInfo.free; \
	} \
	if (args->hipMemGetInfo.total != NULL) { \
		args->hipMemGetInfo.total__ref.val = *args->hipMemGetInfo.total; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyParam2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyParam2D` function call.
 *
 * @struct args_hipMemcpyParam2D_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyParam2D (
 *			const hip_Memcpy2D * pCopy (const struct hip_Memcpy2D *)
 *	)
 */
struct args_hipMemcpyParam2D_t {
	hip_Memcpy2D * pCopy;
	struct {
		hip_Memcpy2D val;
	} pCopy__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyParam2D(activity) { \
	activity->hip_args.hipMemcpyParam2D.pCopy = (hip_Memcpy2D *) pCopy; \
};

#define GET_PTRS_VALUE_hipMemcpyParam2D(args) { \
	if (args->hipMemcpyParam2D.pCopy != NULL) { \
		args->hipMemcpyParam2D.pCopy__ref.val = *args->hipMemcpyParam2D.pCopy; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphDebugDotPrint` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphDebugDotPrint` function call.
 *
 * @struct args_hipGraphDebugDotPrint_t
 *
 * @note 
 *	hipError_t
 *	hipGraphDebugDotPrint (
 *			hipGraph_t graph (struct ihipGraph *)
 *			const char * path (const char *)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipGraphDebugDotPrint_t {
	struct ihipGraph * graph;
	char * path;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} path__ref;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphDebugDotPrint(activity) { \
	activity->hip_args.hipGraphDebugDotPrint.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphDebugDotPrint.path = (char *) path; \
	activity->hip_args.hipGraphDebugDotPrint.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipGraphDebugDotPrint(args) { \
	if (args->hipGraphDebugDotPrint.path != NULL) { \
		strncpy(args->hipGraphDebugDotPrint.path__ref.val, args->hipGraphDebugDotPrint.path, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetGraphMemAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetGraphMemAttribute` function call.
 *
 * @struct args_hipDeviceSetGraphMemAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetGraphMemAttribute (
 *			int device (int)
 *			hipGraphMemAttributeType attr (enum hipGraphMemAttributeType)
 *			void * value (void *)
 *	)
 */
struct args_hipDeviceSetGraphMemAttribute_t {
	int device;
	hipGraphMemAttributeType attr;
	void * value;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceSetGraphMemAttribute(activity) { \
	activity->hip_args.hipDeviceSetGraphMemAttribute.device = (int) device; \
	activity->hip_args.hipDeviceSetGraphMemAttribute.attr = (hipGraphMemAttributeType) attr; \
	activity->hip_args.hipDeviceSetGraphMemAttribute.value = (void *) value; \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvGetErrorString` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGetErrorString` function call.
 *
 * @struct args_hipDrvGetErrorString_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGetErrorString (
 *			hipError_t hipError (enum hipError_t)
 *			const char ** errorString (const char **)
 *	)
 */
struct args_hipDrvGetErrorString_t {
	hipError_t hipError;
	char ** errorString;
	struct {
		void* ptr1;
		char val[HIP_STRING_SIZE_MAX];
	} errorString__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvGetErrorString(activity) { \
	activity->hip_args.hipDrvGetErrorString.hipError = (hipError_t) hipError; \
	activity->hip_args.hipDrvGetErrorString.errorString = (char **) errorString; \
};

#define GET_PTRS_VALUE_hipDrvGetErrorString(args) { \
	if (args->hipDrvGetErrorString.errorString != NULL) { \
		args->hipDrvGetErrorString.errorString__ref.ptr1 = *args->hipDrvGetErrorString.errorString; \
		if (args->hipDrvGetErrorString.errorString__ref.ptr1 != NULL) { \
			strncpy(args->hipDrvGetErrorString.errorString__ref.val, args->hipDrvGetErrorString.errorString__ref.ptr1, HIP_STRING_SIZE_MAX-1); \
		} \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoDAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoDAsync` function call.
 *
 * @struct args_hipMemcpyDtoDAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoDAsync (
 *			hipDeviceptr_t dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpyDtoDAsync_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyDtoDAsync(activity) { \
	activity->hip_args.hipMemcpyDtoDAsync.dst = (void *) dst; \
	activity->hip_args.hipMemcpyDtoDAsync.src = (void *) src; \
	activity->hip_args.hipMemcpyDtoDAsync.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyDtoDAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSynchronize` function call.
 *
 * @struct args_hipCtxSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSynchronize (
 *	)
 */
struct args_hipCtxSynchronize_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipTexObjectDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectDestroy` function call.
 *
 * @struct args_hipTexObjectDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectDestroy (
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
struct args_hipTexObjectDestroy_t {
	struct __hip_texture * texObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexObjectDestroy(activity) { \
	activity->hip_args.hipTexObjectDestroy.texObject = (struct __hip_texture *) texObject; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetAddressMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetAddressMode` function call.
 *
 * @struct args_hipTexRefGetAddressMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetAddressMode (
 *			enum hipTextureAddressMode * pam (enum hipTextureAddressMode *)
 *			const textureReference * texRef (const struct textureReference *)
 *			int dim (int)
 *	)
 */
struct args_hipTexRefGetAddressMode_t {
	enum hipTextureAddressMode * pam;
	struct {
		enum hipTextureAddressMode val;
	} pam__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	int dim;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetAddressMode(activity) { \
	activity->hip_args.hipTexRefGetAddressMode.pam = (enum hipTextureAddressMode *) pam; \
	activity->hip_args.hipTexRefGetAddressMode.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefGetAddressMode.dim = (int) dim; \
};

#define GET_PTRS_VALUE_hipTexRefGetAddressMode(args) { \
	if (args->hipTexRefGetAddressMode.pam != NULL) { \
		args->hipTexRefGetAddressMode.pam__ref.val = *args->hipTexRefGetAddressMode.pam; \
	} \
	if (args->hipTexRefGetAddressMode.texRef != NULL) { \
		args->hipTexRefGetAddressMode.texRef__ref.val = *args->hipTexRefGetAddressMode.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `__hipGetPCH` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `__hipGetPCH` function call.
 *
 * @struct args___hipGetPCH_t
 *
 * @note 
 *	void
 *	__hipGetPCH (
 *			const char ** pch (const char **)
 *			unsigned int * size (unsigned int *)
 *	)
 */
struct args___hipGetPCH_t {
	char ** pch;
	struct {
		void* ptr1;
		char val[HIP_STRING_SIZE_MAX];
	} pch__ref;
	unsigned int * size;
	struct {
		unsigned int val;
	} size__ref;
};

#define GET_ARGS_VALUE___hipGetPCH(activity) { \
	activity->hip_args.__hipGetPCH.pch = (char **) pch; \
	activity->hip_args.__hipGetPCH.size = (unsigned int *) size; \
};

#define GET_PTRS_VALUE___hipGetPCH(args) { \
	if (args->__hipGetPCH.pch != NULL) { \
		args->__hipGetPCH.pch__ref.ptr1 = *args->__hipGetPCH.pch; \
		if (args->__hipGetPCH.pch__ref.ptr1 != NULL) { \
			strncpy(args->__hipGetPCH.pch__ref.val, args->__hipGetPCH.pch__ref.ptr1, HIP_STRING_SIZE_MAX-1); \
		} \
	} \
	if (args->__hipGetPCH.size != NULL) { \
		args->__hipGetPCH.size__ref.val = *args->__hipGetPCH.size; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetFlags` function call.
 *
 * @struct args_hipStreamGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetFlags (
 *			hipStream_t stream (struct ihipStream_t *)
 *			unsigned int * flags (unsigned int *)
 *	)
 */
struct args_hipStreamGetFlags_t {
	struct ihipStream_t * stream;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetFlags(activity) { \
	activity->hip_args.hipStreamGetFlags.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetFlags.flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipStreamGetFlags(args) { \
	if (args->hipStreamGetFlags.flags != NULL) { \
		args->hipStreamGetFlags.flags__ref.val = *args->hipStreamGetFlags.flags; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemGetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAccess` function call.
 *
 * @struct args_hipMemGetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAccess (
 *			unsigned long long * flags (unsigned long long *)
 *			const hipMemLocation * location (const struct hipMemLocation *)
 *			void * ptr (void *)
 *	)
 */
struct args_hipMemGetAccess_t {
	unsigned long long * flags;
	struct {
		unsigned long long val;
	} flags__ref;
	hipMemLocation * location;
	struct {
		hipMemLocation val;
	} location__ref;
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemGetAccess(activity) { \
	activity->hip_args.hipMemGetAccess.flags = (unsigned long long *) flags; \
	activity->hip_args.hipMemGetAccess.location = (hipMemLocation *) location; \
	activity->hip_args.hipMemGetAccess.ptr = (void *) ptr; \
};

#define GET_PTRS_VALUE_hipMemGetAccess(args) { \
	if (args->hipMemGetAccess.flags != NULL) { \
		args->hipMemGetAccess.flags__ref.val = *args->hipMemGetAccess.flags; \
	} \
	if (args->hipMemGetAccess.location != NULL) { \
		args->hipMemGetAccess.location__ref.val = *args->hipMemGetAccess.location; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoA` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoA` function call.
 *
 * @struct args_hipMemcpyAtoA_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoA (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t ByteCount (unsigned long)
 *	)
 */
struct args_hipMemcpyAtoA_t {
	struct hipArray * dstArray;
	size_t dstOffset;
	struct hipArray * srcArray;
	size_t srcOffset;
	size_t ByteCount;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyAtoA(activity) { \
	activity->hip_args.hipMemcpyAtoA.dstArray = (struct hipArray *) dstArray; \
	activity->hip_args.hipMemcpyAtoA.dstOffset = (size_t) dstOffset; \
	activity->hip_args.hipMemcpyAtoA.srcArray = (struct hipArray *) srcArray; \
	activity->hip_args.hipMemcpyAtoA.srcOffset = (size_t) srcOffset; \
	activity->hip_args.hipMemcpyAtoA.ByteCount = (size_t) ByteCount; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbol` function call.
 *
 * @struct args_hipMemcpyToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbol (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpyToSymbol_t {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyToSymbol(activity) { \
	activity->hip_args.hipMemcpyToSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipMemcpyToSymbol.src = (void *) src; \
	activity->hip_args.hipMemcpyToSymbol.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpyToSymbol.offset = (size_t) offset; \
	activity->hip_args.hipMemcpyToSymbol.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxSetCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSetCurrent` function call.
 *
 * @struct args_hipCtxSetCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSetCurrent (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
struct args_hipCtxSetCurrent_t {
	struct ihipCtx_t * ctx;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxSetCurrent(activity) { \
	activity->hip_args.hipCtxSetCurrent.ctx = (struct ihipCtx_t *) ctx; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamQuery_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamQuery_spt` function call.
 *
 * @struct args_hipStreamQuery_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamQuery_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipStreamQuery_spt_t {
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamQuery_spt(activity) { \
	activity->hip_args.hipStreamQuery_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipGetSymbolSize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetSymbolSize` function call.
 *
 * @struct args_hipGetSymbolSize_t
 *
 * @note 
 *	hipError_t
 *	hipGetSymbolSize (
 *			size_t * size (unsigned long*)
 *			const void * symbol (const void *)
 *	)
 */
struct args_hipGetSymbolSize_t {
	size_t * size;
	struct {
		size_t val;
	} size__ref;
	void * symbol;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetSymbolSize(activity) { \
	activity->hip_args.hipGetSymbolSize.size = (size_t *) size; \
	activity->hip_args.hipGetSymbolSize.symbol = (void *) symbol; \
};

#define GET_PTRS_VALUE_hipGetSymbolSize(args) { \
	if (args->hipGetSymbolSize.size != NULL) { \
		args->hipGetSymbolSize.size__ref.val = *args->hipGetSymbolSize.size; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMipmappedArrayGetLevel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMipmappedArrayGetLevel` function call.
 *
 * @struct args_hipMipmappedArrayGetLevel_t
 *
 * @note 
 *	hipError_t
 *	hipMipmappedArrayGetLevel (
 *			hipArray_t * pLevelArray (struct hipArray **)
 *			hipMipmappedArray_t hMipMappedArray (struct hipMipmappedArray *)
 *			unsigned int level (unsigned int)
 *	)
 */
struct args_hipMipmappedArrayGetLevel_t {
	struct hipArray ** pLevelArray;
	struct {
		void* ptr1;
	} pLevelArray__ref;
	struct hipMipmappedArray * hMipMappedArray;
	struct {
		struct hipMipmappedArray val;
	} hMipMappedArray__ref;
	unsigned int level;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMipmappedArrayGetLevel(activity) { \
	activity->hip_args.hipMipmappedArrayGetLevel.pLevelArray = (struct hipArray **) pLevelArray; \
	activity->hip_args.hipMipmappedArrayGetLevel.hMipMappedArray = (struct hipMipmappedArray *) hMipMappedArray; \
	activity->hip_args.hipMipmappedArrayGetLevel.level = (unsigned int) level; \
};

#define GET_PTRS_VALUE_hipMipmappedArrayGetLevel(args) { \
	if (args->hipMipmappedArrayGetLevel.pLevelArray != NULL) { \
		args->hipMipmappedArrayGetLevel.pLevelArray__ref.ptr1 = *args->hipMipmappedArrayGetLevel.pLevelArray; \
	} \
	if (args->hipMipmappedArrayGetLevel.hMipMappedArray != NULL) { \
		args->hipMipmappedArrayGetLevel.hMipMappedArray__ref.val = *args->hipMipmappedArrayGetLevel.hMipMappedArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipExternalMemoryGetMappedMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExternalMemoryGetMappedMipmappedArray` function call.
 *
 * @struct args_hipExternalMemoryGetMappedMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipExternalMemoryGetMappedMipmappedArray (
 *			hipMipmappedArray_t * mipmap (struct hipMipmappedArray **)
 *			hipExternalMemory_t extMem (void *)
 *			const hipExternalMemoryMipmappedArrayDesc * mipmapDesc (const struct hipExternalMemoryMipmappedArrayDesc_st *)
 *	)
 */
struct args_hipExternalMemoryGetMappedMipmappedArray_t {
	struct hipMipmappedArray ** mipmap;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} mipmap__ref;
	void * extMem;
	hipExternalMemoryMipmappedArrayDesc * mipmapDesc;
	struct {
		hipExternalMemoryMipmappedArrayDesc val;
	} mipmapDesc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExternalMemoryGetMappedMipmappedArray(activity) { \
	activity->hip_args.hipExternalMemoryGetMappedMipmappedArray.mipmap = (struct hipMipmappedArray **) mipmap; \
	activity->hip_args.hipExternalMemoryGetMappedMipmappedArray.extMem = (void *) extMem; \
	activity->hip_args.hipExternalMemoryGetMappedMipmappedArray.mipmapDesc = (hipExternalMemoryMipmappedArrayDesc *) mipmapDesc; \
};

#define GET_PTRS_VALUE_hipExternalMemoryGetMappedMipmappedArray(args) { \
	if (args->hipExternalMemoryGetMappedMipmappedArray.mipmap != NULL) { \
		args->hipExternalMemoryGetMappedMipmappedArray.mipmap__ref.ptr1 = *args->hipExternalMemoryGetMappedMipmappedArray.mipmap; \
		if (args->hipExternalMemoryGetMappedMipmappedArray.mipmap__ref.ptr1 != NULL) { \
			args->hipExternalMemoryGetMappedMipmappedArray.mipmap__ref.val = **args->hipExternalMemoryGetMappedMipmappedArray.mipmap; \
		} \
	} \
	if (args->hipExternalMemoryGetMappedMipmappedArray.mipmapDesc != NULL) { \
		args->hipExternalMemoryGetMappedMipmappedArray.mipmapDesc__ref.val = *args->hipExternalMemoryGetMappedMipmappedArray.mipmapDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParams` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemcpy3DParms * pNodeParams (struct hipMemcpy3DParms*)
 *	)
 */
struct args_hipGraphExecMemcpyNodeSetParams_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * node;
	hipMemcpy3DParms * pNodeParams;
	struct {
		hipMemcpy3DParms val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParams(activity) { \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphExecMemcpyNodeSetParams.pNodeParams = (hipMemcpy3DParms *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecMemcpyNodeSetParams(args) { \
	if (args->hipGraphExecMemcpyNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphExecMemcpyNodeSetParams.pNodeParams__ref.val = *args->hipGraphExecMemcpyNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipUserObjectCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUserObjectCreate` function call.
 *
 * @struct args_hipUserObjectCreate_t
 *
 * @note 
 *	hipError_t
 *	hipUserObjectCreate (
 *			hipUserObject_t * object_out (struct hipUserObject **)
 *			void * ptr (void *)
 *			hipHostFn_t destroy (void (*)(void *))
 *			unsigned int initialRefcount (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipUserObjectCreate_t {
	struct hipUserObject ** object_out;
	struct {
		void* ptr1;
	} object_out__ref;
	void * ptr;
	hipHostFn_t destroy;
	unsigned int initialRefcount;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipUserObjectCreate(activity) { \
	activity->hip_args.hipUserObjectCreate.object_out = (struct hipUserObject **) object_out; \
	activity->hip_args.hipUserObjectCreate.ptr = (void *) ptr; \
	activity->hip_args.hipUserObjectCreate.destroy = (hipHostFn_t) destroy; \
	activity->hip_args.hipUserObjectCreate.initialRefcount = (unsigned int) initialRefcount; \
	activity->hip_args.hipUserObjectCreate.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipUserObjectCreate(args) { \
	if (args->hipUserObjectCreate.object_out != NULL) { \
		args->hipUserObjectCreate.object_out__ref.ptr1 = *args->hipUserObjectCreate.object_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo_v2` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo_v2` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_v2_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo_v2 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * captureStatus_out (enum hipStreamCaptureStatus*)
 *			unsigned long long * id_out (unsigned long long *)
 *			hipGraph_t * graph_out (struct ihipGraph **)
 *			const hipGraphNode_t ** dependencies_out (const struct hipGraphNode * **)
 *			size_t * numDependencies_out (unsigned long*)
 *	)
 */
struct args_hipStreamGetCaptureInfo_v2_t {
	struct ihipStream_t * stream;
	hipStreamCaptureStatus * captureStatus_out;
	struct {
		hipStreamCaptureStatus val;
	} captureStatus_out__ref;
	unsigned long long * id_out;
	struct {
		unsigned long long val;
	} id_out__ref;
	struct ihipGraph ** graph_out;
	struct {
		void* ptr1;
	} graph_out__ref;
	struct hipGraphNode * ** dependencies_out;
	struct {
		void* ptr1;
		void* ptr2;
	} dependencies_out__ref;
	size_t * numDependencies_out;
	struct {
		size_t val;
	} numDependencies_out__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo_v2(activity) { \
	activity->hip_args.hipStreamGetCaptureInfo_v2.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetCaptureInfo_v2.captureStatus_out = (hipStreamCaptureStatus *) captureStatus_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2.id_out = (unsigned long long *) id_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2.graph_out = (struct ihipGraph **) graph_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2.dependencies_out = (struct hipGraphNode * **) dependencies_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2.numDependencies_out = (size_t *) numDependencies_out; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2(args) { \
	if (args->hipStreamGetCaptureInfo_v2.captureStatus_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2.captureStatus_out__ref.val = *args->hipStreamGetCaptureInfo_v2.captureStatus_out; \
	} \
	if (args->hipStreamGetCaptureInfo_v2.id_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2.id_out__ref.val = *args->hipStreamGetCaptureInfo_v2.id_out; \
	} \
	if (args->hipStreamGetCaptureInfo_v2.graph_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2.graph_out__ref.ptr1 = *args->hipStreamGetCaptureInfo_v2.graph_out; \
	} \
	if (args->hipStreamGetCaptureInfo_v2.dependencies_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2.dependencies_out__ref.ptr1 = *args->hipStreamGetCaptureInfo_v2.dependencies_out; \
		if (args->hipStreamGetCaptureInfo_v2.dependencies_out__ref.ptr1 != NULL) { \
			args->hipStreamGetCaptureInfo_v2.dependencies_out__ref.ptr2 = **args->hipStreamGetCaptureInfo_v2.dependencies_out; \
		} \
	} \
	if (args->hipStreamGetCaptureInfo_v2.numDependencies_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2.numDependencies_out__ref.val = *args->hipStreamGetCaptureInfo_v2.numDependencies_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetArray` function call.
 *
 * @struct args_hipTexRefGetArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetArray (
 *			hipArray_t * pArray (struct hipArray **)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetArray_t {
	struct hipArray ** pArray;
	struct {
		void* ptr1;
	} pArray__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetArray(activity) { \
	activity->hip_args.hipTexRefGetArray.pArray = (struct hipArray **) pArray; \
	activity->hip_args.hipTexRefGetArray.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetArray(args) { \
	if (args->hipTexRefGetArray.pArray != NULL) { \
		args->hipTexRefGetArray.pArray__ref.ptr1 = *args->hipTexRefGetArray.pArray; \
	} \
	if (args->hipTexRefGetArray.texRef != NULL) { \
		args->hipTexRefGetArray.texRef__ref.val = *args->hipTexRefGetArray.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipImportExternalSemaphore` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipImportExternalSemaphore` function call.
 *
 * @struct args_hipImportExternalSemaphore_t
 *
 * @note 
 *	hipError_t
 *	hipImportExternalSemaphore (
 *			hipExternalSemaphore_t * extSem_out (void **)
 *			const hipExternalSemaphoreHandleDesc * semHandleDesc (const struct hipExternalSemaphoreHandleDesc_st *)
 *	)
 */
struct args_hipImportExternalSemaphore_t {
	void ** extSem_out;
	struct {
		void* ptr1;
	} extSem_out__ref;
	hipExternalSemaphoreHandleDesc * semHandleDesc;
	struct {
		hipExternalSemaphoreHandleDesc val;
	} semHandleDesc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipImportExternalSemaphore(activity) { \
	activity->hip_args.hipImportExternalSemaphore.extSem_out = (void **) extSem_out; \
	activity->hip_args.hipImportExternalSemaphore.semHandleDesc = (hipExternalSemaphoreHandleDesc *) semHandleDesc; \
};

#define GET_PTRS_VALUE_hipImportExternalSemaphore(args) { \
	if (args->hipImportExternalSemaphore.extSem_out != NULL) { \
		args->hipImportExternalSemaphore.extSem_out__ref.ptr1 = *args->hipImportExternalSemaphore.extSem_out; \
	} \
	if (args->hipImportExternalSemaphore.semHandleDesc != NULL) { \
		args->hipImportExternalSemaphore.semHandleDesc__ref.val = *args->hipImportExternalSemaphore.semHandleDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetAttribute` function call.
 *
 * @struct args_hipDeviceGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetAttribute (
 *			int * pi (int *)
 *			hipDeviceAttribute_t attr (enum hipDeviceAttribute_t)
 *			int deviceId (int)
 *	)
 */
struct args_hipDeviceGetAttribute_t {
	int * pi;
	struct {
		int val;
	} pi__ref;
	hipDeviceAttribute_t attr;
	int deviceId;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetAttribute(activity) { \
	activity->hip_args.hipDeviceGetAttribute.pi = (int *) pi; \
	activity->hip_args.hipDeviceGetAttribute.attr = (hipDeviceAttribute_t) attr; \
	activity->hip_args.hipDeviceGetAttribute.deviceId = (int) deviceId; \
};

#define GET_PTRS_VALUE_hipDeviceGetAttribute(args) { \
	if (args->hipDeviceGetAttribute.pi != NULL) { \
		args->hipDeviceGetAttribute.pi__ref.val = *args->hipDeviceGetAttribute.pi; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemFreeNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemFreeNodeGetParams` function call.
 *
 * @struct args_hipGraphMemFreeNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemFreeNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dev_ptr (void *)
 *	)
 */
struct args_hipGraphMemFreeNodeGetParams_t {
	struct hipGraphNode * node;
	void * dev_ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemFreeNodeGetParams(activity) { \
	activity->hip_args.hipGraphMemFreeNodeGetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemFreeNodeGetParams.dev_ptr = (void *) dev_ptr; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxGetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetSharedMemConfig` function call.
 *
 * @struct args_hipCtxGetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetSharedMemConfig (
 *			hipSharedMemConfig * pConfig (enum hipSharedMemConfig*)
 *	)
 */
struct args_hipCtxGetSharedMemConfig_t {
	hipSharedMemConfig * pConfig;
	struct {
		hipSharedMemConfig val;
	} pConfig__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxGetSharedMemConfig(activity) { \
	activity->hip_args.hipCtxGetSharedMemConfig.pConfig = (hipSharedMemConfig *) pConfig; \
};

#define GET_PTRS_VALUE_hipCtxGetSharedMemConfig(args) { \
	if (args->hipCtxGetSharedMemConfig.pConfig != NULL) { \
		args->hipCtxGetSharedMemConfig.pConfig__ref.val = *args->hipCtxGetSharedMemConfig.pConfig; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParamsToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParamsToSymbol` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParamsToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParamsToSymbol (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipGraphMemcpyNodeSetParamsToSymbol_t {
	struct hipGraphNode * node;
	void * symbol;
	void * src;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParamsToSymbol(activity) { \
	activity->hip_args.hipGraphMemcpyNodeSetParamsToSymbol.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsToSymbol.symbol = (void *) symbol; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsToSymbol.src = (void *) src; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsToSymbol.count = (size_t) count; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsToSymbol.offset = (size_t) offset; \
	activity->hip_args.hipGraphMemcpyNodeSetParamsToSymbol.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArray` function call.
 *
 * @struct args_hipMemcpy2DToArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArray (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy2DToArray_t {
	struct hipArray * dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DToArray(activity) { \
	activity->hip_args.hipMemcpy2DToArray.dst = (struct hipArray *) dst; \
	activity->hip_args.hipMemcpy2DToArray.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpy2DToArray.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpy2DToArray.src = (void *) src; \
	activity->hip_args.hipMemcpy2DToArray.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2DToArray.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DToArray.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DToArray.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamIsCapturing_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamIsCapturing_spt` function call.
 *
 * @struct args_hipStreamIsCapturing_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamIsCapturing_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *	)
 */
struct args_hipStreamIsCapturing_spt_t {
	struct ihipStream_t * stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamIsCapturing_spt(activity) { \
	activity->hip_args.hipStreamIsCapturing_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamIsCapturing_spt.pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
};

#define GET_PTRS_VALUE_hipStreamIsCapturing_spt(args) { \
	if (args->hipStreamIsCapturing_spt.pCaptureStatus != NULL) { \
		args->hipStreamIsCapturing_spt.pCaptureStatus__ref.val = *args->hipStreamIsCapturing_spt.pCaptureStatus; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipFreeHost` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeHost` function call.
 *
 * @struct args_hipFreeHost_t
 *
 * @note 
 *	hipError_t
 *	hipFreeHost (
 *			void * ptr (void *)
 *	)
 */
struct args_hipFreeHost_t {
	void * ptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFreeHost(activity) { \
	activity->hip_args.hipFreeHost.ptr = (void *) ptr; \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeSetParams` function call.
 *
 * @struct args_hipGraphKernelNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipKernelNodeParams * pNodeParams (const struct hipKernelNodeParams *)
 *	)
 */
struct args_hipGraphKernelNodeSetParams_t {
	struct hipGraphNode * node;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphKernelNodeSetParams(activity) { \
	activity->hip_args.hipGraphKernelNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphKernelNodeSetParams.pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeSetParams(args) { \
	if (args->hipGraphKernelNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphKernelNodeSetParams.pNodeParams__ref.val = *args->hipGraphKernelNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMallocHost` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocHost` function call.
 *
 * @struct args_hipMallocHost_t
 *
 * @note 
 *	hipError_t
 *	hipMallocHost (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *	)
 */
struct args_hipMallocHost_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMallocHost(activity) { \
	activity->hip_args.hipMallocHost.ptr = (void **) ptr; \
	activity->hip_args.hipMallocHost.size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipMallocHost(args) { \
	if (args->hipMallocHost.ptr != NULL) { \
		args->hipMallocHost.ptr__ref.ptr1 = *args->hipMallocHost.ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset3D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3D_spt` function call.
 *
 * @struct args_hipMemset3D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3D_spt (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *	)
 */
struct args_hipMemset3D_spt_t {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset3D_spt(activity) { \
	activity->hip_args.hipMemset3D_spt.pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	activity->hip_args.hipMemset3D_spt.value = (int) value; \
	activity->hip_args.hipMemset3D_spt.extent = (hipExtent) extent; \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo_v2_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo_v2_spt` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_v2_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo_v2_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * captureStatus_out (enum hipStreamCaptureStatus*)
 *			unsigned long long * id_out (unsigned long long *)
 *			hipGraph_t * graph_out (struct ihipGraph **)
 *			const hipGraphNode_t ** dependencies_out (const struct hipGraphNode * **)
 *			size_t * numDependencies_out (unsigned long*)
 *	)
 */
struct args_hipStreamGetCaptureInfo_v2_spt_t {
	struct ihipStream_t * stream;
	hipStreamCaptureStatus * captureStatus_out;
	struct {
		hipStreamCaptureStatus val;
	} captureStatus_out__ref;
	unsigned long long * id_out;
	struct {
		unsigned long long val;
	} id_out__ref;
	struct ihipGraph ** graph_out;
	struct {
		void* ptr1;
	} graph_out__ref;
	struct hipGraphNode * ** dependencies_out;
	struct {
		void* ptr1;
		void* ptr2;
	} dependencies_out__ref;
	size_t * numDependencies_out;
	struct {
		size_t val;
	} numDependencies_out__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo_v2_spt(activity) { \
	activity->hip_args.hipStreamGetCaptureInfo_v2_spt.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamGetCaptureInfo_v2_spt.captureStatus_out = (hipStreamCaptureStatus *) captureStatus_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2_spt.id_out = (unsigned long long *) id_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2_spt.graph_out = (struct ihipGraph **) graph_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2_spt.dependencies_out = (struct hipGraphNode * **) dependencies_out; \
	activity->hip_args.hipStreamGetCaptureInfo_v2_spt.numDependencies_out = (size_t *) numDependencies_out; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2_spt(args) { \
	if (args->hipStreamGetCaptureInfo_v2_spt.captureStatus_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2_spt.captureStatus_out__ref.val = *args->hipStreamGetCaptureInfo_v2_spt.captureStatus_out; \
	} \
	if (args->hipStreamGetCaptureInfo_v2_spt.id_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2_spt.id_out__ref.val = *args->hipStreamGetCaptureInfo_v2_spt.id_out; \
	} \
	if (args->hipStreamGetCaptureInfo_v2_spt.graph_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2_spt.graph_out__ref.ptr1 = *args->hipStreamGetCaptureInfo_v2_spt.graph_out; \
	} \
	if (args->hipStreamGetCaptureInfo_v2_spt.dependencies_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2_spt.dependencies_out__ref.ptr1 = *args->hipStreamGetCaptureInfo_v2_spt.dependencies_out; \
		if (args->hipStreamGetCaptureInfo_v2_spt.dependencies_out__ref.ptr1 != NULL) { \
			args->hipStreamGetCaptureInfo_v2_spt.dependencies_out__ref.ptr2 = **args->hipStreamGetCaptureInfo_v2_spt.dependencies_out; \
		} \
	} \
	if (args->hipStreamGetCaptureInfo_v2_spt.numDependencies_out != NULL) { \
		args->hipStreamGetCaptureInfo_v2_spt.numDependencies_out__ref.val = *args->hipStreamGetCaptureInfo_v2_spt.numDependencies_out; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetTextureReference` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureReference` function call.
 *
 * @struct args_hipGetTextureReference_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureReference (
 *			const textureReference ** texref (const struct textureReference **)
 *			const void * symbol (const void *)
 *	)
 */
struct args_hipGetTextureReference_t {
	textureReference ** texref;
	struct {
		void* ptr1;
		textureReference val;
	} texref__ref;
	void * symbol;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetTextureReference(activity) { \
	activity->hip_args.hipGetTextureReference.texref = (textureReference **) texref; \
	activity->hip_args.hipGetTextureReference.symbol = (void *) symbol; \
};

#define GET_PTRS_VALUE_hipGetTextureReference(args) { \
	if (args->hipGetTextureReference.texref != NULL) { \
		args->hipGetTextureReference.texref__ref.ptr1 = *args->hipGetTextureReference.texref; \
		if (args->hipGetTextureReference.texref__ref.ptr1 != NULL) { \
			args->hipGetTextureReference.texref__ref.val = **args->hipGetTextureReference.texref; \
		} \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecExternalSemaphoresSignalNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecExternalSemaphoresSignalNodeSetParams` function call.
 *
 * @struct args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecExternalSemaphoresSignalNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreSignalNodeParams * nodeParams (const struct hipExternalSemaphoreSignalNodeParams *)
 *	)
 */
struct args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t {
	struct hipGraphExec * hGraphExec;
	struct hipGraphNode * hNode;
	hipExternalSemaphoreSignalNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecExternalSemaphoresSignalNodeSetParams(activity) { \
	activity->hip_args.hipGraphExecExternalSemaphoresSignalNodeSetParams.hGraphExec = (struct hipGraphExec *) hGraphExec; \
	activity->hip_args.hipGraphExecExternalSemaphoresSignalNodeSetParams.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphExecExternalSemaphoresSignalNodeSetParams.nodeParams = (hipExternalSemaphoreSignalNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecExternalSemaphoresSignalNodeSetParams(args) { \
	if (args->hipGraphExecExternalSemaphoresSignalNodeSetParams.nodeParams != NULL) { \
		args->hipGraphExecExternalSemaphoresSignalNodeSetParams.nodeParams__ref.val = *args->hipGraphExecExternalSemaphoresSignalNodeSetParams.nodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphAddDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddDependencies` function call.
 *
 * @struct args_hipGraphAddDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddDependencies (
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * from (const struct hipGraphNode * *)
 *			const hipGraphNode_t * to (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *	)
 */
struct args_hipGraphAddDependencies_t {
	struct ihipGraph * graph;
	struct hipGraphNode * * from;
	struct {
		void* ptr1;
	} from__ref;
	struct hipGraphNode * * to;
	struct {
		void* ptr1;
	} to__ref;
	size_t numDependencies;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphAddDependencies(activity) { \
	activity->hip_args.hipGraphAddDependencies.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphAddDependencies.from = (struct hipGraphNode * *) from; \
	activity->hip_args.hipGraphAddDependencies.to = (struct hipGraphNode * *) to; \
	activity->hip_args.hipGraphAddDependencies.numDependencies = (size_t) numDependencies; \
};

#define GET_PTRS_VALUE_hipGraphAddDependencies(args) { \
	if (args->hipGraphAddDependencies.from != NULL) { \
		args->hipGraphAddDependencies.from__ref.ptr1 = *args->hipGraphAddDependencies.from; \
	} \
	if (args->hipGraphAddDependencies.to != NULL) { \
		args->hipGraphAddDependencies.to__ref.ptr1 = *args->hipGraphAddDependencies.to; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetType` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetType` function call.
 *
 * @struct args_hipGraphNodeGetType_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetType (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraphNodeType * pType (enum hipGraphNodeType*)
 *	)
 */
struct args_hipGraphNodeGetType_t {
	struct hipGraphNode * node;
	hipGraphNodeType * pType;
	struct {
		hipGraphNodeType val;
	} pType__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphNodeGetType(activity) { \
	activity->hip_args.hipGraphNodeGetType.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphNodeGetType.pType = (hipGraphNodeType *) pType; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetType(args) { \
	if (args->hipGraphNodeGetType.pType != NULL) { \
		args->hipGraphNodeGetType.pType__ref.val = *args->hipGraphNodeGetType.pType; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetBorderColor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetBorderColor` function call.
 *
 * @struct args_hipTexRefSetBorderColor_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetBorderColor (
 *			textureReference * texRef (struct textureReference*)
 *			float * pBorderColor (float *)
 *	)
 */
struct args_hipTexRefSetBorderColor_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	float * pBorderColor;
	struct {
		float val;
	} pBorderColor__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetBorderColor(activity) { \
	activity->hip_args.hipTexRefSetBorderColor.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetBorderColor.pBorderColor = (float *) pBorderColor; \
};

#define GET_PTRS_VALUE_hipTexRefSetBorderColor(args) { \
	if (args->hipTexRefSetBorderColor.texRef != NULL) { \
		args->hipTexRefSetBorderColor.texRef__ref.val = *args->hipTexRefSetBorderColor.texRef; \
	} \
	if (args->hipTexRefSetBorderColor.pBorderColor != NULL) { \
		args->hipTexRefSetBorderColor.pBorderColor__ref.val = *args->hipTexRefSetBorderColor.pBorderColor; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPrefetchAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPrefetchAsync` function call.
 *
 * @struct args_hipMemPrefetchAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemPrefetchAsync (
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *			int device (int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemPrefetchAsync_t {
	void * dev_ptr;
	size_t count;
	int device;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPrefetchAsync(activity) { \
	activity->hip_args.hipMemPrefetchAsync.dev_ptr = (void *) dev_ptr; \
	activity->hip_args.hipMemPrefetchAsync.count = (size_t) count; \
	activity->hip_args.hipMemPrefetchAsync.device = (int) device; \
	activity->hip_args.hipMemPrefetchAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxGetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetDevice` function call.
 *
 * @struct args_hipCtxGetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetDevice (
 *			hipDevice_t * device (int*)
 *	)
 */
struct args_hipCtxGetDevice_t {
	hipDevice_t * device;
	struct {
		hipDevice_t val;
	} device__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxGetDevice(activity) { \
	activity->hip_args.hipCtxGetDevice.device = (hipDevice_t *) device; \
};

#define GET_PTRS_VALUE_hipCtxGetDevice(args) { \
	if (args->hipCtxGetDevice.device != NULL) { \
		args->hipCtxGetDevice.device__ref.val = *args->hipCtxGetDevice.device; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DArrayToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DArrayToArray` function call.
 *
 * @struct args_hipMemcpy2DArrayToArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DArrayToArray (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffsetDst (unsigned long)
 *			size_t hOffsetDst (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffsetSrc (unsigned long)
 *			size_t hOffsetSrc (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy2DArrayToArray_t {
	struct hipArray * dst;
	size_t wOffsetDst;
	size_t hOffsetDst;
	struct hipArray * src;
	size_t wOffsetSrc;
	size_t hOffsetSrc;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2DArrayToArray(activity) { \
	activity->hip_args.hipMemcpy2DArrayToArray.dst = (struct hipArray *) dst; \
	activity->hip_args.hipMemcpy2DArrayToArray.wOffsetDst = (size_t) wOffsetDst; \
	activity->hip_args.hipMemcpy2DArrayToArray.hOffsetDst = (size_t) hOffsetDst; \
	activity->hip_args.hipMemcpy2DArrayToArray.src = (struct hipArray *) src; \
	activity->hip_args.hipMemcpy2DArrayToArray.wOffsetSrc = (size_t) wOffsetSrc; \
	activity->hip_args.hipMemcpy2DArrayToArray.hOffsetSrc = (size_t) hOffsetSrc; \
	activity->hip_args.hipMemcpy2DArrayToArray.width = (size_t) width; \
	activity->hip_args.hipMemcpy2DArrayToArray.height = (size_t) height; \
	activity->hip_args.hipMemcpy2DArrayToArray.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipUserObjectRelease` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUserObjectRelease` function call.
 *
 * @struct args_hipUserObjectRelease_t
 *
 * @note 
 *	hipError_t
 *	hipUserObjectRelease (
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *	)
 */
struct args_hipUserObjectRelease_t {
	struct hipUserObject * object;
	unsigned int count;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipUserObjectRelease(activity) { \
	activity->hip_args.hipUserObjectRelease.object = (struct hipUserObject *) object; \
	activity->hip_args.hipUserObjectRelease.count = (unsigned int) count; \
};

/**
 * @brief Structure to hold the arguments for the `hipHostGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostGetFlags` function call.
 *
 * @struct args_hipHostGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipHostGetFlags (
 *			unsigned int * flagsPtr (unsigned int *)
 *			void * hostPtr (void *)
 *	)
 */
struct args_hipHostGetFlags_t {
	unsigned int * flagsPtr;
	struct {
		unsigned int val;
	} flagsPtr__ref;
	void * hostPtr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipHostGetFlags(activity) { \
	activity->hip_args.hipHostGetFlags.flagsPtr = (unsigned int *) flagsPtr; \
	activity->hip_args.hipHostGetFlags.hostPtr = (void *) hostPtr; \
};

#define GET_PTRS_VALUE_hipHostGetFlags(args) { \
	if (args->hipHostGetFlags.flagsPtr != NULL) { \
		args->hipHostGetFlags.flagsPtr__ref.val = *args->hipHostGetFlags.flagsPtr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvGraphAddMemsetNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGraphAddMemsetNode` function call.
 *
 * @struct args_hipDrvGraphAddMemsetNode_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGraphAddMemsetNode (
 *			hipGraphNode_t * phGraphNode (struct hipGraphNode **)
 *			hipGraph_t hGraph (struct ihipGraph *)
 *			const hipGraphNode_t * dependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const HIP_MEMSET_NODE_PARAMS * memsetParams (const struct HIP_MEMSET_NODE_PARAMS *)
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
struct args_hipDrvGraphAddMemsetNode_t {
	struct hipGraphNode ** phGraphNode;
	struct {
		void* ptr1;
	} phGraphNode__ref;
	struct ihipGraph * hGraph;
	struct hipGraphNode * * dependencies;
	struct {
		void* ptr1;
	} dependencies__ref;
	size_t numDependencies;
	HIP_MEMSET_NODE_PARAMS * memsetParams;
	struct {
		HIP_MEMSET_NODE_PARAMS val;
	} memsetParams__ref;
	struct ihipCtx_t * ctx;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvGraphAddMemsetNode(activity) { \
	activity->hip_args.hipDrvGraphAddMemsetNode.phGraphNode = (struct hipGraphNode **) phGraphNode; \
	activity->hip_args.hipDrvGraphAddMemsetNode.hGraph = (struct ihipGraph *) hGraph; \
	activity->hip_args.hipDrvGraphAddMemsetNode.dependencies = (struct hipGraphNode * *) dependencies; \
	activity->hip_args.hipDrvGraphAddMemsetNode.numDependencies = (size_t) numDependencies; \
	activity->hip_args.hipDrvGraphAddMemsetNode.memsetParams = (HIP_MEMSET_NODE_PARAMS *) memsetParams; \
	activity->hip_args.hipDrvGraphAddMemsetNode.ctx = (struct ihipCtx_t *) ctx; \
};

#define GET_PTRS_VALUE_hipDrvGraphAddMemsetNode(args) { \
	if (args->hipDrvGraphAddMemsetNode.phGraphNode != NULL) { \
		args->hipDrvGraphAddMemsetNode.phGraphNode__ref.ptr1 = *args->hipDrvGraphAddMemsetNode.phGraphNode; \
	} \
	if (args->hipDrvGraphAddMemsetNode.dependencies != NULL) { \
		args->hipDrvGraphAddMemsetNode.dependencies__ref.ptr1 = *args->hipDrvGraphAddMemsetNode.dependencies; \
	} \
	if (args->hipDrvGraphAddMemsetNode.memsetParams != NULL) { \
		args->hipDrvGraphAddMemsetNode.memsetParams__ref.val = *args->hipDrvGraphAddMemsetNode.memsetParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoD` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoD` function call.
 *
 * @struct args_hipMemcpyAtoD_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoD (
 *			hipDeviceptr_t dstDevice (void *)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t ByteCount (unsigned long)
 *	)
 */
struct args_hipMemcpyAtoD_t {
	void * dstDevice;
	struct hipArray * srcArray;
	size_t srcOffset;
	size_t ByteCount;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyAtoD(activity) { \
	activity->hip_args.hipMemcpyAtoD.dstDevice = (void *) dstDevice; \
	activity->hip_args.hipMemcpyAtoD.srcArray = (struct hipArray *) srcArray; \
	activity->hip_args.hipMemcpyAtoD.srcOffset = (size_t) srcOffset; \
	activity->hip_args.hipMemcpyAtoD.ByteCount = (size_t) ByteCount; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolCreate` function call.
 *
 * @struct args_hipMemPoolCreate_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolCreate (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			const hipMemPoolProps * pool_props (const struct hipMemPoolProps *)
 *	)
 */
struct args_hipMemPoolCreate_t {
	struct ihipMemPoolHandle_t ** mem_pool;
	struct {
		void* ptr1;
	} mem_pool__ref;
	hipMemPoolProps * pool_props;
	struct {
		hipMemPoolProps val;
	} pool_props__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolCreate(activity) { \
	activity->hip_args.hipMemPoolCreate.mem_pool = (struct ihipMemPoolHandle_t **) mem_pool; \
	activity->hip_args.hipMemPoolCreate.pool_props = (hipMemPoolProps *) pool_props; \
};

#define GET_PTRS_VALUE_hipMemPoolCreate(args) { \
	if (args->hipMemPoolCreate.mem_pool != NULL) { \
		args->hipMemPoolCreate.mem_pool__ref.ptr1 = *args->hipMemPoolCreate.mem_pool; \
	} \
	if (args->hipMemPoolCreate.pool_props != NULL) { \
		args->hipMemPoolCreate.pool_props__ref.val = *args->hipMemPoolCreate.pool_props; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipKernelNameRef` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipKernelNameRef` function call.
 *
 * @struct args_hipKernelNameRef_t
 *
 * @note 
 *	const char *
 *	hipKernelNameRef (
 *			const hipFunction_t f (const struct ihipModuleSymbol_t *)
 *	)
 */
struct args_hipKernelNameRef_t {
	struct ihipModuleSymbol_t * f;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
};

#define GET_ARGS_VALUE_hipKernelNameRef(activity) { \
	activity->hip_args.hipKernelNameRef.f = (struct ihipModuleSymbol_t *) f; \
};

#define GET_PTRS_RET_VALUE_hipKernelNameRef(args) { \
	if (args->hipKernelNameRef.retval != NULL) { \
		strncpy(args->hipKernelNameRef.retval__ref.val, args->hipKernelNameRef.retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset3DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3DAsync` function call.
 *
 * @struct args_hipMemset3DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3DAsync (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemset3DAsync_t {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset3DAsync(activity) { \
	activity->hip_args.hipMemset3DAsync.pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	activity->hip_args.hipMemset3DAsync.value = (int) value; \
	activity->hip_args.hipMemset3DAsync.extent = (hipExtent) extent; \
	activity->hip_args.hipMemset3DAsync.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipEventRecord` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventRecord` function call.
 *
 * @struct args_hipEventRecord_t
 *
 * @note 
 *	hipError_t
 *	hipEventRecord (
 *			hipEvent_t event (struct ihipEvent_t *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipEventRecord_t {
	struct ihipEvent_t * event;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipEventRecord(activity) { \
	activity->hip_args.hipEventRecord.event = (struct ihipEvent_t *) event; \
	activity->hip_args.hipEventRecord.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipMipmappedArrayDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMipmappedArrayDestroy` function call.
 *
 * @struct args_hipMipmappedArrayDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipMipmappedArrayDestroy (
 *			hipMipmappedArray_t hMipmappedArray (struct hipMipmappedArray *)
 *	)
 */
struct args_hipMipmappedArrayDestroy_t {
	struct hipMipmappedArray * hMipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} hMipmappedArray__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMipmappedArrayDestroy(activity) { \
	activity->hip_args.hipMipmappedArrayDestroy.hMipmappedArray = (struct hipMipmappedArray *) hMipmappedArray; \
};

#define GET_PTRS_VALUE_hipMipmappedArrayDestroy(args) { \
	if (args->hipMipmappedArrayDestroy.hMipmappedArray != NULL) { \
		args->hipMipmappedArrayDestroy.hMipmappedArray__ref.val = *args->hipMipmappedArrayDestroy.hMipmappedArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetAsync_spt` function call.
 *
 * @struct args_hipMemsetAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetAsync_spt (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemsetAsync_spt_t {
	void * dst;
	int value;
	size_t sizeBytes;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetAsync_spt(activity) { \
	activity->hip_args.hipMemsetAsync_spt.dst = (void *) dst; \
	activity->hip_args.hipMemsetAsync_spt.value = (int) value; \
	activity->hip_args.hipMemsetAsync_spt.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemsetAsync_spt.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxSetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxSetFlags` function call.
 *
 * @struct args_hipDevicePrimaryCtxSetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxSetFlags (
 *			hipDevice_t dev (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipDevicePrimaryCtxSetFlags_t {
	hipDevice_t dev;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDevicePrimaryCtxSetFlags(activity) { \
	activity->hip_args.hipDevicePrimaryCtxSetFlags.dev = (hipDevice_t) dev; \
	activity->hip_args.hipDevicePrimaryCtxSetFlags.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipPeekAtLastError` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPeekAtLastError` function call.
 *
 * @struct args_hipPeekAtLastError_t
 *
 * @note 
 *	hipError_t
 *	hipPeekAtLastError (
 *	)
 */
struct args_hipPeekAtLastError_t {
	hipError_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetGraphMemAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetGraphMemAttribute` function call.
 *
 * @struct args_hipDeviceGetGraphMemAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetGraphMemAttribute (
 *			int device (int)
 *			hipGraphMemAttributeType attr (enum hipGraphMemAttributeType)
 *			void * value (void *)
 *	)
 */
struct args_hipDeviceGetGraphMemAttribute_t {
	int device;
	hipGraphMemAttributeType attr;
	void * value;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceGetGraphMemAttribute(activity) { \
	activity->hip_args.hipDeviceGetGraphMemAttribute.device = (int) device; \
	activity->hip_args.hipDeviceGetGraphMemAttribute.attr = (hipGraphMemAttributeType) attr; \
	activity->hip_args.hipDeviceGetGraphMemAttribute.value = (void *) value; \
};

/**
 * @brief Structure to hold the arguments for the `hipDrvGetErrorName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGetErrorName` function call.
 *
 * @struct args_hipDrvGetErrorName_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGetErrorName (
 *			hipError_t hipError (enum hipError_t)
 *			const char ** errorString (const char **)
 *	)
 */
struct args_hipDrvGetErrorName_t {
	hipError_t hipError;
	char ** errorString;
	struct {
		void* ptr1;
		char val[HIP_STRING_SIZE_MAX];
	} errorString__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDrvGetErrorName(activity) { \
	activity->hip_args.hipDrvGetErrorName.hipError = (hipError_t) hipError; \
	activity->hip_args.hipDrvGetErrorName.errorString = (char **) errorString; \
};

#define GET_PTRS_VALUE_hipDrvGetErrorName(args) { \
	if (args->hipDrvGetErrorName.errorString != NULL) { \
		args->hipDrvGetErrorName.errorString__ref.ptr1 = *args->hipDrvGetErrorName.errorString; \
		if (args->hipDrvGetErrorName.errorString__ref.ptr1 != NULL) { \
			strncpy(args->hipDrvGetErrorName.errorString__ref.val, args->hipDrvGetErrorName.errorString__ref.ptr1, HIP_STRING_SIZE_MAX-1); \
		} \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy_spt` function call.
 *
 * @struct args_hipMemcpy_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy_spt (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy_spt_t {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy_spt(activity) { \
	activity->hip_args.hipMemcpy_spt.dst = (void *) dst; \
	activity->hip_args.hipMemcpy_spt.src = (void *) src; \
	activity->hip_args.hipMemcpy_spt.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipMemcpy_spt.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipCtxSetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSetSharedMemConfig` function call.
 *
 * @struct args_hipCtxSetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSetSharedMemConfig (
 *			hipSharedMemConfig config (enum hipSharedMemConfig)
 *	)
 */
struct args_hipCtxSetSharedMemConfig_t {
	hipSharedMemConfig config;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCtxSetSharedMemConfig(activity) { \
	activity->hip_args.hipCtxSetSharedMemConfig.config = (hipSharedMemConfig) config; \
};

/**
 * @brief Structure to hold the arguments for the `hipCreateSurfaceObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCreateSurfaceObject` function call.
 *
 * @struct args_hipCreateSurfaceObject_t
 *
 * @note 
 *	hipError_t
 *	hipCreateSurfaceObject (
 *			hipSurfaceObject_t * pSurfObject (struct __hip_surface **)
 *			const hipResourceDesc * pResDesc (const struct hipResourceDesc *)
 *	)
 */
struct args_hipCreateSurfaceObject_t {
	struct __hip_surface ** pSurfObject;
	struct {
		void* ptr1;
	} pSurfObject__ref;
	hipResourceDesc * pResDesc;
	struct {
		hipResourceDesc val;
	} pResDesc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipCreateSurfaceObject(activity) { \
	activity->hip_args.hipCreateSurfaceObject.pSurfObject = (struct __hip_surface **) pSurfObject; \
	activity->hip_args.hipCreateSurfaceObject.pResDesc = (hipResourceDesc *) pResDesc; \
};

#define GET_PTRS_VALUE_hipCreateSurfaceObject(args) { \
	if (args->hipCreateSurfaceObject.pSurfObject != NULL) { \
		args->hipCreateSurfaceObject.pSurfObject__ref.ptr1 = *args->hipCreateSurfaceObject.pSurfObject; \
	} \
	if (args->hipCreateSurfaceObject.pResDesc != NULL) { \
		args->hipCreateSurfaceObject.pResDesc__ref.val = *args->hipCreateSurfaceObject.pResDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetMipmappedArrayLevel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetMipmappedArrayLevel` function call.
 *
 * @struct args_hipGetMipmappedArrayLevel_t
 *
 * @note 
 *	hipError_t
 *	hipGetMipmappedArrayLevel (
 *			hipArray_t * levelArray (struct hipArray **)
 *			hipMipmappedArray_const_t mipmappedArray (const struct hipMipmappedArray *)
 *			unsigned int level (unsigned int)
 *	)
 */
struct args_hipGetMipmappedArrayLevel_t {
	struct hipArray ** levelArray;
	struct {
		void* ptr1;
	} levelArray__ref;
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	unsigned int level;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetMipmappedArrayLevel(activity) { \
	activity->hip_args.hipGetMipmappedArrayLevel.levelArray = (struct hipArray **) levelArray; \
	activity->hip_args.hipGetMipmappedArrayLevel.mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
	activity->hip_args.hipGetMipmappedArrayLevel.level = (unsigned int) level; \
};

#define GET_PTRS_VALUE_hipGetMipmappedArrayLevel(args) { \
	if (args->hipGetMipmappedArrayLevel.levelArray != NULL) { \
		args->hipGetMipmappedArrayLevel.levelArray__ref.ptr1 = *args->hipGetMipmappedArrayLevel.levelArray; \
	} \
	if (args->hipGetMipmappedArrayLevel.mipmappedArray != NULL) { \
		args->hipGetMipmappedArrayLevel.mipmappedArray__ref.val = *args->hipGetMipmappedArrayLevel.mipmappedArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphExecDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecDestroy` function call.
 *
 * @struct args_hipGraphExecDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecDestroy (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *	)
 */
struct args_hipGraphExecDestroy_t {
	struct hipGraphExec * graphExec;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphExecDestroy(activity) { \
	activity->hip_args.hipGraphExecDestroy.graphExec = (struct hipGraphExec *) graphExec; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemsetD32Async` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD32Async` function call.
 *
 * @struct args_hipMemsetD32Async_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD32Async (
 *			hipDeviceptr_t dst (void *)
 *			int value (int)
 *			size_t count (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemsetD32Async_t {
	void * dst;
	int value;
	size_t count;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemsetD32Async(activity) { \
	activity->hip_args.hipMemsetD32Async.dst = (void *) dst; \
	activity->hip_args.hipMemsetD32Async.value = (int) value; \
	activity->hip_args.hipMemsetD32Async.count = (size_t) count; \
	activity->hip_args.hipMemsetD32Async.stream = (struct ihipStream_t *) stream; \
};

/**
 * @brief Structure to hold the arguments for the `hipDeviceEnablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceEnablePeerAccess` function call.
 *
 * @struct args_hipDeviceEnablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceEnablePeerAccess (
 *			int peerDeviceId (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipDeviceEnablePeerAccess_t {
	int peerDeviceId;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDeviceEnablePeerAccess(activity) { \
	activity->hip_args.hipDeviceEnablePeerAccess.peerDeviceId = (int) peerDeviceId; \
	activity->hip_args.hipDeviceEnablePeerAccess.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipArray3DCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArray3DCreate` function call.
 *
 * @struct args_hipArray3DCreate_t
 *
 * @note 
 *	hipError_t
 *	hipArray3DCreate (
 *			hipArray_t * array (struct hipArray **)
 *			const HIP_ARRAY3D_DESCRIPTOR * pAllocateArray (const struct HIP_ARRAY3D_DESCRIPTOR *)
 *	)
 */
struct args_hipArray3DCreate_t {
	struct hipArray ** array;
	struct {
		void* ptr1;
	} array__ref;
	HIP_ARRAY3D_DESCRIPTOR * pAllocateArray;
	struct {
		HIP_ARRAY3D_DESCRIPTOR val;
	} pAllocateArray__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipArray3DCreate(activity) { \
	activity->hip_args.hipArray3DCreate.array = (struct hipArray **) array; \
	activity->hip_args.hipArray3DCreate.pAllocateArray = (HIP_ARRAY3D_DESCRIPTOR *) pAllocateArray; \
};

#define GET_PTRS_VALUE_hipArray3DCreate(args) { \
	if (args->hipArray3DCreate.array != NULL) { \
		args->hipArray3DCreate.array__ref.ptr1 = *args->hipArray3DCreate.array; \
	} \
	if (args->hipArray3DCreate.pAllocateArray != NULL) { \
		args->hipArray3DCreate.pAllocateArray__ref.val = *args->hipArray3DCreate.pAllocateArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipIpcOpenMemHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcOpenMemHandle` function call.
 *
 * @struct args_hipIpcOpenMemHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcOpenMemHandle (
 *			void ** devPtr (void **)
 *			hipIpcMemHandle_t handle (struct hipIpcMemHandle_st)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipIpcOpenMemHandle_t {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	hipIpcMemHandle_t handle;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipIpcOpenMemHandle(activity) { \
	activity->hip_args.hipIpcOpenMemHandle.devPtr = (void **) devPtr; \
	activity->hip_args.hipIpcOpenMemHandle.handle = (hipIpcMemHandle_t) handle; \
	activity->hip_args.hipIpcOpenMemHandle.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipIpcOpenMemHandle(args) { \
	if (args->hipIpcOpenMemHandle.devPtr != NULL) { \
		args->hipIpcOpenMemHandle.devPtr__ref.ptr1 = *args->hipIpcOpenMemHandle.devPtr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemPoolTrimTo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolTrimTo` function call.
 *
 * @struct args_hipMemPoolTrimTo_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolTrimTo (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			size_t min_bytes_to_hold (unsigned long)
 *	)
 */
struct args_hipMemPoolTrimTo_t {
	struct ihipMemPoolHandle_t * mem_pool;
	size_t min_bytes_to_hold;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemPoolTrimTo(activity) { \
	activity->hip_args.hipMemPoolTrimTo.mem_pool = (struct ihipMemPoolHandle_t *) mem_pool; \
	activity->hip_args.hipMemPoolTrimTo.min_bytes_to_hold = (size_t) min_bytes_to_hold; \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2D` function call.
 *
 * @struct args_hipMemcpy2D_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2D (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpy2D_t {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy2D(activity) { \
	activity->hip_args.hipMemcpy2D.dst = (void *) dst; \
	activity->hip_args.hipMemcpy2D.dpitch = (size_t) dpitch; \
	activity->hip_args.hipMemcpy2D.src = (void *) src; \
	activity->hip_args.hipMemcpy2D.spitch = (size_t) spitch; \
	activity->hip_args.hipMemcpy2D.width = (size_t) width; \
	activity->hip_args.hipMemcpy2D.height = (size_t) height; \
	activity->hip_args.hipMemcpy2D.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipFuncGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncGetAttribute` function call.
 *
 * @struct args_hipFuncGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipFuncGetAttribute (
 *			int * value (int *)
 *			hipFunction_attribute attrib (enum hipFunction_attribute)
 *			hipFunction_t hfunc (struct ihipModuleSymbol_t *)
 *	)
 */
struct args_hipFuncGetAttribute_t {
	int * value;
	struct {
		int val;
	} value__ref;
	hipFunction_attribute attrib;
	struct ihipModuleSymbol_t * hfunc;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFuncGetAttribute(activity) { \
	activity->hip_args.hipFuncGetAttribute.value = (int *) value; \
	activity->hip_args.hipFuncGetAttribute.attrib = (hipFunction_attribute) attrib; \
	activity->hip_args.hipFuncGetAttribute.hfunc = (struct ihipModuleSymbol_t *) hfunc; \
};

#define GET_PTRS_VALUE_hipFuncGetAttribute(args) { \
	if (args->hipFuncGetAttribute.value != NULL) { \
		args->hipFuncGetAttribute.value__ref.val = *args->hipFuncGetAttribute.value; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipBindTextureToMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTextureToMipmappedArray` function call.
 *
 * @struct args_hipBindTextureToMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipBindTextureToMipmappedArray (
 *			const textureReference * tex (const struct textureReference *)
 *			hipMipmappedArray_const_t mipmappedArray (const struct hipMipmappedArray *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *	)
 */
struct args_hipBindTextureToMipmappedArray_t {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipBindTextureToMipmappedArray(activity) { \
	activity->hip_args.hipBindTextureToMipmappedArray.tex = (textureReference *) tex; \
	activity->hip_args.hipBindTextureToMipmappedArray.mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
	activity->hip_args.hipBindTextureToMipmappedArray.desc = (hipChannelFormatDesc *) desc; \
};

#define GET_PTRS_VALUE_hipBindTextureToMipmappedArray(args) { \
	if (args->hipBindTextureToMipmappedArray.tex != NULL) { \
		args->hipBindTextureToMipmappedArray.tex__ref.val = *args->hipBindTextureToMipmappedArray.tex; \
	} \
	if (args->hipBindTextureToMipmappedArray.mipmappedArray != NULL) { \
		args->hipBindTextureToMipmappedArray.mipmappedArray__ref.val = *args->hipBindTextureToMipmappedArray.mipmappedArray; \
	} \
	if (args->hipBindTextureToMipmappedArray.desc != NULL) { \
		args->hipBindTextureToMipmappedArray.desc__ref.val = *args->hipBindTextureToMipmappedArray.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphicsMapResources` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsMapResources` function call.
 *
 * @struct args_hipGraphicsMapResources_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsMapResources (
 *			int count (int)
 *			hipGraphicsResource_t * resources (struct _hipGraphicsResource**)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipGraphicsMapResources_t {
	int count;
	struct _hipGraphicsResource** resources;
	struct {
		void* ptr1;
	} resources__ref;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphicsMapResources(activity) { \
	activity->hip_args.hipGraphicsMapResources.count = (int) count; \
	activity->hip_args.hipGraphicsMapResources.resources = (struct _hipGraphicsResource**) resources; \
	activity->hip_args.hipGraphicsMapResources.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipGraphicsMapResources(args) { \
	if (args->hipGraphicsMapResources.resources != NULL) { \
		args->hipGraphicsMapResources.resources__ref.ptr1 = *args->hipGraphicsMapResources.resources; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipArrayCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayCreate` function call.
 *
 * @struct args_hipArrayCreate_t
 *
 * @note 
 *	hipError_t
 *	hipArrayCreate (
 *			hipArray_t * pHandle (struct hipArray **)
 *			const HIP_ARRAY_DESCRIPTOR * pAllocateArray (const struct HIP_ARRAY_DESCRIPTOR *)
 *	)
 */
struct args_hipArrayCreate_t {
	struct hipArray ** pHandle;
	struct {
		void* ptr1;
	} pHandle__ref;
	HIP_ARRAY_DESCRIPTOR * pAllocateArray;
	struct {
		HIP_ARRAY_DESCRIPTOR val;
	} pAllocateArray__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipArrayCreate(activity) { \
	activity->hip_args.hipArrayCreate.pHandle = (struct hipArray **) pHandle; \
	activity->hip_args.hipArrayCreate.pAllocateArray = (HIP_ARRAY_DESCRIPTOR *) pAllocateArray; \
};

#define GET_PTRS_VALUE_hipArrayCreate(args) { \
	if (args->hipArrayCreate.pHandle != NULL) { \
		args->hipArrayCreate.pHandle__ref.ptr1 = *args->hipArrayCreate.pHandle; \
	} \
	if (args->hipArrayCreate.pAllocateArray != NULL) { \
		args->hipArrayCreate.pAllocateArray__ref.val = *args->hipArrayCreate.pAllocateArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMaxAnisotropy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMaxAnisotropy` function call.
 *
 * @struct args_hipTexRefSetMaxAnisotropy_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMaxAnisotropy (
 *			textureReference * texRef (struct textureReference*)
 *			unsigned int maxAniso (unsigned int)
 *	)
 */
struct args_hipTexRefSetMaxAnisotropy_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	unsigned int maxAniso;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetMaxAnisotropy(activity) { \
	activity->hip_args.hipTexRefSetMaxAnisotropy.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetMaxAnisotropy.maxAniso = (unsigned int) maxAniso; \
};

#define GET_PTRS_VALUE_hipTexRefSetMaxAnisotropy(args) { \
	if (args->hipTexRefSetMaxAnisotropy.texRef != NULL) { \
		args->hipTexRefSetMaxAnisotropy.texRef__ref.val = *args->hipTexRefSetMaxAnisotropy.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeGetAttribute` function call.
 *
 * @struct args_hipGraphKernelNodeGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeGetAttribute (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipLaunchAttributeID attr (enum hipLaunchAttributeID)
 *			hipLaunchAttributeValue * value (union hipLaunchAttributeValue*)
 *	)
 */
struct args_hipGraphKernelNodeGetAttribute_t {
	struct hipGraphNode * hNode;
	hipLaunchAttributeID attr;
	hipLaunchAttributeValue * value;
	struct {
		hipLaunchAttributeValue val;
	} value__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphKernelNodeGetAttribute(activity) { \
	activity->hip_args.hipGraphKernelNodeGetAttribute.hNode = (struct hipGraphNode *) hNode; \
	activity->hip_args.hipGraphKernelNodeGetAttribute.attr = (hipLaunchAttributeID) attr; \
	activity->hip_args.hipGraphKernelNodeGetAttribute.value = (hipLaunchAttributeValue *) value; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeGetAttribute(args) { \
	if (args->hipGraphKernelNodeGetAttribute.value != NULL) { \
		args->hipGraphKernelNodeGetAttribute.value__ref.val = *args->hipGraphKernelNodeGetAttribute.value; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipExtLaunchKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtLaunchKernel` function call.
 *
 * @struct args_hipExtLaunchKernel_t
 *
 * @note 
 *	hipError_t
 *	hipExtLaunchKernel (
 *			const void * function_address (const void *)
 *			dim3 numBlocks (struct dim3)
 *			dim3 dimBlocks (struct dim3)
 *			void ** args (void **)
 *			size_t sharedMemBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipEvent_t startEvent (struct ihipEvent_t *)
 *			hipEvent_t stopEvent (struct ihipEvent_t *)
 *			int flags (int)
 *	)
 */
struct args_hipExtLaunchKernel_t {
	void * function_address;
	dim3 numBlocks;
	dim3 dimBlocks;
	void ** args;
	struct {
		void* ptr1;
	} args__ref;
	size_t sharedMemBytes;
	struct ihipStream_t * stream;
	struct ihipEvent_t * startEvent;
	struct ihipEvent_t * stopEvent;
	int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExtLaunchKernel(activity) { \
	activity->hip_args.hipExtLaunchKernel.function_address = (void *) function_address; \
	activity->hip_args.hipExtLaunchKernel.numBlocks = (dim3) numBlocks; \
	activity->hip_args.hipExtLaunchKernel.dimBlocks = (dim3) dimBlocks; \
	activity->hip_args.hipExtLaunchKernel.args = (void **) args; \
	activity->hip_args.hipExtLaunchKernel.sharedMemBytes = (size_t) sharedMemBytes; \
	activity->hip_args.hipExtLaunchKernel.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipExtLaunchKernel.startEvent = (struct ihipEvent_t *) startEvent; \
	activity->hip_args.hipExtLaunchKernel.stopEvent = (struct ihipEvent_t *) stopEvent; \
	activity->hip_args.hipExtLaunchKernel.flags = (int) flags; \
};

#define GET_PTRS_VALUE_hipExtLaunchKernel(args) { \
	if (args->hipExtLaunchKernel.args != NULL) { \
		args->hipExtLaunchKernel.args__ref.ptr1 = *args->hipExtLaunchKernel.args; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmapFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmapFilterMode` function call.
 *
 * @struct args_hipTexRefSetMipmapFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmapFilterMode (
 *			textureReference * texRef (struct textureReference*)
 *			enum hipTextureFilterMode fm (enum hipTextureFilterMode)
 *	)
 */
struct args_hipTexRefSetMipmapFilterMode_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	enum hipTextureFilterMode fm;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetMipmapFilterMode(activity) { \
	activity->hip_args.hipTexRefSetMipmapFilterMode.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetMipmapFilterMode.fm = (enum hipTextureFilterMode) fm; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmapFilterMode(args) { \
	if (args->hipTexRefSetMipmapFilterMode.texRef != NULL) { \
		args->hipTexRefSetMipmapFilterMode.texRef__ref.val = *args->hipTexRefSetMipmapFilterMode.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemImportFromShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemImportFromShareableHandle` function call.
 *
 * @struct args_hipMemImportFromShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemImportFromShareableHandle (
 *			hipMemGenericAllocationHandle_t * handle (struct ihipMemGenericAllocationHandle **)
 *			void * osHandle (void *)
 *			hipMemAllocationHandleType shHandleType (enum hipMemAllocationHandleType)
 *	)
 */
struct args_hipMemImportFromShareableHandle_t {
	struct ihipMemGenericAllocationHandle ** handle;
	struct {
		void* ptr1;
	} handle__ref;
	void * osHandle;
	hipMemAllocationHandleType shHandleType;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemImportFromShareableHandle(activity) { \
	activity->hip_args.hipMemImportFromShareableHandle.handle = (struct ihipMemGenericAllocationHandle **) handle; \
	activity->hip_args.hipMemImportFromShareableHandle.osHandle = (void *) osHandle; \
	activity->hip_args.hipMemImportFromShareableHandle.shHandleType = (hipMemAllocationHandleType) shHandleType; \
};

#define GET_PTRS_VALUE_hipMemImportFromShareableHandle(args) { \
	if (args->hipMemImportFromShareableHandle.handle != NULL) { \
		args->hipMemImportFromShareableHandle.handle__ref.ptr1 = *args->hipMemImportFromShareableHandle.handle; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetFormat` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetFormat` function call.
 *
 * @struct args_hipTexRefSetFormat_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetFormat (
 *			textureReference * texRef (struct textureReference*)
 *			hipArray_Format fmt (enum hipArray_Format)
 *			int NumPackedComponents (int)
 *	)
 */
struct args_hipTexRefSetFormat_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipArray_Format fmt;
	int NumPackedComponents;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetFormat(activity) { \
	activity->hip_args.hipTexRefSetFormat.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetFormat.fmt = (hipArray_Format) fmt; \
	activity->hip_args.hipTexRefSetFormat.NumPackedComponents = (int) NumPackedComponents; \
};

#define GET_PTRS_VALUE_hipTexRefSetFormat(args) { \
	if (args->hipTexRefSetFormat.texRef != NULL) { \
		args->hipTexRefSetFormat.texRef__ref.val = *args->hipTexRefSetFormat.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `amd_dbgapi_get_git_hash` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `amd_dbgapi_get_git_hash` function call.
 *
 * @struct args_amd_dbgapi_get_git_hash_t
 *
 * @note 
 *	const char *
 *	amd_dbgapi_get_git_hash (
 *	)
 */
struct args_amd_dbgapi_get_git_hash_t {
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
};

#define GET_PTRS_RET_VALUE_amd_dbgapi_get_git_hash(args) { \
	if (args->amd_dbgapi_get_git_hash.retval != NULL) { \
		strncpy(args->amd_dbgapi_get_git_hash.retval__ref.val, args->amd_dbgapi_get_git_hash.retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipLaunchByPtr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchByPtr` function call.
 *
 * @struct args_hipLaunchByPtr_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchByPtr (
 *			const void * func (const void *)
 *	)
 */
struct args_hipLaunchByPtr_t {
	void * func;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipLaunchByPtr(activity) { \
	activity->hip_args.hipLaunchByPtr.func = (void *) func; \
};

/**
 * @brief Structure to hold the arguments for the `amd_dbgapi_get_build_id` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `amd_dbgapi_get_build_id` function call.
 *
 * @struct args_amd_dbgapi_get_build_id_t
 *
 * @note 
 *	size_t
 *	amd_dbgapi_get_build_id (
 *	)
 */
struct args_amd_dbgapi_get_build_id_t {
	size_t retval;
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3DAsync` function call.
 *
 * @struct args_hipMemcpy3DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3DAsync (
 *			const struct hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
struct args_hipMemcpy3DAsync_t {
	struct hipMemcpy3DParms * p;
	struct {
		struct hipMemcpy3DParms val;
	} p__ref;
	struct ihipStream_t * stream;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpy3DAsync(activity) { \
	activity->hip_args.hipMemcpy3DAsync.p = (struct hipMemcpy3DParms *) p; \
	activity->hip_args.hipMemcpy3DAsync.stream = (struct ihipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipMemcpy3DAsync(args) { \
	if (args->hipMemcpy3DAsync.p != NULL) { \
		args->hipMemcpy3DAsync.p__ref.val = *args->hipMemcpy3DAsync.p; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGetTextureObjectResourceViewDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureObjectResourceViewDesc` function call.
 *
 * @struct args_hipGetTextureObjectResourceViewDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureObjectResourceViewDesc (
 *			struct hipResourceViewDesc * pResViewDesc (struct hipResourceViewDesc *)
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
struct args_hipGetTextureObjectResourceViewDesc_t {
	struct hipResourceViewDesc * pResViewDesc;
	struct {
		struct hipResourceViewDesc val;
	} pResViewDesc__ref;
	struct __hip_texture * textureObject;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGetTextureObjectResourceViewDesc(activity) { \
	activity->hip_args.hipGetTextureObjectResourceViewDesc.pResViewDesc = (struct hipResourceViewDesc *) pResViewDesc; \
	activity->hip_args.hipGetTextureObjectResourceViewDesc.textureObject = (struct __hip_texture *) textureObject; \
};

#define GET_PTRS_VALUE_hipGetTextureObjectResourceViewDesc(args) { \
	if (args->hipGetTextureObjectResourceViewDesc.pResViewDesc != NULL) { \
		args->hipGetTextureObjectResourceViewDesc.pResViewDesc__ref.val = *args->hipGetTextureObjectResourceViewDesc.pResViewDesc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetFilterMode` function call.
 *
 * @struct args_hipTexRefSetFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetFilterMode (
 *			textureReference * texRef (struct textureReference*)
 *			enum hipTextureFilterMode fm (enum hipTextureFilterMode)
 *	)
 */
struct args_hipTexRefSetFilterMode_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	enum hipTextureFilterMode fm;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetFilterMode(activity) { \
	activity->hip_args.hipTexRefSetFilterMode.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetFilterMode.fm = (enum hipTextureFilterMode) fm; \
};

#define GET_PTRS_VALUE_hipTexRefSetFilterMode(args) { \
	if (args->hipTexRefSetFilterMode.texRef != NULL) { \
		args->hipTexRefSetFilterMode.texRef__ref.val = *args->hipTexRefSetFilterMode.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipDriverGetVersion` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDriverGetVersion` function call.
 *
 * @struct args_hipDriverGetVersion_t
 *
 * @note 
 *	hipError_t
 *	hipDriverGetVersion (
 *			int * driverVersion (int *)
 *	)
 */
struct args_hipDriverGetVersion_t {
	int * driverVersion;
	struct {
		int val;
	} driverVersion__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipDriverGetVersion(activity) { \
	activity->hip_args.hipDriverGetVersion.driverVersion = (int *) driverVersion; \
};

#define GET_PTRS_VALUE_hipDriverGetVersion(args) { \
	if (args->hipDriverGetVersion.driverVersion != NULL) { \
		args->hipDriverGetVersion.driverVersion__ref.val = *args->hipDriverGetVersion.driverVersion; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipStreamWriteValue64` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWriteValue64` function call.
 *
 * @struct args_hipStreamWriteValue64_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWriteValue64 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint64_t value (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipStreamWriteValue64_t {
	struct ihipStream_t * stream;
	void * ptr;
	uint64_t value;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipStreamWriteValue64(activity) { \
	activity->hip_args.hipStreamWriteValue64.stream = (struct ihipStream_t *) stream; \
	activity->hip_args.hipStreamWriteValue64.ptr = (void *) ptr; \
	activity->hip_args.hipStreamWriteValue64.value = (uint64_t) value; \
	activity->hip_args.hipStreamWriteValue64.flags = (unsigned int) flags; \
};

/**
 * @brief Structure to hold the arguments for the `hipMallocMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocMipmappedArray` function call.
 *
 * @struct args_hipMallocMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipMallocMipmappedArray (
 *			hipMipmappedArray_t * mipmappedArray (struct hipMipmappedArray **)
 *			const struct hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			struct hipExtent extent (struct hipExtent)
 *			unsigned int numLevels (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipMallocMipmappedArray_t {
	struct hipMipmappedArray ** mipmappedArray;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	struct hipChannelFormatDesc * desc;
	struct {
		struct hipChannelFormatDesc val;
	} desc__ref;
	struct hipExtent extent;
	unsigned int numLevels;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMallocMipmappedArray(activity) { \
	activity->hip_args.hipMallocMipmappedArray.mipmappedArray = (struct hipMipmappedArray **) mipmappedArray; \
	activity->hip_args.hipMallocMipmappedArray.desc = (struct hipChannelFormatDesc *) desc; \
	activity->hip_args.hipMallocMipmappedArray.extent = (struct hipExtent) extent; \
	activity->hip_args.hipMallocMipmappedArray.numLevels = (unsigned int) numLevels; \
	activity->hip_args.hipMallocMipmappedArray.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMallocMipmappedArray(args) { \
	if (args->hipMallocMipmappedArray.mipmappedArray != NULL) { \
		args->hipMallocMipmappedArray.mipmappedArray__ref.ptr1 = *args->hipMallocMipmappedArray.mipmappedArray; \
		if (args->hipMallocMipmappedArray.mipmappedArray__ref.ptr1 != NULL) { \
			args->hipMallocMipmappedArray.mipmappedArray__ref.val = **args->hipMallocMipmappedArray.mipmappedArray; \
		} \
	} \
	if (args->hipMallocMipmappedArray.desc != NULL) { \
		args->hipMallocMipmappedArray.desc__ref.val = *args->hipMallocMipmappedArray.desc; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset_spt` function call.
 *
 * @struct args_hipMemset_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset_spt (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
struct args_hipMemset_spt_t {
	void * dst;
	int value;
	size_t sizeBytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset_spt(activity) { \
	activity->hip_args.hipMemset_spt.dst = (void *) dst; \
	activity->hip_args.hipMemset_spt.value = (int) value; \
	activity->hip_args.hipMemset_spt.sizeBytes = (size_t) sizeBytes; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetFlags` function call.
 *
 * @struct args_hipTexRefSetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetFlags (
 *			textureReference * texRef (struct textureReference*)
 *			unsigned int Flags (unsigned int)
 *	)
 */
struct args_hipTexRefSetFlags_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	unsigned int Flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetFlags(activity) { \
	activity->hip_args.hipTexRefSetFlags.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetFlags.Flags = (unsigned int) Flags; \
};

#define GET_PTRS_VALUE_hipTexRefSetFlags(args) { \
	if (args->hipTexRefSetFlags.texRef != NULL) { \
		args->hipTexRefSetFlags.texRef__ref.val = *args->hipTexRefSetFlags.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemGetAddressRange` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAddressRange` function call.
 *
 * @struct args_hipMemGetAddressRange_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAddressRange (
 *			hipDeviceptr_t * pbase (void **)
 *			size_t * psize (unsigned long*)
 *			hipDeviceptr_t dptr (void *)
 *	)
 */
struct args_hipMemGetAddressRange_t {
	void ** pbase;
	struct {
		void* ptr1;
	} pbase__ref;
	size_t * psize;
	struct {
		size_t val;
	} psize__ref;
	void * dptr;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemGetAddressRange(activity) { \
	activity->hip_args.hipMemGetAddressRange.pbase = (void **) pbase; \
	activity->hip_args.hipMemGetAddressRange.psize = (size_t *) psize; \
	activity->hip_args.hipMemGetAddressRange.dptr = (void *) dptr; \
};

#define GET_PTRS_VALUE_hipMemGetAddressRange(args) { \
	if (args->hipMemGetAddressRange.pbase != NULL) { \
		args->hipMemGetAddressRange.pbase__ref.ptr1 = *args->hipMemGetAddressRange.pbase; \
	} \
	if (args->hipMemGetAddressRange.psize != NULL) { \
		args->hipMemGetAddressRange.psize__ref.val = *args->hipMemGetAddressRange.psize; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmapLevelClamp` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmapLevelClamp` function call.
 *
 * @struct args_hipTexRefSetMipmapLevelClamp_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmapLevelClamp (
 *			textureReference * texRef (struct textureReference*)
 *			float minMipMapLevelClamp (float)
 *			float maxMipMapLevelClamp (float)
 *	)
 */
struct args_hipTexRefSetMipmapLevelClamp_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	float minMipMapLevelClamp;
	float maxMipMapLevelClamp;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetMipmapLevelClamp(activity) { \
	activity->hip_args.hipTexRefSetMipmapLevelClamp.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetMipmapLevelClamp.minMipMapLevelClamp = (float) minMipMapLevelClamp; \
	activity->hip_args.hipTexRefSetMipmapLevelClamp.maxMipMapLevelClamp = (float) maxMipMapLevelClamp; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmapLevelClamp(args) { \
	if (args->hipTexRefSetMipmapLevelClamp.texRef != NULL) { \
		args->hipTexRefSetMipmapLevelClamp.texRef__ref.val = *args->hipTexRefSetMipmapLevelClamp.texRef; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParams` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipMemcpy3DParms * pNodeParams (const struct hipMemcpy3DParms *)
 *	)
 */
struct args_hipGraphMemcpyNodeSetParams_t {
	struct hipGraphNode * node;
	hipMemcpy3DParms * pNodeParams;
	struct {
		hipMemcpy3DParms val;
	} pNodeParams__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParams(activity) { \
	activity->hip_args.hipGraphMemcpyNodeSetParams.node = (struct hipGraphNode *) node; \
	activity->hip_args.hipGraphMemcpyNodeSetParams.pNodeParams = (hipMemcpy3DParms *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemcpyNodeSetParams(args) { \
	if (args->hipGraphMemcpyNodeSetParams.pNodeParams != NULL) { \
		args->hipGraphMemcpyNodeSetParams.pNodeParams__ref.val = *args->hipGraphMemcpyNodeSetParams.pNodeParams; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipGraphGetEdges` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphGetEdges` function call.
 *
 * @struct args_hipGraphGetEdges_t
 *
 * @note 
 *	hipError_t
 *	hipGraphGetEdges (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * from (struct hipGraphNode **)
 *			hipGraphNode_t * to (struct hipGraphNode **)
 *			size_t * numEdges (unsigned long*)
 *	)
 */
struct args_hipGraphGetEdges_t {
	struct ihipGraph * graph;
	struct hipGraphNode ** from;
	struct {
		void* ptr1;
	} from__ref;
	struct hipGraphNode ** to;
	struct {
		void* ptr1;
	} to__ref;
	size_t * numEdges;
	struct {
		size_t val;
	} numEdges__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipGraphGetEdges(activity) { \
	activity->hip_args.hipGraphGetEdges.graph = (struct ihipGraph *) graph; \
	activity->hip_args.hipGraphGetEdges.from = (struct hipGraphNode **) from; \
	activity->hip_args.hipGraphGetEdges.to = (struct hipGraphNode **) to; \
	activity->hip_args.hipGraphGetEdges.numEdges = (size_t *) numEdges; \
};

#define GET_PTRS_VALUE_hipGraphGetEdges(args) { \
	if (args->hipGraphGetEdges.from != NULL) { \
		args->hipGraphGetEdges.from__ref.ptr1 = *args->hipGraphGetEdges.from; \
	} \
	if (args->hipGraphGetEdges.to != NULL) { \
		args->hipGraphGetEdges.to__ref.ptr1 = *args->hipGraphGetEdges.to; \
	} \
	if (args->hipGraphGetEdges.numEdges != NULL) { \
		args->hipGraphGetEdges.numEdges__ref.val = *args->hipGraphGetEdges.numEdges; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToArray` function call.
 *
 * @struct args_hipMemcpyToArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToArray (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
struct args_hipMemcpyToArray_t {
	struct hipArray * dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemcpyToArray(activity) { \
	activity->hip_args.hipMemcpyToArray.dst = (struct hipArray *) dst; \
	activity->hip_args.hipMemcpyToArray.wOffset = (size_t) wOffset; \
	activity->hip_args.hipMemcpyToArray.hOffset = (size_t) hOffset; \
	activity->hip_args.hipMemcpyToArray.src = (void *) src; \
	activity->hip_args.hipMemcpyToArray.count = (size_t) count; \
	activity->hip_args.hipMemcpyToArray.kind = (hipMemcpyKind) kind; \
};

/**
 * @brief Structure to hold the arguments for the `hipExtMallocWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtMallocWithFlags` function call.
 *
 * @struct args_hipExtMallocWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipExtMallocWithFlags (
 *			void ** ptr (void **)
 *			size_t sizeBytes (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
struct args_hipExtMallocWithFlags_t {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t sizeBytes;
	unsigned int flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipExtMallocWithFlags(activity) { \
	activity->hip_args.hipExtMallocWithFlags.ptr = (void **) ptr; \
	activity->hip_args.hipExtMallocWithFlags.sizeBytes = (size_t) sizeBytes; \
	activity->hip_args.hipExtMallocWithFlags.flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipExtMallocWithFlags(args) { \
	if (args->hipExtMallocWithFlags.ptr != NULL) { \
		args->hipExtMallocWithFlags.ptr__ref.ptr1 = *args->hipExtMallocWithFlags.ptr; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipFuncSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncSetAttribute` function call.
 *
 * @struct args_hipFuncSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipFuncSetAttribute (
 *			const void * func (const void *)
 *			hipFuncAttribute attr (enum hipFuncAttribute)
 *			int value (int)
 *	)
 */
struct args_hipFuncSetAttribute_t {
	void * func;
	hipFuncAttribute attr;
	int value;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipFuncSetAttribute(activity) { \
	activity->hip_args.hipFuncSetAttribute.func = (void *) func; \
	activity->hip_args.hipFuncSetAttribute.attr = (hipFuncAttribute) attr; \
	activity->hip_args.hipFuncSetAttribute.value = (int) value; \
};

/**
 * @brief Structure to hold the arguments for the `hipChooseDeviceR0600` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipChooseDeviceR0600` function call.
 *
 * @struct args_hipChooseDeviceR0600_t
 *
 * @note 
 *	hipError_t
 *	hipChooseDeviceR0600 (
 *			int * device (int *)
 *			const hipDeviceProp_tR0600 * prop (const struct hipDeviceProp_tR0600 *)
 *	)
 */
struct args_hipChooseDeviceR0600_t {
	int * device;
	struct {
		int val;
	} device__ref;
	hipDeviceProp_tR0600 * prop;
	struct {
		hipDeviceProp_tR0600 val;
	} prop__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipChooseDeviceR0600(activity) { \
	activity->hip_args.hipChooseDeviceR0600.device = (int *) device; \
	activity->hip_args.hipChooseDeviceR0600.prop = (hipDeviceProp_tR0600 *) prop; \
};

#define GET_PTRS_VALUE_hipChooseDeviceR0600(args) { \
	if (args->hipChooseDeviceR0600.device != NULL) { \
		args->hipChooseDeviceR0600.device__ref.val = *args->hipChooseDeviceR0600.device; \
	} \
	if (args->hipChooseDeviceR0600.prop != NULL) { \
		args->hipChooseDeviceR0600.prop__ref.val = *args->hipChooseDeviceR0600.prop; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmappedArray` function call.
 *
 * @struct args_hipTexRefSetMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmappedArray (
 *			textureReference * texRef (struct textureReference*)
 *			struct hipMipmappedArray * mipmappedArray (struct hipMipmappedArray *)
 *			unsigned int Flags (unsigned int)
 *	)
 */
struct args_hipTexRefSetMipmappedArray_t {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	unsigned int Flags;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefSetMipmappedArray(activity) { \
	activity->hip_args.hipTexRefSetMipmappedArray.texRef = (textureReference *) texRef; \
	activity->hip_args.hipTexRefSetMipmappedArray.mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
	activity->hip_args.hipTexRefSetMipmappedArray.Flags = (unsigned int) Flags; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmappedArray(args) { \
	if (args->hipTexRefSetMipmappedArray.texRef != NULL) { \
		args->hipTexRefSetMipmappedArray.texRef__ref.val = *args->hipTexRefSetMipmappedArray.texRef; \
	} \
	if (args->hipTexRefSetMipmappedArray.mipmappedArray != NULL) { \
		args->hipTexRefSetMipmappedArray.mipmappedArray__ref.val = *args->hipTexRefSetMipmappedArray.mipmappedArray; \
	} \
};

/**
 * @brief Structure to hold the arguments for the `hipMemset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset` function call.
 *
 * @struct args_hipMemset_t
 *
 * @note 
 *	hipError_t
 *	hipMemset (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
struct args_hipMemset_t {
	void * dst;
	int value;
	size_t sizeBytes;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipMemset(activity) { \
	activity->hip_args.hipMemset.dst = (void *) dst; \
	activity->hip_args.hipMemset.value = (int) value; \
	activity->hip_args.hipMemset.sizeBytes = (size_t) sizeBytes; \
};

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipmapLevelClamp` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipmapLevelClamp` function call.
 *
 * @struct args_hipTexRefGetMipmapLevelClamp_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipmapLevelClamp (
 *			float * pminMipmapLevelClamp (float *)
 *			float * pmaxMipmapLevelClamp (float *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
struct args_hipTexRefGetMipmapLevelClamp_t {
	float * pminMipmapLevelClamp;
	struct {
		float val;
	} pminMipmapLevelClamp__ref;
	float * pmaxMipmapLevelClamp;
	struct {
		float val;
	} pmaxMipmapLevelClamp__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
};

#define GET_ARGS_VALUE_hipTexRefGetMipmapLevelClamp(activity) { \
	activity->hip_args.hipTexRefGetMipmapLevelClamp.pminMipmapLevelClamp = (float *) pminMipmapLevelClamp; \
	activity->hip_args.hipTexRefGetMipmapLevelClamp.pmaxMipmapLevelClamp = (float *) pmaxMipmapLevelClamp; \
	activity->hip_args.hipTexRefGetMipmapLevelClamp.texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipmapLevelClamp(args) { \
	if (args->hipTexRefGetMipmapLevelClamp.pminMipmapLevelClamp != NULL) { \
		args->hipTexRefGetMipmapLevelClamp.pminMipmapLevelClamp__ref.val = *args->hipTexRefGetMipmapLevelClamp.pminMipmapLevelClamp; \
	} \
	if (args->hipTexRefGetMipmapLevelClamp.pmaxMipmapLevelClamp != NULL) { \
		args->hipTexRefGetMipmapLevelClamp.pmaxMipmapLevelClamp__ref.val = *args->hipTexRefGetMipmapLevelClamp.pmaxMipmapLevelClamp; \
	} \
	if (args->hipTexRefGetMipmapLevelClamp.texRef != NULL) { \
		args->hipTexRefGetMipmapLevelClamp.texRef__ref.val = *args->hipTexRefGetMipmapLevelClamp.texRef; \
	} \
};



/**
 * @brief Union representing argument structures for different HIP API calls.
 *
 * This union allows storing parameters for various HIP API functions,
 * ensuring type safety and efficient memory usage.
 *
 * @union hip_api_args_u 
 * @typedef hip_api_args_t 
 */
typedef union hip_api_args_u {
    FOR_EACH_HIP_FUNC(GET_ARGS_STRUCT_OF)
} hip_api_args_t;


/**
 * @brief Retrieves pointer-based argument values for HIP API calls.
 *
 * This function extracts pointer-based arguments from the provided `hip_api_args_t`
 * structure based on the given HIP API ID.
 *
 * @param[in] id The HIP API function identifier.
 * @param[in,out] args Pointer to the HIP API arguments structure.
 * @param[in] is_enter Boolean flag indicating whether this function is handling an "enter" or "exit" event.
 */
static inline void get_hip_pointed_args_for(hip_api_id_t id, hip_api_args_t* args, bool is_enter) 
{
    if (!is_enter) {
        switch(id) {
			case HIP_API_ID_hipMemPtrGetInfo : 
				GET_PTRS_VALUE_hipMemPtrGetInfo(args);
				return;
			case HIP_API_ID_hipDevicePrimaryCtxGetState : 
				GET_PTRS_VALUE_hipDevicePrimaryCtxGetState(args);
				return;
			case HIP_API_ID_hipMemPoolGetAccess : 
				GET_PTRS_VALUE_hipMemPoolGetAccess(args);
				return;
			case HIP_API_ID_hipTexRefGetMipMappedArray : 
				GET_PTRS_VALUE_hipTexRefGetMipMappedArray(args);
				return;
			case HIP_API_ID_hipMalloc3D : 
				GET_PTRS_VALUE_hipMalloc3D(args);
				return;
			case HIP_API_ID_hipMallocArray : 
				GET_PTRS_VALUE_hipMallocArray(args);
				return;
			case HIP_API_ID_hipGraphEventWaitNodeGetEvent : 
				GET_PTRS_VALUE_hipGraphEventWaitNodeGetEvent(args);
				return;
			case HIP_API_ID_hipDrvMemcpy3D : 
				GET_PTRS_VALUE_hipDrvMemcpy3D(args);
				return;
			case HIP_API_ID_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags : 
				GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args);
				return;
			case HIP_API_ID_hipHostMalloc : 
				GET_PTRS_VALUE_hipHostMalloc(args);
				return;
			case HIP_API_ID_hipModuleGetTexRef : 
				GET_PTRS_VALUE_hipModuleGetTexRef(args);
				return;
			case HIP_API_ID_hipIpcGetMemHandle : 
				GET_PTRS_VALUE_hipIpcGetMemHandle(args);
				return;
			case HIP_API_ID_hipModuleLoad : 
				GET_PTRS_VALUE_hipModuleLoad(args);
				return;
			case HIP_API_ID_hipWaitExternalSemaphoresAsync : 
				GET_PTRS_VALUE_hipWaitExternalSemaphoresAsync(args);
				return;
			case HIP_API_ID_hipGraphKernelNodeGetParams : 
				GET_PTRS_VALUE_hipGraphKernelNodeGetParams(args);
				return;
			case HIP_API_ID_hipHostAlloc : 
				GET_PTRS_VALUE_hipHostAlloc(args);
				return;
			case HIP_API_ID_hipModuleOccupancyMaxPotentialBlockSizeWithFlags : 
				GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags(args);
				return;
			case HIP_API_ID_hipGraphNodeGetDependentNodes : 
				GET_PTRS_VALUE_hipGraphNodeGetDependentNodes(args);
				return;
			case HIP_API_ID_hipExtStreamGetCUMask : 
				GET_PTRS_VALUE_hipExtStreamGetCUMask(args);
				return;
			case HIP_API_ID_hipLaunchKernel : 
				GET_PTRS_VALUE_hipLaunchKernel(args);
				return;
			case HIP_API_ID_hipGetErrorString : 
				GET_PTRS_RET_VALUE_hipGetErrorString(args);
				return;
			case HIP_API_ID_hipModuleLoadDataEx : 
				GET_PTRS_VALUE_hipModuleLoadDataEx(args);
				return;
			case HIP_API_ID_hipTexRefGetFilterMode : 
				GET_PTRS_VALUE_hipTexRefGetFilterMode(args);
				return;
			case HIP_API_ID_hipGraphInstantiateWithParams : 
				GET_PTRS_VALUE_hipGraphInstantiateWithParams(args);
				return;
			case HIP_API_ID_hipGraphicsUnmapResources : 
				GET_PTRS_VALUE_hipGraphicsUnmapResources(args);
				return;
			case HIP_API_ID_hipTexRefGetMipmapLevelBias : 
				GET_PTRS_VALUE_hipTexRefGetMipmapLevelBias(args);
				return;
			case HIP_API_ID_hipGraphAddExternalSemaphoresSignalNode : 
				GET_PTRS_VALUE_hipGraphAddExternalSemaphoresSignalNode(args);
				return;
			case HIP_API_ID_hipMemMapArrayAsync : 
				GET_PTRS_VALUE_hipMemMapArrayAsync(args);
				return;
			case HIP_API_ID_hipGraphKernelNodeSetAttribute : 
				GET_PTRS_VALUE_hipGraphKernelNodeSetAttribute(args);
				return;
			case HIP_API_ID_hipDrvMemcpy2DUnaligned : 
				GET_PTRS_VALUE_hipDrvMemcpy2DUnaligned(args);
				return;
			case HIP_API_ID_hipGraphRemoveDependencies : 
				GET_PTRS_VALUE_hipGraphRemoveDependencies(args);
				return;
			case HIP_API_ID_hipGraphCreate : 
				GET_PTRS_VALUE_hipGraphCreate(args);
				return;
			case HIP_API_ID_hipExtLaunchMultiKernelMultiDevice : 
				GET_PTRS_VALUE_hipExtLaunchMultiKernelMultiDevice(args);
				return;
			case HIP_API_ID_hipGetDeviceCount : 
				GET_PTRS_VALUE_hipGetDeviceCount(args);
				return;
			case HIP_API_ID_hipTexObjectGetResourceDesc : 
				GET_PTRS_VALUE_hipTexObjectGetResourceDesc(args);
				return;
			case HIP_API_ID_hipThreadExchangeStreamCaptureMode : 
				GET_PTRS_VALUE_hipThreadExchangeStreamCaptureMode(args);
				return;
			case HIP_API_ID_hipDeviceGetP2PAttribute : 
				GET_PTRS_VALUE_hipDeviceGetP2PAttribute(args);
				return;
			case HIP_API_ID_hipDeviceGetByPCIBusId : 
				GET_PTRS_VALUE_hipDeviceGetByPCIBusId(args);
				return;
			case HIP_API_ID_hipExtGetLinkTypeAndHopCount : 
				GET_PTRS_VALUE_hipExtGetLinkTypeAndHopCount(args);
				return;
			case HIP_API_ID_hipUnbindTexture : 
				GET_PTRS_VALUE_hipUnbindTexture(args);
				return;
			case HIP_API_ID_hipDrvMemcpy3DAsync : 
				GET_PTRS_VALUE_hipDrvMemcpy3DAsync(args);
				return;
			case HIP_API_ID_hipIpcGetEventHandle : 
				GET_PTRS_VALUE_hipIpcGetEventHandle(args);
				return;
			case HIP_API_ID_hipDeviceGetMemPool : 
				GET_PTRS_VALUE_hipDeviceGetMemPool(args);
				return;
			case HIP_API_ID_hipGraphHostNodeSetParams : 
				GET_PTRS_VALUE_hipGraphHostNodeSetParams(args);
				return;
			case HIP_API_ID_hipGraphAddEventWaitNode : 
				GET_PTRS_VALUE_hipGraphAddEventWaitNode(args);
				return;
			case HIP_API_ID_hipArrayGetDescriptor : 
				GET_PTRS_VALUE_hipArrayGetDescriptor(args);
				return;
			case HIP_API_ID_hipGraphExecUpdate : 
				GET_PTRS_VALUE_hipGraphExecUpdate(args);
				return;
			case HIP_API_ID_hipMemGetAllocationPropertiesFromHandle : 
				GET_PTRS_VALUE_hipMemGetAllocationPropertiesFromHandle(args);
				return;
			case HIP_API_ID_hipGraphAddExternalSemaphoresWaitNode : 
				GET_PTRS_VALUE_hipGraphAddExternalSemaphoresWaitNode(args);
				return;
			case HIP_API_ID_hipGetDevicePropertiesR0600 : 
				GET_PTRS_VALUE_hipGetDevicePropertiesR0600(args);
				return;
			case HIP_API_ID_hipDeviceCanAccessPeer : 
				GET_PTRS_VALUE_hipDeviceCanAccessPeer(args);
				return;
			case HIP_API_ID_hipMemSetAccess : 
				GET_PTRS_VALUE_hipMemSetAccess(args);
				return;
			case HIP_API_ID_hipApiName : 
				GET_PTRS_RET_VALUE_hipApiName(args);
				return;
			case HIP_API_ID_hipGraphicsSubResourceGetMappedArray : 
				GET_PTRS_VALUE_hipGraphicsSubResourceGetMappedArray(args);
				return;
			case HIP_API_ID_hipTexRefGetBorderColor : 
				GET_PTRS_VALUE_hipTexRefGetBorderColor(args);
				return;
			case HIP_API_ID_hipGraphAddMemcpyNode1D : 
				GET_PTRS_VALUE_hipGraphAddMemcpyNode1D(args);
				return;
			case HIP_API_ID_hipGraphGetNodes : 
				GET_PTRS_VALUE_hipGraphGetNodes(args);
				return;
			case HIP_API_ID_hipStreamGetFlags_spt : 
				GET_PTRS_VALUE_hipStreamGetFlags_spt(args);
				return;
			case HIP_API_ID_hipTexRefSetAddress2D : 
				GET_PTRS_VALUE_hipTexRefSetAddress2D(args);
				return;
			case HIP_API_ID_hipStreamGetPriority : 
				GET_PTRS_VALUE_hipStreamGetPriority(args);
				return;
			case HIP_API_ID_hipStreamCreate : 
				GET_PTRS_VALUE_hipStreamCreate(args);
				return;
			case HIP_API_ID_hipGraphNodeGetEnabled : 
				GET_PTRS_VALUE_hipGraphNodeGetEnabled(args);
				return;
			case HIP_API_ID_hipGetTextureAlignmentOffset : 
				GET_PTRS_VALUE_hipGetTextureAlignmentOffset(args);
				return;
			case HIP_API_ID_hipGraphAddEventRecordNode : 
				GET_PTRS_VALUE_hipGraphAddEventRecordNode(args);
				return;
			case HIP_API_ID_hipGraphNodeFindInClone : 
				GET_PTRS_VALUE_hipGraphNodeFindInClone(args);
				return;
			case HIP_API_ID_hipDeviceGetCacheConfig : 
				GET_PTRS_VALUE_hipDeviceGetCacheConfig(args);
				return;
			case HIP_API_ID_hipMemCreate : 
				GET_PTRS_VALUE_hipMemCreate(args);
				return;
			case HIP_API_ID_hipGraphExternalSemaphoresWaitNodeGetParams : 
				GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeGetParams(args);
				return;
			case HIP_API_ID_hipStreamEndCapture : 
				GET_PTRS_VALUE_hipStreamEndCapture(args);
				return;
			case HIP_API_ID_hipGraphExecHostNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExecHostNodeSetParams(args);
				return;
			case HIP_API_ID_hipMalloc : 
				GET_PTRS_VALUE_hipMalloc(args);
				return;
			case HIP_API_ID_hipMalloc3DArray : 
				GET_PTRS_VALUE_hipMalloc3DArray(args);
				return;
			case HIP_API_ID_hipGraphExecKernelNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExecKernelNodeSetParams(args);
				return;
			case HIP_API_ID_hipGetTextureObjectResourceDesc : 
				GET_PTRS_VALUE_hipGetTextureObjectResourceDesc(args);
				return;
			case HIP_API_ID_hipMemcpy3DAsync_spt : 
				GET_PTRS_VALUE_hipMemcpy3DAsync_spt(args);
				return;
			case HIP_API_ID_hipMemPoolImportPointer : 
				GET_PTRS_VALUE_hipMemPoolImportPointer(args);
				return;
			case HIP_API_ID_hipFuncGetAttributes : 
				GET_PTRS_VALUE_hipFuncGetAttributes(args);
				return;
			case HIP_API_ID_hipCtxGetCurrent : 
				GET_PTRS_VALUE_hipCtxGetCurrent(args);
				return;
			case HIP_API_ID_hipGraphAddChildGraphNode : 
				GET_PTRS_VALUE_hipGraphAddChildGraphNode(args);
				return;
			case HIP_API_ID_hipEventCreate : 
				GET_PTRS_VALUE_hipEventCreate(args);
				return;
			case HIP_API_ID_hipHostGetDevicePointer : 
				GET_PTRS_VALUE_hipHostGetDevicePointer(args);
				return;
			case HIP_API_ID_hipBindTextureToArray : 
				GET_PTRS_VALUE_hipBindTextureToArray(args);
				return;
			case HIP_API_ID_hipStreamEndCapture_spt : 
				GET_PTRS_VALUE_hipStreamEndCapture_spt(args);
				return;
			case HIP_API_ID_hipModuleOccupancyMaxPotentialBlockSize : 
				GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSize(args);
				return;
			case HIP_API_ID_hipKernelNameRefByPtr : 
				GET_PTRS_RET_VALUE_hipKernelNameRefByPtr(args);
				return;
			case HIP_API_ID_hipGetDevice : 
				GET_PTRS_VALUE_hipGetDevice(args);
				return;
			case HIP_API_ID_hipMemcpy3D_spt : 
				GET_PTRS_VALUE_hipMemcpy3D_spt(args);
				return;
			case HIP_API_ID_hipTexObjectGetTextureDesc : 
				GET_PTRS_VALUE_hipTexObjectGetTextureDesc(args);
				return;
			case HIP_API_ID_hipDeviceGet : 
				GET_PTRS_VALUE_hipDeviceGet(args);
				return;
			case HIP_API_ID_hipGraphExternalSemaphoresSignalNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeSetParams(args);
				return;
			case HIP_API_ID_hipStreamGetDevice : 
				GET_PTRS_VALUE_hipStreamGetDevice(args);
				return;
			case HIP_API_ID_hipMemAllocPitch : 
				GET_PTRS_VALUE_hipMemAllocPitch(args);
				return;
			case HIP_API_ID_hipGraphAddNode : 
				GET_PTRS_VALUE_hipGraphAddNode(args);
				return;
			case HIP_API_ID_hipRuntimeGetVersion : 
				GET_PTRS_VALUE_hipRuntimeGetVersion(args);
				return;
			case HIP_API_ID_hipGraphChildGraphNodeGetGraph : 
				GET_PTRS_VALUE_hipGraphChildGraphNodeGetGraph(args);
				return;
			case HIP_API_ID_hipGraphExecMemsetNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExecMemsetNodeSetParams(args);
				return;
			case HIP_API_ID_hipEventElapsedTime : 
				GET_PTRS_VALUE_hipEventElapsedTime(args);
				return;
			case HIP_API_ID_hipStreamCreateWithFlags : 
				GET_PTRS_VALUE_hipStreamCreateWithFlags(args);
				return;
			case HIP_API_ID_hipTexRefSetAddress : 
				GET_PTRS_VALUE_hipTexRefSetAddress(args);
				return;
			case HIP_API_ID_hipGraphAddKernelNode : 
				GET_PTRS_VALUE_hipGraphAddKernelNode(args);
				return;
			case HIP_API_ID_hipDeviceTotalMem : 
				GET_PTRS_VALUE_hipDeviceTotalMem(args);
				return;
			case HIP_API_ID_hipMemAllocHost : 
				GET_PTRS_VALUE_hipMemAllocHost(args);
				return;
			case HIP_API_ID_hipGraphHostNodeGetParams : 
				GET_PTRS_VALUE_hipGraphHostNodeGetParams(args);
				return;
			case HIP_API_ID_hipCtxGetCacheConfig : 
				GET_PTRS_VALUE_hipCtxGetCacheConfig(args);
				return;
			case HIP_API_ID_hipDrvPointerGetAttributes : 
				GET_PTRS_VALUE_hipDrvPointerGetAttributes(args);
				return;
			case HIP_API_ID_hipModuleLaunchCooperativeKernelMultiDevice : 
				GET_PTRS_VALUE_hipModuleLaunchCooperativeKernelMultiDevice(args);
				return;
			case HIP_API_ID_hipModuleGetGlobal : 
				GET_PTRS_VALUE_hipModuleGetGlobal(args);
				return;
			case HIP_API_ID_hipGraphEventRecordNodeGetEvent : 
				GET_PTRS_VALUE_hipGraphEventRecordNodeGetEvent(args);
				return;
			case HIP_API_ID_hipGraphInstantiate : 
				GET_PTRS_VALUE_hipGraphInstantiate(args);
				return;
			case HIP_API_ID_hipGraphMemAllocNodeGetParams : 
				GET_PTRS_VALUE_hipGraphMemAllocNodeGetParams(args);
				return;
			case HIP_API_ID_hipStreamGetCaptureInfo : 
				GET_PTRS_VALUE_hipStreamGetCaptureInfo(args);
				return;
			case HIP_API_ID_hipCtxPopCurrent : 
				GET_PTRS_VALUE_hipCtxPopCurrent(args);
				return;
			case HIP_API_ID_hipPointerGetAttributes : 
				GET_PTRS_VALUE_hipPointerGetAttributes(args);
				return;
			case HIP_API_ID_hipMallocPitch : 
				GET_PTRS_VALUE_hipMallocPitch(args);
				return;
			case HIP_API_ID_hipDeviceComputeCapability : 
				GET_PTRS_VALUE_hipDeviceComputeCapability(args);
				return;
			case HIP_API_ID_hipOccupancyMaxActiveBlocksPerMultiprocessor : 
				GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessor(args);
				return;
			case HIP_API_ID_hipSignalExternalSemaphoresAsync : 
				GET_PTRS_VALUE_hipSignalExternalSemaphoresAsync(args);
				return;
			case HIP_API_ID_hipArray3DGetDescriptor : 
				GET_PTRS_VALUE_hipArray3DGetDescriptor(args);
				return;
			case HIP_API_ID___hipPopCallConfiguration : 
				GET_PTRS_VALUE___hipPopCallConfiguration(args);
				return;
			case HIP_API_ID_hipLaunchCooperativeKernelMultiDevice : 
				GET_PTRS_VALUE_hipLaunchCooperativeKernelMultiDevice(args);
				return;
			case HIP_API_ID_hipGraphMemsetNodeSetParams : 
				GET_PTRS_VALUE_hipGraphMemsetNodeSetParams(args);
				return;
			case HIP_API_ID_hipMemPoolSetAccess : 
				GET_PTRS_VALUE_hipMemPoolSetAccess(args);
				return;
			case HIP_API_ID_hipExtStreamCreateWithCUMask : 
				GET_PTRS_VALUE_hipExtStreamCreateWithCUMask(args);
				return;
			case HIP_API_ID_hipGetTextureObjectTextureDesc : 
				GET_PTRS_VALUE_hipGetTextureObjectTextureDesc(args);
				return;
			case HIP_API_ID_hipModuleGetFunction : 
				GET_PTRS_VALUE_hipModuleGetFunction(args);
				return;
			case HIP_API_ID_hipDeviceGetLimit : 
				GET_PTRS_VALUE_hipDeviceGetLimit(args);
				return;
			case HIP_API_ID_hipTexRefGetMaxAnisotropy : 
				GET_PTRS_VALUE_hipTexRefGetMaxAnisotropy(args);
				return;
			case HIP_API_ID_hipLaunchKernel_spt : 
				GET_PTRS_VALUE_hipLaunchKernel_spt(args);
				return;
			case HIP_API_ID_hipStreamBeginCaptureToGraph : 
				GET_PTRS_VALUE_hipStreamBeginCaptureToGraph(args);
				return;
			case HIP_API_ID_hipTexRefGetFormat : 
				GET_PTRS_VALUE_hipTexRefGetFormat(args);
				return;
			case HIP_API_ID_hipDevicePrimaryCtxRetain : 
				GET_PTRS_VALUE_hipDevicePrimaryCtxRetain(args);
				return;
			case HIP_API_ID_hipMallocManaged : 
				GET_PTRS_VALUE_hipMallocManaged(args);
				return;
			case HIP_API_ID_hipStreamCreateWithPriority : 
				GET_PTRS_VALUE_hipStreamCreateWithPriority(args);
				return;
			case HIP_API_ID_hipStreamGetCaptureInfo_spt : 
				GET_PTRS_VALUE_hipStreamGetCaptureInfo_spt(args);
				return;
			case HIP_API_ID_hipGraphAddHostNode : 
				GET_PTRS_VALUE_hipGraphAddHostNode(args);
				return;
			case HIP_API_ID_hipLaunchCooperativeKernel : 
				GET_PTRS_VALUE_hipLaunchCooperativeKernel(args);
				return;
			case HIP_API_ID_hipGetErrorName : 
				GET_PTRS_RET_VALUE_hipGetErrorName(args);
				return;
			case HIP_API_ID_hipGraphMemsetNodeGetParams : 
				GET_PTRS_VALUE_hipGraphMemsetNodeGetParams(args);
				return;
			case HIP_API_ID_hipTexRefSetArray : 
				GET_PTRS_VALUE_hipTexRefSetArray(args);
				return;
			case HIP_API_ID_hipMemcpyParam2DAsync : 
				GET_PTRS_VALUE_hipMemcpyParam2DAsync(args);
				return;
			case HIP_API_ID_hipMemPoolExportPointer : 
				GET_PTRS_VALUE_hipMemPoolExportPointer(args);
				return;
			case HIP_API_ID_hipMemGetAllocationGranularity : 
				GET_PTRS_VALUE_hipMemGetAllocationGranularity(args);
				return;
			case HIP_API_ID_hipGraphClone : 
				GET_PTRS_VALUE_hipGraphClone(args);
				return;
			case HIP_API_ID_hipBindTexture2D : 
				GET_PTRS_VALUE_hipBindTexture2D(args);
				return;
			case HIP_API_ID_hipArrayGetInfo : 
				GET_PTRS_VALUE_hipArrayGetInfo(args);
				return;
			case HIP_API_ID_hipGraphExternalSemaphoresSignalNodeGetParams : 
				GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeGetParams(args);
				return;
			case HIP_API_ID_hipDeviceGetStreamPriorityRange : 
				GET_PTRS_VALUE_hipDeviceGetStreamPriorityRange(args);
				return;
			case HIP_API_ID_hipDeviceGetDefaultMemPool : 
				GET_PTRS_VALUE_hipDeviceGetDefaultMemPool(args);
				return;
			case HIP_API_ID_hipCtxCreate : 
				GET_PTRS_VALUE_hipCtxCreate(args);
				return;
			case HIP_API_ID_hipStreamIsCapturing : 
				GET_PTRS_VALUE_hipStreamIsCapturing(args);
				return;
			case HIP_API_ID_hipStreamUpdateCaptureDependencies : 
				GET_PTRS_VALUE_hipStreamUpdateCaptureDependencies(args);
				return;
			case HIP_API_ID_hipMemAddressReserve : 
				GET_PTRS_VALUE_hipMemAddressReserve(args);
				return;
			case HIP_API_ID_hipGraphAddMemsetNode : 
				GET_PTRS_VALUE_hipGraphAddMemsetNode(args);
				return;
			case HIP_API_ID_hipGraphicsResourceGetMappedPointer : 
				GET_PTRS_VALUE_hipGraphicsResourceGetMappedPointer(args);
				return;
			case HIP_API_ID_hipDeviceGetUuid : 
				GET_PTRS_VALUE_hipDeviceGetUuid(args);
				return;
			case HIP_API_ID_hipModuleLaunchKernel : 
				GET_PTRS_VALUE_hipModuleLaunchKernel(args);
				return;
			case HIP_API_ID_hipGraphAddEmptyNode : 
				GET_PTRS_VALUE_hipGraphAddEmptyNode(args);
				return;
			case HIP_API_ID_hipGraphInstantiateWithFlags : 
				GET_PTRS_VALUE_hipGraphInstantiateWithFlags(args);
				return;
			case HIP_API_ID_hipCtxGetApiVersion : 
				GET_PTRS_VALUE_hipCtxGetApiVersion(args);
				return;
			case HIP_API_ID_hipBindTexture : 
				GET_PTRS_VALUE_hipBindTexture(args);
				return;
			case HIP_API_ID_hipGetDeviceFlags : 
				GET_PTRS_VALUE_hipGetDeviceFlags(args);
				return;
			case HIP_API_ID_hipMemRangeGetAttributes : 
				GET_PTRS_VALUE_hipMemRangeGetAttributes(args);
				return;
			case HIP_API_ID_hipIpcOpenEventHandle : 
				GET_PTRS_VALUE_hipIpcOpenEventHandle(args);
				return;
			case HIP_API_ID_hipMallocAsync : 
				GET_PTRS_VALUE_hipMallocAsync(args);
				return;
			case HIP_API_ID_hipOccupancyMaxPotentialBlockSize : 
				GET_PTRS_VALUE_hipOccupancyMaxPotentialBlockSize(args);
				return;
			case HIP_API_ID_hipGraphAddMemcpyNodeToSymbol : 
				GET_PTRS_VALUE_hipGraphAddMemcpyNodeToSymbol(args);
				return;
			case HIP_API_ID_hipDeviceGetPCIBusId : 
				GET_PTRS_VALUE_hipDeviceGetPCIBusId(args);
				return;
			case HIP_API_ID_hipGetChannelDesc : 
				GET_PTRS_VALUE_hipGetChannelDesc(args);
				return;
			case HIP_API_ID_hipImportExternalMemory : 
				GET_PTRS_VALUE_hipImportExternalMemory(args);
				return;
			case HIP_API_ID_hipTexRefSetMipmapLevelBias : 
				GET_PTRS_VALUE_hipTexRefSetMipmapLevelBias(args);
				return;
			case HIP_API_ID_hipMemPoolImportFromShareableHandle : 
				GET_PTRS_VALUE_hipMemPoolImportFromShareableHandle(args);
				return;
			case HIP_API_ID_hipTexRefGetMipmapFilterMode : 
				GET_PTRS_VALUE_hipTexRefGetMipmapFilterMode(args);
				return;
			case HIP_API_ID_hipGetProcAddress : 
				GET_PTRS_VALUE_hipGetProcAddress(args);
				return;
			case HIP_API_ID_hipCreateTextureObject : 
				GET_PTRS_VALUE_hipCreateTextureObject(args);
				return;
			case HIP_API_ID_hipTexRefGetFlags : 
				GET_PTRS_VALUE_hipTexRefGetFlags(args);
				return;
			case HIP_API_ID_hipDrvGraphAddMemcpyNode : 
				GET_PTRS_VALUE_hipDrvGraphAddMemcpyNode(args);
				return;
			case HIP_API_ID_hipGraphNodeGetDependencies : 
				GET_PTRS_VALUE_hipGraphNodeGetDependencies(args);
				return;
			case HIP_API_ID_hipMemcpy3D : 
				GET_PTRS_VALUE_hipMemcpy3D(args);
				return;
			case HIP_API_ID_hipGraphAddMemcpyNodeFromSymbol : 
				GET_PTRS_VALUE_hipGraphAddMemcpyNodeFromSymbol(args);
				return;
			case HIP_API_ID_hipStreamGetPriority_spt : 
				GET_PTRS_VALUE_hipStreamGetPriority_spt(args);
				return;
			case HIP_API_ID_hipModuleLoadData : 
				GET_PTRS_VALUE_hipModuleLoadData(args);
				return;
			case HIP_API_ID_hipExternalMemoryGetMappedBuffer : 
				GET_PTRS_VALUE_hipExternalMemoryGetMappedBuffer(args);
				return;
			case HIP_API_ID_hipLaunchCooperativeKernel_spt : 
				GET_PTRS_VALUE_hipLaunchCooperativeKernel_spt(args);
				return;
			case HIP_API_ID_hipModuleLaunchCooperativeKernel : 
				GET_PTRS_VALUE_hipModuleLaunchCooperativeKernel(args);
				return;
			case HIP_API_ID_hipDeviceGetName : 
				GET_PTRS_VALUE_hipDeviceGetName(args);
				return;
			case HIP_API_ID_hipTexRefSetAddressMode : 
				GET_PTRS_VALUE_hipTexRefSetAddressMode(args);
				return;
			case HIP_API_ID_hipGraphGetRootNodes : 
				GET_PTRS_VALUE_hipGraphGetRootNodes(args);
				return;
			case HIP_API_ID_hipGraphExternalSemaphoresWaitNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeSetParams(args);
				return;
			case HIP_API_ID_hipGraphMemcpyNodeGetParams : 
				GET_PTRS_VALUE_hipGraphMemcpyNodeGetParams(args);
				return;
			case HIP_API_ID_hipSetValidDevices : 
				GET_PTRS_VALUE_hipSetValidDevices(args);
				return;
			case HIP_API_ID_hipGraphExecExternalSemaphoresWaitNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExecExternalSemaphoresWaitNodeSetParams(args);
				return;
			case HIP_API_ID_hipTexObjectGetResourceViewDesc : 
				GET_PTRS_VALUE_hipTexObjectGetResourceViewDesc(args);
				return;
			case HIP_API_ID_hipEventCreateWithFlags : 
				GET_PTRS_VALUE_hipEventCreateWithFlags(args);
				return;
			case HIP_API_ID_hipMipmappedArrayCreate : 
				GET_PTRS_VALUE_hipMipmappedArrayCreate(args);
				return;
			case HIP_API_ID_hipGraphAddMemcpyNode : 
				GET_PTRS_VALUE_hipGraphAddMemcpyNode(args);
				return;
			case HIP_API_ID_hipMallocFromPoolAsync : 
				GET_PTRS_VALUE_hipMallocFromPoolAsync(args);
				return;
			case HIP_API_ID_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags : 
				GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args);
				return;
			case HIP_API_ID_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor : 
				GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor(args);
				return;
			case HIP_API_ID_hipCtxGetFlags : 
				GET_PTRS_VALUE_hipCtxGetFlags(args);
				return;
			case HIP_API_ID_hipGetSymbolAddress : 
				GET_PTRS_VALUE_hipGetSymbolAddress(args);
				return;
			case HIP_API_ID_hipTexRefGetAddress : 
				GET_PTRS_VALUE_hipTexRefGetAddress(args);
				return;
			case HIP_API_ID_hipTexObjectCreate : 
				GET_PTRS_VALUE_hipTexObjectCreate(args);
				return;
			case HIP_API_ID_hipDeviceGetSharedMemConfig : 
				GET_PTRS_VALUE_hipDeviceGetSharedMemConfig(args);
				return;
			case HIP_API_ID_hipGraphAddMemAllocNode : 
				GET_PTRS_VALUE_hipGraphAddMemAllocNode(args);
				return;
			case HIP_API_ID_hipMemRetainAllocationHandle : 
				GET_PTRS_VALUE_hipMemRetainAllocationHandle(args);
				return;
			case HIP_API_ID_hipGetFuncBySymbol : 
				GET_PTRS_VALUE_hipGetFuncBySymbol(args);
				return;
			case HIP_API_ID_hipMemGetInfo : 
				GET_PTRS_VALUE_hipMemGetInfo(args);
				return;
			case HIP_API_ID_hipMemcpyParam2D : 
				GET_PTRS_VALUE_hipMemcpyParam2D(args);
				return;
			case HIP_API_ID_hipGraphDebugDotPrint : 
				GET_PTRS_VALUE_hipGraphDebugDotPrint(args);
				return;
			case HIP_API_ID_hipDrvGetErrorString : 
				GET_PTRS_VALUE_hipDrvGetErrorString(args);
				return;
			case HIP_API_ID_hipTexRefGetAddressMode : 
				GET_PTRS_VALUE_hipTexRefGetAddressMode(args);
				return;
			case HIP_API_ID___hipGetPCH : 
				GET_PTRS_VALUE___hipGetPCH(args);
				return;
			case HIP_API_ID_hipStreamGetFlags : 
				GET_PTRS_VALUE_hipStreamGetFlags(args);
				return;
			case HIP_API_ID_hipMemGetAccess : 
				GET_PTRS_VALUE_hipMemGetAccess(args);
				return;
			case HIP_API_ID_hipGetSymbolSize : 
				GET_PTRS_VALUE_hipGetSymbolSize(args);
				return;
			case HIP_API_ID_hipMipmappedArrayGetLevel : 
				GET_PTRS_VALUE_hipMipmappedArrayGetLevel(args);
				return;
			case HIP_API_ID_hipExternalMemoryGetMappedMipmappedArray : 
				GET_PTRS_VALUE_hipExternalMemoryGetMappedMipmappedArray(args);
				return;
			case HIP_API_ID_hipGraphExecMemcpyNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExecMemcpyNodeSetParams(args);
				return;
			case HIP_API_ID_hipUserObjectCreate : 
				GET_PTRS_VALUE_hipUserObjectCreate(args);
				return;
			case HIP_API_ID_hipStreamGetCaptureInfo_v2 : 
				GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2(args);
				return;
			case HIP_API_ID_hipTexRefGetArray : 
				GET_PTRS_VALUE_hipTexRefGetArray(args);
				return;
			case HIP_API_ID_hipImportExternalSemaphore : 
				GET_PTRS_VALUE_hipImportExternalSemaphore(args);
				return;
			case HIP_API_ID_hipDeviceGetAttribute : 
				GET_PTRS_VALUE_hipDeviceGetAttribute(args);
				return;
			case HIP_API_ID_hipCtxGetSharedMemConfig : 
				GET_PTRS_VALUE_hipCtxGetSharedMemConfig(args);
				return;
			case HIP_API_ID_hipStreamIsCapturing_spt : 
				GET_PTRS_VALUE_hipStreamIsCapturing_spt(args);
				return;
			case HIP_API_ID_hipGraphKernelNodeSetParams : 
				GET_PTRS_VALUE_hipGraphKernelNodeSetParams(args);
				return;
			case HIP_API_ID_hipMallocHost : 
				GET_PTRS_VALUE_hipMallocHost(args);
				return;
			case HIP_API_ID_hipStreamGetCaptureInfo_v2_spt : 
				GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2_spt(args);
				return;
			case HIP_API_ID_hipGetTextureReference : 
				GET_PTRS_VALUE_hipGetTextureReference(args);
				return;
			case HIP_API_ID_hipGraphExecExternalSemaphoresSignalNodeSetParams : 
				GET_PTRS_VALUE_hipGraphExecExternalSemaphoresSignalNodeSetParams(args);
				return;
			case HIP_API_ID_hipGraphAddDependencies : 
				GET_PTRS_VALUE_hipGraphAddDependencies(args);
				return;
			case HIP_API_ID_hipGraphNodeGetType : 
				GET_PTRS_VALUE_hipGraphNodeGetType(args);
				return;
			case HIP_API_ID_hipTexRefSetBorderColor : 
				GET_PTRS_VALUE_hipTexRefSetBorderColor(args);
				return;
			case HIP_API_ID_hipCtxGetDevice : 
				GET_PTRS_VALUE_hipCtxGetDevice(args);
				return;
			case HIP_API_ID_hipHostGetFlags : 
				GET_PTRS_VALUE_hipHostGetFlags(args);
				return;
			case HIP_API_ID_hipDrvGraphAddMemsetNode : 
				GET_PTRS_VALUE_hipDrvGraphAddMemsetNode(args);
				return;
			case HIP_API_ID_hipMemPoolCreate : 
				GET_PTRS_VALUE_hipMemPoolCreate(args);
				return;
			case HIP_API_ID_hipKernelNameRef : 
				GET_PTRS_RET_VALUE_hipKernelNameRef(args);
				return;
			case HIP_API_ID_hipDrvGetErrorName : 
				GET_PTRS_VALUE_hipDrvGetErrorName(args);
				return;
			case HIP_API_ID_hipCreateSurfaceObject : 
				GET_PTRS_VALUE_hipCreateSurfaceObject(args);
				return;
			case HIP_API_ID_hipGetMipmappedArrayLevel : 
				GET_PTRS_VALUE_hipGetMipmappedArrayLevel(args);
				return;
			case HIP_API_ID_hipArray3DCreate : 
				GET_PTRS_VALUE_hipArray3DCreate(args);
				return;
			case HIP_API_ID_hipIpcOpenMemHandle : 
				GET_PTRS_VALUE_hipIpcOpenMemHandle(args);
				return;
			case HIP_API_ID_hipFuncGetAttribute : 
				GET_PTRS_VALUE_hipFuncGetAttribute(args);
				return;
			case HIP_API_ID_hipBindTextureToMipmappedArray : 
				GET_PTRS_VALUE_hipBindTextureToMipmappedArray(args);
				return;
			case HIP_API_ID_hipGraphicsMapResources : 
				GET_PTRS_VALUE_hipGraphicsMapResources(args);
				return;
			case HIP_API_ID_hipArrayCreate : 
				GET_PTRS_VALUE_hipArrayCreate(args);
				return;
			case HIP_API_ID_hipTexRefSetMaxAnisotropy : 
				GET_PTRS_VALUE_hipTexRefSetMaxAnisotropy(args);
				return;
			case HIP_API_ID_hipGraphKernelNodeGetAttribute : 
				GET_PTRS_VALUE_hipGraphKernelNodeGetAttribute(args);
				return;
			case HIP_API_ID_hipExtLaunchKernel : 
				GET_PTRS_VALUE_hipExtLaunchKernel(args);
				return;
			case HIP_API_ID_hipTexRefSetMipmapFilterMode : 
				GET_PTRS_VALUE_hipTexRefSetMipmapFilterMode(args);
				return;
			case HIP_API_ID_hipMemImportFromShareableHandle : 
				GET_PTRS_VALUE_hipMemImportFromShareableHandle(args);
				return;
			case HIP_API_ID_hipTexRefSetFormat : 
				GET_PTRS_VALUE_hipTexRefSetFormat(args);
				return;
			case HIP_API_ID_hipMemcpy3DAsync : 
				GET_PTRS_VALUE_hipMemcpy3DAsync(args);
				return;
			case HIP_API_ID_hipGetTextureObjectResourceViewDesc : 
				GET_PTRS_VALUE_hipGetTextureObjectResourceViewDesc(args);
				return;
			case HIP_API_ID_hipTexRefSetFilterMode : 
				GET_PTRS_VALUE_hipTexRefSetFilterMode(args);
				return;
			case HIP_API_ID_hipDriverGetVersion : 
				GET_PTRS_VALUE_hipDriverGetVersion(args);
				return;
			case HIP_API_ID_hipMallocMipmappedArray : 
				GET_PTRS_VALUE_hipMallocMipmappedArray(args);
				return;
			case HIP_API_ID_hipTexRefSetFlags : 
				GET_PTRS_VALUE_hipTexRefSetFlags(args);
				return;
			case HIP_API_ID_hipMemGetAddressRange : 
				GET_PTRS_VALUE_hipMemGetAddressRange(args);
				return;
			case HIP_API_ID_hipTexRefSetMipmapLevelClamp : 
				GET_PTRS_VALUE_hipTexRefSetMipmapLevelClamp(args);
				return;
			case HIP_API_ID_hipGraphMemcpyNodeSetParams : 
				GET_PTRS_VALUE_hipGraphMemcpyNodeSetParams(args);
				return;
			case HIP_API_ID_hipGraphGetEdges : 
				GET_PTRS_VALUE_hipGraphGetEdges(args);
				return;
			case HIP_API_ID_hipExtMallocWithFlags : 
				GET_PTRS_VALUE_hipExtMallocWithFlags(args);
				return;
			case HIP_API_ID_hipChooseDeviceR0600 : 
				GET_PTRS_VALUE_hipChooseDeviceR0600(args);
				return;
			case HIP_API_ID_hipTexRefSetMipmappedArray : 
				GET_PTRS_VALUE_hipTexRefSetMipmappedArray(args);
				return;
			case HIP_API_ID_hipTexRefGetMipmapLevelClamp : 
				GET_PTRS_VALUE_hipTexRefGetMipmapLevelClamp(args);
				return;
            default : break;
        }
    } else {
        switch(id) {
			case HIP_API_ID_hipFreeMipmappedArray : 
				GET_PTRS_VALUE_hipFreeMipmappedArray(args);
				return;
			case HIP_API_ID_hipGraphAddMemFreeNode : 
				GET_PTRS_VALUE_hipGraphAddMemFreeNode(args);
				return;
			case HIP_API_ID_hipMipmappedArrayDestroy : 
				GET_PTRS_VALUE_hipMipmappedArrayDestroy(args);
				return;
            default : break;
        }
    }
}
#endif // HIP_API_HELPER_H