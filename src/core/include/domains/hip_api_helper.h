/**
 * @file hip_api_helper.h
 * @brief Helper functions for managing HIP API calls in the profiling framework.
 *
 * This file contains various utility functions used to handle HIP API calls 
 * within the profiling system, including retrieving argument values and 
 * managing function identifiers.
 * 
 * @note THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 * 
 */

#ifndef HIP_API_HELPER_H
#define HIP_API_HELPER_H

#include <string.h>
#include <stdbool.h>
#include "domains/fun_proto/hip_profiled_functions.h"
#include "hip/hip_runtime.h" 

#define HIP_STRING_SIZE_MAX 128

#ifdef ADD_API_PREFIX
#undef ADD_API_PREFIX
#endif
#define ADD_API_PREFIX(str) HIP_API_##str


#define FOR_EACH_HIP_FUNC(macro) \
IF_ENABLED(hipMemPtrGetInfo, macro)                \
IF_ENABLED(hipGraphExecMemcpyNodeSetParams1D, macro) \
IF_ENABLED(hipCtxEnablePeerAccess, macro)          \
IF_ENABLED(hipHostUnregister, macro)               \
IF_ENABLED(hipDevicePrimaryCtxGetState, macro)     \
IF_ENABLED(hipPointerGetAttribute, macro)          \
IF_ENABLED(hipMemPoolGetAccess, macro)             \
IF_ENABLED(hipMemsetD32, macro)                    \
IF_ENABLED(hipTexRefGetMipMappedArray, macro)      \
IF_ENABLED(hipMalloc3D, macro)                     \
IF_ENABLED(hipMemsetD8, macro)                     \
IF_ENABLED(hipMallocArray, macro)                  \
IF_ENABLED(hipGraphEventWaitNodeGetEvent, macro)   \
IF_ENABLED(hipDrvMemcpy3D, macro)                  \
IF_ENABLED(hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, macro) \
IF_ENABLED(hipHostMalloc, macro)                   \
IF_ENABLED(hipModuleGetTexRef, macro)              \
IF_ENABLED(hipIpcGetMemHandle, macro)              \
IF_ENABLED(hipMemcpyDtoHAsync, macro)              \
IF_ENABLED(hipModuleLoad, macro)                   \
IF_ENABLED(hipWaitExternalSemaphoresAsync, macro)  \
IF_ENABLED(hipGraphKernelNodeGetParams, macro)     \
IF_ENABLED(hipGraphLaunch, macro)                  \
IF_ENABLED(hipHostAlloc, macro)                    \
IF_ENABLED(hipSetDevice, macro)                    \
IF_ENABLED(hipModuleOccupancyMaxPotentialBlockSizeWithFlags, macro) \
IF_ENABLED(hipGraphNodeGetDependentNodes, macro)   \
IF_ENABLED(hipExtStreamGetCUMask, macro)           \
IF_ENABLED(hipMemsetD16, macro)                    \
IF_ENABLED(hipLaunchKernel, macro)                 \
IF_ENABLED(hipGetErrorString, macro)               \
IF_ENABLED(hipModuleLoadDataEx, macro)             \
IF_ENABLED(hipTexRefGetFilterMode, macro)          \
IF_ENABLED(hipGraphInstantiateWithParams, macro)   \
IF_ENABLED(hipGraphMemcpyNodeSetParams1D, macro)   \
IF_ENABLED(hipStreamSynchronize, macro)            \
IF_ENABLED(hipGraphicsUnmapResources, macro)       \
IF_ENABLED(hipMemcpy2DFromArray_spt, macro)        \
IF_ENABLED(hipGraphExecMemcpyNodeSetParamsFromSymbol, macro) \
IF_ENABLED(hipTexRefGetMipmapLevelBias, macro)     \
IF_ENABLED(hipGraphAddExternalSemaphoresSignalNode, macro) \
IF_ENABLED(hipExtGetLastError, macro)              \
IF_ENABLED(hipMemMapArrayAsync, macro)             \
IF_ENABLED(hipMemcpyAsync, macro)                  \
IF_ENABLED(hipGraphKernelNodeSetAttribute, macro)  \
IF_ENABLED(hipDrvMemcpy2DUnaligned, macro)         \
IF_ENABLED(hipMemPoolDestroy, macro)               \
IF_ENABLED(hipGraphRemoveDependencies, macro)      \
IF_ENABLED(hipGraphCreate, macro)                  \
IF_ENABLED(hipExtLaunchMultiKernelMultiDevice, macro) \
IF_ENABLED(hipGetDeviceCount, macro)               \
IF_ENABLED(hipMemUnmap, macro)                     \
IF_ENABLED(hipTexObjectGetResourceDesc, macro)     \
IF_ENABLED(hipGraphExecEventRecordNodeSetEvent, macro) \
IF_ENABLED(hipInit, macro)                         \
IF_ENABLED(hipThreadExchangeStreamCaptureMode, macro) \
IF_ENABLED(hipDeviceGetP2PAttribute, macro)        \
IF_ENABLED(hipDeviceGetByPCIBusId, macro)          \
IF_ENABLED(hipHostFree, macro)                     \
IF_ENABLED(hipExtGetLinkTypeAndHopCount, macro)    \
IF_ENABLED(hipMemcpyToSymbolAsync_spt, macro)      \
IF_ENABLED(hipCtxDisablePeerAccess, macro)         \
IF_ENABLED(hipSetupArgument, macro)                \
IF_ENABLED(hipMemcpyAtoHAsync, macro)              \
IF_ENABLED(hipCtxSetCacheConfig, macro)            \
IF_ENABLED(hipMemRelease, macro)                   \
IF_ENABLED(hipUnbindTexture, macro)                \
IF_ENABLED(hipDrvMemcpy3DAsync, macro)             \
IF_ENABLED(hipIpcGetEventHandle, macro)            \
IF_ENABLED(hipGraphReleaseUserObject, macro)       \
IF_ENABLED(hipDeviceGetMemPool, macro)             \
IF_ENABLED(hipGraphHostNodeSetParams, macro)       \
IF_ENABLED(hipGraphAddEventWaitNode, macro)        \
IF_ENABLED(hipMemcpy2DFromArrayAsync_spt, macro)   \
IF_ENABLED(hipLaunchHostFunc_spt, macro)           \
IF_ENABLED(hipStreamWaitEvent_spt, macro)          \
IF_ENABLED(hipArrayGetDescriptor, macro)           \
IF_ENABLED(hipGraphExecUpdate, macro)              \
IF_ENABLED(hipMemGetAllocationPropertiesFromHandle, macro) \
IF_ENABLED(hipMemcpyWithStream, macro)             \
IF_ENABLED(hipGraphAddExternalSemaphoresWaitNode, macro) \
IF_ENABLED(hipMemcpyAtoH, macro)                   \
IF_ENABLED(hipStreamQuery, macro)                  \
IF_ENABLED(hipIpcCloseMemHandle, macro)            \
IF_ENABLED(hipMemsetAsync, macro)                  \
IF_ENABLED(hipMemcpyDtoD, macro)                   \
IF_ENABLED(hipModuleUnload, macro)                 \
IF_ENABLED(hipGetDevicePropertiesR0600, macro)     \
IF_ENABLED(hipMemcpyFromArray, macro)              \
IF_ENABLED(hipDeviceCanAccessPeer, macro)          \
IF_ENABLED(hipMemSetAccess, macro)                 \
IF_ENABLED(hipStreamWaitValue32, macro)            \
IF_ENABLED(hipApiName, macro)                      \
IF_ENABLED(hipGraphicsSubResourceGetMappedArray, macro) \
IF_ENABLED(hipMemcpy2DToArrayAsync, macro)         \
IF_ENABLED(hipGraphDestroy, macro)                 \
IF_ENABLED(hipTexRefGetBorderColor, macro)         \
IF_ENABLED(hipGraphAddMemcpyNode1D, macro)         \
IF_ENABLED(hipGraphGetNodes, macro)                \
IF_ENABLED(hipStreamGetFlags_spt, macro)           \
IF_ENABLED(hipTexRefSetAddress2D, macro)           \
IF_ENABLED(hipStreamGetPriority, macro)            \
IF_ENABLED(hipStreamCreate, macro)                 \
IF_ENABLED(hipMemcpyFromSymbol, macro)             \
IF_ENABLED(hipGraphNodeGetEnabled, macro)          \
IF_ENABLED(hipCreateChannelDesc, macro)            \
IF_ENABLED(hipFreeMipmappedArray, macro)           \
IF_ENABLED(hipGetTextureAlignmentOffset, macro)    \
IF_ENABLED(hipGraphAddEventRecordNode, macro)      \
IF_ENABLED(hipGraphNodeFindInClone, macro)         \
IF_ENABLED(hipMemcpyFromSymbol_spt, macro)         \
IF_ENABLED(hipMemset3DAsync_spt, macro)            \
IF_ENABLED(hipMemsetD16Async, macro)               \
IF_ENABLED(hipDeviceGetCacheConfig, macro)         \
IF_ENABLED(hipMemCreate, macro)                    \
IF_ENABLED(hipGraphExternalSemaphoresWaitNodeGetParams, macro) \
IF_ENABLED(hipStreamEndCapture, macro)             \
IF_ENABLED(hipMemcpyFromSymbolAsync_spt, macro)    \
IF_ENABLED(hipMemcpyHtoA, macro)                   \
IF_ENABLED(hipGraphExecHostNodeSetParams, macro)   \
IF_ENABLED(hipMalloc, macro)                       \
IF_ENABLED(hipMalloc3DArray, macro)                \
IF_ENABLED(hipGraphExecKernelNodeSetParams, macro) \
IF_ENABLED(hipGetTextureObjectResourceDesc, macro) \
IF_ENABLED(__hipPushCallConfiguration, macro)      \
IF_ENABLED(hipMemcpy3DAsync_spt, macro)            \
IF_ENABLED(hipMemsetD8Async, macro)                \
IF_ENABLED(hipStreamAddCallback, macro)            \
IF_ENABLED(hipMemPoolImportPointer, macro)         \
IF_ENABLED(hipFuncGetAttributes, macro)            \
IF_ENABLED(hipCtxGetCurrent, macro)                \
IF_ENABLED(hipGraphAddChildGraphNode, macro)       \
IF_ENABLED(hipEventCreate, macro)                  \
IF_ENABLED(hipHostGetDevicePointer, macro)         \
IF_ENABLED(hipEventQuery, macro)                   \
IF_ENABLED(hipMemcpyPeerAsync, macro)              \
IF_ENABLED(hipMemMap, macro)                       \
IF_ENABLED(hipBindTextureToArray, macro)           \
IF_ENABLED(hipMemcpy2DAsync_spt, macro)            \
IF_ENABLED(hipMemPoolSetAttribute, macro)          \
IF_ENABLED(hipGetLastError, macro)                 \
IF_ENABLED(hipStreamEndCapture_spt, macro)         \
IF_ENABLED(hipModuleOccupancyMaxPotentialBlockSize, macro) \
IF_ENABLED(hipKernelNameRefByPtr, macro)           \
IF_ENABLED(hipGetDevice, macro)                    \
IF_ENABLED(hipMemcpy3D_spt, macro)                 \
IF_ENABLED(hipTexObjectGetTextureDesc, macro)      \
IF_ENABLED(hipDeviceGet, macro)                    \
IF_ENABLED(hipGraphExternalSemaphoresSignalNodeSetParams, macro) \
IF_ENABLED(hipDestroySurfaceObject, macro)         \
IF_ENABLED(hipStreamGetDevice, macro)              \
IF_ENABLED(hipMemAllocPitch, macro)                \
IF_ENABLED(hipGraphAddNode, macro)                 \
IF_ENABLED(hipDeviceSetSharedMemConfig, macro)     \
IF_ENABLED(hipRuntimeGetVersion, macro)            \
IF_ENABLED(hipGraphChildGraphNodeGetGraph, macro)  \
IF_ENABLED(hipGraphExecMemsetNodeSetParams, macro) \
IF_ENABLED(hipGraphicsUnregisterResource, macro)   \
IF_ENABLED(hipEventElapsedTime, macro)             \
IF_ENABLED(hipFreeAsync, macro)                    \
IF_ENABLED(hipStreamCreateWithFlags, macro)        \
IF_ENABLED(hipTexRefSetAddress, macro)             \
IF_ENABLED(hipStreamAddCallback_spt, macro)        \
IF_ENABLED(hipGraphAddKernelNode, macro)           \
IF_ENABLED(hipMemcpyDtoH, macro)                   \
IF_ENABLED(hipDeviceTotalMem, macro)               \
IF_ENABLED(hipMemset2D, macro)                     \
IF_ENABLED(hipMemcpy2DToArray_spt, macro)          \
IF_ENABLED(hipMemAllocHost, macro)                 \
IF_ENABLED(hipPointerSetAttribute, macro)          \
IF_ENABLED(hipGraphHostNodeGetParams, macro)       \
IF_ENABLED(hipMemset3D, macro)                     \
IF_ENABLED(hipDestroyTextureObject, macro)         \
IF_ENABLED(hipMemAdvise, macro)                    \
IF_ENABLED(hipCtxGetCacheConfig, macro)            \
IF_ENABLED(hipDrvPointerGetAttributes, macro)      \
IF_ENABLED(hipModuleLaunchCooperativeKernelMultiDevice, macro) \
IF_ENABLED(hipModuleGetGlobal, macro)              \
IF_ENABLED(hipGraphEventRecordNodeGetEvent, macro) \
IF_ENABLED(hipGraphInstantiate, macro)             \
IF_ENABLED(hipGraphRetainUserObject, macro)        \
IF_ENABLED(hipGraphMemAllocNodeGetParams, macro)   \
IF_ENABLED(hipStreamGetCaptureInfo, macro)         \
IF_ENABLED(hipCtxPopCurrent, macro)                \
IF_ENABLED(hipPointerGetAttributes, macro)         \
IF_ENABLED(hipDeviceDisablePeerAccess, macro)      \
IF_ENABLED(hipMallocPitch, macro)                  \
IF_ENABLED(hipMemcpy2DFromArrayAsync, macro)       \
IF_ENABLED(hipDeviceComputeCapability, macro)      \
IF_ENABLED(hipMemcpyHtoD, macro)                   \
IF_ENABLED(hipOccupancyMaxActiveBlocksPerMultiprocessor, macro) \
IF_ENABLED(hipSignalExternalSemaphoresAsync, macro) \
IF_ENABLED(hipArray3DGetDescriptor, macro)         \
IF_ENABLED(__hipPopCallConfiguration, macro)       \
IF_ENABLED(hipDevicePrimaryCtxRelease, macro)      \
IF_ENABLED(hipLaunchCooperativeKernelMultiDevice, macro) \
IF_ENABLED(hipFreeArray, macro)                    \
IF_ENABLED(hipGraphMemsetNodeSetParams, macro)     \
IF_ENABLED(hipMemPoolSetAccess, macro)             \
IF_ENABLED(hipGetStreamDeviceId, macro)            \
IF_ENABLED(hipExtStreamCreateWithCUMask, macro)    \
IF_ENABLED(hipGetTextureObjectTextureDesc, macro)  \
IF_ENABLED(hipEventRecord_spt, macro)              \
IF_ENABLED(hipConfigureCall, macro)                \
IF_ENABLED(hipMemcpyFromArray_spt, macro)          \
IF_ENABLED(hipModuleGetFunction, macro)            \
IF_ENABLED(hipFuncSetCacheConfig, macro)           \
IF_ENABLED(hipDeviceGetLimit, macro)               \
IF_ENABLED(hipTexRefGetMaxAnisotropy, macro)       \
IF_ENABLED(hipLaunchKernel_spt, macro)             \
IF_ENABLED(hipStreamBeginCaptureToGraph, macro)    \
IF_ENABLED(hipTexRefGetFormat, macro)              \
IF_ENABLED(hipStreamWaitValue64, macro)            \
IF_ENABLED(hipDevicePrimaryCtxRetain, macro)       \
IF_ENABLED(hipMallocManaged, macro)                \
IF_ENABLED(hipStreamCreateWithPriority, macro)     \
IF_ENABLED(hipStreamGetCaptureInfo_spt, macro)     \
IF_ENABLED(hipGraphAddHostNode, macro)             \
IF_ENABLED(hipLaunchCooperativeKernel, macro)      \
IF_ENABLED(hipHostRegister, macro)                 \
IF_ENABLED(hipGetErrorName, macro)                 \
IF_ENABLED(hipMemcpyToSymbol_spt, macro)           \
IF_ENABLED(hipGraphMemsetNodeGetParams, macro)     \
IF_ENABLED(hipStreamWriteValue32, macro)           \
IF_ENABLED(hipStreamSynchronize_spt, macro)        \
IF_ENABLED(hipDeviceGraphMemTrim, macro)           \
IF_ENABLED(hipStreamDestroy, macro)                \
IF_ENABLED(hipTexRefSetArray, macro)               \
IF_ENABLED(hipMemcpyParam2DAsync, macro)           \
IF_ENABLED(hipMemPoolExportPointer, macro)         \
IF_ENABLED(hipGraphEventRecordNodeSetEvent, macro) \
IF_ENABLED(hipCtxDestroy, macro)                   \
IF_ENABLED(hipArrayDestroy, macro)                 \
IF_ENABLED(hipMemGetAllocationGranularity, macro)  \
IF_ENABLED(hipGraphClone, macro)                   \
IF_ENABLED(hipMemset2DAsync_spt, macro)            \
IF_ENABLED(hipBindTexture2D, macro)                \
IF_ENABLED(hipArrayGetInfo, macro)                 \
IF_ENABLED(hipGraphExternalSemaphoresSignalNodeGetParams, macro) \
IF_ENABLED(hipDeviceGetStreamPriorityRange, macro) \
IF_ENABLED(hipGraphExecChildGraphNodeSetParams, macro) \
IF_ENABLED(hipMemset2D_spt, macro)                 \
IF_ENABLED(hipDeviceGetDefaultMemPool, macro)      \
IF_ENABLED(hipCtxCreate, macro)                    \
IF_ENABLED(hipStreamIsCapturing, macro)            \
IF_ENABLED(hipStreamUpdateCaptureDependencies, macro) \
IF_ENABLED(hipDeviceSynchronize, macro)            \
IF_ENABLED(hipMemcpyFromSymbolAsync, macro)        \
IF_ENABLED(hipGraphDestroyNode, macro)             \
IF_ENABLED(hipUserObjectRetain, macro)             \
IF_ENABLED(hipGraphExecEventWaitNodeSetEvent, macro) \
IF_ENABLED(hipMemAddressReserve, macro)            \
IF_ENABLED(hipGraphAddMemsetNode, macro)           \
IF_ENABLED(hipGraphicsResourceGetMappedPointer, macro) \
IF_ENABLED(hipStreamBeginCapture_spt, macro)       \
IF_ENABLED(hipDeviceGetUuid, macro)                \
IF_ENABLED(hipModuleLaunchKernel, macro)           \
IF_ENABLED(hipGraphAddEmptyNode, macro)            \
IF_ENABLED(hipMemRangeGetAttribute, macro)         \
IF_ENABLED(hipGraphInstantiateWithFlags, macro)    \
IF_ENABLED(hipCtxPushCurrent, macro)               \
IF_ENABLED(hipCtxGetApiVersion, macro)             \
IF_ENABLED(hipBindTexture, macro)                  \
IF_ENABLED(hipStreamBeginCapture, macro)           \
IF_ENABLED(hipProfilerStart, macro)                \
IF_ENABLED(hipMemcpyHtoDAsync, macro)              \
IF_ENABLED(hipGetDeviceFlags, macro)               \
IF_ENABLED(hipMemRangeGetAttributes, macro)        \
IF_ENABLED(hipDestroyExternalSemaphore, macro)     \
IF_ENABLED(hipIpcOpenEventHandle, macro)           \
IF_ENABLED(hipGraphUpload, macro)                  \
IF_ENABLED(hipMallocAsync, macro)                  \
IF_ENABLED(hipOccupancyMaxPotentialBlockSize, macro) \
IF_ENABLED(hipDestroyExternalMemory, macro)        \
IF_ENABLED(amd_dbgapi_get_build_name, macro)       \
IF_ENABLED(hipGraphAddMemcpyNodeToSymbol, macro)   \
IF_ENABLED(hipDeviceGetPCIBusId, macro)            \
IF_ENABLED(hipGetChannelDesc, macro)               \
IF_ENABLED(hipDevicePrimaryCtxReset, macro)        \
IF_ENABLED(hipImportExternalMemory, macro)         \
IF_ENABLED(hipFuncSetSharedMemConfig, macro)       \
IF_ENABLED(hipStreamWaitEvent, macro)              \
IF_ENABLED(hipTexRefSetMipmapLevelBias, macro)     \
IF_ENABLED(hipMemPoolImportFromShareableHandle, macro) \
IF_ENABLED(hipMemPoolExportToShareableHandle, macro) \
IF_ENABLED(hipGraphExecMemcpyNodeSetParamsToSymbol, macro) \
IF_ENABLED(hipTexRefGetMipmapFilterMode, macro)    \
IF_ENABLED(hipGetProcAddress, macro)               \
IF_ENABLED(hipCreateTextureObject, macro)          \
IF_ENABLED(hipGraphKernelNodeCopyAttributes, macro) \
IF_ENABLED(hipTexRefGetFlags, macro)               \
IF_ENABLED(hipDrvGraphAddMemcpyNode, macro)        \
IF_ENABLED(hipMemExportToShareableHandle, macro)   \
IF_ENABLED(hipGraphLaunch_spt, macro)              \
IF_ENABLED(hipGraphMemcpyNodeSetParamsFromSymbol, macro) \
IF_ENABLED(hipGraphNodeGetDependencies, macro)     \
IF_ENABLED(hipMemcpy3D, macro)                     \
IF_ENABLED(hipGraphAddMemcpyNodeFromSymbol, macro) \
IF_ENABLED(hipStreamGetPriority_spt, macro)        \
IF_ENABLED(hipModuleLoadData, macro)               \
IF_ENABLED(hipSetDeviceFlags, macro)               \
IF_ENABLED(hipExternalMemoryGetMappedBuffer, macro) \
IF_ENABLED(hipLaunchCooperativeKernel_spt, macro)  \
IF_ENABLED(hipLaunchHostFunc, macro)               \
IF_ENABLED(hipMemcpyAsync_spt, macro)              \
IF_ENABLED(hipMemcpyPeer, macro)                   \
IF_ENABLED(hipDeviceReset, macro)                  \
IF_ENABLED(hipMemAddressFree, macro)               \
IF_ENABLED(hipProfilerStop, macro)                 \
IF_ENABLED(hipGraphEventWaitNodeSetEvent, macro)   \
IF_ENABLED(hipModuleLaunchCooperativeKernel, macro) \
IF_ENABLED(hipDeviceGetName, macro)                \
IF_ENABLED(hipGraphNodeSetEnabled, macro)          \
IF_ENABLED(hipTexRefSetAddressMode, macro)         \
IF_ENABLED(hipEventSynchronize, macro)             \
IF_ENABLED(hipGraphGetRootNodes, macro)            \
IF_ENABLED(hipMemcpy2DFromArray, macro)            \
IF_ENABLED(hipGraphExternalSemaphoresWaitNodeSetParams, macro) \
IF_ENABLED(hipMemcpyDtoA, macro)                   \
IF_ENABLED(hipGraphMemcpyNodeGetParams, macro)     \
IF_ENABLED(hipMemcpy, macro)                       \
IF_ENABLED(hipSetValidDevices, macro)              \
IF_ENABLED(hipMemcpy2DAsync, macro)                \
IF_ENABLED(hipGraphExecExternalSemaphoresWaitNodeSetParams, macro) \
IF_ENABLED(hipStreamAttachMemAsync, macro)         \
IF_ENABLED(hipMemset2DAsync, macro)                \
IF_ENABLED(hipTexObjectGetResourceViewDesc, macro) \
IF_ENABLED(hipEventCreateWithFlags, macro)         \
IF_ENABLED(hipMipmappedArrayCreate, macro)         \
IF_ENABLED(hipMemcpy2D_spt, macro)                 \
IF_ENABLED(hipGraphAddMemcpyNode, macro)           \
IF_ENABLED(hipMemcpyToSymbolAsync, macro)          \
IF_ENABLED(hipMallocFromPoolAsync, macro)          \
IF_ENABLED(hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, macro) \
IF_ENABLED(hipGraphAddMemFreeNode, macro)          \
IF_ENABLED(hipModuleOccupancyMaxActiveBlocksPerMultiprocessor, macro) \
IF_ENABLED(hipEventDestroy, macro)                 \
IF_ENABLED(hipDeviceSetCacheConfig, macro)         \
IF_ENABLED(hipFree, macro)                         \
IF_ENABLED(hipMemcpy2DToArrayAsync_spt, macro)     \
IF_ENABLED(hipCtxGetFlags, macro)                  \
IF_ENABLED(hipGetSymbolAddress, macro)             \
IF_ENABLED(hipTexRefGetAddress, macro)             \
IF_ENABLED(hipTexObjectCreate, macro)              \
IF_ENABLED(hipDeviceGetSharedMemConfig, macro)     \
IF_ENABLED(hipMemcpyHtoAAsync, macro)              \
IF_ENABLED(hipMemPoolGetAttribute, macro)          \
IF_ENABLED(hipGraphAddMemAllocNode, macro)         \
IF_ENABLED(hipMemRetainAllocationHandle, macro)    \
IF_ENABLED(hipGetFuncBySymbol, macro)              \
IF_ENABLED(hipDeviceSetMemPool, macro)             \
IF_ENABLED(hipDeviceSetLimit, macro)               \
IF_ENABLED(hipMemGetInfo, macro)                   \
IF_ENABLED(hipMemcpyParam2D, macro)                \
IF_ENABLED(hipGraphDebugDotPrint, macro)           \
IF_ENABLED(hipDeviceSetGraphMemAttribute, macro)   \
IF_ENABLED(hipDrvGetErrorString, macro)            \
IF_ENABLED(hipMemcpyDtoDAsync, macro)              \
IF_ENABLED(hipCtxSynchronize, macro)               \
IF_ENABLED(hipTexObjectDestroy, macro)             \
IF_ENABLED(hipTexRefGetAddressMode, macro)         \
IF_ENABLED(__hipGetPCH, macro)                     \
IF_ENABLED(hipStreamGetFlags, macro)               \
IF_ENABLED(hipMemGetAccess, macro)                 \
IF_ENABLED(hipMemcpyAtoA, macro)                   \
IF_ENABLED(hipMemcpyToSymbol, macro)               \
IF_ENABLED(hipCtxSetCurrent, macro)                \
IF_ENABLED(hipStreamQuery_spt, macro)              \
IF_ENABLED(hipGetSymbolSize, macro)                \
IF_ENABLED(hipMipmappedArrayGetLevel, macro)       \
IF_ENABLED(hipExternalMemoryGetMappedMipmappedArray, macro) \
IF_ENABLED(hipGraphExecMemcpyNodeSetParams, macro) \
IF_ENABLED(hipUserObjectCreate, macro)             \
IF_ENABLED(hipStreamGetCaptureInfo_v2, macro)      \
IF_ENABLED(hipTexRefGetArray, macro)               \
IF_ENABLED(hipImportExternalSemaphore, macro)      \
IF_ENABLED(hipDeviceGetAttribute, macro)           \
IF_ENABLED(hipGraphMemFreeNodeGetParams, macro)    \
IF_ENABLED(hipCtxGetSharedMemConfig, macro)        \
IF_ENABLED(hipGraphMemcpyNodeSetParamsToSymbol, macro) \
IF_ENABLED(hipMemcpy2DToArray, macro)              \
IF_ENABLED(hipStreamIsCapturing_spt, macro)        \
IF_ENABLED(hipFreeHost, macro)                     \
IF_ENABLED(hipGraphKernelNodeSetParams, macro)     \
IF_ENABLED(hipMallocHost, macro)                   \
IF_ENABLED(hipMemset3D_spt, macro)                 \
IF_ENABLED(hipStreamGetCaptureInfo_v2_spt, macro)  \
IF_ENABLED(hipGetTextureReference, macro)          \
IF_ENABLED(hipGraphExecExternalSemaphoresSignalNodeSetParams, macro) \
IF_ENABLED(hipGraphAddDependencies, macro)         \
IF_ENABLED(hipGraphNodeGetType, macro)             \
IF_ENABLED(hipTexRefSetBorderColor, macro)         \
IF_ENABLED(hipMemPrefetchAsync, macro)             \
IF_ENABLED(hipCtxGetDevice, macro)                 \
IF_ENABLED(hipMemcpy2DArrayToArray, macro)         \
IF_ENABLED(hipUserObjectRelease, macro)            \
IF_ENABLED(hipHostGetFlags, macro)                 \
IF_ENABLED(hipDrvGraphAddMemsetNode, macro)        \
IF_ENABLED(hipMemcpyAtoD, macro)                   \
IF_ENABLED(hipMemPoolCreate, macro)                \
IF_ENABLED(hipKernelNameRef, macro)                \
IF_ENABLED(hipMemset3DAsync, macro)                \
IF_ENABLED(hipEventRecord, macro)                  \
IF_ENABLED(hipMipmappedArrayDestroy, macro)        \
IF_ENABLED(hipMemsetAsync_spt, macro)              \
IF_ENABLED(hipDevicePrimaryCtxSetFlags, macro)     \
IF_ENABLED(hipPeekAtLastError, macro)              \
IF_ENABLED(hipDeviceGetGraphMemAttribute, macro)   \
IF_ENABLED(hipDrvGetErrorName, macro)              \
IF_ENABLED(hipMemcpy_spt, macro)                   \
IF_ENABLED(hipCtxSetSharedMemConfig, macro)        \
IF_ENABLED(hipCreateSurfaceObject, macro)          \
IF_ENABLED(hipGetMipmappedArrayLevel, macro)       \
IF_ENABLED(hipGraphExecDestroy, macro)             \
IF_ENABLED(hipMemsetD32Async, macro)               \
IF_ENABLED(hipDeviceEnablePeerAccess, macro)       \
IF_ENABLED(hipArray3DCreate, macro)                \
IF_ENABLED(hipIpcOpenMemHandle, macro)             \
IF_ENABLED(hipMemPoolTrimTo, macro)                \
IF_ENABLED(hipMemcpy2D, macro)                     \
IF_ENABLED(hipFuncGetAttribute, macro)             \
IF_ENABLED(hipBindTextureToMipmappedArray, macro)  \
IF_ENABLED(hipGraphicsMapResources, macro)         \
IF_ENABLED(hipArrayCreate, macro)                  \
IF_ENABLED(hipTexRefSetMaxAnisotropy, macro)       \
IF_ENABLED(hipGraphKernelNodeGetAttribute, macro)  \
IF_ENABLED(hipExtLaunchKernel, macro)              \
IF_ENABLED(hipTexRefSetMipmapFilterMode, macro)    \
IF_ENABLED(hipMemImportFromShareableHandle, macro) \
IF_ENABLED(hipTexRefSetFormat, macro)              \
IF_ENABLED(amd_dbgapi_get_git_hash, macro)         \
IF_ENABLED(hipLaunchByPtr, macro)                  \
IF_ENABLED(amd_dbgapi_get_build_id, macro)         \
IF_ENABLED(hipMemcpy3DAsync, macro)                \
IF_ENABLED(hipGetTextureObjectResourceViewDesc, macro) \
IF_ENABLED(hipTexRefSetFilterMode, macro)          \
IF_ENABLED(hipDriverGetVersion, macro)             \
IF_ENABLED(hipStreamWriteValue64, macro)           \
IF_ENABLED(hipMallocMipmappedArray, macro)         \
IF_ENABLED(hipMemset_spt, macro)                   \
IF_ENABLED(hipTexRefSetFlags, macro)               \
IF_ENABLED(hipMemGetAddressRange, macro)           \
IF_ENABLED(hipTexRefSetMipmapLevelClamp, macro)    \
IF_ENABLED(hipGraphMemcpyNodeSetParams, macro)     \
IF_ENABLED(hipGraphGetEdges, macro)                \
IF_ENABLED(hipMemcpyToArray, macro)                \
IF_ENABLED(hipExtMallocWithFlags, macro)           \
IF_ENABLED(hipFuncSetAttribute, macro)             \
IF_ENABLED(hipChooseDeviceR0600, macro)            \
IF_ENABLED(hipTexRefSetMipmappedArray, macro)      \
IF_ENABLED(hipMemset, macro)                       \
IF_ENABLED(hipTexRefGetMipmapLevelClamp, macro)    \


/**
 * @enum hip_api_id_t 
 * @brief Enumeration of HIP API function identifiers.
 *
 * This enumeration defines unique identifiers for various HIP API functions. 
 * These identifiers are used for profiling, tracking, and identifying specific HIP function calls.
 */
typedef enum hip_api_id_e {
    FOR_EACH_HIP_FUNC(GET_FUNC_API_ID)
    HIP_API_ID_NB_FUNCTION,
    HIP_API_ID_UNKNOWN,
} hip_api_id_t;


/**
 * @brief Retrieves the function name corresponding to a given HIP API function ID.
 *
 * This function maps a HIP API function identifier (`hip_api_id_t`) to its corresponding function name
 * as a string. If the provided function ID does not match any known functions, the function returns `NULL`.
 *
 * @param id The HIP API function identifier of type `hip_api_id_t`.
 * @return A constant string representing the function name, or `NULL` if the ID is unknown.
 */
static inline const char* get_hip_funame_by_id(hip_api_id_t id) 
{
    switch(id) {
        FOR_EACH_HIP_FUNC(GET_FUNAME_BY_ID_OF)
        default : return NULL;
    }
    return NULL;
}


/**
 * @brief Retrieves the function pointer corresponding to a given HIP API function ID.
 *
 * This function maps a HIP API function ID (`hip_api_id_t`) to its corresponding function address.
 * If the provided function ID does not match any known functions, the function returns `NULL`.
 *
 * @param id The function ID of type `hip_api_id_t`.
 * @return A pointer to the corresponding HIP API function, or `NULL` if not found.
 */
static inline void* get_hip_funaddr_by_id(hip_api_id_t id) 
{
    switch(id) {
        FOR_EACH_HIP_FUNC(GET_FUNADDR_BY_ID_OF)
        default : return NULL;
    }
    return NULL;
}


/**
 * @brief Retrieves the HIP API function ID corresponding to a given function name.
 *
 * This function maps a HIP API function name (string) to its corresponding function ID (`hip_api_id_t`).
 * If the provided function name does not match any known functions, the function returns `HIP_API_ID_UNKNOWN`.
 *
 * @param name The function name as a null-terminated string.
 * @return The corresponding HIP API function ID of type `hip_api_id_t`, or `HIP_API_ID_UNKNOWN` if not found.
 */
static inline hip_api_id_t get_hip_funid_by_name(const char* name) 
{
    if (name == NULL) return HIP_API_ID_UNKNOWN;
    FOR_EACH_HIP_FUNC(GET_FUNID_BY_NAME_OF)
    return HIP_API_ID_UNKNOWN;
}


// HIP API Args Data
/**
 * @brief Structure to hold the arguments for the `hipMemPtrGetInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPtrGetInfo` function call.
 *
 * @struct args_hipMemPtrGetInfo_t
 *
 * @note 
 *	hipError_t
 *	hipMemPtrGetInfo (
 *			void * ptr (void *)
 *			size_t * size (unsigned long*)
 *	)
 */
#if HAVE_hipMemPtrGetInfo
typedef struct {
	void * ptr;
	size_t * size;
	struct {
		size_t val;
	} size__ref;
	hipError_t retval;
} args_hipMemPtrGetInfo_t;

#define GET_ARGS_VALUE_hipMemPtrGetInfo(activity) { \
	args_hipMemPtrGetInfo_t* args = (args_hipMemPtrGetInfo_t*) activity->args; \
	args->ptr = (void *) ptr; \
	args->size = (size_t *) size; \
};

#define GET_PTRS_VALUE_hipMemPtrGetInfo(args) { \
	args_hipMemPtrGetInfo_t* pargs = (args_hipMemPtrGetInfo_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParams1D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParams1D` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParams1D_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParams1D (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphExecMemcpyNodeSetParams1D
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	void * dst;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphExecMemcpyNodeSetParams1D_t;

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParams1D(activity) { \
	args_hipGraphExecMemcpyNodeSetParams1D_t* args = (args_hipGraphExecMemcpyNodeSetParams1D_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->count = (size_t) count; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxEnablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxEnablePeerAccess` function call.
 *
 * @struct args_hipCtxEnablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipCtxEnablePeerAccess (
 *			hipCtx_t peerCtx (struct ihipCtx_t *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipCtxEnablePeerAccess
typedef struct {
	hipCtx_t peerCtx;
	unsigned int flags;
	hipError_t retval;
} args_hipCtxEnablePeerAccess_t;

#define GET_ARGS_VALUE_hipCtxEnablePeerAccess(activity) { \
	args_hipCtxEnablePeerAccess_t* args = (args_hipCtxEnablePeerAccess_t*) activity->args; \
	args->peerCtx = (hipCtx_t) peerCtx; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipHostUnregister` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostUnregister` function call.
 *
 * @struct args_hipHostUnregister_t
 *
 * @note 
 *	hipError_t
 *	hipHostUnregister (
 *			void * hostPtr (void *)
 *	)
 */
#if HAVE_hipHostUnregister
typedef struct {
	void * hostPtr;
	hipError_t retval;
} args_hipHostUnregister_t;

#define GET_ARGS_VALUE_hipHostUnregister(activity) { \
	args_hipHostUnregister_t* args = (args_hipHostUnregister_t*) activity->args; \
	args->hostPtr = (void *) hostPtr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxGetState` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxGetState` function call.
 *
 * @struct args_hipDevicePrimaryCtxGetState_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxGetState (
 *			hipDevice_t dev (int)
 *			unsigned int * flags (unsigned int *)
 *			int * active (int *)
 *	)
 */
#if HAVE_hipDevicePrimaryCtxGetState
typedef struct {
	hipDevice_t dev;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	int * active;
	struct {
		int val;
	} active__ref;
	hipError_t retval;
} args_hipDevicePrimaryCtxGetState_t;

#define GET_ARGS_VALUE_hipDevicePrimaryCtxGetState(activity) { \
	args_hipDevicePrimaryCtxGetState_t* args = (args_hipDevicePrimaryCtxGetState_t*) activity->args; \
	args->dev = (hipDevice_t) dev; \
	args->flags = (unsigned int *) flags; \
	args->active = (int *) active; \
};

#define GET_PTRS_VALUE_hipDevicePrimaryCtxGetState(args) { \
	args_hipDevicePrimaryCtxGetState_t* pargs = (args_hipDevicePrimaryCtxGetState_t*) args; \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
	if (pargs->active != NULL) { \
		pargs->active__ref.val = *pargs->active; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipPointerGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPointerGetAttribute` function call.
 *
 * @struct args_hipPointerGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipPointerGetAttribute (
 *			void * data (void *)
 *			hipPointer_attribute attribute (enum hipPointer_attribute)
 *			hipDeviceptr_t ptr (void *)
 *	)
 */
#if HAVE_hipPointerGetAttribute
typedef struct {
	void * data;
	hipPointer_attribute attribute;
	void * ptr;
	hipError_t retval;
} args_hipPointerGetAttribute_t;

#define GET_ARGS_VALUE_hipPointerGetAttribute(activity) { \
	args_hipPointerGetAttribute_t* args = (args_hipPointerGetAttribute_t*) activity->args; \
	args->data = (void *) data; \
	args->attribute = (hipPointer_attribute) attribute; \
	args->ptr = (void *) ptr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolGetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolGetAccess` function call.
 *
 * @struct args_hipMemPoolGetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolGetAccess (
 *			hipMemAccessFlags * flags (enum hipMemAccessFlags*)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemLocation * location (struct hipMemLocation*)
 *	)
 */
#if HAVE_hipMemPoolGetAccess
typedef struct {
	hipMemAccessFlags * flags;
	struct {
		hipMemAccessFlags val;
	} flags__ref;
	hipMemPool_t mem_pool;
	hipMemLocation * location;
	struct {
		hipMemLocation val;
	} location__ref;
	hipError_t retval;
} args_hipMemPoolGetAccess_t;

#define GET_ARGS_VALUE_hipMemPoolGetAccess(activity) { \
	args_hipMemPoolGetAccess_t* args = (args_hipMemPoolGetAccess_t*) activity->args; \
	args->flags = (hipMemAccessFlags *) flags; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->location = (hipMemLocation *) location; \
};

#define GET_PTRS_VALUE_hipMemPoolGetAccess(args) { \
	args_hipMemPoolGetAccess_t* pargs = (args_hipMemPoolGetAccess_t*) args; \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
	if (pargs->location != NULL) { \
		pargs->location__ref.val = *pargs->location; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetD32` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD32` function call.
 *
 * @struct args_hipMemsetD32_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD32 (
 *			hipDeviceptr_t dest (void *)
 *			int value (int)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemsetD32
typedef struct {
	void * dest;
	int value;
	size_t count;
	hipError_t retval;
} args_hipMemsetD32_t;

#define GET_ARGS_VALUE_hipMemsetD32(activity) { \
	args_hipMemsetD32_t* args = (args_hipMemsetD32_t*) activity->args; \
	args->dest = (void *) dest; \
	args->value = (int) value; \
	args->count = (size_t) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipMappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipMappedArray` function call.
 *
 * @struct args_hipTexRefGetMipMappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipMappedArray (
 *			hipMipmappedArray_t * pArray (struct hipMipmappedArray **)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetMipMappedArray
typedef struct {
	struct hipMipmappedArray ** pArray;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} pArray__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetMipMappedArray_t;

#define GET_ARGS_VALUE_hipTexRefGetMipMappedArray(activity) { \
	args_hipTexRefGetMipMappedArray_t* args = (args_hipTexRefGetMipMappedArray_t*) activity->args; \
	args->pArray = (struct hipMipmappedArray **) pArray; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipMappedArray(args) { \
	args_hipTexRefGetMipMappedArray_t* pargs = (args_hipTexRefGetMipMappedArray_t*) args; \
	if (pargs->pArray != NULL) { \
		pargs->pArray__ref.ptr1 = *pargs->pArray; \
		if (pargs->pArray__ref.ptr1 != NULL) { \
			pargs->pArray__ref.val = **pargs->pArray; \
		} \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMalloc3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMalloc3D` function call.
 *
 * @struct args_hipMalloc3D_t
 *
 * @note 
 *	hipError_t
 *	hipMalloc3D (
 *			hipPitchedPtr * pitchedDevPtr (struct hipPitchedPtr*)
 *			hipExtent extent (struct hipExtent)
 *	)
 */
#if HAVE_hipMalloc3D
typedef struct {
	hipPitchedPtr * pitchedDevPtr;
	struct {
		hipPitchedPtr val;
	} pitchedDevPtr__ref;
	hipExtent extent;
	hipError_t retval;
} args_hipMalloc3D_t;

#define GET_ARGS_VALUE_hipMalloc3D(activity) { \
	args_hipMalloc3D_t* args = (args_hipMalloc3D_t*) activity->args; \
	args->pitchedDevPtr = (hipPitchedPtr *) pitchedDevPtr; \
	args->extent = (hipExtent) extent; \
};

#define GET_PTRS_VALUE_hipMalloc3D(args) { \
	args_hipMalloc3D_t* pargs = (args_hipMalloc3D_t*) args; \
	if (pargs->pitchedDevPtr != NULL) { \
		pargs->pitchedDevPtr__ref.val = *pargs->pitchedDevPtr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetD8` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD8` function call.
 *
 * @struct args_hipMemsetD8_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD8 (
 *			hipDeviceptr_t dest (void *)
 *			unsigned char value (unsigned char)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemsetD8
typedef struct {
	void * dest;
	unsigned char value;
	size_t count;
	hipError_t retval;
} args_hipMemsetD8_t;

#define GET_ARGS_VALUE_hipMemsetD8(activity) { \
	args_hipMemsetD8_t* args = (args_hipMemsetD8_t*) activity->args; \
	args->dest = (void *) dest; \
	args->value = (unsigned char) value; \
	args->count = (size_t) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMallocArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocArray` function call.
 *
 * @struct args_hipMallocArray_t
 *
 * @note 
 *	hipError_t
 *	hipMallocArray (
 *			hipArray_t * array (struct hipArray **)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipMallocArray
typedef struct {
	hipArray_t * array;
	struct {
		hipArray_t val;
	} array__ref;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	size_t width;
	size_t height;
	unsigned int flags;
	hipError_t retval;
} args_hipMallocArray_t;

#define GET_ARGS_VALUE_hipMallocArray(activity) { \
	args_hipMallocArray_t* args = (args_hipMallocArray_t*) activity->args; \
	args->array = (hipArray_t *) array; \
	args->desc = (hipChannelFormatDesc *) desc; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMallocArray(args) { \
	args_hipMallocArray_t* pargs = (args_hipMallocArray_t*) args; \
	if (pargs->array != NULL) { \
		pargs->array__ref.val = *pargs->array; \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphEventWaitNodeGetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventWaitNodeGetEvent` function call.
 *
 * @struct args_hipGraphEventWaitNodeGetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventWaitNodeGetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t * event_out (struct ihipEvent_t **)
 *	)
 */
#if HAVE_hipGraphEventWaitNodeGetEvent
typedef struct {
	hipGraphNode_t node;
	hipEvent_t * event_out;
	struct {
		hipEvent_t val;
	} event_out__ref;
	hipError_t retval;
} args_hipGraphEventWaitNodeGetEvent_t;

#define GET_ARGS_VALUE_hipGraphEventWaitNodeGetEvent(activity) { \
	args_hipGraphEventWaitNodeGetEvent_t* args = (args_hipGraphEventWaitNodeGetEvent_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->event_out = (hipEvent_t *) event_out; \
};

#define GET_PTRS_VALUE_hipGraphEventWaitNodeGetEvent(args) { \
	args_hipGraphEventWaitNodeGetEvent_t* pargs = (args_hipGraphEventWaitNodeGetEvent_t*) args; \
	if (pargs->event_out != NULL) { \
		pargs->event_out__ref.val = *pargs->event_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvMemcpy3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvMemcpy3D` function call.
 *
 * @struct args_hipDrvMemcpy3D_t
 *
 * @note 
 *	hipError_t
 *	hipDrvMemcpy3D (
 *			const HIP_MEMCPY3D * pCopy (const struct HIP_MEMCPY3D *)
 *	)
 */
#if HAVE_hipDrvMemcpy3D
typedef struct {
	HIP_MEMCPY3D * pCopy;
	struct {
		HIP_MEMCPY3D val;
	} pCopy__ref;
	hipError_t retval;
} args_hipDrvMemcpy3D_t;

#define GET_ARGS_VALUE_hipDrvMemcpy3D(activity) { \
	args_hipDrvMemcpy3D_t* args = (args_hipDrvMemcpy3D_t*) activity->args; \
	args->pCopy = (HIP_MEMCPY3D *) pCopy; \
};

#define GET_PTRS_VALUE_hipDrvMemcpy3D(args) { \
	args_hipDrvMemcpy3D_t* pargs = (args_hipDrvMemcpy3D_t*) args; \
	if (pargs->pCopy != NULL) { \
		pargs->pCopy__ref.val = *pargs->pCopy; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function call.
 *
 * @struct args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (
 *			int * numBlocks (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
typedef struct {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	hipFunction_t f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	unsigned int flags;
	hipError_t retval;
} args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t;

#define GET_ARGS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(activity) { \
	args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t* args = (args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t*) activity->args; \
	args->numBlocks = (int *) numBlocks; \
	args->f = (hipFunction_t) f; \
	args->blockSize = (int) blockSize; \
	args->dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args) { \
	args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t* pargs = (args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t*) args; \
	if (pargs->numBlocks != NULL) { \
		pargs->numBlocks__ref.val = *pargs->numBlocks; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipHostMalloc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostMalloc` function call.
 *
 * @struct args_hipHostMalloc_t
 *
 * @note 
 *	hipError_t
 *	hipHostMalloc (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipHostMalloc
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	unsigned int flags;
	hipError_t retval;
} args_hipHostMalloc_t;

#define GET_ARGS_VALUE_hipHostMalloc(activity) { \
	args_hipHostMalloc_t* args = (args_hipHostMalloc_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->size = (size_t) size; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipHostMalloc(args) { \
	args_hipHostMalloc_t* pargs = (args_hipHostMalloc_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleGetTexRef` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleGetTexRef` function call.
 *
 * @struct args_hipModuleGetTexRef_t
 *
 * @note 
 *	hipError_t
 *	hipModuleGetTexRef (
 *			textureReference ** texRef (struct textureReference**)
 *			hipModule_t hmod (struct ihipModule_t *)
 *			const char * name (const char *)
 *	)
 */
#if HAVE_hipModuleGetTexRef
typedef struct {
	textureReference ** texRef;
	struct {
		void* ptr1;
		textureReference val;
	} texRef__ref;
	hipModule_t hmod;
	char * name;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} name__ref;
	hipError_t retval;
} args_hipModuleGetTexRef_t;

#define GET_ARGS_VALUE_hipModuleGetTexRef(activity) { \
	args_hipModuleGetTexRef_t* args = (args_hipModuleGetTexRef_t*) activity->args; \
	args->texRef = (textureReference **) texRef; \
	args->hmod = (hipModule_t) hmod; \
	args->name = (char *) name; \
};

#define GET_PTRS_VALUE_hipModuleGetTexRef(args) { \
	args_hipModuleGetTexRef_t* pargs = (args_hipModuleGetTexRef_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.ptr1 = *pargs->texRef; \
		if (pargs->texRef__ref.ptr1 != NULL) { \
			pargs->texRef__ref.val = **pargs->texRef; \
		} \
	} \
	if (pargs->name != NULL) { \
		strncpy(pargs->name__ref.val, pargs->name, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipIpcGetMemHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcGetMemHandle` function call.
 *
 * @struct args_hipIpcGetMemHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcGetMemHandle (
 *			hipIpcMemHandle_t * handle (struct hipIpcMemHandle_st*)
 *			void * devPtr (void *)
 *	)
 */
#if HAVE_hipIpcGetMemHandle
typedef struct {
	hipIpcMemHandle_t * handle;
	struct {
		hipIpcMemHandle_t val;
	} handle__ref;
	void * devPtr;
	hipError_t retval;
} args_hipIpcGetMemHandle_t;

#define GET_ARGS_VALUE_hipIpcGetMemHandle(activity) { \
	args_hipIpcGetMemHandle_t* args = (args_hipIpcGetMemHandle_t*) activity->args; \
	args->handle = (hipIpcMemHandle_t *) handle; \
	args->devPtr = (void *) devPtr; \
};

#define GET_PTRS_VALUE_hipIpcGetMemHandle(args) { \
	args_hipIpcGetMemHandle_t* pargs = (args_hipIpcGetMemHandle_t*) args; \
	if (pargs->handle != NULL) { \
		pargs->handle__ref.val = *pargs->handle; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoHAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoHAsync` function call.
 *
 * @struct args_hipMemcpyDtoHAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoHAsync (
 *			void * dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyDtoHAsync
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyDtoHAsync_t;

#define GET_ARGS_VALUE_hipMemcpyDtoHAsync(activity) { \
	args_hipMemcpyDtoHAsync_t* args = (args_hipMemcpyDtoHAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleLoad` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLoad` function call.
 *
 * @struct args_hipModuleLoad_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLoad (
 *			hipModule_t * module (struct ihipModule_t **)
 *			const char * fname (const char *)
 *	)
 */
#if HAVE_hipModuleLoad
typedef struct {
	hipModule_t * module;
	struct {
		hipModule_t val;
	} module__ref;
	char * fname;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} fname__ref;
	hipError_t retval;
} args_hipModuleLoad_t;

#define GET_ARGS_VALUE_hipModuleLoad(activity) { \
	args_hipModuleLoad_t* args = (args_hipModuleLoad_t*) activity->args; \
	args->module = (hipModule_t *) module; \
	args->fname = (char *) fname; \
};

#define GET_PTRS_VALUE_hipModuleLoad(args) { \
	args_hipModuleLoad_t* pargs = (args_hipModuleLoad_t*) args; \
	if (pargs->module != NULL) { \
		pargs->module__ref.val = *pargs->module; \
	} \
	if (pargs->fname != NULL) { \
		strncpy(pargs->fname__ref.val, pargs->fname, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipWaitExternalSemaphoresAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipWaitExternalSemaphoresAsync` function call.
 *
 * @struct args_hipWaitExternalSemaphoresAsync_t
 *
 * @note 
 *	hipError_t
 *	hipWaitExternalSemaphoresAsync (
 *			const hipExternalSemaphore_t * extSemArray (const void * *)
 *			const hipExternalSemaphoreWaitParams * paramsArray (const struct hipExternalSemaphoreWaitParams_st *)
 *			unsigned int numExtSems (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipWaitExternalSemaphoresAsync
typedef struct {
	void * * extSemArray;
	struct {
		void* ptr1;
	} extSemArray__ref;
	hipExternalSemaphoreWaitParams * paramsArray;
	struct {
		hipExternalSemaphoreWaitParams val;
	} paramsArray__ref;
	unsigned int numExtSems;
	hipStream_t stream;
	hipError_t retval;
} args_hipWaitExternalSemaphoresAsync_t;

#define GET_ARGS_VALUE_hipWaitExternalSemaphoresAsync(activity) { \
	args_hipWaitExternalSemaphoresAsync_t* args = (args_hipWaitExternalSemaphoresAsync_t*) activity->args; \
	args->extSemArray = (void * *) extSemArray; \
	args->paramsArray = (hipExternalSemaphoreWaitParams *) paramsArray; \
	args->numExtSems = (unsigned int) numExtSems; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipWaitExternalSemaphoresAsync(args) { \
	args_hipWaitExternalSemaphoresAsync_t* pargs = (args_hipWaitExternalSemaphoresAsync_t*) args; \
	if (pargs->extSemArray != NULL) { \
		pargs->extSemArray__ref.ptr1 = *pargs->extSemArray; \
	} \
	if (pargs->paramsArray != NULL) { \
		pargs->paramsArray__ref.val = *pargs->paramsArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeGetParams` function call.
 *
 * @struct args_hipGraphKernelNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipKernelNodeParams * pNodeParams (struct hipKernelNodeParams*)
 *	)
 */
#if HAVE_hipGraphKernelNodeGetParams
typedef struct {
	hipGraphNode_t node;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphKernelNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphKernelNodeGetParams(activity) { \
	args_hipGraphKernelNodeGetParams_t* args = (args_hipGraphKernelNodeGetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeGetParams(args) { \
	args_hipGraphKernelNodeGetParams_t* pargs = (args_hipGraphKernelNodeGetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphLaunch` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphLaunch` function call.
 *
 * @struct args_hipGraphLaunch_t
 *
 * @note 
 *	hipError_t
 *	hipGraphLaunch (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipGraphLaunch
typedef struct {
	hipGraphExec_t graphExec;
	hipStream_t stream;
	hipError_t retval;
} args_hipGraphLaunch_t;

#define GET_ARGS_VALUE_hipGraphLaunch(activity) { \
	args_hipGraphLaunch_t* args = (args_hipGraphLaunch_t*) activity->args; \
	args->graphExec = (hipGraphExec_t) graphExec; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipHostAlloc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostAlloc` function call.
 *
 * @struct args_hipHostAlloc_t
 *
 * @note 
 *	hipError_t
 *	hipHostAlloc (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipHostAlloc
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	unsigned int flags;
	hipError_t retval;
} args_hipHostAlloc_t;

#define GET_ARGS_VALUE_hipHostAlloc(activity) { \
	args_hipHostAlloc_t* args = (args_hipHostAlloc_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->size = (size_t) size; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipHostAlloc(args) { \
	args_hipHostAlloc_t* pargs = (args_hipHostAlloc_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipSetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetDevice` function call.
 *
 * @struct args_hipSetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipSetDevice (
 *			int deviceId (int)
 *	)
 */
#if HAVE_hipSetDevice
typedef struct {
	int deviceId;
	hipError_t retval;
} args_hipSetDevice_t;

#define GET_ARGS_VALUE_hipSetDevice(activity) { \
	args_hipSetDevice_t* args = (args_hipSetDevice_t*) activity->args; \
	args->deviceId = (int) deviceId; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxPotentialBlockSizeWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxPotentialBlockSizeWithFlags` function call.
 *
 * @struct args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxPotentialBlockSizeWithFlags (
 *			int * gridSize (int *)
 *			int * blockSize (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			int blockSizeLimit (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags
typedef struct {
	int * gridSize;
	struct {
		int val;
	} gridSize__ref;
	int * blockSize;
	struct {
		int val;
	} blockSize__ref;
	hipFunction_t f;
	size_t dynSharedMemPerBlk;
	int blockSizeLimit;
	unsigned int flags;
	hipError_t retval;
} args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t;

#define GET_ARGS_VALUE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags(activity) { \
	args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t* args = (args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t*) activity->args; \
	args->gridSize = (int *) gridSize; \
	args->blockSize = (int *) blockSize; \
	args->f = (hipFunction_t) f; \
	args->dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	args->blockSizeLimit = (int) blockSizeLimit; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags(args) { \
	args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t* pargs = (args_hipModuleOccupancyMaxPotentialBlockSizeWithFlags_t*) args; \
	if (pargs->gridSize != NULL) { \
		pargs->gridSize__ref.val = *pargs->gridSize; \
	} \
	if (pargs->blockSize != NULL) { \
		pargs->blockSize__ref.val = *pargs->blockSize; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetDependentNodes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetDependentNodes` function call.
 *
 * @struct args_hipGraphNodeGetDependentNodes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetDependentNodes (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraphNode_t * pDependentNodes (struct hipGraphNode **)
 *			size_t * pNumDependentNodes (unsigned long*)
 *	)
 */
#if HAVE_hipGraphNodeGetDependentNodes
typedef struct {
	hipGraphNode_t node;
	hipGraphNode_t * pDependentNodes;
	struct {
		hipGraphNode_t val;
	} pDependentNodes__ref;
	size_t * pNumDependentNodes;
	struct {
		size_t val;
	} pNumDependentNodes__ref;
	hipError_t retval;
} args_hipGraphNodeGetDependentNodes_t;

#define GET_ARGS_VALUE_hipGraphNodeGetDependentNodes(activity) { \
	args_hipGraphNodeGetDependentNodes_t* args = (args_hipGraphNodeGetDependentNodes_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pDependentNodes = (hipGraphNode_t *) pDependentNodes; \
	args->pNumDependentNodes = (size_t *) pNumDependentNodes; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetDependentNodes(args) { \
	args_hipGraphNodeGetDependentNodes_t* pargs = (args_hipGraphNodeGetDependentNodes_t*) args; \
	if (pargs->pDependentNodes != NULL) { \
		pargs->pDependentNodes__ref.val = *pargs->pDependentNodes; \
	} \
	if (pargs->pNumDependentNodes != NULL) { \
		pargs->pNumDependentNodes__ref.val = *pargs->pNumDependentNodes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExtStreamGetCUMask` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtStreamGetCUMask` function call.
 *
 * @struct args_hipExtStreamGetCUMask_t
 *
 * @note 
 *	hipError_t
 *	hipExtStreamGetCUMask (
 *			hipStream_t stream (struct ihipStream_t *)
 *			uint32_t cuMaskSize (unsigned int)
 *			uint32_t * cuMask (unsigned int*)
 *	)
 */
#if HAVE_hipExtStreamGetCUMask
typedef struct {
	hipStream_t stream;
	uint32_t cuMaskSize;
	uint32_t * cuMask;
	struct {
		uint32_t val;
	} cuMask__ref;
	hipError_t retval;
} args_hipExtStreamGetCUMask_t;

#define GET_ARGS_VALUE_hipExtStreamGetCUMask(activity) { \
	args_hipExtStreamGetCUMask_t* args = (args_hipExtStreamGetCUMask_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->cuMaskSize = (uint32_t) cuMaskSize; \
	args->cuMask = (uint32_t *) cuMask; \
};

#define GET_PTRS_VALUE_hipExtStreamGetCUMask(args) { \
	args_hipExtStreamGetCUMask_t* pargs = (args_hipExtStreamGetCUMask_t*) args; \
	if (pargs->cuMask != NULL) { \
		pargs->cuMask__ref.val = *pargs->cuMask; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetD16` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD16` function call.
 *
 * @struct args_hipMemsetD16_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD16 (
 *			hipDeviceptr_t dest (void *)
 *			unsigned short value (unsigned short)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemsetD16
typedef struct {
	void * dest;
	unsigned short value;
	size_t count;
	hipError_t retval;
} args_hipMemsetD16_t;

#define GET_ARGS_VALUE_hipMemsetD16(activity) { \
	args_hipMemsetD16_t* args = (args_hipMemsetD16_t*) activity->args; \
	args->dest = (void *) dest; \
	args->value = (unsigned short) value; \
	args->count = (size_t) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchKernel` function call.
 *
 * @struct args_hipLaunchKernel_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchKernel (
 *			const void * function_address (const void *)
 *			dim3 numBlocks (struct dim3)
 *			dim3 dimBlocks (struct dim3)
 *			void ** args (void **)
 *			size_t sharedMemBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipLaunchKernel
typedef struct {
	void * function_address;
	dim3 numBlocks;
	dim3 dimBlocks;
	void ** args;
	struct {
		void* ptr1;
	} args__ref;
	size_t sharedMemBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipLaunchKernel_t;

#define GET_ARGS_VALUE_hipLaunchKernel(activity) { \
	args_hipLaunchKernel_t* args = (args_hipLaunchKernel_t*) activity->args; \
	args->function_address = (void *) function_address; \
	args->numBlocks = (dim3) numBlocks; \
	args->dimBlocks = (dim3) dimBlocks; \
	args->args = (void **) args; \
	args->sharedMemBytes = (size_t) sharedMemBytes; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipLaunchKernel(args) { \
	args_hipLaunchKernel_t* pargs = (args_hipLaunchKernel_t*) args; \
	if (pargs->args != NULL) { \
		pargs->args__ref.ptr1 = *pargs->args; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetErrorString` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetErrorString` function call.
 *
 * @struct args_hipGetErrorString_t
 *
 * @note 
 *	const char *
 *	hipGetErrorString (
 *			hipError_t hipError (enum hipError_t)
 *	)
 */
#if HAVE_hipGetErrorString
typedef struct {
	hipError_t hipError;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
} args_hipGetErrorString_t;

#define GET_ARGS_VALUE_hipGetErrorString(activity) { \
	args_hipGetErrorString_t* args = (args_hipGetErrorString_t*) activity->args; \
	args->hipError = (hipError_t) hipError; \
};

#define GET_PTRS_RET_VALUE_hipGetErrorString(args) { \
	args_hipGetErrorString_t* pargs = (args_hipGetErrorString_t*) args; \
	if (pargs->retval != NULL) { \
		strncpy(pargs->retval__ref.val, pargs->retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleLoadDataEx` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLoadDataEx` function call.
 *
 * @struct args_hipModuleLoadDataEx_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLoadDataEx (
 *			hipModule_t * module (struct ihipModule_t **)
 *			const void * image (const void *)
 *			unsigned int numOptions (unsigned int)
 *			hipJitOption * options (enum hipJitOption*)
 *			void ** optionValues (void **)
 *	)
 */
#if HAVE_hipModuleLoadDataEx
typedef struct {
	hipModule_t * module;
	struct {
		hipModule_t val;
	} module__ref;
	void * image;
	unsigned int numOptions;
	hipJitOption * options;
	struct {
		hipJitOption val;
	} options__ref;
	void ** optionValues;
	struct {
		void* ptr1;
	} optionValues__ref;
	hipError_t retval;
} args_hipModuleLoadDataEx_t;

#define GET_ARGS_VALUE_hipModuleLoadDataEx(activity) { \
	args_hipModuleLoadDataEx_t* args = (args_hipModuleLoadDataEx_t*) activity->args; \
	args->module = (hipModule_t *) module; \
	args->image = (void *) image; \
	args->numOptions = (unsigned int) numOptions; \
	args->options = (hipJitOption *) options; \
	args->optionValues = (void **) optionValues; \
};

#define GET_PTRS_VALUE_hipModuleLoadDataEx(args) { \
	args_hipModuleLoadDataEx_t* pargs = (args_hipModuleLoadDataEx_t*) args; \
	if (pargs->module != NULL) { \
		pargs->module__ref.val = *pargs->module; \
	} \
	if (pargs->options != NULL) { \
		pargs->options__ref.val = *pargs->options; \
	} \
	if (pargs->optionValues != NULL) { \
		pargs->optionValues__ref.ptr1 = *pargs->optionValues; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetFilterMode` function call.
 *
 * @struct args_hipTexRefGetFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetFilterMode (
 *			enum hipTextureFilterMode * pfm (enum hipTextureFilterMode *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetFilterMode
typedef struct {
	enum hipTextureFilterMode * pfm;
	struct {
		enum hipTextureFilterMode val;
	} pfm__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetFilterMode_t;

#define GET_ARGS_VALUE_hipTexRefGetFilterMode(activity) { \
	args_hipTexRefGetFilterMode_t* args = (args_hipTexRefGetFilterMode_t*) activity->args; \
	args->pfm = (enum hipTextureFilterMode *) pfm; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetFilterMode(args) { \
	args_hipTexRefGetFilterMode_t* pargs = (args_hipTexRefGetFilterMode_t*) args; \
	if (pargs->pfm != NULL) { \
		pargs->pfm__ref.val = *pargs->pfm; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphInstantiateWithParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphInstantiateWithParams` function call.
 *
 * @struct args_hipGraphInstantiateWithParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphInstantiateWithParams (
 *			hipGraphExec_t * pGraphExec (struct hipGraphExec **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphInstantiateParams * instantiateParams (struct hipGraphInstantiateParams*)
 *	)
 */
#if HAVE_hipGraphInstantiateWithParams
typedef struct {
	hipGraphExec_t * pGraphExec;
	struct {
		hipGraphExec_t val;
	} pGraphExec__ref;
	hipGraph_t graph;
	hipGraphInstantiateParams * instantiateParams;
	struct {
		hipGraphInstantiateParams val;
	} instantiateParams__ref;
	hipError_t retval;
} args_hipGraphInstantiateWithParams_t;

#define GET_ARGS_VALUE_hipGraphInstantiateWithParams(activity) { \
	args_hipGraphInstantiateWithParams_t* args = (args_hipGraphInstantiateWithParams_t*) activity->args; \
	args->pGraphExec = (hipGraphExec_t *) pGraphExec; \
	args->graph = (hipGraph_t) graph; \
	args->instantiateParams = (hipGraphInstantiateParams *) instantiateParams; \
};

#define GET_PTRS_VALUE_hipGraphInstantiateWithParams(args) { \
	args_hipGraphInstantiateWithParams_t* pargs = (args_hipGraphInstantiateWithParams_t*) args; \
	if (pargs->pGraphExec != NULL) { \
		pargs->pGraphExec__ref.val = *pargs->pGraphExec; \
	} \
	if (pargs->instantiateParams != NULL) { \
		pargs->instantiateParams__ref.val = *pargs->instantiateParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParams1D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParams1D` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParams1D_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParams1D (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphMemcpyNodeSetParams1D
typedef struct {
	hipGraphNode_t node;
	void * dst;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphMemcpyNodeSetParams1D_t;

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParams1D(activity) { \
	args_hipGraphMemcpyNodeSetParams1D_t* args = (args_hipGraphMemcpyNodeSetParams1D_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->count = (size_t) count; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamSynchronize` function call.
 *
 * @struct args_hipStreamSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipStreamSynchronize (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipStreamSynchronize
typedef struct {
	hipStream_t stream;
	hipError_t retval;
} args_hipStreamSynchronize_t;

#define GET_ARGS_VALUE_hipStreamSynchronize(activity) { \
	args_hipStreamSynchronize_t* args = (args_hipStreamSynchronize_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphicsUnmapResources` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsUnmapResources` function call.
 *
 * @struct args_hipGraphicsUnmapResources_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsUnmapResources (
 *			int count (int)
 *			hipGraphicsResource_t * resources (struct _hipGraphicsResource**)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipGraphicsUnmapResources
typedef struct {
	int count;
	hipGraphicsResource_t * resources;
	struct {
		hipGraphicsResource_t val;
	} resources__ref;
	hipStream_t stream;
	hipError_t retval;
} args_hipGraphicsUnmapResources_t;

#define GET_ARGS_VALUE_hipGraphicsUnmapResources(activity) { \
	args_hipGraphicsUnmapResources_t* args = (args_hipGraphicsUnmapResources_t*) activity->args; \
	args->count = (int) count; \
	args->resources = (hipGraphicsResource_t *) resources; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipGraphicsUnmapResources(args) { \
	args_hipGraphicsUnmapResources_t* pargs = (args_hipGraphicsUnmapResources_t*) args; \
	if (pargs->resources != NULL) { \
		pargs->resources__ref.val = *pargs->resources; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArray_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArray_spt` function call.
 *
 * @struct args_hipMemcpy2DFromArray_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArray_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy2DFromArray_spt
typedef struct {
	void * dst;
	size_t dpitch;
	hipArray_const_t src;
	size_t wOffset;
	size_t hOffset;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy2DFromArray_spt_t;

#define GET_ARGS_VALUE_hipMemcpy2DFromArray_spt(activity) { \
	args_hipMemcpy2DFromArray_spt_t* args = (args_hipMemcpy2DFromArray_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (hipArray_const_t) src; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParamsFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParamsFromSymbol` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParamsFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParamsFromSymbol (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphExecMemcpyNodeSetParamsFromSymbol
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	void * dst;
	void * symbol;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphExecMemcpyNodeSetParamsFromSymbol_t;

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParamsFromSymbol(activity) { \
	args_hipGraphExecMemcpyNodeSetParamsFromSymbol_t* args = (args_hipGraphExecMemcpyNodeSetParamsFromSymbol_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->dst = (void *) dst; \
	args->symbol = (void *) symbol; \
	args->count = (size_t) count; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipmapLevelBias` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipmapLevelBias` function call.
 *
 * @struct args_hipTexRefGetMipmapLevelBias_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipmapLevelBias (
 *			float * pbias (float *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetMipmapLevelBias
typedef struct {
	float * pbias;
	struct {
		float val;
	} pbias__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetMipmapLevelBias_t;

#define GET_ARGS_VALUE_hipTexRefGetMipmapLevelBias(activity) { \
	args_hipTexRefGetMipmapLevelBias_t* args = (args_hipTexRefGetMipmapLevelBias_t*) activity->args; \
	args->pbias = (float *) pbias; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipmapLevelBias(args) { \
	args_hipTexRefGetMipmapLevelBias_t* pargs = (args_hipTexRefGetMipmapLevelBias_t*) args; \
	if (pargs->pbias != NULL) { \
		pargs->pbias__ref.val = *pargs->pbias; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddExternalSemaphoresSignalNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddExternalSemaphoresSignalNode` function call.
 *
 * @struct args_hipGraphAddExternalSemaphoresSignalNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddExternalSemaphoresSignalNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipExternalSemaphoreSignalNodeParams * nodeParams (const struct hipExternalSemaphoreSignalNodeParams *)
 *	)
 */
#if HAVE_hipGraphAddExternalSemaphoresSignalNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipExternalSemaphoreSignalNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
} args_hipGraphAddExternalSemaphoresSignalNode_t;

#define GET_ARGS_VALUE_hipGraphAddExternalSemaphoresSignalNode(activity) { \
	args_hipGraphAddExternalSemaphoresSignalNode_t* args = (args_hipGraphAddExternalSemaphoresSignalNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->nodeParams = (hipExternalSemaphoreSignalNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddExternalSemaphoresSignalNode(args) { \
	args_hipGraphAddExternalSemaphoresSignalNode_t* pargs = (args_hipGraphAddExternalSemaphoresSignalNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->nodeParams != NULL) { \
		pargs->nodeParams__ref.val = *pargs->nodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExtGetLastError` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtGetLastError` function call.
 *
 * @struct args_hipExtGetLastError_t
 *
 * @note 
 *	hipError_t
 *	hipExtGetLastError (
 *	)
 */
#if HAVE_hipExtGetLastError
typedef struct {
	hipError_t retval;
} args_hipExtGetLastError_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemMapArrayAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemMapArrayAsync` function call.
 *
 * @struct args_hipMemMapArrayAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemMapArrayAsync (
 *			hipArrayMapInfo * mapInfoList (struct hipArrayMapInfo*)
 *			unsigned int count (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemMapArrayAsync
typedef struct {
	hipArrayMapInfo * mapInfoList;
	struct {
		hipArrayMapInfo val;
	} mapInfoList__ref;
	unsigned int count;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemMapArrayAsync_t;

#define GET_ARGS_VALUE_hipMemMapArrayAsync(activity) { \
	args_hipMemMapArrayAsync_t* args = (args_hipMemMapArrayAsync_t*) activity->args; \
	args->mapInfoList = (hipArrayMapInfo *) mapInfoList; \
	args->count = (unsigned int) count; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipMemMapArrayAsync(args) { \
	args_hipMemMapArrayAsync_t* pargs = (args_hipMemMapArrayAsync_t*) args; \
	if (pargs->mapInfoList != NULL) { \
		pargs->mapInfoList__ref.val = *pargs->mapInfoList; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAsync` function call.
 *
 * @struct args_hipMemcpyAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAsync (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyAsync
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyAsync_t;

#define GET_ARGS_VALUE_hipMemcpyAsync(activity) { \
	args_hipMemcpyAsync_t* args = (args_hipMemcpyAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeSetAttribute` function call.
 *
 * @struct args_hipGraphKernelNodeSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeSetAttribute (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipLaunchAttributeID attr (enum hipLaunchAttributeID)
 *			const hipLaunchAttributeValue * value (const union hipLaunchAttributeValue *)
 *	)
 */
#if HAVE_hipGraphKernelNodeSetAttribute
typedef struct {
	hipGraphNode_t hNode;
	hipLaunchAttributeID attr;
	hipLaunchAttributeValue * value;
	struct {
		hipLaunchAttributeValue val;
	} value__ref;
	hipError_t retval;
} args_hipGraphKernelNodeSetAttribute_t;

#define GET_ARGS_VALUE_hipGraphKernelNodeSetAttribute(activity) { \
	args_hipGraphKernelNodeSetAttribute_t* args = (args_hipGraphKernelNodeSetAttribute_t*) activity->args; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->attr = (hipLaunchAttributeID) attr; \
	args->value = (hipLaunchAttributeValue *) value; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeSetAttribute(args) { \
	args_hipGraphKernelNodeSetAttribute_t* pargs = (args_hipGraphKernelNodeSetAttribute_t*) args; \
	if (pargs->value != NULL) { \
		pargs->value__ref.val = *pargs->value; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvMemcpy2DUnaligned` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvMemcpy2DUnaligned` function call.
 *
 * @struct args_hipDrvMemcpy2DUnaligned_t
 *
 * @note 
 *	hipError_t
 *	hipDrvMemcpy2DUnaligned (
 *			const hip_Memcpy2D * pCopy (const struct hip_Memcpy2D *)
 *	)
 */
#if HAVE_hipDrvMemcpy2DUnaligned
typedef struct {
	hip_Memcpy2D * pCopy;
	struct {
		hip_Memcpy2D val;
	} pCopy__ref;
	hipError_t retval;
} args_hipDrvMemcpy2DUnaligned_t;

#define GET_ARGS_VALUE_hipDrvMemcpy2DUnaligned(activity) { \
	args_hipDrvMemcpy2DUnaligned_t* args = (args_hipDrvMemcpy2DUnaligned_t*) activity->args; \
	args->pCopy = (hip_Memcpy2D *) pCopy; \
};

#define GET_PTRS_VALUE_hipDrvMemcpy2DUnaligned(args) { \
	args_hipDrvMemcpy2DUnaligned_t* pargs = (args_hipDrvMemcpy2DUnaligned_t*) args; \
	if (pargs->pCopy != NULL) { \
		pargs->pCopy__ref.val = *pargs->pCopy; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolDestroy` function call.
 *
 * @struct args_hipMemPoolDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolDestroy (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *	)
 */
#if HAVE_hipMemPoolDestroy
typedef struct {
	hipMemPool_t mem_pool;
	hipError_t retval;
} args_hipMemPoolDestroy_t;

#define GET_ARGS_VALUE_hipMemPoolDestroy(activity) { \
	args_hipMemPoolDestroy_t* args = (args_hipMemPoolDestroy_t*) activity->args; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphRemoveDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphRemoveDependencies` function call.
 *
 * @struct args_hipGraphRemoveDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipGraphRemoveDependencies (
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * from (const struct hipGraphNode * *)
 *			const hipGraphNode_t * to (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *	)
 */
#if HAVE_hipGraphRemoveDependencies
typedef struct {
	hipGraph_t graph;
	hipGraphNode_t * from;
	struct {
		hipGraphNode_t val;
	} from__ref;
	hipGraphNode_t * to;
	struct {
		hipGraphNode_t val;
	} to__ref;
	size_t numDependencies;
	hipError_t retval;
} args_hipGraphRemoveDependencies_t;

#define GET_ARGS_VALUE_hipGraphRemoveDependencies(activity) { \
	args_hipGraphRemoveDependencies_t* args = (args_hipGraphRemoveDependencies_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->from = (hipGraphNode_t *) from; \
	args->to = (hipGraphNode_t *) to; \
	args->numDependencies = (size_t) numDependencies; \
};

#define GET_PTRS_VALUE_hipGraphRemoveDependencies(args) { \
	args_hipGraphRemoveDependencies_t* pargs = (args_hipGraphRemoveDependencies_t*) args; \
	if (pargs->from != NULL) { \
		pargs->from__ref.val = *pargs->from; \
	} \
	if (pargs->to != NULL) { \
		pargs->to__ref.val = *pargs->to; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphCreate` function call.
 *
 * @struct args_hipGraphCreate_t
 *
 * @note 
 *	hipError_t
 *	hipGraphCreate (
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipGraphCreate
typedef struct {
	hipGraph_t * pGraph;
	struct {
		hipGraph_t val;
	} pGraph__ref;
	unsigned int flags;
	hipError_t retval;
} args_hipGraphCreate_t;

#define GET_ARGS_VALUE_hipGraphCreate(activity) { \
	args_hipGraphCreate_t* args = (args_hipGraphCreate_t*) activity->args; \
	args->pGraph = (hipGraph_t *) pGraph; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipGraphCreate(args) { \
	args_hipGraphCreate_t* pargs = (args_hipGraphCreate_t*) args; \
	if (pargs->pGraph != NULL) { \
		pargs->pGraph__ref.val = *pargs->pGraph; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExtLaunchMultiKernelMultiDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtLaunchMultiKernelMultiDevice` function call.
 *
 * @struct args_hipExtLaunchMultiKernelMultiDevice_t
 *
 * @note 
 *	hipError_t
 *	hipExtLaunchMultiKernelMultiDevice (
 *			hipLaunchParams * launchParamsList (struct hipLaunchParams_t*)
 *			int numDevices (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipExtLaunchMultiKernelMultiDevice
typedef struct {
	hipLaunchParams * launchParamsList;
	struct {
		hipLaunchParams val;
	} launchParamsList__ref;
	int numDevices;
	unsigned int flags;
	hipError_t retval;
} args_hipExtLaunchMultiKernelMultiDevice_t;

#define GET_ARGS_VALUE_hipExtLaunchMultiKernelMultiDevice(activity) { \
	args_hipExtLaunchMultiKernelMultiDevice_t* args = (args_hipExtLaunchMultiKernelMultiDevice_t*) activity->args; \
	args->launchParamsList = (hipLaunchParams *) launchParamsList; \
	args->numDevices = (int) numDevices; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipExtLaunchMultiKernelMultiDevice(args) { \
	args_hipExtLaunchMultiKernelMultiDevice_t* pargs = (args_hipExtLaunchMultiKernelMultiDevice_t*) args; \
	if (pargs->launchParamsList != NULL) { \
		pargs->launchParamsList__ref.val = *pargs->launchParamsList; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetDeviceCount` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDeviceCount` function call.
 *
 * @struct args_hipGetDeviceCount_t
 *
 * @note 
 *	hipError_t
 *	hipGetDeviceCount (
 *			int * count (int *)
 *	)
 */
#if HAVE_hipGetDeviceCount
typedef struct {
	int * count;
	struct {
		int val;
	} count__ref;
	hipError_t retval;
} args_hipGetDeviceCount_t;

#define GET_ARGS_VALUE_hipGetDeviceCount(activity) { \
	args_hipGetDeviceCount_t* args = (args_hipGetDeviceCount_t*) activity->args; \
	args->count = (int *) count; \
};

#define GET_PTRS_VALUE_hipGetDeviceCount(args) { \
	args_hipGetDeviceCount_t* pargs = (args_hipGetDeviceCount_t*) args; \
	if (pargs->count != NULL) { \
		pargs->count__ref.val = *pargs->count; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemUnmap` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemUnmap` function call.
 *
 * @struct args_hipMemUnmap_t
 *
 * @note 
 *	hipError_t
 *	hipMemUnmap (
 *			void * ptr (void *)
 *			size_t size (unsigned long)
 *	)
 */
#if HAVE_hipMemUnmap
typedef struct {
	void * ptr;
	size_t size;
	hipError_t retval;
} args_hipMemUnmap_t;

#define GET_ARGS_VALUE_hipMemUnmap(activity) { \
	args_hipMemUnmap_t* args = (args_hipMemUnmap_t*) activity->args; \
	args->ptr = (void *) ptr; \
	args->size = (size_t) size; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexObjectGetResourceDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectGetResourceDesc` function call.
 *
 * @struct args_hipTexObjectGetResourceDesc_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectGetResourceDesc (
 *			HIP_RESOURCE_DESC * pResDesc (struct HIP_RESOURCE_DESC_st*)
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipTexObjectGetResourceDesc
typedef struct {
	HIP_RESOURCE_DESC * pResDesc;
	struct {
		HIP_RESOURCE_DESC val;
	} pResDesc__ref;
	hipTextureObject_t texObject;
	hipError_t retval;
} args_hipTexObjectGetResourceDesc_t;

#define GET_ARGS_VALUE_hipTexObjectGetResourceDesc(activity) { \
	args_hipTexObjectGetResourceDesc_t* args = (args_hipTexObjectGetResourceDesc_t*) activity->args; \
	args->pResDesc = (HIP_RESOURCE_DESC *) pResDesc; \
	args->texObject = (hipTextureObject_t) texObject; \
};

#define GET_PTRS_VALUE_hipTexObjectGetResourceDesc(args) { \
	args_hipTexObjectGetResourceDesc_t* pargs = (args_hipTexObjectGetResourceDesc_t*) args; \
	if (pargs->pResDesc != NULL) { \
		pargs->pResDesc__ref.val = *pargs->pResDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecEventRecordNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecEventRecordNodeSetEvent` function call.
 *
 * @struct args_hipGraphExecEventRecordNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecEventRecordNodeSetEvent (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipGraphExecEventRecordNodeSetEvent
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t hNode;
	hipEvent_t event;
	hipError_t retval;
} args_hipGraphExecEventRecordNodeSetEvent_t;

#define GET_ARGS_VALUE_hipGraphExecEventRecordNodeSetEvent(activity) { \
	args_hipGraphExecEventRecordNodeSetEvent_t* args = (args_hipGraphExecEventRecordNodeSetEvent_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->event = (hipEvent_t) event; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipInit` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipInit` function call.
 *
 * @struct args_hipInit_t
 *
 * @note 
 *	hipError_t
 *	hipInit (
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipInit
typedef struct {
	unsigned int flags;
	hipError_t retval;
} args_hipInit_t;

#define GET_ARGS_VALUE_hipInit(activity) { \
	args_hipInit_t* args = (args_hipInit_t*) activity->args; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipThreadExchangeStreamCaptureMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipThreadExchangeStreamCaptureMode` function call.
 *
 * @struct args_hipThreadExchangeStreamCaptureMode_t
 *
 * @note 
 *	hipError_t
 *	hipThreadExchangeStreamCaptureMode (
 *			hipStreamCaptureMode * mode (enum hipStreamCaptureMode*)
 *	)
 */
#if HAVE_hipThreadExchangeStreamCaptureMode
typedef struct {
	hipStreamCaptureMode * mode;
	struct {
		hipStreamCaptureMode val;
	} mode__ref;
	hipError_t retval;
} args_hipThreadExchangeStreamCaptureMode_t;

#define GET_ARGS_VALUE_hipThreadExchangeStreamCaptureMode(activity) { \
	args_hipThreadExchangeStreamCaptureMode_t* args = (args_hipThreadExchangeStreamCaptureMode_t*) activity->args; \
	args->mode = (hipStreamCaptureMode *) mode; \
};

#define GET_PTRS_VALUE_hipThreadExchangeStreamCaptureMode(args) { \
	args_hipThreadExchangeStreamCaptureMode_t* pargs = (args_hipThreadExchangeStreamCaptureMode_t*) args; \
	if (pargs->mode != NULL) { \
		pargs->mode__ref.val = *pargs->mode; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetP2PAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetP2PAttribute` function call.
 *
 * @struct args_hipDeviceGetP2PAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetP2PAttribute (
 *			int * value (int *)
 *			hipDeviceP2PAttr attr (enum hipDeviceP2PAttr)
 *			int srcDevice (int)
 *			int dstDevice (int)
 *	)
 */
#if HAVE_hipDeviceGetP2PAttribute
typedef struct {
	int * value;
	struct {
		int val;
	} value__ref;
	hipDeviceP2PAttr attr;
	int srcDevice;
	int dstDevice;
	hipError_t retval;
} args_hipDeviceGetP2PAttribute_t;

#define GET_ARGS_VALUE_hipDeviceGetP2PAttribute(activity) { \
	args_hipDeviceGetP2PAttribute_t* args = (args_hipDeviceGetP2PAttribute_t*) activity->args; \
	args->value = (int *) value; \
	args->attr = (hipDeviceP2PAttr) attr; \
	args->srcDevice = (int) srcDevice; \
	args->dstDevice = (int) dstDevice; \
};

#define GET_PTRS_VALUE_hipDeviceGetP2PAttribute(args) { \
	args_hipDeviceGetP2PAttribute_t* pargs = (args_hipDeviceGetP2PAttribute_t*) args; \
	if (pargs->value != NULL) { \
		pargs->value__ref.val = *pargs->value; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetByPCIBusId` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetByPCIBusId` function call.
 *
 * @struct args_hipDeviceGetByPCIBusId_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetByPCIBusId (
 *			int * device (int *)
 *			const char * pciBusId (const char *)
 *	)
 */
#if HAVE_hipDeviceGetByPCIBusId
typedef struct {
	int * device;
	struct {
		int val;
	} device__ref;
	char * pciBusId;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} pciBusId__ref;
	hipError_t retval;
} args_hipDeviceGetByPCIBusId_t;

#define GET_ARGS_VALUE_hipDeviceGetByPCIBusId(activity) { \
	args_hipDeviceGetByPCIBusId_t* args = (args_hipDeviceGetByPCIBusId_t*) activity->args; \
	args->device = (int *) device; \
	args->pciBusId = (char *) pciBusId; \
};

#define GET_PTRS_VALUE_hipDeviceGetByPCIBusId(args) { \
	args_hipDeviceGetByPCIBusId_t* pargs = (args_hipDeviceGetByPCIBusId_t*) args; \
	if (pargs->device != NULL) { \
		pargs->device__ref.val = *pargs->device; \
	} \
	if (pargs->pciBusId != NULL) { \
		strncpy(pargs->pciBusId__ref.val, pargs->pciBusId, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipHostFree` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostFree` function call.
 *
 * @struct args_hipHostFree_t
 *
 * @note 
 *	hipError_t
 *	hipHostFree (
 *			void * ptr (void *)
 *	)
 */
#if HAVE_hipHostFree
typedef struct {
	void * ptr;
	hipError_t retval;
} args_hipHostFree_t;

#define GET_ARGS_VALUE_hipHostFree(activity) { \
	args_hipHostFree_t* args = (args_hipHostFree_t*) activity->args; \
	args->ptr = (void *) ptr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExtGetLinkTypeAndHopCount` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtGetLinkTypeAndHopCount` function call.
 *
 * @struct args_hipExtGetLinkTypeAndHopCount_t
 *
 * @note 
 *	hipError_t
 *	hipExtGetLinkTypeAndHopCount (
 *			int device1 (int)
 *			int device2 (int)
 *			uint32_t * linktype (unsigned int*)
 *			uint32_t * hopcount (unsigned int*)
 *	)
 */
#if HAVE_hipExtGetLinkTypeAndHopCount
typedef struct {
	int device1;
	int device2;
	uint32_t * linktype;
	struct {
		uint32_t val;
	} linktype__ref;
	uint32_t * hopcount;
	struct {
		uint32_t val;
	} hopcount__ref;
	hipError_t retval;
} args_hipExtGetLinkTypeAndHopCount_t;

#define GET_ARGS_VALUE_hipExtGetLinkTypeAndHopCount(activity) { \
	args_hipExtGetLinkTypeAndHopCount_t* args = (args_hipExtGetLinkTypeAndHopCount_t*) activity->args; \
	args->device1 = (int) device1; \
	args->device2 = (int) device2; \
	args->linktype = (uint32_t *) linktype; \
	args->hopcount = (uint32_t *) hopcount; \
};

#define GET_PTRS_VALUE_hipExtGetLinkTypeAndHopCount(args) { \
	args_hipExtGetLinkTypeAndHopCount_t* pargs = (args_hipExtGetLinkTypeAndHopCount_t*) args; \
	if (pargs->linktype != NULL) { \
		pargs->linktype__ref.val = *pargs->linktype; \
	} \
	if (pargs->hopcount != NULL) { \
		pargs->hopcount__ref.val = *pargs->hopcount; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbolAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbolAsync_spt` function call.
 *
 * @struct args_hipMemcpyToSymbolAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbolAsync_spt (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyToSymbolAsync_spt
typedef struct {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyToSymbolAsync_spt_t;

#define GET_ARGS_VALUE_hipMemcpyToSymbolAsync_spt(activity) { \
	args_hipMemcpyToSymbolAsync_spt_t* args = (args_hipMemcpyToSymbolAsync_spt_t*) activity->args; \
	args->symbol = (void *) symbol; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxDisablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxDisablePeerAccess` function call.
 *
 * @struct args_hipCtxDisablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipCtxDisablePeerAccess (
 *			hipCtx_t peerCtx (struct ihipCtx_t *)
 *	)
 */
#if HAVE_hipCtxDisablePeerAccess
typedef struct {
	hipCtx_t peerCtx;
	hipError_t retval;
} args_hipCtxDisablePeerAccess_t;

#define GET_ARGS_VALUE_hipCtxDisablePeerAccess(activity) { \
	args_hipCtxDisablePeerAccess_t* args = (args_hipCtxDisablePeerAccess_t*) activity->args; \
	args->peerCtx = (hipCtx_t) peerCtx; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipSetupArgument` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetupArgument` function call.
 *
 * @struct args_hipSetupArgument_t
 *
 * @note 
 *	hipError_t
 *	hipSetupArgument (
 *			const void * arg (const void *)
 *			size_t size (unsigned long)
 *			size_t offset (unsigned long)
 *	)
 */
#if HAVE_hipSetupArgument
typedef struct {
	void * arg;
	size_t size;
	size_t offset;
	hipError_t retval;
} args_hipSetupArgument_t;

#define GET_ARGS_VALUE_hipSetupArgument(activity) { \
	args_hipSetupArgument_t* args = (args_hipSetupArgument_t*) activity->args; \
	args->arg = (void *) arg; \
	args->size = (size_t) size; \
	args->offset = (size_t) offset; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoHAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoHAsync` function call.
 *
 * @struct args_hipMemcpyAtoHAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoHAsync (
 *			void * dstHost (void *)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t ByteCount (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyAtoHAsync
typedef struct {
	void * dstHost;
	hipArray_t srcArray;
	size_t srcOffset;
	size_t ByteCount;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyAtoHAsync_t;

#define GET_ARGS_VALUE_hipMemcpyAtoHAsync(activity) { \
	args_hipMemcpyAtoHAsync_t* args = (args_hipMemcpyAtoHAsync_t*) activity->args; \
	args->dstHost = (void *) dstHost; \
	args->srcArray = (hipArray_t) srcArray; \
	args->srcOffset = (size_t) srcOffset; \
	args->ByteCount = (size_t) ByteCount; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxSetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSetCacheConfig` function call.
 *
 * @struct args_hipCtxSetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSetCacheConfig (
 *			hipFuncCache_t cacheConfig (enum hipFuncCache_t)
 *	)
 */
#if HAVE_hipCtxSetCacheConfig
typedef struct {
	hipFuncCache_t cacheConfig;
	hipError_t retval;
} args_hipCtxSetCacheConfig_t;

#define GET_ARGS_VALUE_hipCtxSetCacheConfig(activity) { \
	args_hipCtxSetCacheConfig_t* args = (args_hipCtxSetCacheConfig_t*) activity->args; \
	args->cacheConfig = (hipFuncCache_t) cacheConfig; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemRelease` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRelease` function call.
 *
 * @struct args_hipMemRelease_t
 *
 * @note 
 *	hipError_t
 *	hipMemRelease (
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *	)
 */
#if HAVE_hipMemRelease
typedef struct {
	hipMemGenericAllocationHandle_t handle;
	hipError_t retval;
} args_hipMemRelease_t;

#define GET_ARGS_VALUE_hipMemRelease(activity) { \
	args_hipMemRelease_t* args = (args_hipMemRelease_t*) activity->args; \
	args->handle = (hipMemGenericAllocationHandle_t) handle; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipUnbindTexture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUnbindTexture` function call.
 *
 * @struct args_hipUnbindTexture_t
 *
 * @note 
 *	hipError_t
 *	hipUnbindTexture (
 *			const textureReference * tex (const struct textureReference *)
 *	)
 */
#if HAVE_hipUnbindTexture
typedef struct {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	hipError_t retval;
} args_hipUnbindTexture_t;

#define GET_ARGS_VALUE_hipUnbindTexture(activity) { \
	args_hipUnbindTexture_t* args = (args_hipUnbindTexture_t*) activity->args; \
	args->tex = (textureReference *) tex; \
};

#define GET_PTRS_VALUE_hipUnbindTexture(args) { \
	args_hipUnbindTexture_t* pargs = (args_hipUnbindTexture_t*) args; \
	if (pargs->tex != NULL) { \
		pargs->tex__ref.val = *pargs->tex; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvMemcpy3DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvMemcpy3DAsync` function call.
 *
 * @struct args_hipDrvMemcpy3DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipDrvMemcpy3DAsync (
 *			const HIP_MEMCPY3D * pCopy (const struct HIP_MEMCPY3D *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipDrvMemcpy3DAsync
typedef struct {
	HIP_MEMCPY3D * pCopy;
	struct {
		HIP_MEMCPY3D val;
	} pCopy__ref;
	hipStream_t stream;
	hipError_t retval;
} args_hipDrvMemcpy3DAsync_t;

#define GET_ARGS_VALUE_hipDrvMemcpy3DAsync(activity) { \
	args_hipDrvMemcpy3DAsync_t* args = (args_hipDrvMemcpy3DAsync_t*) activity->args; \
	args->pCopy = (HIP_MEMCPY3D *) pCopy; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipDrvMemcpy3DAsync(args) { \
	args_hipDrvMemcpy3DAsync_t* pargs = (args_hipDrvMemcpy3DAsync_t*) args; \
	if (pargs->pCopy != NULL) { \
		pargs->pCopy__ref.val = *pargs->pCopy; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipIpcGetEventHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcGetEventHandle` function call.
 *
 * @struct args_hipIpcGetEventHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcGetEventHandle (
 *			hipIpcEventHandle_t * handle (struct hipIpcEventHandle_st*)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipIpcGetEventHandle
typedef struct {
	hipIpcEventHandle_t * handle;
	struct {
		hipIpcEventHandle_t val;
	} handle__ref;
	hipEvent_t event;
	hipError_t retval;
} args_hipIpcGetEventHandle_t;

#define GET_ARGS_VALUE_hipIpcGetEventHandle(activity) { \
	args_hipIpcGetEventHandle_t* args = (args_hipIpcGetEventHandle_t*) activity->args; \
	args->handle = (hipIpcEventHandle_t *) handle; \
	args->event = (hipEvent_t) event; \
};

#define GET_PTRS_VALUE_hipIpcGetEventHandle(args) { \
	args_hipIpcGetEventHandle_t* pargs = (args_hipIpcGetEventHandle_t*) args; \
	if (pargs->handle != NULL) { \
		pargs->handle__ref.val = *pargs->handle; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphReleaseUserObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphReleaseUserObject` function call.
 *
 * @struct args_hipGraphReleaseUserObject_t
 *
 * @note 
 *	hipError_t
 *	hipGraphReleaseUserObject (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *	)
 */
#if HAVE_hipGraphReleaseUserObject
typedef struct {
	hipGraph_t graph;
	hipUserObject_t object;
	unsigned int count;
	hipError_t retval;
} args_hipGraphReleaseUserObject_t;

#define GET_ARGS_VALUE_hipGraphReleaseUserObject(activity) { \
	args_hipGraphReleaseUserObject_t* args = (args_hipGraphReleaseUserObject_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->object = (hipUserObject_t) object; \
	args->count = (unsigned int) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetMemPool` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetMemPool` function call.
 *
 * @struct args_hipDeviceGetMemPool_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetMemPool (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			int device (int)
 *	)
 */
#if HAVE_hipDeviceGetMemPool
typedef struct {
	hipMemPool_t * mem_pool;
	struct {
		hipMemPool_t val;
	} mem_pool__ref;
	int device;
	hipError_t retval;
} args_hipDeviceGetMemPool_t;

#define GET_ARGS_VALUE_hipDeviceGetMemPool(activity) { \
	args_hipDeviceGetMemPool_t* args = (args_hipDeviceGetMemPool_t*) activity->args; \
	args->mem_pool = (hipMemPool_t *) mem_pool; \
	args->device = (int) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetMemPool(args) { \
	args_hipDeviceGetMemPool_t* pargs = (args_hipDeviceGetMemPool_t*) args; \
	if (pargs->mem_pool != NULL) { \
		pargs->mem_pool__ref.val = *pargs->mem_pool; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphHostNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphHostNodeSetParams` function call.
 *
 * @struct args_hipGraphHostNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphHostNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipHostNodeParams * pNodeParams (const struct hipHostNodeParams *)
 *	)
 */
#if HAVE_hipGraphHostNodeSetParams
typedef struct {
	hipGraphNode_t node;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphHostNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphHostNodeSetParams(activity) { \
	args_hipGraphHostNodeSetParams_t* args = (args_hipGraphHostNodeSetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphHostNodeSetParams(args) { \
	args_hipGraphHostNodeSetParams_t* pargs = (args_hipGraphHostNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddEventWaitNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddEventWaitNode` function call.
 *
 * @struct args_hipGraphAddEventWaitNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddEventWaitNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipGraphAddEventWaitNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipEvent_t event;
	hipError_t retval;
} args_hipGraphAddEventWaitNode_t;

#define GET_ARGS_VALUE_hipGraphAddEventWaitNode(activity) { \
	args_hipGraphAddEventWaitNode_t* args = (args_hipGraphAddEventWaitNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->event = (hipEvent_t) event; \
};

#define GET_PTRS_VALUE_hipGraphAddEventWaitNode(args) { \
	args_hipGraphAddEventWaitNode_t* pargs = (args_hipGraphAddEventWaitNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArrayAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArrayAsync_spt` function call.
 *
 * @struct args_hipMemcpy2DFromArrayAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArrayAsync_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffsetSrc (unsigned long)
 *			size_t hOffsetSrc (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy2DFromArrayAsync_spt
typedef struct {
	void * dst;
	size_t dpitch;
	hipArray_const_t src;
	size_t wOffsetSrc;
	size_t hOffsetSrc;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy2DFromArrayAsync_spt_t;

#define GET_ARGS_VALUE_hipMemcpy2DFromArrayAsync_spt(activity) { \
	args_hipMemcpy2DFromArrayAsync_spt_t* args = (args_hipMemcpy2DFromArrayAsync_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (hipArray_const_t) src; \
	args->wOffsetSrc = (size_t) wOffsetSrc; \
	args->hOffsetSrc = (size_t) hOffsetSrc; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchHostFunc_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchHostFunc_spt` function call.
 *
 * @struct args_hipLaunchHostFunc_spt_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchHostFunc_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipHostFn_t fn (void (*)(void *))
 *			void * userData (void *)
 *	)
 */
#if HAVE_hipLaunchHostFunc_spt
typedef struct {
	hipStream_t stream;
	hipHostFn_t fn;
	void * userData;
	hipError_t retval;
} args_hipLaunchHostFunc_spt_t;

#define GET_ARGS_VALUE_hipLaunchHostFunc_spt(activity) { \
	args_hipLaunchHostFunc_spt_t* args = (args_hipLaunchHostFunc_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->fn = (hipHostFn_t) fn; \
	args->userData = (void *) userData; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitEvent_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitEvent_spt` function call.
 *
 * @struct args_hipStreamWaitEvent_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitEvent_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamWaitEvent_spt
typedef struct {
	hipStream_t stream;
	hipEvent_t event;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamWaitEvent_spt_t;

#define GET_ARGS_VALUE_hipStreamWaitEvent_spt(activity) { \
	args_hipStreamWaitEvent_spt_t* args = (args_hipStreamWaitEvent_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->event = (hipEvent_t) event; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipArrayGetDescriptor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayGetDescriptor` function call.
 *
 * @struct args_hipArrayGetDescriptor_t
 *
 * @note 
 *	hipError_t
 *	hipArrayGetDescriptor (
 *			HIP_ARRAY_DESCRIPTOR * pArrayDescriptor (struct HIP_ARRAY_DESCRIPTOR*)
 *			hipArray_t array (struct hipArray *)
 *	)
 */
#if HAVE_hipArrayGetDescriptor
typedef struct {
	HIP_ARRAY_DESCRIPTOR * pArrayDescriptor;
	struct {
		HIP_ARRAY_DESCRIPTOR val;
	} pArrayDescriptor__ref;
	hipArray_t array;
	hipError_t retval;
} args_hipArrayGetDescriptor_t;

#define GET_ARGS_VALUE_hipArrayGetDescriptor(activity) { \
	args_hipArrayGetDescriptor_t* args = (args_hipArrayGetDescriptor_t*) activity->args; \
	args->pArrayDescriptor = (HIP_ARRAY_DESCRIPTOR *) pArrayDescriptor; \
	args->array = (hipArray_t) array; \
};

#define GET_PTRS_VALUE_hipArrayGetDescriptor(args) { \
	args_hipArrayGetDescriptor_t* pargs = (args_hipArrayGetDescriptor_t*) args; \
	if (pargs->pArrayDescriptor != NULL) { \
		pargs->pArrayDescriptor__ref.val = *pargs->pArrayDescriptor; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecUpdate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecUpdate` function call.
 *
 * @struct args_hipGraphExecUpdate_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecUpdate (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraph_t hGraph (struct ihipGraph *)
 *			hipGraphNode_t * hErrorNode_out (struct hipGraphNode **)
 *			hipGraphExecUpdateResult * updateResult_out (enum hipGraphExecUpdateResult*)
 *	)
 */
#if HAVE_hipGraphExecUpdate
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraph_t hGraph;
	hipGraphNode_t * hErrorNode_out;
	struct {
		hipGraphNode_t val;
	} hErrorNode_out__ref;
	hipGraphExecUpdateResult * updateResult_out;
	struct {
		hipGraphExecUpdateResult val;
	} updateResult_out__ref;
	hipError_t retval;
} args_hipGraphExecUpdate_t;

#define GET_ARGS_VALUE_hipGraphExecUpdate(activity) { \
	args_hipGraphExecUpdate_t* args = (args_hipGraphExecUpdate_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->hGraph = (hipGraph_t) hGraph; \
	args->hErrorNode_out = (hipGraphNode_t *) hErrorNode_out; \
	args->updateResult_out = (hipGraphExecUpdateResult *) updateResult_out; \
};

#define GET_PTRS_VALUE_hipGraphExecUpdate(args) { \
	args_hipGraphExecUpdate_t* pargs = (args_hipGraphExecUpdate_t*) args; \
	if (pargs->hErrorNode_out != NULL) { \
		pargs->hErrorNode_out__ref.val = *pargs->hErrorNode_out; \
	} \
	if (pargs->updateResult_out != NULL) { \
		pargs->updateResult_out__ref.val = *pargs->updateResult_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemGetAllocationPropertiesFromHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAllocationPropertiesFromHandle` function call.
 *
 * @struct args_hipMemGetAllocationPropertiesFromHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAllocationPropertiesFromHandle (
 *			hipMemAllocationProp * prop (struct hipMemAllocationProp*)
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *	)
 */
#if HAVE_hipMemGetAllocationPropertiesFromHandle
typedef struct {
	hipMemAllocationProp * prop;
	struct {
		hipMemAllocationProp val;
	} prop__ref;
	hipMemGenericAllocationHandle_t handle;
	hipError_t retval;
} args_hipMemGetAllocationPropertiesFromHandle_t;

#define GET_ARGS_VALUE_hipMemGetAllocationPropertiesFromHandle(activity) { \
	args_hipMemGetAllocationPropertiesFromHandle_t* args = (args_hipMemGetAllocationPropertiesFromHandle_t*) activity->args; \
	args->prop = (hipMemAllocationProp *) prop; \
	args->handle = (hipMemGenericAllocationHandle_t) handle; \
};

#define GET_PTRS_VALUE_hipMemGetAllocationPropertiesFromHandle(args) { \
	args_hipMemGetAllocationPropertiesFromHandle_t* pargs = (args_hipMemGetAllocationPropertiesFromHandle_t*) args; \
	if (pargs->prop != NULL) { \
		pargs->prop__ref.val = *pargs->prop; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyWithStream` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyWithStream` function call.
 *
 * @struct args_hipMemcpyWithStream_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyWithStream (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyWithStream
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyWithStream_t;

#define GET_ARGS_VALUE_hipMemcpyWithStream(activity) { \
	args_hipMemcpyWithStream_t* args = (args_hipMemcpyWithStream_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddExternalSemaphoresWaitNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddExternalSemaphoresWaitNode` function call.
 *
 * @struct args_hipGraphAddExternalSemaphoresWaitNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddExternalSemaphoresWaitNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipExternalSemaphoreWaitNodeParams * nodeParams (const struct hipExternalSemaphoreWaitNodeParams *)
 *	)
 */
#if HAVE_hipGraphAddExternalSemaphoresWaitNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipExternalSemaphoreWaitNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
} args_hipGraphAddExternalSemaphoresWaitNode_t;

#define GET_ARGS_VALUE_hipGraphAddExternalSemaphoresWaitNode(activity) { \
	args_hipGraphAddExternalSemaphoresWaitNode_t* args = (args_hipGraphAddExternalSemaphoresWaitNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->nodeParams = (hipExternalSemaphoreWaitNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddExternalSemaphoresWaitNode(args) { \
	args_hipGraphAddExternalSemaphoresWaitNode_t* pargs = (args_hipGraphAddExternalSemaphoresWaitNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->nodeParams != NULL) { \
		pargs->nodeParams__ref.val = *pargs->nodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoH` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoH` function call.
 *
 * @struct args_hipMemcpyAtoH_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoH (
 *			void * dst (void *)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyAtoH
typedef struct {
	void * dst;
	hipArray_t srcArray;
	size_t srcOffset;
	size_t count;
	hipError_t retval;
} args_hipMemcpyAtoH_t;

#define GET_ARGS_VALUE_hipMemcpyAtoH(activity) { \
	args_hipMemcpyAtoH_t* args = (args_hipMemcpyAtoH_t*) activity->args; \
	args->dst = (void *) dst; \
	args->srcArray = (hipArray_t) srcArray; \
	args->srcOffset = (size_t) srcOffset; \
	args->count = (size_t) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamQuery` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamQuery` function call.
 *
 * @struct args_hipStreamQuery_t
 *
 * @note 
 *	hipError_t
 *	hipStreamQuery (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipStreamQuery
typedef struct {
	hipStream_t stream;
	hipError_t retval;
} args_hipStreamQuery_t;

#define GET_ARGS_VALUE_hipStreamQuery(activity) { \
	args_hipStreamQuery_t* args = (args_hipStreamQuery_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipIpcCloseMemHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcCloseMemHandle` function call.
 *
 * @struct args_hipIpcCloseMemHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcCloseMemHandle (
 *			void * devPtr (void *)
 *	)
 */
#if HAVE_hipIpcCloseMemHandle
typedef struct {
	void * devPtr;
	hipError_t retval;
} args_hipIpcCloseMemHandle_t;

#define GET_ARGS_VALUE_hipIpcCloseMemHandle(activity) { \
	args_hipIpcCloseMemHandle_t* args = (args_hipIpcCloseMemHandle_t*) activity->args; \
	args->devPtr = (void *) devPtr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetAsync` function call.
 *
 * @struct args_hipMemsetAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetAsync (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemsetAsync
typedef struct {
	void * dst;
	int value;
	size_t sizeBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemsetAsync_t;

#define GET_ARGS_VALUE_hipMemsetAsync(activity) { \
	args_hipMemsetAsync_t* args = (args_hipMemsetAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->value = (int) value; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoD` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoD` function call.
 *
 * @struct args_hipMemcpyDtoD_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoD (
 *			hipDeviceptr_t dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyDtoD
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipError_t retval;
} args_hipMemcpyDtoD_t;

#define GET_ARGS_VALUE_hipMemcpyDtoD(activity) { \
	args_hipMemcpyDtoD_t* args = (args_hipMemcpyDtoD_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleUnload` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleUnload` function call.
 *
 * @struct args_hipModuleUnload_t
 *
 * @note 
 *	hipError_t
 *	hipModuleUnload (
 *			hipModule_t module (struct ihipModule_t *)
 *	)
 */
#if HAVE_hipModuleUnload
typedef struct {
	hipModule_t module;
	hipError_t retval;
} args_hipModuleUnload_t;

#define GET_ARGS_VALUE_hipModuleUnload(activity) { \
	args_hipModuleUnload_t* args = (args_hipModuleUnload_t*) activity->args; \
	args->module = (hipModule_t) module; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetDevicePropertiesR0600` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDevicePropertiesR0600` function call.
 *
 * @struct args_hipGetDevicePropertiesR0600_t
 *
 * @note 
 *	hipError_t
 *	hipGetDevicePropertiesR0600 (
 *			hipDeviceProp_tR0600 * prop (struct hipDeviceProp_tR0600*)
 *			int deviceId (int)
 *	)
 */
#if HAVE_hipGetDevicePropertiesR0600
typedef struct {
	hipDeviceProp_tR0600 * prop;
	struct {
		hipDeviceProp_tR0600 val;
	} prop__ref;
	int deviceId;
	hipError_t retval;
} args_hipGetDevicePropertiesR0600_t;

#define GET_ARGS_VALUE_hipGetDevicePropertiesR0600(activity) { \
	args_hipGetDevicePropertiesR0600_t* args = (args_hipGetDevicePropertiesR0600_t*) activity->args; \
	args->prop = (hipDeviceProp_tR0600 *) prop; \
	args->deviceId = (int) deviceId; \
};

#define GET_PTRS_VALUE_hipGetDevicePropertiesR0600(args) { \
	args_hipGetDevicePropertiesR0600_t* pargs = (args_hipGetDevicePropertiesR0600_t*) args; \
	if (pargs->prop != NULL) { \
		pargs->prop__ref.val = *pargs->prop; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromArray` function call.
 *
 * @struct args_hipMemcpyFromArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromArray (
 *			void * dst (void *)
 *			hipArray_const_t srcArray (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpyFromArray
typedef struct {
	void * dst;
	hipArray_const_t srcArray;
	size_t wOffset;
	size_t hOffset;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpyFromArray_t;

#define GET_ARGS_VALUE_hipMemcpyFromArray(activity) { \
	args_hipMemcpyFromArray_t* args = (args_hipMemcpyFromArray_t*) activity->args; \
	args->dst = (void *) dst; \
	args->srcArray = (hipArray_const_t) srcArray; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->count = (size_t) count; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceCanAccessPeer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceCanAccessPeer` function call.
 *
 * @struct args_hipDeviceCanAccessPeer_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceCanAccessPeer (
 *			int * canAccessPeer (int *)
 *			int deviceId (int)
 *			int peerDeviceId (int)
 *	)
 */
#if HAVE_hipDeviceCanAccessPeer
typedef struct {
	int * canAccessPeer;
	struct {
		int val;
	} canAccessPeer__ref;
	int deviceId;
	int peerDeviceId;
	hipError_t retval;
} args_hipDeviceCanAccessPeer_t;

#define GET_ARGS_VALUE_hipDeviceCanAccessPeer(activity) { \
	args_hipDeviceCanAccessPeer_t* args = (args_hipDeviceCanAccessPeer_t*) activity->args; \
	args->canAccessPeer = (int *) canAccessPeer; \
	args->deviceId = (int) deviceId; \
	args->peerDeviceId = (int) peerDeviceId; \
};

#define GET_PTRS_VALUE_hipDeviceCanAccessPeer(args) { \
	args_hipDeviceCanAccessPeer_t* pargs = (args_hipDeviceCanAccessPeer_t*) args; \
	if (pargs->canAccessPeer != NULL) { \
		pargs->canAccessPeer__ref.val = *pargs->canAccessPeer; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemSetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemSetAccess` function call.
 *
 * @struct args_hipMemSetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemSetAccess (
 *			void * ptr (void *)
 *			size_t size (unsigned long)
 *			const hipMemAccessDesc * desc (const struct hipMemAccessDesc *)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemSetAccess
typedef struct {
	void * ptr;
	size_t size;
	hipMemAccessDesc * desc;
	struct {
		hipMemAccessDesc val;
	} desc__ref;
	size_t count;
	hipError_t retval;
} args_hipMemSetAccess_t;

#define GET_ARGS_VALUE_hipMemSetAccess(activity) { \
	args_hipMemSetAccess_t* args = (args_hipMemSetAccess_t*) activity->args; \
	args->ptr = (void *) ptr; \
	args->size = (size_t) size; \
	args->desc = (hipMemAccessDesc *) desc; \
	args->count = (size_t) count; \
};

#define GET_PTRS_VALUE_hipMemSetAccess(args) { \
	args_hipMemSetAccess_t* pargs = (args_hipMemSetAccess_t*) args; \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitValue32` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitValue32` function call.
 *
 * @struct args_hipStreamWaitValue32_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitValue32 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint32_t value (unsigned int)
 *			unsigned int flags (unsigned int)
 *			uint32_t mask (unsigned int)
 *	)
 */
#if HAVE_hipStreamWaitValue32
typedef struct {
	hipStream_t stream;
	void * ptr;
	uint32_t value;
	unsigned int flags;
	uint32_t mask;
	hipError_t retval;
} args_hipStreamWaitValue32_t;

#define GET_ARGS_VALUE_hipStreamWaitValue32(activity) { \
	args_hipStreamWaitValue32_t* args = (args_hipStreamWaitValue32_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->ptr = (void *) ptr; \
	args->value = (uint32_t) value; \
	args->flags = (unsigned int) flags; \
	args->mask = (uint32_t) mask; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipApiName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipApiName` function call.
 *
 * @struct args_hipApiName_t
 *
 * @note 
 *	const char *
 *	hipApiName (
 *			uint32_t id (unsigned int)
 *	)
 */
#if HAVE_hipApiName
typedef struct {
	uint32_t id;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
} args_hipApiName_t;

#define GET_ARGS_VALUE_hipApiName(activity) { \
	args_hipApiName_t* args = (args_hipApiName_t*) activity->args; \
	args->id = (uint32_t) id; \
};

#define GET_PTRS_RET_VALUE_hipApiName(args) { \
	args_hipApiName_t* pargs = (args_hipApiName_t*) args; \
	if (pargs->retval != NULL) { \
		strncpy(pargs->retval__ref.val, pargs->retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphicsSubResourceGetMappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsSubResourceGetMappedArray` function call.
 *
 * @struct args_hipGraphicsSubResourceGetMappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsSubResourceGetMappedArray (
 *			hipArray_t * array (struct hipArray **)
 *			hipGraphicsResource_t resource (struct _hipGraphicsResource*)
 *			unsigned int arrayIndex (unsigned int)
 *			unsigned int mipLevel (unsigned int)
 *	)
 */
#if HAVE_hipGraphicsSubResourceGetMappedArray
typedef struct {
	hipArray_t * array;
	struct {
		hipArray_t val;
	} array__ref;
	hipGraphicsResource_t resource;
	unsigned int arrayIndex;
	unsigned int mipLevel;
	hipError_t retval;
} args_hipGraphicsSubResourceGetMappedArray_t;

#define GET_ARGS_VALUE_hipGraphicsSubResourceGetMappedArray(activity) { \
	args_hipGraphicsSubResourceGetMappedArray_t* args = (args_hipGraphicsSubResourceGetMappedArray_t*) activity->args; \
	args->array = (hipArray_t *) array; \
	args->resource = (hipGraphicsResource_t) resource; \
	args->arrayIndex = (unsigned int) arrayIndex; \
	args->mipLevel = (unsigned int) mipLevel; \
};

#define GET_PTRS_VALUE_hipGraphicsSubResourceGetMappedArray(args) { \
	args_hipGraphicsSubResourceGetMappedArray_t* pargs = (args_hipGraphicsSubResourceGetMappedArray_t*) args; \
	if (pargs->array != NULL) { \
		pargs->array__ref.val = *pargs->array; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArrayAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArrayAsync` function call.
 *
 * @struct args_hipMemcpy2DToArrayAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArrayAsync (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy2DToArrayAsync
typedef struct {
	hipArray_t dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy2DToArrayAsync_t;

#define GET_ARGS_VALUE_hipMemcpy2DToArrayAsync(activity) { \
	args_hipMemcpy2DToArrayAsync_t* args = (args_hipMemcpy2DToArrayAsync_t*) activity->args; \
	args->dst = (hipArray_t) dst; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphDestroy` function call.
 *
 * @struct args_hipGraphDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipGraphDestroy (
 *			hipGraph_t graph (struct ihipGraph *)
 *	)
 */
#if HAVE_hipGraphDestroy
typedef struct {
	hipGraph_t graph;
	hipError_t retval;
} args_hipGraphDestroy_t;

#define GET_ARGS_VALUE_hipGraphDestroy(activity) { \
	args_hipGraphDestroy_t* args = (args_hipGraphDestroy_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetBorderColor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetBorderColor` function call.
 *
 * @struct args_hipTexRefGetBorderColor_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetBorderColor (
 *			float * pBorderColor (float *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetBorderColor
typedef struct {
	float * pBorderColor;
	struct {
		float val;
	} pBorderColor__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetBorderColor_t;

#define GET_ARGS_VALUE_hipTexRefGetBorderColor(activity) { \
	args_hipTexRefGetBorderColor_t* args = (args_hipTexRefGetBorderColor_t*) activity->args; \
	args->pBorderColor = (float *) pBorderColor; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetBorderColor(args) { \
	args_hipTexRefGetBorderColor_t* pargs = (args_hipTexRefGetBorderColor_t*) args; \
	if (pargs->pBorderColor != NULL) { \
		pargs->pBorderColor__ref.val = *pargs->pBorderColor; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNode1D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNode1D` function call.
 *
 * @struct args_hipGraphAddMemcpyNode1D_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNode1D (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphAddMemcpyNode1D
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	void * dst;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphAddMemcpyNode1D_t;

#define GET_ARGS_VALUE_hipGraphAddMemcpyNode1D(activity) { \
	args_hipGraphAddMemcpyNode1D_t* args = (args_hipGraphAddMemcpyNode1D_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->count = (size_t) count; \
	args->kind = (hipMemcpyKind) kind; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNode1D(args) { \
	args_hipGraphAddMemcpyNode1D_t* pargs = (args_hipGraphAddMemcpyNode1D_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphGetNodes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphGetNodes` function call.
 *
 * @struct args_hipGraphGetNodes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphGetNodes (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * nodes (struct hipGraphNode **)
 *			size_t * numNodes (unsigned long*)
 *	)
 */
#if HAVE_hipGraphGetNodes
typedef struct {
	hipGraph_t graph;
	hipGraphNode_t * nodes;
	struct {
		hipGraphNode_t val;
	} nodes__ref;
	size_t * numNodes;
	struct {
		size_t val;
	} numNodes__ref;
	hipError_t retval;
} args_hipGraphGetNodes_t;

#define GET_ARGS_VALUE_hipGraphGetNodes(activity) { \
	args_hipGraphGetNodes_t* args = (args_hipGraphGetNodes_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->nodes = (hipGraphNode_t *) nodes; \
	args->numNodes = (size_t *) numNodes; \
};

#define GET_PTRS_VALUE_hipGraphGetNodes(args) { \
	args_hipGraphGetNodes_t* pargs = (args_hipGraphGetNodes_t*) args; \
	if (pargs->nodes != NULL) { \
		pargs->nodes__ref.val = *pargs->nodes; \
	} \
	if (pargs->numNodes != NULL) { \
		pargs->numNodes__ref.val = *pargs->numNodes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetFlags_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetFlags_spt` function call.
 *
 * @struct args_hipStreamGetFlags_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetFlags_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			unsigned int * flags (unsigned int *)
 *	)
 */
#if HAVE_hipStreamGetFlags_spt
typedef struct {
	hipStream_t stream;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
} args_hipStreamGetFlags_spt_t;

#define GET_ARGS_VALUE_hipStreamGetFlags_spt(activity) { \
	args_hipStreamGetFlags_spt_t* args = (args_hipStreamGetFlags_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipStreamGetFlags_spt(args) { \
	args_hipStreamGetFlags_spt_t* pargs = (args_hipStreamGetFlags_spt_t*) args; \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetAddress2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetAddress2D` function call.
 *
 * @struct args_hipTexRefSetAddress2D_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetAddress2D (
 *			textureReference * texRef (struct textureReference*)
 *			const HIP_ARRAY_DESCRIPTOR * desc (const struct HIP_ARRAY_DESCRIPTOR *)
 *			hipDeviceptr_t dptr (void *)
 *			size_t Pitch (unsigned long)
 *	)
 */
#if HAVE_hipTexRefSetAddress2D
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	HIP_ARRAY_DESCRIPTOR * desc;
	struct {
		HIP_ARRAY_DESCRIPTOR val;
	} desc__ref;
	void * dptr;
	size_t Pitch;
	hipError_t retval;
} args_hipTexRefSetAddress2D_t;

#define GET_ARGS_VALUE_hipTexRefSetAddress2D(activity) { \
	args_hipTexRefSetAddress2D_t* args = (args_hipTexRefSetAddress2D_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->desc = (HIP_ARRAY_DESCRIPTOR *) desc; \
	args->dptr = (void *) dptr; \
	args->Pitch = (size_t) Pitch; \
};

#define GET_PTRS_VALUE_hipTexRefSetAddress2D(args) { \
	args_hipTexRefSetAddress2D_t* pargs = (args_hipTexRefSetAddress2D_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetPriority` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetPriority` function call.
 *
 * @struct args_hipStreamGetPriority_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetPriority (
 *			hipStream_t stream (struct ihipStream_t *)
 *			int * priority (int *)
 *	)
 */
#if HAVE_hipStreamGetPriority
typedef struct {
	hipStream_t stream;
	int * priority;
	struct {
		int val;
	} priority__ref;
	hipError_t retval;
} args_hipStreamGetPriority_t;

#define GET_ARGS_VALUE_hipStreamGetPriority(activity) { \
	args_hipStreamGetPriority_t* args = (args_hipStreamGetPriority_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->priority = (int *) priority; \
};

#define GET_PTRS_VALUE_hipStreamGetPriority(args) { \
	args_hipStreamGetPriority_t* pargs = (args_hipStreamGetPriority_t*) args; \
	if (pargs->priority != NULL) { \
		pargs->priority__ref.val = *pargs->priority; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamCreate` function call.
 *
 * @struct args_hipStreamCreate_t
 *
 * @note 
 *	hipError_t
 *	hipStreamCreate (
 *			hipStream_t * stream (struct ihipStream_t **)
 *	)
 */
#if HAVE_hipStreamCreate
typedef struct {
	hipStream_t * stream;
	struct {
		hipStream_t val;
	} stream__ref;
	hipError_t retval;
} args_hipStreamCreate_t;

#define GET_ARGS_VALUE_hipStreamCreate(activity) { \
	args_hipStreamCreate_t* args = (args_hipStreamCreate_t*) activity->args; \
	args->stream = (hipStream_t *) stream; \
};

#define GET_PTRS_VALUE_hipStreamCreate(args) { \
	args_hipStreamCreate_t* pargs = (args_hipStreamCreate_t*) args; \
	if (pargs->stream != NULL) { \
		pargs->stream__ref.val = *pargs->stream; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbol` function call.
 *
 * @struct args_hipMemcpyFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbol (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpyFromSymbol
typedef struct {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpyFromSymbol_t;

#define GET_ARGS_VALUE_hipMemcpyFromSymbol(activity) { \
	args_hipMemcpyFromSymbol_t* args = (args_hipMemcpyFromSymbol_t*) activity->args; \
	args->dst = (void *) dst; \
	args->symbol = (void *) symbol; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetEnabled` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetEnabled` function call.
 *
 * @struct args_hipGraphNodeGetEnabled_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetEnabled (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			unsigned int * isEnabled (unsigned int *)
 *	)
 */
#if HAVE_hipGraphNodeGetEnabled
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t hNode;
	unsigned int * isEnabled;
	struct {
		unsigned int val;
	} isEnabled__ref;
	hipError_t retval;
} args_hipGraphNodeGetEnabled_t;

#define GET_ARGS_VALUE_hipGraphNodeGetEnabled(activity) { \
	args_hipGraphNodeGetEnabled_t* args = (args_hipGraphNodeGetEnabled_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->isEnabled = (unsigned int *) isEnabled; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetEnabled(args) { \
	args_hipGraphNodeGetEnabled_t* pargs = (args_hipGraphNodeGetEnabled_t*) args; \
	if (pargs->isEnabled != NULL) { \
		pargs->isEnabled__ref.val = *pargs->isEnabled; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCreateChannelDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCreateChannelDesc` function call.
 *
 * @struct args_hipCreateChannelDesc_t
 *
 * @note 
 *	struct hipChannelFormatDesc
 *	hipCreateChannelDesc (
 *			int x (int)
 *			int y (int)
 *			int z (int)
 *			int w (int)
 *			enum hipChannelFormatKind f (enum hipChannelFormatKind)
 *	)
 */
#if HAVE_hipCreateChannelDesc
typedef struct {
	int x;
	int y;
	int z;
	int w;
	enum hipChannelFormatKind f;
	struct hipChannelFormatDesc retval;
} args_hipCreateChannelDesc_t;

#define GET_ARGS_VALUE_hipCreateChannelDesc(activity) { \
	args_hipCreateChannelDesc_t* args = (args_hipCreateChannelDesc_t*) activity->args; \
	args->x = (int) x; \
	args->y = (int) y; \
	args->z = (int) z; \
	args->w = (int) w; \
	args->f = (enum hipChannelFormatKind) f; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFreeMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeMipmappedArray` function call.
 *
 * @struct args_hipFreeMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipFreeMipmappedArray (
 *			hipMipmappedArray_t mipmappedArray (struct hipMipmappedArray *)
 *	)
 */
#if HAVE_hipFreeMipmappedArray
typedef struct {
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	hipError_t retval;
} args_hipFreeMipmappedArray_t;

#define GET_ARGS_VALUE_hipFreeMipmappedArray(activity) { \
	args_hipFreeMipmappedArray_t* args = (args_hipFreeMipmappedArray_t*) activity->args; \
	args->mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
};

#define GET_PTRS_VALUE_hipFreeMipmappedArray(args) { \
	args_hipFreeMipmappedArray_t* pargs = (args_hipFreeMipmappedArray_t*) args; \
	if (pargs->mipmappedArray != NULL) { \
		pargs->mipmappedArray__ref.val = *pargs->mipmappedArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetTextureAlignmentOffset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureAlignmentOffset` function call.
 *
 * @struct args_hipGetTextureAlignmentOffset_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureAlignmentOffset (
 *			size_t * offset (unsigned long*)
 *			const textureReference * texref (const struct textureReference *)
 *	)
 */
#if HAVE_hipGetTextureAlignmentOffset
typedef struct {
	size_t * offset;
	struct {
		size_t val;
	} offset__ref;
	textureReference * texref;
	struct {
		textureReference val;
	} texref__ref;
	hipError_t retval;
} args_hipGetTextureAlignmentOffset_t;

#define GET_ARGS_VALUE_hipGetTextureAlignmentOffset(activity) { \
	args_hipGetTextureAlignmentOffset_t* args = (args_hipGetTextureAlignmentOffset_t*) activity->args; \
	args->offset = (size_t *) offset; \
	args->texref = (textureReference *) texref; \
};

#define GET_PTRS_VALUE_hipGetTextureAlignmentOffset(args) { \
	args_hipGetTextureAlignmentOffset_t* pargs = (args_hipGetTextureAlignmentOffset_t*) args; \
	if (pargs->offset != NULL) { \
		pargs->offset__ref.val = *pargs->offset; \
	} \
	if (pargs->texref != NULL) { \
		pargs->texref__ref.val = *pargs->texref; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddEventRecordNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddEventRecordNode` function call.
 *
 * @struct args_hipGraphAddEventRecordNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddEventRecordNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipGraphAddEventRecordNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipEvent_t event;
	hipError_t retval;
} args_hipGraphAddEventRecordNode_t;

#define GET_ARGS_VALUE_hipGraphAddEventRecordNode(activity) { \
	args_hipGraphAddEventRecordNode_t* args = (args_hipGraphAddEventRecordNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->event = (hipEvent_t) event; \
};

#define GET_PTRS_VALUE_hipGraphAddEventRecordNode(args) { \
	args_hipGraphAddEventRecordNode_t* pargs = (args_hipGraphAddEventRecordNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeFindInClone` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeFindInClone` function call.
 *
 * @struct args_hipGraphNodeFindInClone_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeFindInClone (
 *			hipGraphNode_t * pNode (struct hipGraphNode **)
 *			hipGraphNode_t originalNode (struct hipGraphNode *)
 *			hipGraph_t clonedGraph (struct ihipGraph *)
 *	)
 */
#if HAVE_hipGraphNodeFindInClone
typedef struct {
	hipGraphNode_t * pNode;
	struct {
		hipGraphNode_t val;
	} pNode__ref;
	hipGraphNode_t originalNode;
	hipGraph_t clonedGraph;
	hipError_t retval;
} args_hipGraphNodeFindInClone_t;

#define GET_ARGS_VALUE_hipGraphNodeFindInClone(activity) { \
	args_hipGraphNodeFindInClone_t* args = (args_hipGraphNodeFindInClone_t*) activity->args; \
	args->pNode = (hipGraphNode_t *) pNode; \
	args->originalNode = (hipGraphNode_t) originalNode; \
	args->clonedGraph = (hipGraph_t) clonedGraph; \
};

#define GET_PTRS_VALUE_hipGraphNodeFindInClone(args) { \
	args_hipGraphNodeFindInClone_t* pargs = (args_hipGraphNodeFindInClone_t*) args; \
	if (pargs->pNode != NULL) { \
		pargs->pNode__ref.val = *pargs->pNode; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbol_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbol_spt` function call.
 *
 * @struct args_hipMemcpyFromSymbol_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbol_spt (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpyFromSymbol_spt
typedef struct {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpyFromSymbol_spt_t;

#define GET_ARGS_VALUE_hipMemcpyFromSymbol_spt(activity) { \
	args_hipMemcpyFromSymbol_spt_t* args = (args_hipMemcpyFromSymbol_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->symbol = (void *) symbol; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset3DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3DAsync_spt` function call.
 *
 * @struct args_hipMemset3DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3DAsync_spt (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemset3DAsync_spt
typedef struct {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemset3DAsync_spt_t;

#define GET_ARGS_VALUE_hipMemset3DAsync_spt(activity) { \
	args_hipMemset3DAsync_spt_t* args = (args_hipMemset3DAsync_spt_t*) activity->args; \
	args->pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	args->value = (int) value; \
	args->extent = (hipExtent) extent; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetD16Async` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD16Async` function call.
 *
 * @struct args_hipMemsetD16Async_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD16Async (
 *			hipDeviceptr_t dest (void *)
 *			unsigned short value (unsigned short)
 *			size_t count (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemsetD16Async
typedef struct {
	void * dest;
	unsigned short value;
	size_t count;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemsetD16Async_t;

#define GET_ARGS_VALUE_hipMemsetD16Async(activity) { \
	args_hipMemsetD16Async_t* args = (args_hipMemsetD16Async_t*) activity->args; \
	args->dest = (void *) dest; \
	args->value = (unsigned short) value; \
	args->count = (size_t) count; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetCacheConfig` function call.
 *
 * @struct args_hipDeviceGetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetCacheConfig (
 *			hipFuncCache_t * cacheConfig (enum hipFuncCache_t*)
 *	)
 */
#if HAVE_hipDeviceGetCacheConfig
typedef struct {
	hipFuncCache_t * cacheConfig;
	struct {
		hipFuncCache_t val;
	} cacheConfig__ref;
	hipError_t retval;
} args_hipDeviceGetCacheConfig_t;

#define GET_ARGS_VALUE_hipDeviceGetCacheConfig(activity) { \
	args_hipDeviceGetCacheConfig_t* args = (args_hipDeviceGetCacheConfig_t*) activity->args; \
	args->cacheConfig = (hipFuncCache_t *) cacheConfig; \
};

#define GET_PTRS_VALUE_hipDeviceGetCacheConfig(args) { \
	args_hipDeviceGetCacheConfig_t* pargs = (args_hipDeviceGetCacheConfig_t*) args; \
	if (pargs->cacheConfig != NULL) { \
		pargs->cacheConfig__ref.val = *pargs->cacheConfig; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemCreate` function call.
 *
 * @struct args_hipMemCreate_t
 *
 * @note 
 *	hipError_t
 *	hipMemCreate (
 *			hipMemGenericAllocationHandle_t * handle (struct ihipMemGenericAllocationHandle **)
 *			size_t size (unsigned long)
 *			const hipMemAllocationProp * prop (const struct hipMemAllocationProp *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
#if HAVE_hipMemCreate
typedef struct {
	hipMemGenericAllocationHandle_t * handle;
	struct {
		hipMemGenericAllocationHandle_t val;
	} handle__ref;
	size_t size;
	hipMemAllocationProp * prop;
	struct {
		hipMemAllocationProp val;
	} prop__ref;
	unsigned long long flags;
	hipError_t retval;
} args_hipMemCreate_t;

#define GET_ARGS_VALUE_hipMemCreate(activity) { \
	args_hipMemCreate_t* args = (args_hipMemCreate_t*) activity->args; \
	args->handle = (hipMemGenericAllocationHandle_t *) handle; \
	args->size = (size_t) size; \
	args->prop = (hipMemAllocationProp *) prop; \
	args->flags = (unsigned long long) flags; \
};

#define GET_PTRS_VALUE_hipMemCreate(args) { \
	args_hipMemCreate_t* pargs = (args_hipMemCreate_t*) args; \
	if (pargs->handle != NULL) { \
		pargs->handle__ref.val = *pargs->handle; \
	} \
	if (pargs->prop != NULL) { \
		pargs->prop__ref.val = *pargs->prop; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresWaitNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresWaitNodeGetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresWaitNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresWaitNodeGetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipExternalSemaphoreWaitNodeParams * params_out (struct hipExternalSemaphoreWaitNodeParams*)
 *	)
 */
#if HAVE_hipGraphExternalSemaphoresWaitNodeGetParams
typedef struct {
	hipGraphNode_t hNode;
	hipExternalSemaphoreWaitNodeParams * params_out;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} params_out__ref;
	hipError_t retval;
} args_hipGraphExternalSemaphoresWaitNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresWaitNodeGetParams(activity) { \
	args_hipGraphExternalSemaphoresWaitNodeGetParams_t* args = (args_hipGraphExternalSemaphoresWaitNodeGetParams_t*) activity->args; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->params_out = (hipExternalSemaphoreWaitNodeParams *) params_out; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeGetParams(args) { \
	args_hipGraphExternalSemaphoresWaitNodeGetParams_t* pargs = (args_hipGraphExternalSemaphoresWaitNodeGetParams_t*) args; \
	if (pargs->params_out != NULL) { \
		pargs->params_out__ref.val = *pargs->params_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamEndCapture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamEndCapture` function call.
 *
 * @struct args_hipStreamEndCapture_t
 *
 * @note 
 *	hipError_t
 *	hipStreamEndCapture (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *	)
 */
#if HAVE_hipStreamEndCapture
typedef struct {
	hipStream_t stream;
	hipGraph_t * pGraph;
	struct {
		hipGraph_t val;
	} pGraph__ref;
	hipError_t retval;
} args_hipStreamEndCapture_t;

#define GET_ARGS_VALUE_hipStreamEndCapture(activity) { \
	args_hipStreamEndCapture_t* args = (args_hipStreamEndCapture_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->pGraph = (hipGraph_t *) pGraph; \
};

#define GET_PTRS_VALUE_hipStreamEndCapture(args) { \
	args_hipStreamEndCapture_t* pargs = (args_hipStreamEndCapture_t*) args; \
	if (pargs->pGraph != NULL) { \
		pargs->pGraph__ref.val = *pargs->pGraph; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbolAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbolAsync_spt` function call.
 *
 * @struct args_hipMemcpyFromSymbolAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbolAsync_spt (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyFromSymbolAsync_spt
typedef struct {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyFromSymbolAsync_spt_t;

#define GET_ARGS_VALUE_hipMemcpyFromSymbolAsync_spt(activity) { \
	args_hipMemcpyFromSymbolAsync_spt_t* args = (args_hipMemcpyFromSymbolAsync_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->symbol = (void *) symbol; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoA` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoA` function call.
 *
 * @struct args_hipMemcpyHtoA_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoA (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			const void * srcHost (const void *)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyHtoA
typedef struct {
	hipArray_t dstArray;
	size_t dstOffset;
	void * srcHost;
	size_t count;
	hipError_t retval;
} args_hipMemcpyHtoA_t;

#define GET_ARGS_VALUE_hipMemcpyHtoA(activity) { \
	args_hipMemcpyHtoA_t* args = (args_hipMemcpyHtoA_t*) activity->args; \
	args->dstArray = (hipArray_t) dstArray; \
	args->dstOffset = (size_t) dstOffset; \
	args->srcHost = (void *) srcHost; \
	args->count = (size_t) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecHostNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecHostNodeSetParams` function call.
 *
 * @struct args_hipGraphExecHostNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecHostNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipHostNodeParams * pNodeParams (const struct hipHostNodeParams *)
 *	)
 */
#if HAVE_hipGraphExecHostNodeSetParams
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphExecHostNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExecHostNodeSetParams(activity) { \
	args_hipGraphExecHostNodeSetParams_t* args = (args_hipGraphExecHostNodeSetParams_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecHostNodeSetParams(args) { \
	args_hipGraphExecHostNodeSetParams_t* pargs = (args_hipGraphExecHostNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMalloc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMalloc` function call.
 *
 * @struct args_hipMalloc_t
 *
 * @note 
 *	hipError_t
 *	hipMalloc (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *	)
 */
#if HAVE_hipMalloc
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	hipError_t retval;
} args_hipMalloc_t;

#define GET_ARGS_VALUE_hipMalloc(activity) { \
	args_hipMalloc_t* args = (args_hipMalloc_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipMalloc(args) { \
	args_hipMalloc_t* pargs = (args_hipMalloc_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMalloc3DArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMalloc3DArray` function call.
 *
 * @struct args_hipMalloc3DArray_t
 *
 * @note 
 *	hipError_t
 *	hipMalloc3DArray (
 *			hipArray_t * array (struct hipArray **)
 *			const struct hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			struct hipExtent extent (struct hipExtent)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipMalloc3DArray
typedef struct {
	hipArray_t * array;
	struct {
		hipArray_t val;
	} array__ref;
	struct hipChannelFormatDesc * desc;
	struct {
		struct hipChannelFormatDesc val;
	} desc__ref;
	struct hipExtent extent;
	unsigned int flags;
	hipError_t retval;
} args_hipMalloc3DArray_t;

#define GET_ARGS_VALUE_hipMalloc3DArray(activity) { \
	args_hipMalloc3DArray_t* args = (args_hipMalloc3DArray_t*) activity->args; \
	args->array = (hipArray_t *) array; \
	args->desc = (struct hipChannelFormatDesc *) desc; \
	args->extent = (struct hipExtent) extent; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMalloc3DArray(args) { \
	args_hipMalloc3DArray_t* pargs = (args_hipMalloc3DArray_t*) args; \
	if (pargs->array != NULL) { \
		pargs->array__ref.val = *pargs->array; \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecKernelNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecKernelNodeSetParams` function call.
 *
 * @struct args_hipGraphExecKernelNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecKernelNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipKernelNodeParams * pNodeParams (const struct hipKernelNodeParams *)
 *	)
 */
#if HAVE_hipGraphExecKernelNodeSetParams
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphExecKernelNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExecKernelNodeSetParams(activity) { \
	args_hipGraphExecKernelNodeSetParams_t* args = (args_hipGraphExecKernelNodeSetParams_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecKernelNodeSetParams(args) { \
	args_hipGraphExecKernelNodeSetParams_t* pargs = (args_hipGraphExecKernelNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetTextureObjectResourceDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureObjectResourceDesc` function call.
 *
 * @struct args_hipGetTextureObjectResourceDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureObjectResourceDesc (
 *			hipResourceDesc * pResDesc (struct hipResourceDesc*)
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipGetTextureObjectResourceDesc
typedef struct {
	hipResourceDesc * pResDesc;
	struct {
		hipResourceDesc val;
	} pResDesc__ref;
	hipTextureObject_t textureObject;
	hipError_t retval;
} args_hipGetTextureObjectResourceDesc_t;

#define GET_ARGS_VALUE_hipGetTextureObjectResourceDesc(activity) { \
	args_hipGetTextureObjectResourceDesc_t* args = (args_hipGetTextureObjectResourceDesc_t*) activity->args; \
	args->pResDesc = (hipResourceDesc *) pResDesc; \
	args->textureObject = (hipTextureObject_t) textureObject; \
};

#define GET_PTRS_VALUE_hipGetTextureObjectResourceDesc(args) { \
	args_hipGetTextureObjectResourceDesc_t* pargs = (args_hipGetTextureObjectResourceDesc_t*) args; \
	if (pargs->pResDesc != NULL) { \
		pargs->pResDesc__ref.val = *pargs->pResDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `__hipPushCallConfiguration` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `__hipPushCallConfiguration` function call.
 *
 * @struct args___hipPushCallConfiguration_t
 *
 * @note 
 *	hipError_t
 *	__hipPushCallConfiguration (
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDim (struct dim3)
 *			size_t sharedMem (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE___hipPushCallConfiguration
typedef struct {
	dim3 gridDim;
	dim3 blockDim;
	size_t sharedMem;
	hipStream_t stream;
	hipError_t retval;
} args___hipPushCallConfiguration_t;

#define GET_ARGS_VALUE___hipPushCallConfiguration(activity) { \
	args___hipPushCallConfiguration_t* args = (args___hipPushCallConfiguration_t*) activity->args; \
	args->gridDim = (dim3) gridDim; \
	args->blockDim = (dim3) blockDim; \
	args->sharedMem = (size_t) sharedMem; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3DAsync_spt` function call.
 *
 * @struct args_hipMemcpy3DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3DAsync_spt (
 *			const hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy3DAsync_spt
typedef struct {
	hipMemcpy3DParms * p;
	struct {
		hipMemcpy3DParms val;
	} p__ref;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy3DAsync_spt_t;

#define GET_ARGS_VALUE_hipMemcpy3DAsync_spt(activity) { \
	args_hipMemcpy3DAsync_spt_t* args = (args_hipMemcpy3DAsync_spt_t*) activity->args; \
	args->p = (hipMemcpy3DParms *) p; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipMemcpy3DAsync_spt(args) { \
	args_hipMemcpy3DAsync_spt_t* pargs = (args_hipMemcpy3DAsync_spt_t*) args; \
	if (pargs->p != NULL) { \
		pargs->p__ref.val = *pargs->p; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetD8Async` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD8Async` function call.
 *
 * @struct args_hipMemsetD8Async_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD8Async (
 *			hipDeviceptr_t dest (void *)
 *			unsigned char value (unsigned char)
 *			size_t count (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemsetD8Async
typedef struct {
	void * dest;
	unsigned char value;
	size_t count;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemsetD8Async_t;

#define GET_ARGS_VALUE_hipMemsetD8Async(activity) { \
	args_hipMemsetD8Async_t* args = (args_hipMemsetD8Async_t*) activity->args; \
	args->dest = (void *) dest; \
	args->value = (unsigned char) value; \
	args->count = (size_t) count; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamAddCallback` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamAddCallback` function call.
 *
 * @struct args_hipStreamAddCallback_t
 *
 * @note 
 *	hipError_t
 *	hipStreamAddCallback (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCallback_t callback (void (*)(struct ihipStream_t *, enum hipError_t, void *))
 *			void * userData (void *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamAddCallback
typedef struct {
	hipStream_t stream;
	hipStreamCallback_t callback;
	void * userData;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamAddCallback_t;

#define GET_ARGS_VALUE_hipStreamAddCallback(activity) { \
	args_hipStreamAddCallback_t* args = (args_hipStreamAddCallback_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->callback = (hipStreamCallback_t) callback; \
	args->userData = (void *) userData; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolImportPointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolImportPointer` function call.
 *
 * @struct args_hipMemPoolImportPointer_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolImportPointer (
 *			void ** dev_ptr (void **)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemPoolPtrExportData * export_data (struct hipMemPoolPtrExportData*)
 *	)
 */
#if HAVE_hipMemPoolImportPointer
typedef struct {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	hipMemPool_t mem_pool;
	hipMemPoolPtrExportData * export_data;
	struct {
		hipMemPoolPtrExportData val;
	} export_data__ref;
	hipError_t retval;
} args_hipMemPoolImportPointer_t;

#define GET_ARGS_VALUE_hipMemPoolImportPointer(activity) { \
	args_hipMemPoolImportPointer_t* args = (args_hipMemPoolImportPointer_t*) activity->args; \
	args->dev_ptr = (void **) dev_ptr; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->export_data = (hipMemPoolPtrExportData *) export_data; \
};

#define GET_PTRS_VALUE_hipMemPoolImportPointer(args) { \
	args_hipMemPoolImportPointer_t* pargs = (args_hipMemPoolImportPointer_t*) args; \
	if (pargs->dev_ptr != NULL) { \
		pargs->dev_ptr__ref.ptr1 = *pargs->dev_ptr; \
	} \
	if (pargs->export_data != NULL) { \
		pargs->export_data__ref.val = *pargs->export_data; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFuncGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncGetAttributes` function call.
 *
 * @struct args_hipFuncGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipFuncGetAttributes (
 *			struct hipFuncAttributes * attr (struct hipFuncAttributes *)
 *			const void * func (const void *)
 *	)
 */
#if HAVE_hipFuncGetAttributes
typedef struct {
	struct hipFuncAttributes * attr;
	struct {
		struct hipFuncAttributes val;
	} attr__ref;
	void * func;
	hipError_t retval;
} args_hipFuncGetAttributes_t;

#define GET_ARGS_VALUE_hipFuncGetAttributes(activity) { \
	args_hipFuncGetAttributes_t* args = (args_hipFuncGetAttributes_t*) activity->args; \
	args->attr = (struct hipFuncAttributes *) attr; \
	args->func = (void *) func; \
};

#define GET_PTRS_VALUE_hipFuncGetAttributes(args) { \
	args_hipFuncGetAttributes_t* pargs = (args_hipFuncGetAttributes_t*) args; \
	if (pargs->attr != NULL) { \
		pargs->attr__ref.val = *pargs->attr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxGetCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetCurrent` function call.
 *
 * @struct args_hipCtxGetCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetCurrent (
 *			hipCtx_t * ctx (struct ihipCtx_t **)
 *	)
 */
#if HAVE_hipCtxGetCurrent
typedef struct {
	hipCtx_t * ctx;
	struct {
		hipCtx_t val;
	} ctx__ref;
	hipError_t retval;
} args_hipCtxGetCurrent_t;

#define GET_ARGS_VALUE_hipCtxGetCurrent(activity) { \
	args_hipCtxGetCurrent_t* args = (args_hipCtxGetCurrent_t*) activity->args; \
	args->ctx = (hipCtx_t *) ctx; \
};

#define GET_PTRS_VALUE_hipCtxGetCurrent(args) { \
	args_hipCtxGetCurrent_t* pargs = (args_hipCtxGetCurrent_t*) args; \
	if (pargs->ctx != NULL) { \
		pargs->ctx__ref.val = *pargs->ctx; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddChildGraphNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddChildGraphNode` function call.
 *
 * @struct args_hipGraphAddChildGraphNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddChildGraphNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipGraph_t childGraph (struct ihipGraph *)
 *	)
 */
#if HAVE_hipGraphAddChildGraphNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipGraph_t childGraph;
	hipError_t retval;
} args_hipGraphAddChildGraphNode_t;

#define GET_ARGS_VALUE_hipGraphAddChildGraphNode(activity) { \
	args_hipGraphAddChildGraphNode_t* args = (args_hipGraphAddChildGraphNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->childGraph = (hipGraph_t) childGraph; \
};

#define GET_PTRS_VALUE_hipGraphAddChildGraphNode(args) { \
	args_hipGraphAddChildGraphNode_t* pargs = (args_hipGraphAddChildGraphNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventCreate` function call.
 *
 * @struct args_hipEventCreate_t
 *
 * @note 
 *	hipError_t
 *	hipEventCreate (
 *			hipEvent_t * event (struct ihipEvent_t **)
 *	)
 */
#if HAVE_hipEventCreate
typedef struct {
	hipEvent_t * event;
	struct {
		hipEvent_t val;
	} event__ref;
	hipError_t retval;
} args_hipEventCreate_t;

#define GET_ARGS_VALUE_hipEventCreate(activity) { \
	args_hipEventCreate_t* args = (args_hipEventCreate_t*) activity->args; \
	args->event = (hipEvent_t *) event; \
};

#define GET_PTRS_VALUE_hipEventCreate(args) { \
	args_hipEventCreate_t* pargs = (args_hipEventCreate_t*) args; \
	if (pargs->event != NULL) { \
		pargs->event__ref.val = *pargs->event; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipHostGetDevicePointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostGetDevicePointer` function call.
 *
 * @struct args_hipHostGetDevicePointer_t
 *
 * @note 
 *	hipError_t
 *	hipHostGetDevicePointer (
 *			void ** devPtr (void **)
 *			void * hstPtr (void *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipHostGetDevicePointer
typedef struct {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	void * hstPtr;
	unsigned int flags;
	hipError_t retval;
} args_hipHostGetDevicePointer_t;

#define GET_ARGS_VALUE_hipHostGetDevicePointer(activity) { \
	args_hipHostGetDevicePointer_t* args = (args_hipHostGetDevicePointer_t*) activity->args; \
	args->devPtr = (void **) devPtr; \
	args->hstPtr = (void *) hstPtr; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipHostGetDevicePointer(args) { \
	args_hipHostGetDevicePointer_t* pargs = (args_hipHostGetDevicePointer_t*) args; \
	if (pargs->devPtr != NULL) { \
		pargs->devPtr__ref.ptr1 = *pargs->devPtr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventQuery` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventQuery` function call.
 *
 * @struct args_hipEventQuery_t
 *
 * @note 
 *	hipError_t
 *	hipEventQuery (
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipEventQuery
typedef struct {
	hipEvent_t event;
	hipError_t retval;
} args_hipEventQuery_t;

#define GET_ARGS_VALUE_hipEventQuery(activity) { \
	args_hipEventQuery_t* args = (args_hipEventQuery_t*) activity->args; \
	args->event = (hipEvent_t) event; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyPeerAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyPeerAsync` function call.
 *
 * @struct args_hipMemcpyPeerAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyPeerAsync (
 *			void * dst (void *)
 *			int dstDeviceId (int)
 *			const void * src (const void *)
 *			int srcDevice (int)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyPeerAsync
typedef struct {
	void * dst;
	int dstDeviceId;
	void * src;
	int srcDevice;
	size_t sizeBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyPeerAsync_t;

#define GET_ARGS_VALUE_hipMemcpyPeerAsync(activity) { \
	args_hipMemcpyPeerAsync_t* args = (args_hipMemcpyPeerAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dstDeviceId = (int) dstDeviceId; \
	args->src = (void *) src; \
	args->srcDevice = (int) srcDevice; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemMap` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemMap` function call.
 *
 * @struct args_hipMemMap_t
 *
 * @note 
 *	hipError_t
 *	hipMemMap (
 *			void * ptr (void *)
 *			size_t size (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
#if HAVE_hipMemMap
typedef struct {
	void * ptr;
	size_t size;
	size_t offset;
	hipMemGenericAllocationHandle_t handle;
	unsigned long long flags;
	hipError_t retval;
} args_hipMemMap_t;

#define GET_ARGS_VALUE_hipMemMap(activity) { \
	args_hipMemMap_t* args = (args_hipMemMap_t*) activity->args; \
	args->ptr = (void *) ptr; \
	args->size = (size_t) size; \
	args->offset = (size_t) offset; \
	args->handle = (hipMemGenericAllocationHandle_t) handle; \
	args->flags = (unsigned long long) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipBindTextureToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTextureToArray` function call.
 *
 * @struct args_hipBindTextureToArray_t
 *
 * @note 
 *	hipError_t
 *	hipBindTextureToArray (
 *			const textureReference * tex (const struct textureReference *)
 *			hipArray_const_t array (const struct hipArray *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *	)
 */
#if HAVE_hipBindTextureToArray
typedef struct {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	hipArray_const_t array;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	hipError_t retval;
} args_hipBindTextureToArray_t;

#define GET_ARGS_VALUE_hipBindTextureToArray(activity) { \
	args_hipBindTextureToArray_t* args = (args_hipBindTextureToArray_t*) activity->args; \
	args->tex = (textureReference *) tex; \
	args->array = (hipArray_const_t) array; \
	args->desc = (hipChannelFormatDesc *) desc; \
};

#define GET_PTRS_VALUE_hipBindTextureToArray(args) { \
	args_hipBindTextureToArray_t* pargs = (args_hipBindTextureToArray_t*) args; \
	if (pargs->tex != NULL) { \
		pargs->tex__ref.val = *pargs->tex; \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DAsync_spt` function call.
 *
 * @struct args_hipMemcpy2DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DAsync_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy2DAsync_spt
typedef struct {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy2DAsync_spt_t;

#define GET_ARGS_VALUE_hipMemcpy2DAsync_spt(activity) { \
	args_hipMemcpy2DAsync_spt_t* args = (args_hipMemcpy2DAsync_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolSetAttribute` function call.
 *
 * @struct args_hipMemPoolSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolSetAttribute (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemPoolAttr attr (enum hipMemPoolAttr)
 *			void * value (void *)
 *	)
 */
#if HAVE_hipMemPoolSetAttribute
typedef struct {
	hipMemPool_t mem_pool;
	hipMemPoolAttr attr;
	void * value;
	hipError_t retval;
} args_hipMemPoolSetAttribute_t;

#define GET_ARGS_VALUE_hipMemPoolSetAttribute(activity) { \
	args_hipMemPoolSetAttribute_t* args = (args_hipMemPoolSetAttribute_t*) activity->args; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->attr = (hipMemPoolAttr) attr; \
	args->value = (void *) value; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetLastError` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetLastError` function call.
 *
 * @struct args_hipGetLastError_t
 *
 * @note 
 *	hipError_t
 *	hipGetLastError (
 *	)
 */
#if HAVE_hipGetLastError
typedef struct {
	hipError_t retval;
} args_hipGetLastError_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamEndCapture_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamEndCapture_spt` function call.
 *
 * @struct args_hipStreamEndCapture_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamEndCapture_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *	)
 */
#if HAVE_hipStreamEndCapture_spt
typedef struct {
	hipStream_t stream;
	hipGraph_t * pGraph;
	struct {
		hipGraph_t val;
	} pGraph__ref;
	hipError_t retval;
} args_hipStreamEndCapture_spt_t;

#define GET_ARGS_VALUE_hipStreamEndCapture_spt(activity) { \
	args_hipStreamEndCapture_spt_t* args = (args_hipStreamEndCapture_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->pGraph = (hipGraph_t *) pGraph; \
};

#define GET_PTRS_VALUE_hipStreamEndCapture_spt(args) { \
	args_hipStreamEndCapture_spt_t* pargs = (args_hipStreamEndCapture_spt_t*) args; \
	if (pargs->pGraph != NULL) { \
		pargs->pGraph__ref.val = *pargs->pGraph; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxPotentialBlockSize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxPotentialBlockSize` function call.
 *
 * @struct args_hipModuleOccupancyMaxPotentialBlockSize_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxPotentialBlockSize (
 *			int * gridSize (int *)
 *			int * blockSize (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			int blockSizeLimit (int)
 *	)
 */
#if HAVE_hipModuleOccupancyMaxPotentialBlockSize
typedef struct {
	int * gridSize;
	struct {
		int val;
	} gridSize__ref;
	int * blockSize;
	struct {
		int val;
	} blockSize__ref;
	hipFunction_t f;
	size_t dynSharedMemPerBlk;
	int blockSizeLimit;
	hipError_t retval;
} args_hipModuleOccupancyMaxPotentialBlockSize_t;

#define GET_ARGS_VALUE_hipModuleOccupancyMaxPotentialBlockSize(activity) { \
	args_hipModuleOccupancyMaxPotentialBlockSize_t* args = (args_hipModuleOccupancyMaxPotentialBlockSize_t*) activity->args; \
	args->gridSize = (int *) gridSize; \
	args->blockSize = (int *) blockSize; \
	args->f = (hipFunction_t) f; \
	args->dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	args->blockSizeLimit = (int) blockSizeLimit; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSize(args) { \
	args_hipModuleOccupancyMaxPotentialBlockSize_t* pargs = (args_hipModuleOccupancyMaxPotentialBlockSize_t*) args; \
	if (pargs->gridSize != NULL) { \
		pargs->gridSize__ref.val = *pargs->gridSize; \
	} \
	if (pargs->blockSize != NULL) { \
		pargs->blockSize__ref.val = *pargs->blockSize; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipKernelNameRefByPtr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipKernelNameRefByPtr` function call.
 *
 * @struct args_hipKernelNameRefByPtr_t
 *
 * @note 
 *	const char *
 *	hipKernelNameRefByPtr (
 *			const void * hostFunction (const void *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipKernelNameRefByPtr
typedef struct {
	void * hostFunction;
	hipStream_t stream;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
} args_hipKernelNameRefByPtr_t;

#define GET_ARGS_VALUE_hipKernelNameRefByPtr(activity) { \
	args_hipKernelNameRefByPtr_t* args = (args_hipKernelNameRefByPtr_t*) activity->args; \
	args->hostFunction = (void *) hostFunction; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_RET_VALUE_hipKernelNameRefByPtr(args) { \
	args_hipKernelNameRefByPtr_t* pargs = (args_hipKernelNameRefByPtr_t*) args; \
	if (pargs->retval != NULL) { \
		strncpy(pargs->retval__ref.val, pargs->retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDevice` function call.
 *
 * @struct args_hipGetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipGetDevice (
 *			int * deviceId (int *)
 *	)
 */
#if HAVE_hipGetDevice
typedef struct {
	int * deviceId;
	struct {
		int val;
	} deviceId__ref;
	hipError_t retval;
} args_hipGetDevice_t;

#define GET_ARGS_VALUE_hipGetDevice(activity) { \
	args_hipGetDevice_t* args = (args_hipGetDevice_t*) activity->args; \
	args->deviceId = (int *) deviceId; \
};

#define GET_PTRS_VALUE_hipGetDevice(args) { \
	args_hipGetDevice_t* pargs = (args_hipGetDevice_t*) args; \
	if (pargs->deviceId != NULL) { \
		pargs->deviceId__ref.val = *pargs->deviceId; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3D_spt` function call.
 *
 * @struct args_hipMemcpy3D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3D_spt (
 *			const struct hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *	)
 */
#if HAVE_hipMemcpy3D_spt
typedef struct {
	struct hipMemcpy3DParms * p;
	struct {
		struct hipMemcpy3DParms val;
	} p__ref;
	hipError_t retval;
} args_hipMemcpy3D_spt_t;

#define GET_ARGS_VALUE_hipMemcpy3D_spt(activity) { \
	args_hipMemcpy3D_spt_t* args = (args_hipMemcpy3D_spt_t*) activity->args; \
	args->p = (struct hipMemcpy3DParms *) p; \
};

#define GET_PTRS_VALUE_hipMemcpy3D_spt(args) { \
	args_hipMemcpy3D_spt_t* pargs = (args_hipMemcpy3D_spt_t*) args; \
	if (pargs->p != NULL) { \
		pargs->p__ref.val = *pargs->p; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexObjectGetTextureDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectGetTextureDesc` function call.
 *
 * @struct args_hipTexObjectGetTextureDesc_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectGetTextureDesc (
 *			HIP_TEXTURE_DESC * pTexDesc (struct HIP_TEXTURE_DESC_st*)
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipTexObjectGetTextureDesc
typedef struct {
	HIP_TEXTURE_DESC * pTexDesc;
	struct {
		HIP_TEXTURE_DESC val;
	} pTexDesc__ref;
	hipTextureObject_t texObject;
	hipError_t retval;
} args_hipTexObjectGetTextureDesc_t;

#define GET_ARGS_VALUE_hipTexObjectGetTextureDesc(activity) { \
	args_hipTexObjectGetTextureDesc_t* args = (args_hipTexObjectGetTextureDesc_t*) activity->args; \
	args->pTexDesc = (HIP_TEXTURE_DESC *) pTexDesc; \
	args->texObject = (hipTextureObject_t) texObject; \
};

#define GET_PTRS_VALUE_hipTexObjectGetTextureDesc(args) { \
	args_hipTexObjectGetTextureDesc_t* pargs = (args_hipTexObjectGetTextureDesc_t*) args; \
	if (pargs->pTexDesc != NULL) { \
		pargs->pTexDesc__ref.val = *pargs->pTexDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGet` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGet` function call.
 *
 * @struct args_hipDeviceGet_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGet (
 *			hipDevice_t * device (int*)
 *			int ordinal (int)
 *	)
 */
#if HAVE_hipDeviceGet
typedef struct {
	hipDevice_t * device;
	struct {
		hipDevice_t val;
	} device__ref;
	int ordinal;
	hipError_t retval;
} args_hipDeviceGet_t;

#define GET_ARGS_VALUE_hipDeviceGet(activity) { \
	args_hipDeviceGet_t* args = (args_hipDeviceGet_t*) activity->args; \
	args->device = (hipDevice_t *) device; \
	args->ordinal = (int) ordinal; \
};

#define GET_PTRS_VALUE_hipDeviceGet(args) { \
	args_hipDeviceGet_t* pargs = (args_hipDeviceGet_t*) args; \
	if (pargs->device != NULL) { \
		pargs->device__ref.val = *pargs->device; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresSignalNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresSignalNodeSetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresSignalNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresSignalNodeSetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreSignalNodeParams * nodeParams (const struct hipExternalSemaphoreSignalNodeParams *)
 *	)
 */
#if HAVE_hipGraphExternalSemaphoresSignalNodeSetParams
typedef struct {
	hipGraphNode_t hNode;
	hipExternalSemaphoreSignalNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
} args_hipGraphExternalSemaphoresSignalNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresSignalNodeSetParams(activity) { \
	args_hipGraphExternalSemaphoresSignalNodeSetParams_t* args = (args_hipGraphExternalSemaphoresSignalNodeSetParams_t*) activity->args; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->nodeParams = (hipExternalSemaphoreSignalNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeSetParams(args) { \
	args_hipGraphExternalSemaphoresSignalNodeSetParams_t* pargs = (args_hipGraphExternalSemaphoresSignalNodeSetParams_t*) args; \
	if (pargs->nodeParams != NULL) { \
		pargs->nodeParams__ref.val = *pargs->nodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDestroySurfaceObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroySurfaceObject` function call.
 *
 * @struct args_hipDestroySurfaceObject_t
 *
 * @note 
 *	hipError_t
 *	hipDestroySurfaceObject (
 *			hipSurfaceObject_t surfaceObject (struct __hip_surface *)
 *	)
 */
#if HAVE_hipDestroySurfaceObject
typedef struct {
	hipSurfaceObject_t surfaceObject;
	hipError_t retval;
} args_hipDestroySurfaceObject_t;

#define GET_ARGS_VALUE_hipDestroySurfaceObject(activity) { \
	args_hipDestroySurfaceObject_t* args = (args_hipDestroySurfaceObject_t*) activity->args; \
	args->surfaceObject = (hipSurfaceObject_t) surfaceObject; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetDevice` function call.
 *
 * @struct args_hipStreamGetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetDevice (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipDevice_t * device (int*)
 *	)
 */
#if HAVE_hipStreamGetDevice
typedef struct {
	hipStream_t stream;
	hipDevice_t * device;
	struct {
		hipDevice_t val;
	} device__ref;
	hipError_t retval;
} args_hipStreamGetDevice_t;

#define GET_ARGS_VALUE_hipStreamGetDevice(activity) { \
	args_hipStreamGetDevice_t* args = (args_hipStreamGetDevice_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->device = (hipDevice_t *) device; \
};

#define GET_PTRS_VALUE_hipStreamGetDevice(args) { \
	args_hipStreamGetDevice_t* pargs = (args_hipStreamGetDevice_t*) args; \
	if (pargs->device != NULL) { \
		pargs->device__ref.val = *pargs->device; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemAllocPitch` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAllocPitch` function call.
 *
 * @struct args_hipMemAllocPitch_t
 *
 * @note 
 *	hipError_t
 *	hipMemAllocPitch (
 *			hipDeviceptr_t * dptr (void **)
 *			size_t * pitch (unsigned long*)
 *			size_t widthInBytes (unsigned long)
 *			size_t height (unsigned long)
 *			unsigned int elementSizeBytes (unsigned int)
 *	)
 */
#if HAVE_hipMemAllocPitch
typedef struct {
	void ** dptr;
	struct {
		void* ptr1;
	} dptr__ref;
	size_t * pitch;
	struct {
		size_t val;
	} pitch__ref;
	size_t widthInBytes;
	size_t height;
	unsigned int elementSizeBytes;
	hipError_t retval;
} args_hipMemAllocPitch_t;

#define GET_ARGS_VALUE_hipMemAllocPitch(activity) { \
	args_hipMemAllocPitch_t* args = (args_hipMemAllocPitch_t*) activity->args; \
	args->dptr = (void **) dptr; \
	args->pitch = (size_t *) pitch; \
	args->widthInBytes = (size_t) widthInBytes; \
	args->height = (size_t) height; \
	args->elementSizeBytes = (unsigned int) elementSizeBytes; \
};

#define GET_PTRS_VALUE_hipMemAllocPitch(args) { \
	args_hipMemAllocPitch_t* pargs = (args_hipMemAllocPitch_t*) args; \
	if (pargs->dptr != NULL) { \
		pargs->dptr__ref.ptr1 = *pargs->dptr; \
	} \
	if (pargs->pitch != NULL) { \
		pargs->pitch__ref.val = *pargs->pitch; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddNode` function call.
 *
 * @struct args_hipGraphAddNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipGraphNodeParams * nodeParams (struct hipGraphNodeParams*)
 *	)
 */
#if HAVE_hipGraphAddNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipGraphNodeParams * nodeParams;
	struct {
		hipGraphNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
} args_hipGraphAddNode_t;

#define GET_ARGS_VALUE_hipGraphAddNode(activity) { \
	args_hipGraphAddNode_t* args = (args_hipGraphAddNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->nodeParams = (hipGraphNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddNode(args) { \
	args_hipGraphAddNode_t* pargs = (args_hipGraphAddNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->nodeParams != NULL) { \
		pargs->nodeParams__ref.val = *pargs->nodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetSharedMemConfig` function call.
 *
 * @struct args_hipDeviceSetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetSharedMemConfig (
 *			hipSharedMemConfig config (enum hipSharedMemConfig)
 *	)
 */
#if HAVE_hipDeviceSetSharedMemConfig
typedef struct {
	hipSharedMemConfig config;
	hipError_t retval;
} args_hipDeviceSetSharedMemConfig_t;

#define GET_ARGS_VALUE_hipDeviceSetSharedMemConfig(activity) { \
	args_hipDeviceSetSharedMemConfig_t* args = (args_hipDeviceSetSharedMemConfig_t*) activity->args; \
	args->config = (hipSharedMemConfig) config; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipRuntimeGetVersion` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipRuntimeGetVersion` function call.
 *
 * @struct args_hipRuntimeGetVersion_t
 *
 * @note 
 *	hipError_t
 *	hipRuntimeGetVersion (
 *			int * runtimeVersion (int *)
 *	)
 */
#if HAVE_hipRuntimeGetVersion
typedef struct {
	int * runtimeVersion;
	struct {
		int val;
	} runtimeVersion__ref;
	hipError_t retval;
} args_hipRuntimeGetVersion_t;

#define GET_ARGS_VALUE_hipRuntimeGetVersion(activity) { \
	args_hipRuntimeGetVersion_t* args = (args_hipRuntimeGetVersion_t*) activity->args; \
	args->runtimeVersion = (int *) runtimeVersion; \
};

#define GET_PTRS_VALUE_hipRuntimeGetVersion(args) { \
	args_hipRuntimeGetVersion_t* pargs = (args_hipRuntimeGetVersion_t*) args; \
	if (pargs->runtimeVersion != NULL) { \
		pargs->runtimeVersion__ref.val = *pargs->runtimeVersion; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphChildGraphNodeGetGraph` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphChildGraphNodeGetGraph` function call.
 *
 * @struct args_hipGraphChildGraphNodeGetGraph_t
 *
 * @note 
 *	hipError_t
 *	hipGraphChildGraphNodeGetGraph (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraph_t * pGraph (struct ihipGraph **)
 *	)
 */
#if HAVE_hipGraphChildGraphNodeGetGraph
typedef struct {
	hipGraphNode_t node;
	hipGraph_t * pGraph;
	struct {
		hipGraph_t val;
	} pGraph__ref;
	hipError_t retval;
} args_hipGraphChildGraphNodeGetGraph_t;

#define GET_ARGS_VALUE_hipGraphChildGraphNodeGetGraph(activity) { \
	args_hipGraphChildGraphNodeGetGraph_t* args = (args_hipGraphChildGraphNodeGetGraph_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pGraph = (hipGraph_t *) pGraph; \
};

#define GET_PTRS_VALUE_hipGraphChildGraphNodeGetGraph(args) { \
	args_hipGraphChildGraphNodeGetGraph_t* pargs = (args_hipGraphChildGraphNodeGetGraph_t*) args; \
	if (pargs->pGraph != NULL) { \
		pargs->pGraph__ref.val = *pargs->pGraph; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemsetNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemsetNodeSetParams` function call.
 *
 * @struct args_hipGraphExecMemsetNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemsetNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipMemsetParams * pNodeParams (const struct hipMemsetParams *)
 *	)
 */
#if HAVE_hipGraphExecMemsetNodeSetParams
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	hipMemsetParams * pNodeParams;
	struct {
		hipMemsetParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphExecMemsetNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExecMemsetNodeSetParams(activity) { \
	args_hipGraphExecMemsetNodeSetParams_t* args = (args_hipGraphExecMemsetNodeSetParams_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipMemsetParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecMemsetNodeSetParams(args) { \
	args_hipGraphExecMemsetNodeSetParams_t* pargs = (args_hipGraphExecMemsetNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphicsUnregisterResource` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsUnregisterResource` function call.
 *
 * @struct args_hipGraphicsUnregisterResource_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsUnregisterResource (
 *			hipGraphicsResource_t resource (struct _hipGraphicsResource*)
 *	)
 */
#if HAVE_hipGraphicsUnregisterResource
typedef struct {
	hipGraphicsResource_t resource;
	hipError_t retval;
} args_hipGraphicsUnregisterResource_t;

#define GET_ARGS_VALUE_hipGraphicsUnregisterResource(activity) { \
	args_hipGraphicsUnregisterResource_t* args = (args_hipGraphicsUnregisterResource_t*) activity->args; \
	args->resource = (hipGraphicsResource_t) resource; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventElapsedTime` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventElapsedTime` function call.
 *
 * @struct args_hipEventElapsedTime_t
 *
 * @note 
 *	hipError_t
 *	hipEventElapsedTime (
 *			float * ms (float *)
 *			hipEvent_t start (struct ihipEvent_t *)
 *			hipEvent_t stop (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipEventElapsedTime
typedef struct {
	float * ms;
	struct {
		float val;
	} ms__ref;
	hipEvent_t start;
	hipEvent_t stop;
	hipError_t retval;
} args_hipEventElapsedTime_t;

#define GET_ARGS_VALUE_hipEventElapsedTime(activity) { \
	args_hipEventElapsedTime_t* args = (args_hipEventElapsedTime_t*) activity->args; \
	args->ms = (float *) ms; \
	args->start = (hipEvent_t) start; \
	args->stop = (hipEvent_t) stop; \
};

#define GET_PTRS_VALUE_hipEventElapsedTime(args) { \
	args_hipEventElapsedTime_t* pargs = (args_hipEventElapsedTime_t*) args; \
	if (pargs->ms != NULL) { \
		pargs->ms__ref.val = *pargs->ms; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFreeAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeAsync` function call.
 *
 * @struct args_hipFreeAsync_t
 *
 * @note 
 *	hipError_t
 *	hipFreeAsync (
 *			void * dev_ptr (void *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipFreeAsync
typedef struct {
	void * dev_ptr;
	hipStream_t stream;
	hipError_t retval;
} args_hipFreeAsync_t;

#define GET_ARGS_VALUE_hipFreeAsync(activity) { \
	args_hipFreeAsync_t* args = (args_hipFreeAsync_t*) activity->args; \
	args->dev_ptr = (void *) dev_ptr; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamCreateWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamCreateWithFlags` function call.
 *
 * @struct args_hipStreamCreateWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipStreamCreateWithFlags (
 *			hipStream_t * stream (struct ihipStream_t **)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamCreateWithFlags
typedef struct {
	hipStream_t * stream;
	struct {
		hipStream_t val;
	} stream__ref;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamCreateWithFlags_t;

#define GET_ARGS_VALUE_hipStreamCreateWithFlags(activity) { \
	args_hipStreamCreateWithFlags_t* args = (args_hipStreamCreateWithFlags_t*) activity->args; \
	args->stream = (hipStream_t *) stream; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipStreamCreateWithFlags(args) { \
	args_hipStreamCreateWithFlags_t* pargs = (args_hipStreamCreateWithFlags_t*) args; \
	if (pargs->stream != NULL) { \
		pargs->stream__ref.val = *pargs->stream; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetAddress` function call.
 *
 * @struct args_hipTexRefSetAddress_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetAddress (
 *			size_t * ByteOffset (unsigned long*)
 *			textureReference * texRef (struct textureReference*)
 *			hipDeviceptr_t dptr (void *)
 *			size_t bytes (unsigned long)
 *	)
 */
#if HAVE_hipTexRefSetAddress
typedef struct {
	size_t * ByteOffset;
	struct {
		size_t val;
	} ByteOffset__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	void * dptr;
	size_t bytes;
	hipError_t retval;
} args_hipTexRefSetAddress_t;

#define GET_ARGS_VALUE_hipTexRefSetAddress(activity) { \
	args_hipTexRefSetAddress_t* args = (args_hipTexRefSetAddress_t*) activity->args; \
	args->ByteOffset = (size_t *) ByteOffset; \
	args->texRef = (textureReference *) texRef; \
	args->dptr = (void *) dptr; \
	args->bytes = (size_t) bytes; \
};

#define GET_PTRS_VALUE_hipTexRefSetAddress(args) { \
	args_hipTexRefSetAddress_t* pargs = (args_hipTexRefSetAddress_t*) args; \
	if (pargs->ByteOffset != NULL) { \
		pargs->ByteOffset__ref.val = *pargs->ByteOffset; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamAddCallback_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamAddCallback_spt` function call.
 *
 * @struct args_hipStreamAddCallback_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamAddCallback_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCallback_t callback (void (*)(struct ihipStream_t *, enum hipError_t, void *))
 *			void * userData (void *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamAddCallback_spt
typedef struct {
	hipStream_t stream;
	hipStreamCallback_t callback;
	void * userData;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamAddCallback_spt_t;

#define GET_ARGS_VALUE_hipStreamAddCallback_spt(activity) { \
	args_hipStreamAddCallback_spt_t* args = (args_hipStreamAddCallback_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->callback = (hipStreamCallback_t) callback; \
	args->userData = (void *) userData; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddKernelNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddKernelNode` function call.
 *
 * @struct args_hipGraphAddKernelNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddKernelNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipKernelNodeParams * pNodeParams (const struct hipKernelNodeParams *)
 *	)
 */
#if HAVE_hipGraphAddKernelNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphAddKernelNode_t;

#define GET_ARGS_VALUE_hipGraphAddKernelNode(activity) { \
	args_hipGraphAddKernelNode_t* args = (args_hipGraphAddKernelNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddKernelNode(args) { \
	args_hipGraphAddKernelNode_t* pargs = (args_hipGraphAddKernelNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoH` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoH` function call.
 *
 * @struct args_hipMemcpyDtoH_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoH (
 *			void * dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyDtoH
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipError_t retval;
} args_hipMemcpyDtoH_t;

#define GET_ARGS_VALUE_hipMemcpyDtoH(activity) { \
	args_hipMemcpyDtoH_t* args = (args_hipMemcpyDtoH_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceTotalMem` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceTotalMem` function call.
 *
 * @struct args_hipDeviceTotalMem_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceTotalMem (
 *			size_t * bytes (unsigned long*)
 *			hipDevice_t device (int)
 *	)
 */
#if HAVE_hipDeviceTotalMem
typedef struct {
	size_t * bytes;
	struct {
		size_t val;
	} bytes__ref;
	hipDevice_t device;
	hipError_t retval;
} args_hipDeviceTotalMem_t;

#define GET_ARGS_VALUE_hipDeviceTotalMem(activity) { \
	args_hipDeviceTotalMem_t* args = (args_hipDeviceTotalMem_t*) activity->args; \
	args->bytes = (size_t *) bytes; \
	args->device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceTotalMem(args) { \
	args_hipDeviceTotalMem_t* pargs = (args_hipDeviceTotalMem_t*) args; \
	if (pargs->bytes != NULL) { \
		pargs->bytes__ref.val = *pargs->bytes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2D` function call.
 *
 * @struct args_hipMemset2D_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2D (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *	)
 */
#if HAVE_hipMemset2D
typedef struct {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	hipError_t retval;
} args_hipMemset2D_t;

#define GET_ARGS_VALUE_hipMemset2D(activity) { \
	args_hipMemset2D_t* args = (args_hipMemset2D_t*) activity->args; \
	args->dst = (void *) dst; \
	args->pitch = (size_t) pitch; \
	args->value = (int) value; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArray_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArray_spt` function call.
 *
 * @struct args_hipMemcpy2DToArray_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArray_spt (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy2DToArray_spt
typedef struct {
	hipArray_t dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy2DToArray_spt_t;

#define GET_ARGS_VALUE_hipMemcpy2DToArray_spt(activity) { \
	args_hipMemcpy2DToArray_spt_t* args = (args_hipMemcpy2DToArray_spt_t*) activity->args; \
	args->dst = (hipArray_t) dst; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemAllocHost` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAllocHost` function call.
 *
 * @struct args_hipMemAllocHost_t
 *
 * @note 
 *	hipError_t
 *	hipMemAllocHost (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *	)
 */
#if HAVE_hipMemAllocHost
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	hipError_t retval;
} args_hipMemAllocHost_t;

#define GET_ARGS_VALUE_hipMemAllocHost(activity) { \
	args_hipMemAllocHost_t* args = (args_hipMemAllocHost_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipMemAllocHost(args) { \
	args_hipMemAllocHost_t* pargs = (args_hipMemAllocHost_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipPointerSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPointerSetAttribute` function call.
 *
 * @struct args_hipPointerSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipPointerSetAttribute (
 *			const void * value (const void *)
 *			hipPointer_attribute attribute (enum hipPointer_attribute)
 *			hipDeviceptr_t ptr (void *)
 *	)
 */
#if HAVE_hipPointerSetAttribute
typedef struct {
	void * value;
	hipPointer_attribute attribute;
	void * ptr;
	hipError_t retval;
} args_hipPointerSetAttribute_t;

#define GET_ARGS_VALUE_hipPointerSetAttribute(activity) { \
	args_hipPointerSetAttribute_t* args = (args_hipPointerSetAttribute_t*) activity->args; \
	args->value = (void *) value; \
	args->attribute = (hipPointer_attribute) attribute; \
	args->ptr = (void *) ptr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphHostNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphHostNodeGetParams` function call.
 *
 * @struct args_hipGraphHostNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphHostNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipHostNodeParams * pNodeParams (struct hipHostNodeParams*)
 *	)
 */
#if HAVE_hipGraphHostNodeGetParams
typedef struct {
	hipGraphNode_t node;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphHostNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphHostNodeGetParams(activity) { \
	args_hipGraphHostNodeGetParams_t* args = (args_hipGraphHostNodeGetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphHostNodeGetParams(args) { \
	args_hipGraphHostNodeGetParams_t* pargs = (args_hipGraphHostNodeGetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3D` function call.
 *
 * @struct args_hipMemset3D_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3D (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *	)
 */
#if HAVE_hipMemset3D
typedef struct {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	hipError_t retval;
} args_hipMemset3D_t;

#define GET_ARGS_VALUE_hipMemset3D(activity) { \
	args_hipMemset3D_t* args = (args_hipMemset3D_t*) activity->args; \
	args->pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	args->value = (int) value; \
	args->extent = (hipExtent) extent; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDestroyTextureObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroyTextureObject` function call.
 *
 * @struct args_hipDestroyTextureObject_t
 *
 * @note 
 *	hipError_t
 *	hipDestroyTextureObject (
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipDestroyTextureObject
typedef struct {
	hipTextureObject_t textureObject;
	hipError_t retval;
} args_hipDestroyTextureObject_t;

#define GET_ARGS_VALUE_hipDestroyTextureObject(activity) { \
	args_hipDestroyTextureObject_t* args = (args_hipDestroyTextureObject_t*) activity->args; \
	args->textureObject = (hipTextureObject_t) textureObject; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemAdvise` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAdvise` function call.
 *
 * @struct args_hipMemAdvise_t
 *
 * @note 
 *	hipError_t
 *	hipMemAdvise (
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *			hipMemoryAdvise advice (enum hipMemoryAdvise)
 *			int device (int)
 *	)
 */
#if HAVE_hipMemAdvise
typedef struct {
	void * dev_ptr;
	size_t count;
	hipMemoryAdvise advice;
	int device;
	hipError_t retval;
} args_hipMemAdvise_t;

#define GET_ARGS_VALUE_hipMemAdvise(activity) { \
	args_hipMemAdvise_t* args = (args_hipMemAdvise_t*) activity->args; \
	args->dev_ptr = (void *) dev_ptr; \
	args->count = (size_t) count; \
	args->advice = (hipMemoryAdvise) advice; \
	args->device = (int) device; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxGetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetCacheConfig` function call.
 *
 * @struct args_hipCtxGetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetCacheConfig (
 *			hipFuncCache_t * cacheConfig (enum hipFuncCache_t*)
 *	)
 */
#if HAVE_hipCtxGetCacheConfig
typedef struct {
	hipFuncCache_t * cacheConfig;
	struct {
		hipFuncCache_t val;
	} cacheConfig__ref;
	hipError_t retval;
} args_hipCtxGetCacheConfig_t;

#define GET_ARGS_VALUE_hipCtxGetCacheConfig(activity) { \
	args_hipCtxGetCacheConfig_t* args = (args_hipCtxGetCacheConfig_t*) activity->args; \
	args->cacheConfig = (hipFuncCache_t *) cacheConfig; \
};

#define GET_PTRS_VALUE_hipCtxGetCacheConfig(args) { \
	args_hipCtxGetCacheConfig_t* pargs = (args_hipCtxGetCacheConfig_t*) args; \
	if (pargs->cacheConfig != NULL) { \
		pargs->cacheConfig__ref.val = *pargs->cacheConfig; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvPointerGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvPointerGetAttributes` function call.
 *
 * @struct args_hipDrvPointerGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipDrvPointerGetAttributes (
 *			unsigned int numAttributes (unsigned int)
 *			hipPointer_attribute * attributes (enum hipPointer_attribute*)
 *			void ** data (void **)
 *			hipDeviceptr_t ptr (void *)
 *	)
 */
#if HAVE_hipDrvPointerGetAttributes
typedef struct {
	unsigned int numAttributes;
	hipPointer_attribute * attributes;
	struct {
		hipPointer_attribute val;
	} attributes__ref;
	void ** data;
	struct {
		void* ptr1;
	} data__ref;
	void * ptr;
	hipError_t retval;
} args_hipDrvPointerGetAttributes_t;

#define GET_ARGS_VALUE_hipDrvPointerGetAttributes(activity) { \
	args_hipDrvPointerGetAttributes_t* args = (args_hipDrvPointerGetAttributes_t*) activity->args; \
	args->numAttributes = (unsigned int) numAttributes; \
	args->attributes = (hipPointer_attribute *) attributes; \
	args->data = (void **) data; \
	args->ptr = (void *) ptr; \
};

#define GET_PTRS_VALUE_hipDrvPointerGetAttributes(args) { \
	args_hipDrvPointerGetAttributes_t* pargs = (args_hipDrvPointerGetAttributes_t*) args; \
	if (pargs->attributes != NULL) { \
		pargs->attributes__ref.val = *pargs->attributes; \
	} \
	if (pargs->data != NULL) { \
		pargs->data__ref.ptr1 = *pargs->data; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleLaunchCooperativeKernelMultiDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLaunchCooperativeKernelMultiDevice` function call.
 *
 * @struct args_hipModuleLaunchCooperativeKernelMultiDevice_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLaunchCooperativeKernelMultiDevice (
 *			hipFunctionLaunchParams * launchParamsList (struct hipFunctionLaunchParams_t*)
 *			unsigned int numDevices (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipModuleLaunchCooperativeKernelMultiDevice
typedef struct {
	hipFunctionLaunchParams * launchParamsList;
	struct {
		hipFunctionLaunchParams val;
	} launchParamsList__ref;
	unsigned int numDevices;
	unsigned int flags;
	hipError_t retval;
} args_hipModuleLaunchCooperativeKernelMultiDevice_t;

#define GET_ARGS_VALUE_hipModuleLaunchCooperativeKernelMultiDevice(activity) { \
	args_hipModuleLaunchCooperativeKernelMultiDevice_t* args = (args_hipModuleLaunchCooperativeKernelMultiDevice_t*) activity->args; \
	args->launchParamsList = (hipFunctionLaunchParams *) launchParamsList; \
	args->numDevices = (unsigned int) numDevices; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipModuleLaunchCooperativeKernelMultiDevice(args) { \
	args_hipModuleLaunchCooperativeKernelMultiDevice_t* pargs = (args_hipModuleLaunchCooperativeKernelMultiDevice_t*) args; \
	if (pargs->launchParamsList != NULL) { \
		pargs->launchParamsList__ref.val = *pargs->launchParamsList; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleGetGlobal` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleGetGlobal` function call.
 *
 * @struct args_hipModuleGetGlobal_t
 *
 * @note 
 *	hipError_t
 *	hipModuleGetGlobal (
 *			hipDeviceptr_t * dptr (void **)
 *			size_t * bytes (unsigned long*)
 *			hipModule_t hmod (struct ihipModule_t *)
 *			const char * name (const char *)
 *	)
 */
#if HAVE_hipModuleGetGlobal
typedef struct {
	void ** dptr;
	struct {
		void* ptr1;
	} dptr__ref;
	size_t * bytes;
	struct {
		size_t val;
	} bytes__ref;
	hipModule_t hmod;
	char * name;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} name__ref;
	hipError_t retval;
} args_hipModuleGetGlobal_t;

#define GET_ARGS_VALUE_hipModuleGetGlobal(activity) { \
	args_hipModuleGetGlobal_t* args = (args_hipModuleGetGlobal_t*) activity->args; \
	args->dptr = (void **) dptr; \
	args->bytes = (size_t *) bytes; \
	args->hmod = (hipModule_t) hmod; \
	args->name = (char *) name; \
};

#define GET_PTRS_VALUE_hipModuleGetGlobal(args) { \
	args_hipModuleGetGlobal_t* pargs = (args_hipModuleGetGlobal_t*) args; \
	if (pargs->dptr != NULL) { \
		pargs->dptr__ref.ptr1 = *pargs->dptr; \
	} \
	if (pargs->bytes != NULL) { \
		pargs->bytes__ref.val = *pargs->bytes; \
	} \
	if (pargs->name != NULL) { \
		strncpy(pargs->name__ref.val, pargs->name, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphEventRecordNodeGetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventRecordNodeGetEvent` function call.
 *
 * @struct args_hipGraphEventRecordNodeGetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventRecordNodeGetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t * event_out (struct ihipEvent_t **)
 *	)
 */
#if HAVE_hipGraphEventRecordNodeGetEvent
typedef struct {
	hipGraphNode_t node;
	hipEvent_t * event_out;
	struct {
		hipEvent_t val;
	} event_out__ref;
	hipError_t retval;
} args_hipGraphEventRecordNodeGetEvent_t;

#define GET_ARGS_VALUE_hipGraphEventRecordNodeGetEvent(activity) { \
	args_hipGraphEventRecordNodeGetEvent_t* args = (args_hipGraphEventRecordNodeGetEvent_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->event_out = (hipEvent_t *) event_out; \
};

#define GET_PTRS_VALUE_hipGraphEventRecordNodeGetEvent(args) { \
	args_hipGraphEventRecordNodeGetEvent_t* pargs = (args_hipGraphEventRecordNodeGetEvent_t*) args; \
	if (pargs->event_out != NULL) { \
		pargs->event_out__ref.val = *pargs->event_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphInstantiate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphInstantiate` function call.
 *
 * @struct args_hipGraphInstantiate_t
 *
 * @note 
 *	hipError_t
 *	hipGraphInstantiate (
 *			hipGraphExec_t * pGraphExec (struct hipGraphExec **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * pErrorNode (struct hipGraphNode **)
 *			char * pLogBuffer (char *)
 *			size_t bufferSize (unsigned long)
 *	)
 */
#if HAVE_hipGraphInstantiate
typedef struct {
	hipGraphExec_t * pGraphExec;
	struct {
		hipGraphExec_t val;
	} pGraphExec__ref;
	hipGraph_t graph;
	hipGraphNode_t * pErrorNode;
	struct {
		hipGraphNode_t val;
	} pErrorNode__ref;
	char * pLogBuffer;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} pLogBuffer__ref;
	size_t bufferSize;
	hipError_t retval;
} args_hipGraphInstantiate_t;

#define GET_ARGS_VALUE_hipGraphInstantiate(activity) { \
	args_hipGraphInstantiate_t* args = (args_hipGraphInstantiate_t*) activity->args; \
	args->pGraphExec = (hipGraphExec_t *) pGraphExec; \
	args->graph = (hipGraph_t) graph; \
	args->pErrorNode = (hipGraphNode_t *) pErrorNode; \
	args->pLogBuffer = (char *) pLogBuffer; \
	args->bufferSize = (size_t) bufferSize; \
};

#define GET_PTRS_VALUE_hipGraphInstantiate(args) { \
	args_hipGraphInstantiate_t* pargs = (args_hipGraphInstantiate_t*) args; \
	if (pargs->pGraphExec != NULL) { \
		pargs->pGraphExec__ref.val = *pargs->pGraphExec; \
	} \
	if (pargs->pErrorNode != NULL) { \
		pargs->pErrorNode__ref.val = *pargs->pErrorNode; \
	} \
	if (pargs->pLogBuffer != NULL) { \
		strncpy(pargs->pLogBuffer__ref.val, pargs->pLogBuffer, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphRetainUserObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphRetainUserObject` function call.
 *
 * @struct args_hipGraphRetainUserObject_t
 *
 * @note 
 *	hipError_t
 *	hipGraphRetainUserObject (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipGraphRetainUserObject
typedef struct {
	hipGraph_t graph;
	hipUserObject_t object;
	unsigned int count;
	unsigned int flags;
	hipError_t retval;
} args_hipGraphRetainUserObject_t;

#define GET_ARGS_VALUE_hipGraphRetainUserObject(activity) { \
	args_hipGraphRetainUserObject_t* args = (args_hipGraphRetainUserObject_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->object = (hipUserObject_t) object; \
	args->count = (unsigned int) count; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemAllocNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemAllocNodeGetParams` function call.
 *
 * @struct args_hipGraphMemAllocNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemAllocNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemAllocNodeParams * pNodeParams (struct hipMemAllocNodeParams*)
 *	)
 */
#if HAVE_hipGraphMemAllocNodeGetParams
typedef struct {
	hipGraphNode_t node;
	hipMemAllocNodeParams * pNodeParams;
	struct {
		hipMemAllocNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphMemAllocNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphMemAllocNodeGetParams(activity) { \
	args_hipGraphMemAllocNodeGetParams_t* args = (args_hipGraphMemAllocNodeGetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipMemAllocNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemAllocNodeGetParams(args) { \
	args_hipGraphMemAllocNodeGetParams_t* pargs = (args_hipGraphMemAllocNodeGetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *			unsigned long long * pId (unsigned long long *)
 *	)
 */
#if HAVE_hipStreamGetCaptureInfo
typedef struct {
	hipStream_t stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	unsigned long long * pId;
	struct {
		unsigned long long val;
	} pId__ref;
	hipError_t retval;
} args_hipStreamGetCaptureInfo_t;

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo(activity) { \
	args_hipStreamGetCaptureInfo_t* args = (args_hipStreamGetCaptureInfo_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
	args->pId = (unsigned long long *) pId; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo(args) { \
	args_hipStreamGetCaptureInfo_t* pargs = (args_hipStreamGetCaptureInfo_t*) args; \
	if (pargs->pCaptureStatus != NULL) { \
		pargs->pCaptureStatus__ref.val = *pargs->pCaptureStatus; \
	} \
	if (pargs->pId != NULL) { \
		pargs->pId__ref.val = *pargs->pId; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxPopCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxPopCurrent` function call.
 *
 * @struct args_hipCtxPopCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxPopCurrent (
 *			hipCtx_t * ctx (struct ihipCtx_t **)
 *	)
 */
#if HAVE_hipCtxPopCurrent
typedef struct {
	hipCtx_t * ctx;
	struct {
		hipCtx_t val;
	} ctx__ref;
	hipError_t retval;
} args_hipCtxPopCurrent_t;

#define GET_ARGS_VALUE_hipCtxPopCurrent(activity) { \
	args_hipCtxPopCurrent_t* args = (args_hipCtxPopCurrent_t*) activity->args; \
	args->ctx = (hipCtx_t *) ctx; \
};

#define GET_PTRS_VALUE_hipCtxPopCurrent(args) { \
	args_hipCtxPopCurrent_t* pargs = (args_hipCtxPopCurrent_t*) args; \
	if (pargs->ctx != NULL) { \
		pargs->ctx__ref.val = *pargs->ctx; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipPointerGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPointerGetAttributes` function call.
 *
 * @struct args_hipPointerGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipPointerGetAttributes (
 *			hipPointerAttribute_t * attributes (struct hipPointerAttribute_t*)
 *			const void * ptr (const void *)
 *	)
 */
#if HAVE_hipPointerGetAttributes
typedef struct {
	hipPointerAttribute_t * attributes;
	struct {
		hipPointerAttribute_t val;
	} attributes__ref;
	void * ptr;
	hipError_t retval;
} args_hipPointerGetAttributes_t;

#define GET_ARGS_VALUE_hipPointerGetAttributes(activity) { \
	args_hipPointerGetAttributes_t* args = (args_hipPointerGetAttributes_t*) activity->args; \
	args->attributes = (hipPointerAttribute_t *) attributes; \
	args->ptr = (void *) ptr; \
};

#define GET_PTRS_VALUE_hipPointerGetAttributes(args) { \
	args_hipPointerGetAttributes_t* pargs = (args_hipPointerGetAttributes_t*) args; \
	if (pargs->attributes != NULL) { \
		pargs->attributes__ref.val = *pargs->attributes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceDisablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceDisablePeerAccess` function call.
 *
 * @struct args_hipDeviceDisablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceDisablePeerAccess (
 *			int peerDeviceId (int)
 *	)
 */
#if HAVE_hipDeviceDisablePeerAccess
typedef struct {
	int peerDeviceId;
	hipError_t retval;
} args_hipDeviceDisablePeerAccess_t;

#define GET_ARGS_VALUE_hipDeviceDisablePeerAccess(activity) { \
	args_hipDeviceDisablePeerAccess_t* args = (args_hipDeviceDisablePeerAccess_t*) activity->args; \
	args->peerDeviceId = (int) peerDeviceId; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMallocPitch` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocPitch` function call.
 *
 * @struct args_hipMallocPitch_t
 *
 * @note 
 *	hipError_t
 *	hipMallocPitch (
 *			void ** ptr (void **)
 *			size_t * pitch (unsigned long*)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *	)
 */
#if HAVE_hipMallocPitch
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t * pitch;
	struct {
		size_t val;
	} pitch__ref;
	size_t width;
	size_t height;
	hipError_t retval;
} args_hipMallocPitch_t;

#define GET_ARGS_VALUE_hipMallocPitch(activity) { \
	args_hipMallocPitch_t* args = (args_hipMallocPitch_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->pitch = (size_t *) pitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
};

#define GET_PTRS_VALUE_hipMallocPitch(args) { \
	args_hipMallocPitch_t* pargs = (args_hipMallocPitch_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
	if (pargs->pitch != NULL) { \
		pargs->pitch__ref.val = *pargs->pitch; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArrayAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArrayAsync` function call.
 *
 * @struct args_hipMemcpy2DFromArrayAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArrayAsync (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy2DFromArrayAsync
typedef struct {
	void * dst;
	size_t dpitch;
	hipArray_const_t src;
	size_t wOffset;
	size_t hOffset;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy2DFromArrayAsync_t;

#define GET_ARGS_VALUE_hipMemcpy2DFromArrayAsync(activity) { \
	args_hipMemcpy2DFromArrayAsync_t* args = (args_hipMemcpy2DFromArrayAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (hipArray_const_t) src; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceComputeCapability` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceComputeCapability` function call.
 *
 * @struct args_hipDeviceComputeCapability_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceComputeCapability (
 *			int * major (int *)
 *			int * minor (int *)
 *			hipDevice_t device (int)
 *	)
 */
#if HAVE_hipDeviceComputeCapability
typedef struct {
	int * major;
	struct {
		int val;
	} major__ref;
	int * minor;
	struct {
		int val;
	} minor__ref;
	hipDevice_t device;
	hipError_t retval;
} args_hipDeviceComputeCapability_t;

#define GET_ARGS_VALUE_hipDeviceComputeCapability(activity) { \
	args_hipDeviceComputeCapability_t* args = (args_hipDeviceComputeCapability_t*) activity->args; \
	args->major = (int *) major; \
	args->minor = (int *) minor; \
	args->device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceComputeCapability(args) { \
	args_hipDeviceComputeCapability_t* pargs = (args_hipDeviceComputeCapability_t*) args; \
	if (pargs->major != NULL) { \
		pargs->major__ref.val = *pargs->major; \
	} \
	if (pargs->minor != NULL) { \
		pargs->minor__ref.val = *pargs->minor; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoD` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoD` function call.
 *
 * @struct args_hipMemcpyHtoD_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoD (
 *			hipDeviceptr_t dst (void *)
 *			void * src (void *)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyHtoD
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipError_t retval;
} args_hipMemcpyHtoD_t;

#define GET_ARGS_VALUE_hipMemcpyHtoD(activity) { \
	args_hipMemcpyHtoD_t* args = (args_hipMemcpyHtoD_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipOccupancyMaxActiveBlocksPerMultiprocessor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipOccupancyMaxActiveBlocksPerMultiprocessor` function call.
 *
 * @struct args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t
 *
 * @note 
 *	hipError_t
 *	hipOccupancyMaxActiveBlocksPerMultiprocessor (
 *			int * numBlocks (int *)
 *			const void * f (const void *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *	)
 */
#if HAVE_hipOccupancyMaxActiveBlocksPerMultiprocessor
typedef struct {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	void * f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	hipError_t retval;
} args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t;

#define GET_ARGS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessor(activity) { \
	args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t* args = (args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t*) activity->args; \
	args->numBlocks = (int *) numBlocks; \
	args->f = (void *) f; \
	args->blockSize = (int) blockSize; \
	args->dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
};

#define GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessor(args) { \
	args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t* pargs = (args_hipOccupancyMaxActiveBlocksPerMultiprocessor_t*) args; \
	if (pargs->numBlocks != NULL) { \
		pargs->numBlocks__ref.val = *pargs->numBlocks; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipSignalExternalSemaphoresAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSignalExternalSemaphoresAsync` function call.
 *
 * @struct args_hipSignalExternalSemaphoresAsync_t
 *
 * @note 
 *	hipError_t
 *	hipSignalExternalSemaphoresAsync (
 *			const hipExternalSemaphore_t * extSemArray (const void * *)
 *			const hipExternalSemaphoreSignalParams * paramsArray (const struct hipExternalSemaphoreSignalParams_st *)
 *			unsigned int numExtSems (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipSignalExternalSemaphoresAsync
typedef struct {
	void * * extSemArray;
	struct {
		void* ptr1;
	} extSemArray__ref;
	hipExternalSemaphoreSignalParams * paramsArray;
	struct {
		hipExternalSemaphoreSignalParams val;
	} paramsArray__ref;
	unsigned int numExtSems;
	hipStream_t stream;
	hipError_t retval;
} args_hipSignalExternalSemaphoresAsync_t;

#define GET_ARGS_VALUE_hipSignalExternalSemaphoresAsync(activity) { \
	args_hipSignalExternalSemaphoresAsync_t* args = (args_hipSignalExternalSemaphoresAsync_t*) activity->args; \
	args->extSemArray = (void * *) extSemArray; \
	args->paramsArray = (hipExternalSemaphoreSignalParams *) paramsArray; \
	args->numExtSems = (unsigned int) numExtSems; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipSignalExternalSemaphoresAsync(args) { \
	args_hipSignalExternalSemaphoresAsync_t* pargs = (args_hipSignalExternalSemaphoresAsync_t*) args; \
	if (pargs->extSemArray != NULL) { \
		pargs->extSemArray__ref.ptr1 = *pargs->extSemArray; \
	} \
	if (pargs->paramsArray != NULL) { \
		pargs->paramsArray__ref.val = *pargs->paramsArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipArray3DGetDescriptor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArray3DGetDescriptor` function call.
 *
 * @struct args_hipArray3DGetDescriptor_t
 *
 * @note 
 *	hipError_t
 *	hipArray3DGetDescriptor (
 *			HIP_ARRAY3D_DESCRIPTOR * pArrayDescriptor (struct HIP_ARRAY3D_DESCRIPTOR*)
 *			hipArray_t array (struct hipArray *)
 *	)
 */
#if HAVE_hipArray3DGetDescriptor
typedef struct {
	HIP_ARRAY3D_DESCRIPTOR * pArrayDescriptor;
	struct {
		HIP_ARRAY3D_DESCRIPTOR val;
	} pArrayDescriptor__ref;
	hipArray_t array;
	hipError_t retval;
} args_hipArray3DGetDescriptor_t;

#define GET_ARGS_VALUE_hipArray3DGetDescriptor(activity) { \
	args_hipArray3DGetDescriptor_t* args = (args_hipArray3DGetDescriptor_t*) activity->args; \
	args->pArrayDescriptor = (HIP_ARRAY3D_DESCRIPTOR *) pArrayDescriptor; \
	args->array = (hipArray_t) array; \
};

#define GET_PTRS_VALUE_hipArray3DGetDescriptor(args) { \
	args_hipArray3DGetDescriptor_t* pargs = (args_hipArray3DGetDescriptor_t*) args; \
	if (pargs->pArrayDescriptor != NULL) { \
		pargs->pArrayDescriptor__ref.val = *pargs->pArrayDescriptor; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `__hipPopCallConfiguration` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `__hipPopCallConfiguration` function call.
 *
 * @struct args___hipPopCallConfiguration_t
 *
 * @note 
 *	hipError_t
 *	__hipPopCallConfiguration (
 *			dim3 * gridDim (struct dim3*)
 *			dim3 * blockDim (struct dim3*)
 *			size_t * sharedMem (unsigned long*)
 *			hipStream_t * stream (struct ihipStream_t **)
 *	)
 */
#if HAVE___hipPopCallConfiguration
typedef struct {
	dim3 * gridDim;
	struct {
		dim3 val;
	} gridDim__ref;
	dim3 * blockDim;
	struct {
		dim3 val;
	} blockDim__ref;
	size_t * sharedMem;
	struct {
		size_t val;
	} sharedMem__ref;
	hipStream_t * stream;
	struct {
		hipStream_t val;
	} stream__ref;
	hipError_t retval;
} args___hipPopCallConfiguration_t;

#define GET_ARGS_VALUE___hipPopCallConfiguration(activity) { \
	args___hipPopCallConfiguration_t* args = (args___hipPopCallConfiguration_t*) activity->args; \
	args->gridDim = (dim3 *) gridDim; \
	args->blockDim = (dim3 *) blockDim; \
	args->sharedMem = (size_t *) sharedMem; \
	args->stream = (hipStream_t *) stream; \
};

#define GET_PTRS_VALUE___hipPopCallConfiguration(args) { \
	args___hipPopCallConfiguration_t* pargs = (args___hipPopCallConfiguration_t*) args; \
	if (pargs->gridDim != NULL) { \
		pargs->gridDim__ref.val = *pargs->gridDim; \
	} \
	if (pargs->blockDim != NULL) { \
		pargs->blockDim__ref.val = *pargs->blockDim; \
	} \
	if (pargs->sharedMem != NULL) { \
		pargs->sharedMem__ref.val = *pargs->sharedMem; \
	} \
	if (pargs->stream != NULL) { \
		pargs->stream__ref.val = *pargs->stream; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxRelease` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxRelease` function call.
 *
 * @struct args_hipDevicePrimaryCtxRelease_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxRelease (
 *			hipDevice_t dev (int)
 *	)
 */
#if HAVE_hipDevicePrimaryCtxRelease
typedef struct {
	hipDevice_t dev;
	hipError_t retval;
} args_hipDevicePrimaryCtxRelease_t;

#define GET_ARGS_VALUE_hipDevicePrimaryCtxRelease(activity) { \
	args_hipDevicePrimaryCtxRelease_t* args = (args_hipDevicePrimaryCtxRelease_t*) activity->args; \
	args->dev = (hipDevice_t) dev; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchCooperativeKernelMultiDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchCooperativeKernelMultiDevice` function call.
 *
 * @struct args_hipLaunchCooperativeKernelMultiDevice_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchCooperativeKernelMultiDevice (
 *			hipLaunchParams * launchParamsList (struct hipLaunchParams_t*)
 *			int numDevices (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipLaunchCooperativeKernelMultiDevice
typedef struct {
	hipLaunchParams * launchParamsList;
	struct {
		hipLaunchParams val;
	} launchParamsList__ref;
	int numDevices;
	unsigned int flags;
	hipError_t retval;
} args_hipLaunchCooperativeKernelMultiDevice_t;

#define GET_ARGS_VALUE_hipLaunchCooperativeKernelMultiDevice(activity) { \
	args_hipLaunchCooperativeKernelMultiDevice_t* args = (args_hipLaunchCooperativeKernelMultiDevice_t*) activity->args; \
	args->launchParamsList = (hipLaunchParams *) launchParamsList; \
	args->numDevices = (int) numDevices; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipLaunchCooperativeKernelMultiDevice(args) { \
	args_hipLaunchCooperativeKernelMultiDevice_t* pargs = (args_hipLaunchCooperativeKernelMultiDevice_t*) args; \
	if (pargs->launchParamsList != NULL) { \
		pargs->launchParamsList__ref.val = *pargs->launchParamsList; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFreeArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeArray` function call.
 *
 * @struct args_hipFreeArray_t
 *
 * @note 
 *	hipError_t
 *	hipFreeArray (
 *			hipArray_t array (struct hipArray *)
 *	)
 */
#if HAVE_hipFreeArray
typedef struct {
	hipArray_t array;
	hipError_t retval;
} args_hipFreeArray_t;

#define GET_ARGS_VALUE_hipFreeArray(activity) { \
	args_hipFreeArray_t* args = (args_hipFreeArray_t*) activity->args; \
	args->array = (hipArray_t) array; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemsetNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemsetNodeSetParams` function call.
 *
 * @struct args_hipGraphMemsetNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemsetNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipMemsetParams * pNodeParams (const struct hipMemsetParams *)
 *	)
 */
#if HAVE_hipGraphMemsetNodeSetParams
typedef struct {
	hipGraphNode_t node;
	hipMemsetParams * pNodeParams;
	struct {
		hipMemsetParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphMemsetNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphMemsetNodeSetParams(activity) { \
	args_hipGraphMemsetNodeSetParams_t* args = (args_hipGraphMemsetNodeSetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipMemsetParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemsetNodeSetParams(args) { \
	args_hipGraphMemsetNodeSetParams_t* pargs = (args_hipGraphMemsetNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolSetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolSetAccess` function call.
 *
 * @struct args_hipMemPoolSetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolSetAccess (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			const hipMemAccessDesc * desc_list (const struct hipMemAccessDesc *)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemPoolSetAccess
typedef struct {
	hipMemPool_t mem_pool;
	hipMemAccessDesc * desc_list;
	struct {
		hipMemAccessDesc val;
	} desc_list__ref;
	size_t count;
	hipError_t retval;
} args_hipMemPoolSetAccess_t;

#define GET_ARGS_VALUE_hipMemPoolSetAccess(activity) { \
	args_hipMemPoolSetAccess_t* args = (args_hipMemPoolSetAccess_t*) activity->args; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->desc_list = (hipMemAccessDesc *) desc_list; \
	args->count = (size_t) count; \
};

#define GET_PTRS_VALUE_hipMemPoolSetAccess(args) { \
	args_hipMemPoolSetAccess_t* pargs = (args_hipMemPoolSetAccess_t*) args; \
	if (pargs->desc_list != NULL) { \
		pargs->desc_list__ref.val = *pargs->desc_list; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetStreamDeviceId` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetStreamDeviceId` function call.
 *
 * @struct args_hipGetStreamDeviceId_t
 *
 * @note 
 *	int
 *	hipGetStreamDeviceId (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipGetStreamDeviceId
typedef struct {
	hipStream_t stream;
	int retval;
} args_hipGetStreamDeviceId_t;

#define GET_ARGS_VALUE_hipGetStreamDeviceId(activity) { \
	args_hipGetStreamDeviceId_t* args = (args_hipGetStreamDeviceId_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExtStreamCreateWithCUMask` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtStreamCreateWithCUMask` function call.
 *
 * @struct args_hipExtStreamCreateWithCUMask_t
 *
 * @note 
 *	hipError_t
 *	hipExtStreamCreateWithCUMask (
 *			hipStream_t * stream (struct ihipStream_t **)
 *			uint32_t cuMaskSize (unsigned int)
 *			const uint32_t * cuMask (const unsigned int *)
 *	)
 */
#if HAVE_hipExtStreamCreateWithCUMask
typedef struct {
	hipStream_t * stream;
	struct {
		hipStream_t val;
	} stream__ref;
	uint32_t cuMaskSize;
	uint32_t * cuMask;
	struct {
		uint32_t val;
	} cuMask__ref;
	hipError_t retval;
} args_hipExtStreamCreateWithCUMask_t;

#define GET_ARGS_VALUE_hipExtStreamCreateWithCUMask(activity) { \
	args_hipExtStreamCreateWithCUMask_t* args = (args_hipExtStreamCreateWithCUMask_t*) activity->args; \
	args->stream = (hipStream_t *) stream; \
	args->cuMaskSize = (uint32_t) cuMaskSize; \
	args->cuMask = (uint32_t *) cuMask; \
};

#define GET_PTRS_VALUE_hipExtStreamCreateWithCUMask(args) { \
	args_hipExtStreamCreateWithCUMask_t* pargs = (args_hipExtStreamCreateWithCUMask_t*) args; \
	if (pargs->stream != NULL) { \
		pargs->stream__ref.val = *pargs->stream; \
	} \
	if (pargs->cuMask != NULL) { \
		pargs->cuMask__ref.val = *pargs->cuMask; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetTextureObjectTextureDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureObjectTextureDesc` function call.
 *
 * @struct args_hipGetTextureObjectTextureDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureObjectTextureDesc (
 *			hipTextureDesc * pTexDesc (struct hipTextureDesc*)
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipGetTextureObjectTextureDesc
typedef struct {
	hipTextureDesc * pTexDesc;
	struct {
		hipTextureDesc val;
	} pTexDesc__ref;
	hipTextureObject_t textureObject;
	hipError_t retval;
} args_hipGetTextureObjectTextureDesc_t;

#define GET_ARGS_VALUE_hipGetTextureObjectTextureDesc(activity) { \
	args_hipGetTextureObjectTextureDesc_t* args = (args_hipGetTextureObjectTextureDesc_t*) activity->args; \
	args->pTexDesc = (hipTextureDesc *) pTexDesc; \
	args->textureObject = (hipTextureObject_t) textureObject; \
};

#define GET_PTRS_VALUE_hipGetTextureObjectTextureDesc(args) { \
	args_hipGetTextureObjectTextureDesc_t* pargs = (args_hipGetTextureObjectTextureDesc_t*) args; \
	if (pargs->pTexDesc != NULL) { \
		pargs->pTexDesc__ref.val = *pargs->pTexDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventRecord_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventRecord_spt` function call.
 *
 * @struct args_hipEventRecord_spt_t
 *
 * @note 
 *	hipError_t
 *	hipEventRecord_spt (
 *			hipEvent_t event (struct ihipEvent_t *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipEventRecord_spt
typedef struct {
	hipEvent_t event;
	hipStream_t stream;
	hipError_t retval;
} args_hipEventRecord_spt_t;

#define GET_ARGS_VALUE_hipEventRecord_spt(activity) { \
	args_hipEventRecord_spt_t* args = (args_hipEventRecord_spt_t*) activity->args; \
	args->event = (hipEvent_t) event; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipConfigureCall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipConfigureCall` function call.
 *
 * @struct args_hipConfigureCall_t
 *
 * @note 
 *	hipError_t
 *	hipConfigureCall (
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDim (struct dim3)
 *			size_t sharedMem (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipConfigureCall
typedef struct {
	dim3 gridDim;
	dim3 blockDim;
	size_t sharedMem;
	hipStream_t stream;
	hipError_t retval;
} args_hipConfigureCall_t;

#define GET_ARGS_VALUE_hipConfigureCall(activity) { \
	args_hipConfigureCall_t* args = (args_hipConfigureCall_t*) activity->args; \
	args->gridDim = (dim3) gridDim; \
	args->blockDim = (dim3) blockDim; \
	args->sharedMem = (size_t) sharedMem; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromArray_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromArray_spt` function call.
 *
 * @struct args_hipMemcpyFromArray_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromArray_spt (
 *			void * dst (void *)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffsetSrc (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpyFromArray_spt
typedef struct {
	void * dst;
	hipArray_const_t src;
	size_t wOffsetSrc;
	size_t hOffset;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpyFromArray_spt_t;

#define GET_ARGS_VALUE_hipMemcpyFromArray_spt(activity) { \
	args_hipMemcpyFromArray_spt_t* args = (args_hipMemcpyFromArray_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (hipArray_const_t) src; \
	args->wOffsetSrc = (size_t) wOffsetSrc; \
	args->hOffset = (size_t) hOffset; \
	args->count = (size_t) count; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleGetFunction` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleGetFunction` function call.
 *
 * @struct args_hipModuleGetFunction_t
 *
 * @note 
 *	hipError_t
 *	hipModuleGetFunction (
 *			hipFunction_t * function (struct ihipModuleSymbol_t **)
 *			hipModule_t module (struct ihipModule_t *)
 *			const char * kname (const char *)
 *	)
 */
#if HAVE_hipModuleGetFunction
typedef struct {
	hipFunction_t * function;
	struct {
		hipFunction_t val;
	} function__ref;
	hipModule_t module;
	char * kname;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} kname__ref;
	hipError_t retval;
} args_hipModuleGetFunction_t;

#define GET_ARGS_VALUE_hipModuleGetFunction(activity) { \
	args_hipModuleGetFunction_t* args = (args_hipModuleGetFunction_t*) activity->args; \
	args->function = (hipFunction_t *) function; \
	args->module = (hipModule_t) module; \
	args->kname = (char *) kname; \
};

#define GET_PTRS_VALUE_hipModuleGetFunction(args) { \
	args_hipModuleGetFunction_t* pargs = (args_hipModuleGetFunction_t*) args; \
	if (pargs->function != NULL) { \
		pargs->function__ref.val = *pargs->function; \
	} \
	if (pargs->kname != NULL) { \
		strncpy(pargs->kname__ref.val, pargs->kname, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFuncSetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncSetCacheConfig` function call.
 *
 * @struct args_hipFuncSetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipFuncSetCacheConfig (
 *			const void * func (const void *)
 *			hipFuncCache_t config (enum hipFuncCache_t)
 *	)
 */
#if HAVE_hipFuncSetCacheConfig
typedef struct {
	void * func;
	hipFuncCache_t config;
	hipError_t retval;
} args_hipFuncSetCacheConfig_t;

#define GET_ARGS_VALUE_hipFuncSetCacheConfig(activity) { \
	args_hipFuncSetCacheConfig_t* args = (args_hipFuncSetCacheConfig_t*) activity->args; \
	args->func = (void *) func; \
	args->config = (hipFuncCache_t) config; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetLimit` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetLimit` function call.
 *
 * @struct args_hipDeviceGetLimit_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetLimit (
 *			size_t * pValue (unsigned long*)
 *			enum hipLimit_t limit (enum hipLimit_t)
 *	)
 */
#if HAVE_hipDeviceGetLimit
typedef struct {
	size_t * pValue;
	struct {
		size_t val;
	} pValue__ref;
	enum hipLimit_t limit;
	hipError_t retval;
} args_hipDeviceGetLimit_t;

#define GET_ARGS_VALUE_hipDeviceGetLimit(activity) { \
	args_hipDeviceGetLimit_t* args = (args_hipDeviceGetLimit_t*) activity->args; \
	args->pValue = (size_t *) pValue; \
	args->limit = (enum hipLimit_t) limit; \
};

#define GET_PTRS_VALUE_hipDeviceGetLimit(args) { \
	args_hipDeviceGetLimit_t* pargs = (args_hipDeviceGetLimit_t*) args; \
	if (pargs->pValue != NULL) { \
		pargs->pValue__ref.val = *pargs->pValue; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMaxAnisotropy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMaxAnisotropy` function call.
 *
 * @struct args_hipTexRefGetMaxAnisotropy_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMaxAnisotropy (
 *			int * pmaxAnsio (int *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetMaxAnisotropy
typedef struct {
	int * pmaxAnsio;
	struct {
		int val;
	} pmaxAnsio__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetMaxAnisotropy_t;

#define GET_ARGS_VALUE_hipTexRefGetMaxAnisotropy(activity) { \
	args_hipTexRefGetMaxAnisotropy_t* args = (args_hipTexRefGetMaxAnisotropy_t*) activity->args; \
	args->pmaxAnsio = (int *) pmaxAnsio; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMaxAnisotropy(args) { \
	args_hipTexRefGetMaxAnisotropy_t* pargs = (args_hipTexRefGetMaxAnisotropy_t*) args; \
	if (pargs->pmaxAnsio != NULL) { \
		pargs->pmaxAnsio__ref.val = *pargs->pmaxAnsio; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchKernel_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchKernel_spt` function call.
 *
 * @struct args_hipLaunchKernel_spt_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchKernel_spt (
 *			const void * function_address (const void *)
 *			dim3 numBlocks (struct dim3)
 *			dim3 dimBlocks (struct dim3)
 *			void ** args (void **)
 *			size_t sharedMemBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipLaunchKernel_spt
typedef struct {
	void * function_address;
	dim3 numBlocks;
	dim3 dimBlocks;
	void ** args;
	struct {
		void* ptr1;
	} args__ref;
	size_t sharedMemBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipLaunchKernel_spt_t;

#define GET_ARGS_VALUE_hipLaunchKernel_spt(activity) { \
	args_hipLaunchKernel_spt_t* args = (args_hipLaunchKernel_spt_t*) activity->args; \
	args->function_address = (void *) function_address; \
	args->numBlocks = (dim3) numBlocks; \
	args->dimBlocks = (dim3) dimBlocks; \
	args->args = (void **) args; \
	args->sharedMemBytes = (size_t) sharedMemBytes; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipLaunchKernel_spt(args) { \
	args_hipLaunchKernel_spt_t* pargs = (args_hipLaunchKernel_spt_t*) args; \
	if (pargs->args != NULL) { \
		pargs->args__ref.ptr1 = *pargs->args; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamBeginCaptureToGraph` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamBeginCaptureToGraph` function call.
 *
 * @struct args_hipStreamBeginCaptureToGraph_t
 *
 * @note 
 *	hipError_t
 *	hipStreamBeginCaptureToGraph (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * dependencies (const struct hipGraphNode * *)
 *			const hipGraphEdgeData * dependencyData (const struct hipGraphEdgeData *)
 *			size_t numDependencies (unsigned long)
 *			hipStreamCaptureMode mode (enum hipStreamCaptureMode)
 *	)
 */
#if HAVE_hipStreamBeginCaptureToGraph
typedef struct {
	hipStream_t stream;
	hipGraph_t graph;
	hipGraphNode_t * dependencies;
	struct {
		hipGraphNode_t val;
	} dependencies__ref;
	hipGraphEdgeData * dependencyData;
	struct {
		hipGraphEdgeData val;
	} dependencyData__ref;
	size_t numDependencies;
	hipStreamCaptureMode mode;
	hipError_t retval;
} args_hipStreamBeginCaptureToGraph_t;

#define GET_ARGS_VALUE_hipStreamBeginCaptureToGraph(activity) { \
	args_hipStreamBeginCaptureToGraph_t* args = (args_hipStreamBeginCaptureToGraph_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->graph = (hipGraph_t) graph; \
	args->dependencies = (hipGraphNode_t *) dependencies; \
	args->dependencyData = (hipGraphEdgeData *) dependencyData; \
	args->numDependencies = (size_t) numDependencies; \
	args->mode = (hipStreamCaptureMode) mode; \
};

#define GET_PTRS_VALUE_hipStreamBeginCaptureToGraph(args) { \
	args_hipStreamBeginCaptureToGraph_t* pargs = (args_hipStreamBeginCaptureToGraph_t*) args; \
	if (pargs->dependencies != NULL) { \
		pargs->dependencies__ref.val = *pargs->dependencies; \
	} \
	if (pargs->dependencyData != NULL) { \
		pargs->dependencyData__ref.val = *pargs->dependencyData; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetFormat` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetFormat` function call.
 *
 * @struct args_hipTexRefGetFormat_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetFormat (
 *			hipArray_Format * pFormat (enum hipArray_Format*)
 *			int * pNumChannels (int *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetFormat
typedef struct {
	hipArray_Format * pFormat;
	struct {
		hipArray_Format val;
	} pFormat__ref;
	int * pNumChannels;
	struct {
		int val;
	} pNumChannels__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetFormat_t;

#define GET_ARGS_VALUE_hipTexRefGetFormat(activity) { \
	args_hipTexRefGetFormat_t* args = (args_hipTexRefGetFormat_t*) activity->args; \
	args->pFormat = (hipArray_Format *) pFormat; \
	args->pNumChannels = (int *) pNumChannels; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetFormat(args) { \
	args_hipTexRefGetFormat_t* pargs = (args_hipTexRefGetFormat_t*) args; \
	if (pargs->pFormat != NULL) { \
		pargs->pFormat__ref.val = *pargs->pFormat; \
	} \
	if (pargs->pNumChannels != NULL) { \
		pargs->pNumChannels__ref.val = *pargs->pNumChannels; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitValue64` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitValue64` function call.
 *
 * @struct args_hipStreamWaitValue64_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitValue64 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint64_t value (unsigned long)
 *			unsigned int flags (unsigned int)
 *			uint64_t mask (unsigned long)
 *	)
 */
#if HAVE_hipStreamWaitValue64
typedef struct {
	hipStream_t stream;
	void * ptr;
	uint64_t value;
	unsigned int flags;
	uint64_t mask;
	hipError_t retval;
} args_hipStreamWaitValue64_t;

#define GET_ARGS_VALUE_hipStreamWaitValue64(activity) { \
	args_hipStreamWaitValue64_t* args = (args_hipStreamWaitValue64_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->ptr = (void *) ptr; \
	args->value = (uint64_t) value; \
	args->flags = (unsigned int) flags; \
	args->mask = (uint64_t) mask; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxRetain` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxRetain` function call.
 *
 * @struct args_hipDevicePrimaryCtxRetain_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxRetain (
 *			hipCtx_t * pctx (struct ihipCtx_t **)
 *			hipDevice_t dev (int)
 *	)
 */
#if HAVE_hipDevicePrimaryCtxRetain
typedef struct {
	hipCtx_t * pctx;
	struct {
		hipCtx_t val;
	} pctx__ref;
	hipDevice_t dev;
	hipError_t retval;
} args_hipDevicePrimaryCtxRetain_t;

#define GET_ARGS_VALUE_hipDevicePrimaryCtxRetain(activity) { \
	args_hipDevicePrimaryCtxRetain_t* args = (args_hipDevicePrimaryCtxRetain_t*) activity->args; \
	args->pctx = (hipCtx_t *) pctx; \
	args->dev = (hipDevice_t) dev; \
};

#define GET_PTRS_VALUE_hipDevicePrimaryCtxRetain(args) { \
	args_hipDevicePrimaryCtxRetain_t* pargs = (args_hipDevicePrimaryCtxRetain_t*) args; \
	if (pargs->pctx != NULL) { \
		pargs->pctx__ref.val = *pargs->pctx; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMallocManaged` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocManaged` function call.
 *
 * @struct args_hipMallocManaged_t
 *
 * @note 
 *	hipError_t
 *	hipMallocManaged (
 *			void ** dev_ptr (void **)
 *			size_t size (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipMallocManaged
typedef struct {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	size_t size;
	unsigned int flags;
	hipError_t retval;
} args_hipMallocManaged_t;

#define GET_ARGS_VALUE_hipMallocManaged(activity) { \
	args_hipMallocManaged_t* args = (args_hipMallocManaged_t*) activity->args; \
	args->dev_ptr = (void **) dev_ptr; \
	args->size = (size_t) size; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMallocManaged(args) { \
	args_hipMallocManaged_t* pargs = (args_hipMallocManaged_t*) args; \
	if (pargs->dev_ptr != NULL) { \
		pargs->dev_ptr__ref.ptr1 = *pargs->dev_ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamCreateWithPriority` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamCreateWithPriority` function call.
 *
 * @struct args_hipStreamCreateWithPriority_t
 *
 * @note 
 *	hipError_t
 *	hipStreamCreateWithPriority (
 *			hipStream_t * stream (struct ihipStream_t **)
 *			unsigned int flags (unsigned int)
 *			int priority (int)
 *	)
 */
#if HAVE_hipStreamCreateWithPriority
typedef struct {
	hipStream_t * stream;
	struct {
		hipStream_t val;
	} stream__ref;
	unsigned int flags;
	int priority;
	hipError_t retval;
} args_hipStreamCreateWithPriority_t;

#define GET_ARGS_VALUE_hipStreamCreateWithPriority(activity) { \
	args_hipStreamCreateWithPriority_t* args = (args_hipStreamCreateWithPriority_t*) activity->args; \
	args->stream = (hipStream_t *) stream; \
	args->flags = (unsigned int) flags; \
	args->priority = (int) priority; \
};

#define GET_PTRS_VALUE_hipStreamCreateWithPriority(args) { \
	args_hipStreamCreateWithPriority_t* pargs = (args_hipStreamCreateWithPriority_t*) args; \
	if (pargs->stream != NULL) { \
		pargs->stream__ref.val = *pargs->stream; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo_spt` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *			unsigned long long * pId (unsigned long long *)
 *	)
 */
#if HAVE_hipStreamGetCaptureInfo_spt
typedef struct {
	hipStream_t stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	unsigned long long * pId;
	struct {
		unsigned long long val;
	} pId__ref;
	hipError_t retval;
} args_hipStreamGetCaptureInfo_spt_t;

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo_spt(activity) { \
	args_hipStreamGetCaptureInfo_spt_t* args = (args_hipStreamGetCaptureInfo_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
	args->pId = (unsigned long long *) pId; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo_spt(args) { \
	args_hipStreamGetCaptureInfo_spt_t* pargs = (args_hipStreamGetCaptureInfo_spt_t*) args; \
	if (pargs->pCaptureStatus != NULL) { \
		pargs->pCaptureStatus__ref.val = *pargs->pCaptureStatus; \
	} \
	if (pargs->pId != NULL) { \
		pargs->pId__ref.val = *pargs->pId; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddHostNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddHostNode` function call.
 *
 * @struct args_hipGraphAddHostNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddHostNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipHostNodeParams * pNodeParams (const struct hipHostNodeParams *)
 *	)
 */
#if HAVE_hipGraphAddHostNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipHostNodeParams * pNodeParams;
	struct {
		hipHostNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphAddHostNode_t;

#define GET_ARGS_VALUE_hipGraphAddHostNode(activity) { \
	args_hipGraphAddHostNode_t* args = (args_hipGraphAddHostNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->pNodeParams = (hipHostNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddHostNode(args) { \
	args_hipGraphAddHostNode_t* pargs = (args_hipGraphAddHostNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchCooperativeKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchCooperativeKernel` function call.
 *
 * @struct args_hipLaunchCooperativeKernel_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchCooperativeKernel (
 *			const void * f (const void *)
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDimX (struct dim3)
 *			void ** kernelParams (void **)
 *			unsigned int sharedMemBytes (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipLaunchCooperativeKernel
typedef struct {
	void * f;
	dim3 gridDim;
	dim3 blockDimX;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	unsigned int sharedMemBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipLaunchCooperativeKernel_t;

#define GET_ARGS_VALUE_hipLaunchCooperativeKernel(activity) { \
	args_hipLaunchCooperativeKernel_t* args = (args_hipLaunchCooperativeKernel_t*) activity->args; \
	args->f = (void *) f; \
	args->gridDim = (dim3) gridDim; \
	args->blockDimX = (dim3) blockDimX; \
	args->kernelParams = (void **) kernelParams; \
	args->sharedMemBytes = (unsigned int) sharedMemBytes; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipLaunchCooperativeKernel(args) { \
	args_hipLaunchCooperativeKernel_t* pargs = (args_hipLaunchCooperativeKernel_t*) args; \
	if (pargs->kernelParams != NULL) { \
		pargs->kernelParams__ref.ptr1 = *pargs->kernelParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipHostRegister` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostRegister` function call.
 *
 * @struct args_hipHostRegister_t
 *
 * @note 
 *	hipError_t
 *	hipHostRegister (
 *			void * hostPtr (void *)
 *			size_t sizeBytes (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipHostRegister
typedef struct {
	void * hostPtr;
	size_t sizeBytes;
	unsigned int flags;
	hipError_t retval;
} args_hipHostRegister_t;

#define GET_ARGS_VALUE_hipHostRegister(activity) { \
	args_hipHostRegister_t* args = (args_hipHostRegister_t*) activity->args; \
	args->hostPtr = (void *) hostPtr; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetErrorName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetErrorName` function call.
 *
 * @struct args_hipGetErrorName_t
 *
 * @note 
 *	const char *
 *	hipGetErrorName (
 *			hipError_t hip_error (enum hipError_t)
 *	)
 */
#if HAVE_hipGetErrorName
typedef struct {
	hipError_t hip_error;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
} args_hipGetErrorName_t;

#define GET_ARGS_VALUE_hipGetErrorName(activity) { \
	args_hipGetErrorName_t* args = (args_hipGetErrorName_t*) activity->args; \
	args->hip_error = (hipError_t) hip_error; \
};

#define GET_PTRS_RET_VALUE_hipGetErrorName(args) { \
	args_hipGetErrorName_t* pargs = (args_hipGetErrorName_t*) args; \
	if (pargs->retval != NULL) { \
		strncpy(pargs->retval__ref.val, pargs->retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbol_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbol_spt` function call.
 *
 * @struct args_hipMemcpyToSymbol_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbol_spt (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpyToSymbol_spt
typedef struct {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpyToSymbol_spt_t;

#define GET_ARGS_VALUE_hipMemcpyToSymbol_spt(activity) { \
	args_hipMemcpyToSymbol_spt_t* args = (args_hipMemcpyToSymbol_spt_t*) activity->args; \
	args->symbol = (void *) symbol; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemsetNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemsetNodeGetParams` function call.
 *
 * @struct args_hipGraphMemsetNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemsetNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemsetParams * pNodeParams (struct hipMemsetParams*)
 *	)
 */
#if HAVE_hipGraphMemsetNodeGetParams
typedef struct {
	hipGraphNode_t node;
	hipMemsetParams * pNodeParams;
	struct {
		hipMemsetParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphMemsetNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphMemsetNodeGetParams(activity) { \
	args_hipGraphMemsetNodeGetParams_t* args = (args_hipGraphMemsetNodeGetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipMemsetParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemsetNodeGetParams(args) { \
	args_hipGraphMemsetNodeGetParams_t* pargs = (args_hipGraphMemsetNodeGetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamWriteValue32` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWriteValue32` function call.
 *
 * @struct args_hipStreamWriteValue32_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWriteValue32 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint32_t value (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamWriteValue32
typedef struct {
	hipStream_t stream;
	void * ptr;
	uint32_t value;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamWriteValue32_t;

#define GET_ARGS_VALUE_hipStreamWriteValue32(activity) { \
	args_hipStreamWriteValue32_t* args = (args_hipStreamWriteValue32_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->ptr = (void *) ptr; \
	args->value = (uint32_t) value; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamSynchronize_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamSynchronize_spt` function call.
 *
 * @struct args_hipStreamSynchronize_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamSynchronize_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipStreamSynchronize_spt
typedef struct {
	hipStream_t stream;
	hipError_t retval;
} args_hipStreamSynchronize_spt_t;

#define GET_ARGS_VALUE_hipStreamSynchronize_spt(activity) { \
	args_hipStreamSynchronize_spt_t* args = (args_hipStreamSynchronize_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGraphMemTrim` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGraphMemTrim` function call.
 *
 * @struct args_hipDeviceGraphMemTrim_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGraphMemTrim (
 *			int device (int)
 *	)
 */
#if HAVE_hipDeviceGraphMemTrim
typedef struct {
	int device;
	hipError_t retval;
} args_hipDeviceGraphMemTrim_t;

#define GET_ARGS_VALUE_hipDeviceGraphMemTrim(activity) { \
	args_hipDeviceGraphMemTrim_t* args = (args_hipDeviceGraphMemTrim_t*) activity->args; \
	args->device = (int) device; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamDestroy` function call.
 *
 * @struct args_hipStreamDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipStreamDestroy (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipStreamDestroy
typedef struct {
	hipStream_t stream;
	hipError_t retval;
} args_hipStreamDestroy_t;

#define GET_ARGS_VALUE_hipStreamDestroy(activity) { \
	args_hipStreamDestroy_t* args = (args_hipStreamDestroy_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetArray` function call.
 *
 * @struct args_hipTexRefSetArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetArray (
 *			textureReference * tex (struct textureReference*)
 *			hipArray_const_t array (const struct hipArray *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipTexRefSetArray
typedef struct {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	hipArray_const_t array;
	unsigned int flags;
	hipError_t retval;
} args_hipTexRefSetArray_t;

#define GET_ARGS_VALUE_hipTexRefSetArray(activity) { \
	args_hipTexRefSetArray_t* args = (args_hipTexRefSetArray_t*) activity->args; \
	args->tex = (textureReference *) tex; \
	args->array = (hipArray_const_t) array; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipTexRefSetArray(args) { \
	args_hipTexRefSetArray_t* pargs = (args_hipTexRefSetArray_t*) args; \
	if (pargs->tex != NULL) { \
		pargs->tex__ref.val = *pargs->tex; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyParam2DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyParam2DAsync` function call.
 *
 * @struct args_hipMemcpyParam2DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyParam2DAsync (
 *			const hip_Memcpy2D * pCopy (const struct hip_Memcpy2D *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyParam2DAsync
typedef struct {
	hip_Memcpy2D * pCopy;
	struct {
		hip_Memcpy2D val;
	} pCopy__ref;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyParam2DAsync_t;

#define GET_ARGS_VALUE_hipMemcpyParam2DAsync(activity) { \
	args_hipMemcpyParam2DAsync_t* args = (args_hipMemcpyParam2DAsync_t*) activity->args; \
	args->pCopy = (hip_Memcpy2D *) pCopy; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipMemcpyParam2DAsync(args) { \
	args_hipMemcpyParam2DAsync_t* pargs = (args_hipMemcpyParam2DAsync_t*) args; \
	if (pargs->pCopy != NULL) { \
		pargs->pCopy__ref.val = *pargs->pCopy; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolExportPointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolExportPointer` function call.
 *
 * @struct args_hipMemPoolExportPointer_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolExportPointer (
 *			hipMemPoolPtrExportData * export_data (struct hipMemPoolPtrExportData*)
 *			void * dev_ptr (void *)
 *	)
 */
#if HAVE_hipMemPoolExportPointer
typedef struct {
	hipMemPoolPtrExportData * export_data;
	struct {
		hipMemPoolPtrExportData val;
	} export_data__ref;
	void * dev_ptr;
	hipError_t retval;
} args_hipMemPoolExportPointer_t;

#define GET_ARGS_VALUE_hipMemPoolExportPointer(activity) { \
	args_hipMemPoolExportPointer_t* args = (args_hipMemPoolExportPointer_t*) activity->args; \
	args->export_data = (hipMemPoolPtrExportData *) export_data; \
	args->dev_ptr = (void *) dev_ptr; \
};

#define GET_PTRS_VALUE_hipMemPoolExportPointer(args) { \
	args_hipMemPoolExportPointer_t* pargs = (args_hipMemPoolExportPointer_t*) args; \
	if (pargs->export_data != NULL) { \
		pargs->export_data__ref.val = *pargs->export_data; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphEventRecordNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventRecordNodeSetEvent` function call.
 *
 * @struct args_hipGraphEventRecordNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventRecordNodeSetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipGraphEventRecordNodeSetEvent
typedef struct {
	hipGraphNode_t node;
	hipEvent_t event;
	hipError_t retval;
} args_hipGraphEventRecordNodeSetEvent_t;

#define GET_ARGS_VALUE_hipGraphEventRecordNodeSetEvent(activity) { \
	args_hipGraphEventRecordNodeSetEvent_t* args = (args_hipGraphEventRecordNodeSetEvent_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->event = (hipEvent_t) event; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxDestroy` function call.
 *
 * @struct args_hipCtxDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipCtxDestroy (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
#if HAVE_hipCtxDestroy
typedef struct {
	hipCtx_t ctx;
	hipError_t retval;
} args_hipCtxDestroy_t;

#define GET_ARGS_VALUE_hipCtxDestroy(activity) { \
	args_hipCtxDestroy_t* args = (args_hipCtxDestroy_t*) activity->args; \
	args->ctx = (hipCtx_t) ctx; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipArrayDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayDestroy` function call.
 *
 * @struct args_hipArrayDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipArrayDestroy (
 *			hipArray_t array (struct hipArray *)
 *	)
 */
#if HAVE_hipArrayDestroy
typedef struct {
	hipArray_t array;
	hipError_t retval;
} args_hipArrayDestroy_t;

#define GET_ARGS_VALUE_hipArrayDestroy(activity) { \
	args_hipArrayDestroy_t* args = (args_hipArrayDestroy_t*) activity->args; \
	args->array = (hipArray_t) array; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemGetAllocationGranularity` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAllocationGranularity` function call.
 *
 * @struct args_hipMemGetAllocationGranularity_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAllocationGranularity (
 *			size_t * granularity (unsigned long*)
 *			const hipMemAllocationProp * prop (const struct hipMemAllocationProp *)
 *			hipMemAllocationGranularity_flags option (enum hipMemAllocationGranularity_flags)
 *	)
 */
#if HAVE_hipMemGetAllocationGranularity
typedef struct {
	size_t * granularity;
	struct {
		size_t val;
	} granularity__ref;
	hipMemAllocationProp * prop;
	struct {
		hipMemAllocationProp val;
	} prop__ref;
	hipMemAllocationGranularity_flags option;
	hipError_t retval;
} args_hipMemGetAllocationGranularity_t;

#define GET_ARGS_VALUE_hipMemGetAllocationGranularity(activity) { \
	args_hipMemGetAllocationGranularity_t* args = (args_hipMemGetAllocationGranularity_t*) activity->args; \
	args->granularity = (size_t *) granularity; \
	args->prop = (hipMemAllocationProp *) prop; \
	args->option = (hipMemAllocationGranularity_flags) option; \
};

#define GET_PTRS_VALUE_hipMemGetAllocationGranularity(args) { \
	args_hipMemGetAllocationGranularity_t* pargs = (args_hipMemGetAllocationGranularity_t*) args; \
	if (pargs->granularity != NULL) { \
		pargs->granularity__ref.val = *pargs->granularity; \
	} \
	if (pargs->prop != NULL) { \
		pargs->prop__ref.val = *pargs->prop; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphClone` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphClone` function call.
 *
 * @struct args_hipGraphClone_t
 *
 * @note 
 *	hipError_t
 *	hipGraphClone (
 *			hipGraph_t * pGraphClone (struct ihipGraph **)
 *			hipGraph_t originalGraph (struct ihipGraph *)
 *	)
 */
#if HAVE_hipGraphClone
typedef struct {
	hipGraph_t * pGraphClone;
	struct {
		hipGraph_t val;
	} pGraphClone__ref;
	hipGraph_t originalGraph;
	hipError_t retval;
} args_hipGraphClone_t;

#define GET_ARGS_VALUE_hipGraphClone(activity) { \
	args_hipGraphClone_t* args = (args_hipGraphClone_t*) activity->args; \
	args->pGraphClone = (hipGraph_t *) pGraphClone; \
	args->originalGraph = (hipGraph_t) originalGraph; \
};

#define GET_PTRS_VALUE_hipGraphClone(args) { \
	args_hipGraphClone_t* pargs = (args_hipGraphClone_t*) args; \
	if (pargs->pGraphClone != NULL) { \
		pargs->pGraphClone__ref.val = *pargs->pGraphClone; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset2DAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2DAsync_spt` function call.
 *
 * @struct args_hipMemset2DAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2DAsync_spt (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemset2DAsync_spt
typedef struct {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemset2DAsync_spt_t;

#define GET_ARGS_VALUE_hipMemset2DAsync_spt(activity) { \
	args_hipMemset2DAsync_spt_t* args = (args_hipMemset2DAsync_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->pitch = (size_t) pitch; \
	args->value = (int) value; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipBindTexture2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTexture2D` function call.
 *
 * @struct args_hipBindTexture2D_t
 *
 * @note 
 *	hipError_t
 *	hipBindTexture2D (
 *			size_t * offset (unsigned long*)
 *			const textureReference * tex (const struct textureReference *)
 *			const void * devPtr (const void *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			size_t pitch (unsigned long)
 *	)
 */
#if HAVE_hipBindTexture2D
typedef struct {
	size_t * offset;
	struct {
		size_t val;
	} offset__ref;
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	void * devPtr;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	size_t width;
	size_t height;
	size_t pitch;
	hipError_t retval;
} args_hipBindTexture2D_t;

#define GET_ARGS_VALUE_hipBindTexture2D(activity) { \
	args_hipBindTexture2D_t* args = (args_hipBindTexture2D_t*) activity->args; \
	args->offset = (size_t *) offset; \
	args->tex = (textureReference *) tex; \
	args->devPtr = (void *) devPtr; \
	args->desc = (hipChannelFormatDesc *) desc; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->pitch = (size_t) pitch; \
};

#define GET_PTRS_VALUE_hipBindTexture2D(args) { \
	args_hipBindTexture2D_t* pargs = (args_hipBindTexture2D_t*) args; \
	if (pargs->offset != NULL) { \
		pargs->offset__ref.val = *pargs->offset; \
	} \
	if (pargs->tex != NULL) { \
		pargs->tex__ref.val = *pargs->tex; \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipArrayGetInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayGetInfo` function call.
 *
 * @struct args_hipArrayGetInfo_t
 *
 * @note 
 *	hipError_t
 *	hipArrayGetInfo (
 *			hipChannelFormatDesc * desc (struct hipChannelFormatDesc*)
 *			hipExtent * extent (struct hipExtent*)
 *			unsigned int * flags (unsigned int *)
 *			hipArray_t array (struct hipArray *)
 *	)
 */
#if HAVE_hipArrayGetInfo
typedef struct {
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	hipExtent * extent;
	struct {
		hipExtent val;
	} extent__ref;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipArray_t array;
	hipError_t retval;
} args_hipArrayGetInfo_t;

#define GET_ARGS_VALUE_hipArrayGetInfo(activity) { \
	args_hipArrayGetInfo_t* args = (args_hipArrayGetInfo_t*) activity->args; \
	args->desc = (hipChannelFormatDesc *) desc; \
	args->extent = (hipExtent *) extent; \
	args->flags = (unsigned int *) flags; \
	args->array = (hipArray_t) array; \
};

#define GET_PTRS_VALUE_hipArrayGetInfo(args) { \
	args_hipArrayGetInfo_t* pargs = (args_hipArrayGetInfo_t*) args; \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
	if (pargs->extent != NULL) { \
		pargs->extent__ref.val = *pargs->extent; \
	} \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresSignalNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresSignalNodeGetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresSignalNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresSignalNodeGetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipExternalSemaphoreSignalNodeParams * params_out (struct hipExternalSemaphoreSignalNodeParams*)
 *	)
 */
#if HAVE_hipGraphExternalSemaphoresSignalNodeGetParams
typedef struct {
	hipGraphNode_t hNode;
	hipExternalSemaphoreSignalNodeParams * params_out;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} params_out__ref;
	hipError_t retval;
} args_hipGraphExternalSemaphoresSignalNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresSignalNodeGetParams(activity) { \
	args_hipGraphExternalSemaphoresSignalNodeGetParams_t* args = (args_hipGraphExternalSemaphoresSignalNodeGetParams_t*) activity->args; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->params_out = (hipExternalSemaphoreSignalNodeParams *) params_out; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeGetParams(args) { \
	args_hipGraphExternalSemaphoresSignalNodeGetParams_t* pargs = (args_hipGraphExternalSemaphoresSignalNodeGetParams_t*) args; \
	if (pargs->params_out != NULL) { \
		pargs->params_out__ref.val = *pargs->params_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetStreamPriorityRange` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetStreamPriorityRange` function call.
 *
 * @struct args_hipDeviceGetStreamPriorityRange_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetStreamPriorityRange (
 *			int * leastPriority (int *)
 *			int * greatestPriority (int *)
 *	)
 */
#if HAVE_hipDeviceGetStreamPriorityRange
typedef struct {
	int * leastPriority;
	struct {
		int val;
	} leastPriority__ref;
	int * greatestPriority;
	struct {
		int val;
	} greatestPriority__ref;
	hipError_t retval;
} args_hipDeviceGetStreamPriorityRange_t;

#define GET_ARGS_VALUE_hipDeviceGetStreamPriorityRange(activity) { \
	args_hipDeviceGetStreamPriorityRange_t* args = (args_hipDeviceGetStreamPriorityRange_t*) activity->args; \
	args->leastPriority = (int *) leastPriority; \
	args->greatestPriority = (int *) greatestPriority; \
};

#define GET_PTRS_VALUE_hipDeviceGetStreamPriorityRange(args) { \
	args_hipDeviceGetStreamPriorityRange_t* pargs = (args_hipDeviceGetStreamPriorityRange_t*) args; \
	if (pargs->leastPriority != NULL) { \
		pargs->leastPriority__ref.val = *pargs->leastPriority; \
	} \
	if (pargs->greatestPriority != NULL) { \
		pargs->greatestPriority__ref.val = *pargs->greatestPriority; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecChildGraphNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecChildGraphNodeSetParams` function call.
 *
 * @struct args_hipGraphExecChildGraphNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecChildGraphNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraph_t childGraph (struct ihipGraph *)
 *	)
 */
#if HAVE_hipGraphExecChildGraphNodeSetParams
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	hipGraph_t childGraph;
	hipError_t retval;
} args_hipGraphExecChildGraphNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExecChildGraphNodeSetParams(activity) { \
	args_hipGraphExecChildGraphNodeSetParams_t* args = (args_hipGraphExecChildGraphNodeSetParams_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->childGraph = (hipGraph_t) childGraph; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset2D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2D_spt` function call.
 *
 * @struct args_hipMemset2D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2D_spt (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *	)
 */
#if HAVE_hipMemset2D_spt
typedef struct {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	hipError_t retval;
} args_hipMemset2D_spt_t;

#define GET_ARGS_VALUE_hipMemset2D_spt(activity) { \
	args_hipMemset2D_spt_t* args = (args_hipMemset2D_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->pitch = (size_t) pitch; \
	args->value = (int) value; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetDefaultMemPool` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetDefaultMemPool` function call.
 *
 * @struct args_hipDeviceGetDefaultMemPool_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetDefaultMemPool (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			int device (int)
 *	)
 */
#if HAVE_hipDeviceGetDefaultMemPool
typedef struct {
	hipMemPool_t * mem_pool;
	struct {
		hipMemPool_t val;
	} mem_pool__ref;
	int device;
	hipError_t retval;
} args_hipDeviceGetDefaultMemPool_t;

#define GET_ARGS_VALUE_hipDeviceGetDefaultMemPool(activity) { \
	args_hipDeviceGetDefaultMemPool_t* args = (args_hipDeviceGetDefaultMemPool_t*) activity->args; \
	args->mem_pool = (hipMemPool_t *) mem_pool; \
	args->device = (int) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetDefaultMemPool(args) { \
	args_hipDeviceGetDefaultMemPool_t* pargs = (args_hipDeviceGetDefaultMemPool_t*) args; \
	if (pargs->mem_pool != NULL) { \
		pargs->mem_pool__ref.val = *pargs->mem_pool; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxCreate` function call.
 *
 * @struct args_hipCtxCreate_t
 *
 * @note 
 *	hipError_t
 *	hipCtxCreate (
 *			hipCtx_t * ctx (struct ihipCtx_t **)
 *			unsigned int flags (unsigned int)
 *			hipDevice_t device (int)
 *	)
 */
#if HAVE_hipCtxCreate
typedef struct {
	hipCtx_t * ctx;
	struct {
		hipCtx_t val;
	} ctx__ref;
	unsigned int flags;
	hipDevice_t device;
	hipError_t retval;
} args_hipCtxCreate_t;

#define GET_ARGS_VALUE_hipCtxCreate(activity) { \
	args_hipCtxCreate_t* args = (args_hipCtxCreate_t*) activity->args; \
	args->ctx = (hipCtx_t *) ctx; \
	args->flags = (unsigned int) flags; \
	args->device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipCtxCreate(args) { \
	args_hipCtxCreate_t* pargs = (args_hipCtxCreate_t*) args; \
	if (pargs->ctx != NULL) { \
		pargs->ctx__ref.val = *pargs->ctx; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamIsCapturing` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamIsCapturing` function call.
 *
 * @struct args_hipStreamIsCapturing_t
 *
 * @note 
 *	hipError_t
 *	hipStreamIsCapturing (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *	)
 */
#if HAVE_hipStreamIsCapturing
typedef struct {
	hipStream_t stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	hipError_t retval;
} args_hipStreamIsCapturing_t;

#define GET_ARGS_VALUE_hipStreamIsCapturing(activity) { \
	args_hipStreamIsCapturing_t* args = (args_hipStreamIsCapturing_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
};

#define GET_PTRS_VALUE_hipStreamIsCapturing(args) { \
	args_hipStreamIsCapturing_t* pargs = (args_hipStreamIsCapturing_t*) args; \
	if (pargs->pCaptureStatus != NULL) { \
		pargs->pCaptureStatus__ref.val = *pargs->pCaptureStatus; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamUpdateCaptureDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamUpdateCaptureDependencies` function call.
 *
 * @struct args_hipStreamUpdateCaptureDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipStreamUpdateCaptureDependencies (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipGraphNode_t * dependencies (struct hipGraphNode **)
 *			size_t numDependencies (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamUpdateCaptureDependencies
typedef struct {
	hipStream_t stream;
	hipGraphNode_t * dependencies;
	struct {
		hipGraphNode_t val;
	} dependencies__ref;
	size_t numDependencies;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamUpdateCaptureDependencies_t;

#define GET_ARGS_VALUE_hipStreamUpdateCaptureDependencies(activity) { \
	args_hipStreamUpdateCaptureDependencies_t* args = (args_hipStreamUpdateCaptureDependencies_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->dependencies = (hipGraphNode_t *) dependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipStreamUpdateCaptureDependencies(args) { \
	args_hipStreamUpdateCaptureDependencies_t* pargs = (args_hipStreamUpdateCaptureDependencies_t*) args; \
	if (pargs->dependencies != NULL) { \
		pargs->dependencies__ref.val = *pargs->dependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSynchronize` function call.
 *
 * @struct args_hipDeviceSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSynchronize (
 *	)
 */
#if HAVE_hipDeviceSynchronize
typedef struct {
	hipError_t retval;
} args_hipDeviceSynchronize_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyFromSymbolAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyFromSymbolAsync` function call.
 *
 * @struct args_hipMemcpyFromSymbolAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyFromSymbolAsync (
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyFromSymbolAsync
typedef struct {
	void * dst;
	void * symbol;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyFromSymbolAsync_t;

#define GET_ARGS_VALUE_hipMemcpyFromSymbolAsync(activity) { \
	args_hipMemcpyFromSymbolAsync_t* args = (args_hipMemcpyFromSymbolAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->symbol = (void *) symbol; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphDestroyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphDestroyNode` function call.
 *
 * @struct args_hipGraphDestroyNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphDestroyNode (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *	)
 */
#if HAVE_hipGraphDestroyNode
typedef struct {
	hipGraphNode_t node;
	hipError_t retval;
} args_hipGraphDestroyNode_t;

#define GET_ARGS_VALUE_hipGraphDestroyNode(activity) { \
	args_hipGraphDestroyNode_t* args = (args_hipGraphDestroyNode_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipUserObjectRetain` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUserObjectRetain` function call.
 *
 * @struct args_hipUserObjectRetain_t
 *
 * @note 
 *	hipError_t
 *	hipUserObjectRetain (
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *	)
 */
#if HAVE_hipUserObjectRetain
typedef struct {
	hipUserObject_t object;
	unsigned int count;
	hipError_t retval;
} args_hipUserObjectRetain_t;

#define GET_ARGS_VALUE_hipUserObjectRetain(activity) { \
	args_hipUserObjectRetain_t* args = (args_hipUserObjectRetain_t*) activity->args; \
	args->object = (hipUserObject_t) object; \
	args->count = (unsigned int) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecEventWaitNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecEventWaitNodeSetEvent` function call.
 *
 * @struct args_hipGraphExecEventWaitNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecEventWaitNodeSetEvent (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipGraphExecEventWaitNodeSetEvent
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t hNode;
	hipEvent_t event;
	hipError_t retval;
} args_hipGraphExecEventWaitNodeSetEvent_t;

#define GET_ARGS_VALUE_hipGraphExecEventWaitNodeSetEvent(activity) { \
	args_hipGraphExecEventWaitNodeSetEvent_t* args = (args_hipGraphExecEventWaitNodeSetEvent_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->event = (hipEvent_t) event; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemAddressReserve` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAddressReserve` function call.
 *
 * @struct args_hipMemAddressReserve_t
 *
 * @note 
 *	hipError_t
 *	hipMemAddressReserve (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *			size_t alignment (unsigned long)
 *			void * addr (void *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
#if HAVE_hipMemAddressReserve
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	size_t alignment;
	void * addr;
	unsigned long long flags;
	hipError_t retval;
} args_hipMemAddressReserve_t;

#define GET_ARGS_VALUE_hipMemAddressReserve(activity) { \
	args_hipMemAddressReserve_t* args = (args_hipMemAddressReserve_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->size = (size_t) size; \
	args->alignment = (size_t) alignment; \
	args->addr = (void *) addr; \
	args->flags = (unsigned long long) flags; \
};

#define GET_PTRS_VALUE_hipMemAddressReserve(args) { \
	args_hipMemAddressReserve_t* pargs = (args_hipMemAddressReserve_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemsetNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemsetNode` function call.
 *
 * @struct args_hipGraphAddMemsetNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemsetNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipMemsetParams * pMemsetParams (const struct hipMemsetParams *)
 *	)
 */
#if HAVE_hipGraphAddMemsetNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipMemsetParams * pMemsetParams;
	struct {
		hipMemsetParams val;
	} pMemsetParams__ref;
	hipError_t retval;
} args_hipGraphAddMemsetNode_t;

#define GET_ARGS_VALUE_hipGraphAddMemsetNode(activity) { \
	args_hipGraphAddMemsetNode_t* args = (args_hipGraphAddMemsetNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->pMemsetParams = (hipMemsetParams *) pMemsetParams; \
};

#define GET_PTRS_VALUE_hipGraphAddMemsetNode(args) { \
	args_hipGraphAddMemsetNode_t* pargs = (args_hipGraphAddMemsetNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->pMemsetParams != NULL) { \
		pargs->pMemsetParams__ref.val = *pargs->pMemsetParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphicsResourceGetMappedPointer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsResourceGetMappedPointer` function call.
 *
 * @struct args_hipGraphicsResourceGetMappedPointer_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsResourceGetMappedPointer (
 *			void ** devPtr (void **)
 *			size_t * size (unsigned long*)
 *			hipGraphicsResource_t resource (struct _hipGraphicsResource*)
 *	)
 */
#if HAVE_hipGraphicsResourceGetMappedPointer
typedef struct {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	size_t * size;
	struct {
		size_t val;
	} size__ref;
	hipGraphicsResource_t resource;
	hipError_t retval;
} args_hipGraphicsResourceGetMappedPointer_t;

#define GET_ARGS_VALUE_hipGraphicsResourceGetMappedPointer(activity) { \
	args_hipGraphicsResourceGetMappedPointer_t* args = (args_hipGraphicsResourceGetMappedPointer_t*) activity->args; \
	args->devPtr = (void **) devPtr; \
	args->size = (size_t *) size; \
	args->resource = (hipGraphicsResource_t) resource; \
};

#define GET_PTRS_VALUE_hipGraphicsResourceGetMappedPointer(args) { \
	args_hipGraphicsResourceGetMappedPointer_t* pargs = (args_hipGraphicsResourceGetMappedPointer_t*) args; \
	if (pargs->devPtr != NULL) { \
		pargs->devPtr__ref.ptr1 = *pargs->devPtr; \
	} \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamBeginCapture_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamBeginCapture_spt` function call.
 *
 * @struct args_hipStreamBeginCapture_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamBeginCapture_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureMode mode (enum hipStreamCaptureMode)
 *	)
 */
#if HAVE_hipStreamBeginCapture_spt
typedef struct {
	hipStream_t stream;
	hipStreamCaptureMode mode;
	hipError_t retval;
} args_hipStreamBeginCapture_spt_t;

#define GET_ARGS_VALUE_hipStreamBeginCapture_spt(activity) { \
	args_hipStreamBeginCapture_spt_t* args = (args_hipStreamBeginCapture_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->mode = (hipStreamCaptureMode) mode; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetUuid` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetUuid` function call.
 *
 * @struct args_hipDeviceGetUuid_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetUuid (
 *			hipUUID * uuid (struct hipUUID_t*)
 *			hipDevice_t device (int)
 *	)
 */
#if HAVE_hipDeviceGetUuid
typedef struct {
	hipUUID * uuid;
	struct {
		hipUUID val;
	} uuid__ref;
	hipDevice_t device;
	hipError_t retval;
} args_hipDeviceGetUuid_t;

#define GET_ARGS_VALUE_hipDeviceGetUuid(activity) { \
	args_hipDeviceGetUuid_t* args = (args_hipDeviceGetUuid_t*) activity->args; \
	args->uuid = (hipUUID *) uuid; \
	args->device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetUuid(args) { \
	args_hipDeviceGetUuid_t* pargs = (args_hipDeviceGetUuid_t*) args; \
	if (pargs->uuid != NULL) { \
		pargs->uuid__ref.val = *pargs->uuid; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleLaunchKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLaunchKernel` function call.
 *
 * @struct args_hipModuleLaunchKernel_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLaunchKernel (
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			unsigned int gridDimX (unsigned int)
 *			unsigned int gridDimY (unsigned int)
 *			unsigned int gridDimZ (unsigned int)
 *			unsigned int blockDimX (unsigned int)
 *			unsigned int blockDimY (unsigned int)
 *			unsigned int blockDimZ (unsigned int)
 *			unsigned int sharedMemBytes (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *			void ** kernelParams (void **)
 *			void ** extra (void **)
 *	)
 */
#if HAVE_hipModuleLaunchKernel
typedef struct {
	hipFunction_t f;
	unsigned int gridDimX;
	unsigned int gridDimY;
	unsigned int gridDimZ;
	unsigned int blockDimX;
	unsigned int blockDimY;
	unsigned int blockDimZ;
	unsigned int sharedMemBytes;
	hipStream_t stream;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	void ** extra;
	struct {
		void* ptr1;
	} extra__ref;
	hipError_t retval;
} args_hipModuleLaunchKernel_t;

#define GET_ARGS_VALUE_hipModuleLaunchKernel(activity) { \
	args_hipModuleLaunchKernel_t* args = (args_hipModuleLaunchKernel_t*) activity->args; \
	args->f = (hipFunction_t) f; \
	args->gridDimX = (unsigned int) gridDimX; \
	args->gridDimY = (unsigned int) gridDimY; \
	args->gridDimZ = (unsigned int) gridDimZ; \
	args->blockDimX = (unsigned int) blockDimX; \
	args->blockDimY = (unsigned int) blockDimY; \
	args->blockDimZ = (unsigned int) blockDimZ; \
	args->sharedMemBytes = (unsigned int) sharedMemBytes; \
	args->stream = (hipStream_t) stream; \
	args->kernelParams = (void **) kernelParams; \
	args->extra = (void **) extra; \
};

#define GET_PTRS_VALUE_hipModuleLaunchKernel(args) { \
	args_hipModuleLaunchKernel_t* pargs = (args_hipModuleLaunchKernel_t*) args; \
	if (pargs->kernelParams != NULL) { \
		pargs->kernelParams__ref.ptr1 = *pargs->kernelParams; \
	} \
	if (pargs->extra != NULL) { \
		pargs->extra__ref.ptr1 = *pargs->extra; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddEmptyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddEmptyNode` function call.
 *
 * @struct args_hipGraphAddEmptyNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddEmptyNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *	)
 */
#if HAVE_hipGraphAddEmptyNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipError_t retval;
} args_hipGraphAddEmptyNode_t;

#define GET_ARGS_VALUE_hipGraphAddEmptyNode(activity) { \
	args_hipGraphAddEmptyNode_t* args = (args_hipGraphAddEmptyNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
};

#define GET_PTRS_VALUE_hipGraphAddEmptyNode(args) { \
	args_hipGraphAddEmptyNode_t* pargs = (args_hipGraphAddEmptyNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemRangeGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRangeGetAttribute` function call.
 *
 * @struct args_hipMemRangeGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipMemRangeGetAttribute (
 *			void * data (void *)
 *			size_t data_size (unsigned long)
 *			hipMemRangeAttribute attribute (enum hipMemRangeAttribute)
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemRangeGetAttribute
typedef struct {
	void * data;
	size_t data_size;
	hipMemRangeAttribute attribute;
	void * dev_ptr;
	size_t count;
	hipError_t retval;
} args_hipMemRangeGetAttribute_t;

#define GET_ARGS_VALUE_hipMemRangeGetAttribute(activity) { \
	args_hipMemRangeGetAttribute_t* args = (args_hipMemRangeGetAttribute_t*) activity->args; \
	args->data = (void *) data; \
	args->data_size = (size_t) data_size; \
	args->attribute = (hipMemRangeAttribute) attribute; \
	args->dev_ptr = (void *) dev_ptr; \
	args->count = (size_t) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphInstantiateWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphInstantiateWithFlags` function call.
 *
 * @struct args_hipGraphInstantiateWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipGraphInstantiateWithFlags (
 *			hipGraphExec_t * pGraphExec (struct hipGraphExec **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
#if HAVE_hipGraphInstantiateWithFlags
typedef struct {
	hipGraphExec_t * pGraphExec;
	struct {
		hipGraphExec_t val;
	} pGraphExec__ref;
	hipGraph_t graph;
	unsigned long long flags;
	hipError_t retval;
} args_hipGraphInstantiateWithFlags_t;

#define GET_ARGS_VALUE_hipGraphInstantiateWithFlags(activity) { \
	args_hipGraphInstantiateWithFlags_t* args = (args_hipGraphInstantiateWithFlags_t*) activity->args; \
	args->pGraphExec = (hipGraphExec_t *) pGraphExec; \
	args->graph = (hipGraph_t) graph; \
	args->flags = (unsigned long long) flags; \
};

#define GET_PTRS_VALUE_hipGraphInstantiateWithFlags(args) { \
	args_hipGraphInstantiateWithFlags_t* pargs = (args_hipGraphInstantiateWithFlags_t*) args; \
	if (pargs->pGraphExec != NULL) { \
		pargs->pGraphExec__ref.val = *pargs->pGraphExec; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxPushCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxPushCurrent` function call.
 *
 * @struct args_hipCtxPushCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxPushCurrent (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
#if HAVE_hipCtxPushCurrent
typedef struct {
	hipCtx_t ctx;
	hipError_t retval;
} args_hipCtxPushCurrent_t;

#define GET_ARGS_VALUE_hipCtxPushCurrent(activity) { \
	args_hipCtxPushCurrent_t* args = (args_hipCtxPushCurrent_t*) activity->args; \
	args->ctx = (hipCtx_t) ctx; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxGetApiVersion` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetApiVersion` function call.
 *
 * @struct args_hipCtxGetApiVersion_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetApiVersion (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *			int * apiVersion (int *)
 *	)
 */
#if HAVE_hipCtxGetApiVersion
typedef struct {
	hipCtx_t ctx;
	int * apiVersion;
	struct {
		int val;
	} apiVersion__ref;
	hipError_t retval;
} args_hipCtxGetApiVersion_t;

#define GET_ARGS_VALUE_hipCtxGetApiVersion(activity) { \
	args_hipCtxGetApiVersion_t* args = (args_hipCtxGetApiVersion_t*) activity->args; \
	args->ctx = (hipCtx_t) ctx; \
	args->apiVersion = (int *) apiVersion; \
};

#define GET_PTRS_VALUE_hipCtxGetApiVersion(args) { \
	args_hipCtxGetApiVersion_t* pargs = (args_hipCtxGetApiVersion_t*) args; \
	if (pargs->apiVersion != NULL) { \
		pargs->apiVersion__ref.val = *pargs->apiVersion; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipBindTexture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTexture` function call.
 *
 * @struct args_hipBindTexture_t
 *
 * @note 
 *	hipError_t
 *	hipBindTexture (
 *			size_t * offset (unsigned long*)
 *			const textureReference * tex (const struct textureReference *)
 *			const void * devPtr (const void *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			size_t size (unsigned long)
 *	)
 */
#if HAVE_hipBindTexture
typedef struct {
	size_t * offset;
	struct {
		size_t val;
	} offset__ref;
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	void * devPtr;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	size_t size;
	hipError_t retval;
} args_hipBindTexture_t;

#define GET_ARGS_VALUE_hipBindTexture(activity) { \
	args_hipBindTexture_t* args = (args_hipBindTexture_t*) activity->args; \
	args->offset = (size_t *) offset; \
	args->tex = (textureReference *) tex; \
	args->devPtr = (void *) devPtr; \
	args->desc = (hipChannelFormatDesc *) desc; \
	args->size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipBindTexture(args) { \
	args_hipBindTexture_t* pargs = (args_hipBindTexture_t*) args; \
	if (pargs->offset != NULL) { \
		pargs->offset__ref.val = *pargs->offset; \
	} \
	if (pargs->tex != NULL) { \
		pargs->tex__ref.val = *pargs->tex; \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamBeginCapture` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamBeginCapture` function call.
 *
 * @struct args_hipStreamBeginCapture_t
 *
 * @note 
 *	hipError_t
 *	hipStreamBeginCapture (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureMode mode (enum hipStreamCaptureMode)
 *	)
 */
#if HAVE_hipStreamBeginCapture
typedef struct {
	hipStream_t stream;
	hipStreamCaptureMode mode;
	hipError_t retval;
} args_hipStreamBeginCapture_t;

#define GET_ARGS_VALUE_hipStreamBeginCapture(activity) { \
	args_hipStreamBeginCapture_t* args = (args_hipStreamBeginCapture_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->mode = (hipStreamCaptureMode) mode; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipProfilerStart` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipProfilerStart` function call.
 *
 * @struct args_hipProfilerStart_t
 *
 * @note 
 *	hipError_t
 *	hipProfilerStart (
 *	)
 */
#if HAVE_hipProfilerStart
typedef struct {
	hipError_t retval;
} args_hipProfilerStart_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoDAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoDAsync` function call.
 *
 * @struct args_hipMemcpyHtoDAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoDAsync (
 *			hipDeviceptr_t dst (void *)
 *			void * src (void *)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyHtoDAsync
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyHtoDAsync_t;

#define GET_ARGS_VALUE_hipMemcpyHtoDAsync(activity) { \
	args_hipMemcpyHtoDAsync_t* args = (args_hipMemcpyHtoDAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetDeviceFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetDeviceFlags` function call.
 *
 * @struct args_hipGetDeviceFlags_t
 *
 * @note 
 *	hipError_t
 *	hipGetDeviceFlags (
 *			unsigned int * flags (unsigned int *)
 *	)
 */
#if HAVE_hipGetDeviceFlags
typedef struct {
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
} args_hipGetDeviceFlags_t;

#define GET_ARGS_VALUE_hipGetDeviceFlags(activity) { \
	args_hipGetDeviceFlags_t* args = (args_hipGetDeviceFlags_t*) activity->args; \
	args->flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipGetDeviceFlags(args) { \
	args_hipGetDeviceFlags_t* pargs = (args_hipGetDeviceFlags_t*) args; \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemRangeGetAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRangeGetAttributes` function call.
 *
 * @struct args_hipMemRangeGetAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipMemRangeGetAttributes (
 *			void ** data (void **)
 *			size_t * data_sizes (unsigned long*)
 *			hipMemRangeAttribute * attributes (enum hipMemRangeAttribute*)
 *			size_t num_attributes (unsigned long)
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *	)
 */
#if HAVE_hipMemRangeGetAttributes
typedef struct {
	void ** data;
	struct {
		void* ptr1;
	} data__ref;
	size_t * data_sizes;
	struct {
		size_t val;
	} data_sizes__ref;
	hipMemRangeAttribute * attributes;
	struct {
		hipMemRangeAttribute val;
	} attributes__ref;
	size_t num_attributes;
	void * dev_ptr;
	size_t count;
	hipError_t retval;
} args_hipMemRangeGetAttributes_t;

#define GET_ARGS_VALUE_hipMemRangeGetAttributes(activity) { \
	args_hipMemRangeGetAttributes_t* args = (args_hipMemRangeGetAttributes_t*) activity->args; \
	args->data = (void **) data; \
	args->data_sizes = (size_t *) data_sizes; \
	args->attributes = (hipMemRangeAttribute *) attributes; \
	args->num_attributes = (size_t) num_attributes; \
	args->dev_ptr = (void *) dev_ptr; \
	args->count = (size_t) count; \
};

#define GET_PTRS_VALUE_hipMemRangeGetAttributes(args) { \
	args_hipMemRangeGetAttributes_t* pargs = (args_hipMemRangeGetAttributes_t*) args; \
	if (pargs->data != NULL) { \
		pargs->data__ref.ptr1 = *pargs->data; \
	} \
	if (pargs->data_sizes != NULL) { \
		pargs->data_sizes__ref.val = *pargs->data_sizes; \
	} \
	if (pargs->attributes != NULL) { \
		pargs->attributes__ref.val = *pargs->attributes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDestroyExternalSemaphore` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroyExternalSemaphore` function call.
 *
 * @struct args_hipDestroyExternalSemaphore_t
 *
 * @note 
 *	hipError_t
 *	hipDestroyExternalSemaphore (
 *			hipExternalSemaphore_t extSem (void *)
 *	)
 */
#if HAVE_hipDestroyExternalSemaphore
typedef struct {
	void * extSem;
	hipError_t retval;
} args_hipDestroyExternalSemaphore_t;

#define GET_ARGS_VALUE_hipDestroyExternalSemaphore(activity) { \
	args_hipDestroyExternalSemaphore_t* args = (args_hipDestroyExternalSemaphore_t*) activity->args; \
	args->extSem = (void *) extSem; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipIpcOpenEventHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcOpenEventHandle` function call.
 *
 * @struct args_hipIpcOpenEventHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcOpenEventHandle (
 *			hipEvent_t * event (struct ihipEvent_t **)
 *			hipIpcEventHandle_t handle (struct hipIpcEventHandle_st)
 *	)
 */
#if HAVE_hipIpcOpenEventHandle
typedef struct {
	hipEvent_t * event;
	struct {
		hipEvent_t val;
	} event__ref;
	hipIpcEventHandle_t handle;
	hipError_t retval;
} args_hipIpcOpenEventHandle_t;

#define GET_ARGS_VALUE_hipIpcOpenEventHandle(activity) { \
	args_hipIpcOpenEventHandle_t* args = (args_hipIpcOpenEventHandle_t*) activity->args; \
	args->event = (hipEvent_t *) event; \
	args->handle = (hipIpcEventHandle_t) handle; \
};

#define GET_PTRS_VALUE_hipIpcOpenEventHandle(args) { \
	args_hipIpcOpenEventHandle_t* pargs = (args_hipIpcOpenEventHandle_t*) args; \
	if (pargs->event != NULL) { \
		pargs->event__ref.val = *pargs->event; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphUpload` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphUpload` function call.
 *
 * @struct args_hipGraphUpload_t
 *
 * @note 
 *	hipError_t
 *	hipGraphUpload (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipGraphUpload
typedef struct {
	hipGraphExec_t graphExec;
	hipStream_t stream;
	hipError_t retval;
} args_hipGraphUpload_t;

#define GET_ARGS_VALUE_hipGraphUpload(activity) { \
	args_hipGraphUpload_t* args = (args_hipGraphUpload_t*) activity->args; \
	args->graphExec = (hipGraphExec_t) graphExec; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMallocAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocAsync` function call.
 *
 * @struct args_hipMallocAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMallocAsync (
 *			void ** dev_ptr (void **)
 *			size_t size (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMallocAsync
typedef struct {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	size_t size;
	hipStream_t stream;
	hipError_t retval;
} args_hipMallocAsync_t;

#define GET_ARGS_VALUE_hipMallocAsync(activity) { \
	args_hipMallocAsync_t* args = (args_hipMallocAsync_t*) activity->args; \
	args->dev_ptr = (void **) dev_ptr; \
	args->size = (size_t) size; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipMallocAsync(args) { \
	args_hipMallocAsync_t* pargs = (args_hipMallocAsync_t*) args; \
	if (pargs->dev_ptr != NULL) { \
		pargs->dev_ptr__ref.ptr1 = *pargs->dev_ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipOccupancyMaxPotentialBlockSize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipOccupancyMaxPotentialBlockSize` function call.
 *
 * @struct args_hipOccupancyMaxPotentialBlockSize_t
 *
 * @note 
 *	hipError_t
 *	hipOccupancyMaxPotentialBlockSize (
 *			int * gridSize (int *)
 *			int * blockSize (int *)
 *			const void * f (const void *)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			int blockSizeLimit (int)
 *	)
 */
#if HAVE_hipOccupancyMaxPotentialBlockSize
typedef struct {
	int * gridSize;
	struct {
		int val;
	} gridSize__ref;
	int * blockSize;
	struct {
		int val;
	} blockSize__ref;
	void * f;
	size_t dynSharedMemPerBlk;
	int blockSizeLimit;
	hipError_t retval;
} args_hipOccupancyMaxPotentialBlockSize_t;

#define GET_ARGS_VALUE_hipOccupancyMaxPotentialBlockSize(activity) { \
	args_hipOccupancyMaxPotentialBlockSize_t* args = (args_hipOccupancyMaxPotentialBlockSize_t*) activity->args; \
	args->gridSize = (int *) gridSize; \
	args->blockSize = (int *) blockSize; \
	args->f = (void *) f; \
	args->dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	args->blockSizeLimit = (int) blockSizeLimit; \
};

#define GET_PTRS_VALUE_hipOccupancyMaxPotentialBlockSize(args) { \
	args_hipOccupancyMaxPotentialBlockSize_t* pargs = (args_hipOccupancyMaxPotentialBlockSize_t*) args; \
	if (pargs->gridSize != NULL) { \
		pargs->gridSize__ref.val = *pargs->gridSize; \
	} \
	if (pargs->blockSize != NULL) { \
		pargs->blockSize__ref.val = *pargs->blockSize; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDestroyExternalMemory` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDestroyExternalMemory` function call.
 *
 * @struct args_hipDestroyExternalMemory_t
 *
 * @note 
 *	hipError_t
 *	hipDestroyExternalMemory (
 *			hipExternalMemory_t extMem (void *)
 *	)
 */
#if HAVE_hipDestroyExternalMemory
typedef struct {
	void * extMem;
	hipError_t retval;
} args_hipDestroyExternalMemory_t;

#define GET_ARGS_VALUE_hipDestroyExternalMemory(activity) { \
	args_hipDestroyExternalMemory_t* args = (args_hipDestroyExternalMemory_t*) activity->args; \
	args->extMem = (void *) extMem; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `amd_dbgapi_get_build_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `amd_dbgapi_get_build_name` function call.
 *
 * @struct args_amd_dbgapi_get_build_name_t
 *
 * @note 
 *	const char *
 *	amd_dbgapi_get_build_name (
 *	)
 */
#if HAVE_amd_dbgapi_get_build_name
typedef struct {
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
} args_amd_dbgapi_get_build_name_t;

#define GET_PTRS_RET_VALUE_amd_dbgapi_get_build_name(args) { \
	args_amd_dbgapi_get_build_name_t* pargs = (args_amd_dbgapi_get_build_name_t*) args; \
	if (pargs->retval != NULL) { \
		strncpy(pargs->retval__ref.val, pargs->retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNodeToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNodeToSymbol` function call.
 *
 * @struct args_hipGraphAddMemcpyNodeToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNodeToSymbol (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphAddMemcpyNodeToSymbol
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	void * symbol;
	void * src;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphAddMemcpyNodeToSymbol_t;

#define GET_ARGS_VALUE_hipGraphAddMemcpyNodeToSymbol(activity) { \
	args_hipGraphAddMemcpyNodeToSymbol_t* args = (args_hipGraphAddMemcpyNodeToSymbol_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->symbol = (void *) symbol; \
	args->src = (void *) src; \
	args->count = (size_t) count; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNodeToSymbol(args) { \
	args_hipGraphAddMemcpyNodeToSymbol_t* pargs = (args_hipGraphAddMemcpyNodeToSymbol_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetPCIBusId` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetPCIBusId` function call.
 *
 * @struct args_hipDeviceGetPCIBusId_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetPCIBusId (
 *			char * pciBusId (char *)
 *			int len (int)
 *			int device (int)
 *	)
 */
#if HAVE_hipDeviceGetPCIBusId
typedef struct {
	char * pciBusId;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} pciBusId__ref;
	int len;
	int device;
	hipError_t retval;
} args_hipDeviceGetPCIBusId_t;

#define GET_ARGS_VALUE_hipDeviceGetPCIBusId(activity) { \
	args_hipDeviceGetPCIBusId_t* args = (args_hipDeviceGetPCIBusId_t*) activity->args; \
	args->pciBusId = (char *) pciBusId; \
	args->len = (int) len; \
	args->device = (int) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetPCIBusId(args) { \
	args_hipDeviceGetPCIBusId_t* pargs = (args_hipDeviceGetPCIBusId_t*) args; \
	if (pargs->pciBusId != NULL) { \
		strncpy(pargs->pciBusId__ref.val, pargs->pciBusId, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetChannelDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetChannelDesc` function call.
 *
 * @struct args_hipGetChannelDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetChannelDesc (
 *			hipChannelFormatDesc * desc (struct hipChannelFormatDesc*)
 *			hipArray_const_t array (const struct hipArray *)
 *	)
 */
#if HAVE_hipGetChannelDesc
typedef struct {
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	hipArray_const_t array;
	hipError_t retval;
} args_hipGetChannelDesc_t;

#define GET_ARGS_VALUE_hipGetChannelDesc(activity) { \
	args_hipGetChannelDesc_t* args = (args_hipGetChannelDesc_t*) activity->args; \
	args->desc = (hipChannelFormatDesc *) desc; \
	args->array = (hipArray_const_t) array; \
};

#define GET_PTRS_VALUE_hipGetChannelDesc(args) { \
	args_hipGetChannelDesc_t* pargs = (args_hipGetChannelDesc_t*) args; \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxReset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxReset` function call.
 *
 * @struct args_hipDevicePrimaryCtxReset_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxReset (
 *			hipDevice_t dev (int)
 *	)
 */
#if HAVE_hipDevicePrimaryCtxReset
typedef struct {
	hipDevice_t dev;
	hipError_t retval;
} args_hipDevicePrimaryCtxReset_t;

#define GET_ARGS_VALUE_hipDevicePrimaryCtxReset(activity) { \
	args_hipDevicePrimaryCtxReset_t* args = (args_hipDevicePrimaryCtxReset_t*) activity->args; \
	args->dev = (hipDevice_t) dev; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipImportExternalMemory` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipImportExternalMemory` function call.
 *
 * @struct args_hipImportExternalMemory_t
 *
 * @note 
 *	hipError_t
 *	hipImportExternalMemory (
 *			hipExternalMemory_t * extMem_out (void **)
 *			const hipExternalMemoryHandleDesc * memHandleDesc (const struct hipExternalMemoryHandleDesc_st *)
 *	)
 */
#if HAVE_hipImportExternalMemory
typedef struct {
	void ** extMem_out;
	struct {
		void* ptr1;
	} extMem_out__ref;
	hipExternalMemoryHandleDesc * memHandleDesc;
	struct {
		hipExternalMemoryHandleDesc val;
	} memHandleDesc__ref;
	hipError_t retval;
} args_hipImportExternalMemory_t;

#define GET_ARGS_VALUE_hipImportExternalMemory(activity) { \
	args_hipImportExternalMemory_t* args = (args_hipImportExternalMemory_t*) activity->args; \
	args->extMem_out = (void **) extMem_out; \
	args->memHandleDesc = (hipExternalMemoryHandleDesc *) memHandleDesc; \
};

#define GET_PTRS_VALUE_hipImportExternalMemory(args) { \
	args_hipImportExternalMemory_t* pargs = (args_hipImportExternalMemory_t*) args; \
	if (pargs->extMem_out != NULL) { \
		pargs->extMem_out__ref.ptr1 = *pargs->extMem_out; \
	} \
	if (pargs->memHandleDesc != NULL) { \
		pargs->memHandleDesc__ref.val = *pargs->memHandleDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFuncSetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncSetSharedMemConfig` function call.
 *
 * @struct args_hipFuncSetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipFuncSetSharedMemConfig (
 *			const void * func (const void *)
 *			hipSharedMemConfig config (enum hipSharedMemConfig)
 *	)
 */
#if HAVE_hipFuncSetSharedMemConfig
typedef struct {
	void * func;
	hipSharedMemConfig config;
	hipError_t retval;
} args_hipFuncSetSharedMemConfig_t;

#define GET_ARGS_VALUE_hipFuncSetSharedMemConfig(activity) { \
	args_hipFuncSetSharedMemConfig_t* args = (args_hipFuncSetSharedMemConfig_t*) activity->args; \
	args->func = (void *) func; \
	args->config = (hipSharedMemConfig) config; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamWaitEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWaitEvent` function call.
 *
 * @struct args_hipStreamWaitEvent_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWaitEvent (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamWaitEvent
typedef struct {
	hipStream_t stream;
	hipEvent_t event;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamWaitEvent_t;

#define GET_ARGS_VALUE_hipStreamWaitEvent(activity) { \
	args_hipStreamWaitEvent_t* args = (args_hipStreamWaitEvent_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->event = (hipEvent_t) event; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmapLevelBias` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmapLevelBias` function call.
 *
 * @struct args_hipTexRefSetMipmapLevelBias_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmapLevelBias (
 *			textureReference * texRef (struct textureReference*)
 *			float bias (float)
 *	)
 */
#if HAVE_hipTexRefSetMipmapLevelBias
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	float bias;
	hipError_t retval;
} args_hipTexRefSetMipmapLevelBias_t;

#define GET_ARGS_VALUE_hipTexRefSetMipmapLevelBias(activity) { \
	args_hipTexRefSetMipmapLevelBias_t* args = (args_hipTexRefSetMipmapLevelBias_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->bias = (float) bias; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmapLevelBias(args) { \
	args_hipTexRefSetMipmapLevelBias_t* pargs = (args_hipTexRefSetMipmapLevelBias_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolImportFromShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolImportFromShareableHandle` function call.
 *
 * @struct args_hipMemPoolImportFromShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolImportFromShareableHandle (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			void * shared_handle (void *)
 *			hipMemAllocationHandleType handle_type (enum hipMemAllocationHandleType)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipMemPoolImportFromShareableHandle
typedef struct {
	hipMemPool_t * mem_pool;
	struct {
		hipMemPool_t val;
	} mem_pool__ref;
	void * shared_handle;
	hipMemAllocationHandleType handle_type;
	unsigned int flags;
	hipError_t retval;
} args_hipMemPoolImportFromShareableHandle_t;

#define GET_ARGS_VALUE_hipMemPoolImportFromShareableHandle(activity) { \
	args_hipMemPoolImportFromShareableHandle_t* args = (args_hipMemPoolImportFromShareableHandle_t*) activity->args; \
	args->mem_pool = (hipMemPool_t *) mem_pool; \
	args->shared_handle = (void *) shared_handle; \
	args->handle_type = (hipMemAllocationHandleType) handle_type; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMemPoolImportFromShareableHandle(args) { \
	args_hipMemPoolImportFromShareableHandle_t* pargs = (args_hipMemPoolImportFromShareableHandle_t*) args; \
	if (pargs->mem_pool != NULL) { \
		pargs->mem_pool__ref.val = *pargs->mem_pool; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolExportToShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolExportToShareableHandle` function call.
 *
 * @struct args_hipMemPoolExportToShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolExportToShareableHandle (
 *			void * shared_handle (void *)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemAllocationHandleType handle_type (enum hipMemAllocationHandleType)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipMemPoolExportToShareableHandle
typedef struct {
	void * shared_handle;
	hipMemPool_t mem_pool;
	hipMemAllocationHandleType handle_type;
	unsigned int flags;
	hipError_t retval;
} args_hipMemPoolExportToShareableHandle_t;

#define GET_ARGS_VALUE_hipMemPoolExportToShareableHandle(activity) { \
	args_hipMemPoolExportToShareableHandle_t* args = (args_hipMemPoolExportToShareableHandle_t*) activity->args; \
	args->shared_handle = (void *) shared_handle; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->handle_type = (hipMemAllocationHandleType) handle_type; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParamsToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParamsToSymbol` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParamsToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParamsToSymbol (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphExecMemcpyNodeSetParamsToSymbol
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	void * symbol;
	void * src;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphExecMemcpyNodeSetParamsToSymbol_t;

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParamsToSymbol(activity) { \
	args_hipGraphExecMemcpyNodeSetParamsToSymbol_t* args = (args_hipGraphExecMemcpyNodeSetParamsToSymbol_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->symbol = (void *) symbol; \
	args->src = (void *) src; \
	args->count = (size_t) count; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipmapFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipmapFilterMode` function call.
 *
 * @struct args_hipTexRefGetMipmapFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipmapFilterMode (
 *			enum hipTextureFilterMode * pfm (enum hipTextureFilterMode *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetMipmapFilterMode
typedef struct {
	enum hipTextureFilterMode * pfm;
	struct {
		enum hipTextureFilterMode val;
	} pfm__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetMipmapFilterMode_t;

#define GET_ARGS_VALUE_hipTexRefGetMipmapFilterMode(activity) { \
	args_hipTexRefGetMipmapFilterMode_t* args = (args_hipTexRefGetMipmapFilterMode_t*) activity->args; \
	args->pfm = (enum hipTextureFilterMode *) pfm; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipmapFilterMode(args) { \
	args_hipTexRefGetMipmapFilterMode_t* pargs = (args_hipTexRefGetMipmapFilterMode_t*) args; \
	if (pargs->pfm != NULL) { \
		pargs->pfm__ref.val = *pargs->pfm; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetProcAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetProcAddress` function call.
 *
 * @struct args_hipGetProcAddress_t
 *
 * @note 
 *	hipError_t
 *	hipGetProcAddress (
 *			const char * symbol (const char *)
 *			void ** pfn (void **)
 *			int hipVersion (int)
 *			uint64_t flags (unsigned long)
 *			hipDriverProcAddressQueryResult * symbolStatus (enum hipDriverProcAddressQueryResult*)
 *	)
 */
#if HAVE_hipGetProcAddress
typedef struct {
	char * symbol;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} symbol__ref;
	void ** pfn;
	struct {
		void* ptr1;
	} pfn__ref;
	int hipVersion;
	uint64_t flags;
	hipDriverProcAddressQueryResult * symbolStatus;
	struct {
		hipDriverProcAddressQueryResult val;
	} symbolStatus__ref;
	hipError_t retval;
} args_hipGetProcAddress_t;

#define GET_ARGS_VALUE_hipGetProcAddress(activity) { \
	args_hipGetProcAddress_t* args = (args_hipGetProcAddress_t*) activity->args; \
	args->symbol = (char *) symbol; \
	args->pfn = (void **) pfn; \
	args->hipVersion = (int) hipVersion; \
	args->flags = (uint64_t) flags; \
	args->symbolStatus = (hipDriverProcAddressQueryResult *) symbolStatus; \
};

#define GET_PTRS_VALUE_hipGetProcAddress(args) { \
	args_hipGetProcAddress_t* pargs = (args_hipGetProcAddress_t*) args; \
	if (pargs->symbol != NULL) { \
		strncpy(pargs->symbol__ref.val, pargs->symbol, HIP_STRING_SIZE_MAX-1); \
	} \
	if (pargs->pfn != NULL) { \
		pargs->pfn__ref.ptr1 = *pargs->pfn; \
	} \
	if (pargs->symbolStatus != NULL) { \
		pargs->symbolStatus__ref.val = *pargs->symbolStatus; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCreateTextureObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCreateTextureObject` function call.
 *
 * @struct args_hipCreateTextureObject_t
 *
 * @note 
 *	hipError_t
 *	hipCreateTextureObject (
 *			hipTextureObject_t * pTexObject (struct __hip_texture **)
 *			const hipResourceDesc * pResDesc (const struct hipResourceDesc *)
 *			const hipTextureDesc * pTexDesc (const struct hipTextureDesc *)
 *			const struct hipResourceViewDesc * pResViewDesc (const struct hipResourceViewDesc *)
 *	)
 */
#if HAVE_hipCreateTextureObject
typedef struct {
	hipTextureObject_t * pTexObject;
	struct {
		hipTextureObject_t val;
	} pTexObject__ref;
	hipResourceDesc * pResDesc;
	struct {
		hipResourceDesc val;
	} pResDesc__ref;
	hipTextureDesc * pTexDesc;
	struct {
		hipTextureDesc val;
	} pTexDesc__ref;
	struct hipResourceViewDesc * pResViewDesc;
	struct {
		struct hipResourceViewDesc val;
	} pResViewDesc__ref;
	hipError_t retval;
} args_hipCreateTextureObject_t;

#define GET_ARGS_VALUE_hipCreateTextureObject(activity) { \
	args_hipCreateTextureObject_t* args = (args_hipCreateTextureObject_t*) activity->args; \
	args->pTexObject = (hipTextureObject_t *) pTexObject; \
	args->pResDesc = (hipResourceDesc *) pResDesc; \
	args->pTexDesc = (hipTextureDesc *) pTexDesc; \
	args->pResViewDesc = (struct hipResourceViewDesc *) pResViewDesc; \
};

#define GET_PTRS_VALUE_hipCreateTextureObject(args) { \
	args_hipCreateTextureObject_t* pargs = (args_hipCreateTextureObject_t*) args; \
	if (pargs->pTexObject != NULL) { \
		pargs->pTexObject__ref.val = *pargs->pTexObject; \
	} \
	if (pargs->pResDesc != NULL) { \
		pargs->pResDesc__ref.val = *pargs->pResDesc; \
	} \
	if (pargs->pTexDesc != NULL) { \
		pargs->pTexDesc__ref.val = *pargs->pTexDesc; \
	} \
	if (pargs->pResViewDesc != NULL) { \
		pargs->pResViewDesc__ref.val = *pargs->pResViewDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeCopyAttributes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeCopyAttributes` function call.
 *
 * @struct args_hipGraphKernelNodeCopyAttributes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeCopyAttributes (
 *			hipGraphNode_t hSrc (struct hipGraphNode *)
 *			hipGraphNode_t hDst (struct hipGraphNode *)
 *	)
 */
#if HAVE_hipGraphKernelNodeCopyAttributes
typedef struct {
	hipGraphNode_t hSrc;
	hipGraphNode_t hDst;
	hipError_t retval;
} args_hipGraphKernelNodeCopyAttributes_t;

#define GET_ARGS_VALUE_hipGraphKernelNodeCopyAttributes(activity) { \
	args_hipGraphKernelNodeCopyAttributes_t* args = (args_hipGraphKernelNodeCopyAttributes_t*) activity->args; \
	args->hSrc = (hipGraphNode_t) hSrc; \
	args->hDst = (hipGraphNode_t) hDst; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetFlags` function call.
 *
 * @struct args_hipTexRefGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetFlags (
 *			unsigned int * pFlags (unsigned int *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetFlags
typedef struct {
	unsigned int * pFlags;
	struct {
		unsigned int val;
	} pFlags__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetFlags_t;

#define GET_ARGS_VALUE_hipTexRefGetFlags(activity) { \
	args_hipTexRefGetFlags_t* args = (args_hipTexRefGetFlags_t*) activity->args; \
	args->pFlags = (unsigned int *) pFlags; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetFlags(args) { \
	args_hipTexRefGetFlags_t* pargs = (args_hipTexRefGetFlags_t*) args; \
	if (pargs->pFlags != NULL) { \
		pargs->pFlags__ref.val = *pargs->pFlags; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvGraphAddMemcpyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGraphAddMemcpyNode` function call.
 *
 * @struct args_hipDrvGraphAddMemcpyNode_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGraphAddMemcpyNode (
 *			hipGraphNode_t * phGraphNode (struct hipGraphNode **)
 *			hipGraph_t hGraph (struct ihipGraph *)
 *			const hipGraphNode_t * dependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const HIP_MEMCPY3D * copyParams (const struct HIP_MEMCPY3D *)
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
#if HAVE_hipDrvGraphAddMemcpyNode
typedef struct {
	hipGraphNode_t * phGraphNode;
	struct {
		hipGraphNode_t val;
	} phGraphNode__ref;
	hipGraph_t hGraph;
	hipGraphNode_t * dependencies;
	struct {
		hipGraphNode_t val;
	} dependencies__ref;
	size_t numDependencies;
	HIP_MEMCPY3D * copyParams;
	struct {
		HIP_MEMCPY3D val;
	} copyParams__ref;
	hipCtx_t ctx;
	hipError_t retval;
} args_hipDrvGraphAddMemcpyNode_t;

#define GET_ARGS_VALUE_hipDrvGraphAddMemcpyNode(activity) { \
	args_hipDrvGraphAddMemcpyNode_t* args = (args_hipDrvGraphAddMemcpyNode_t*) activity->args; \
	args->phGraphNode = (hipGraphNode_t *) phGraphNode; \
	args->hGraph = (hipGraph_t) hGraph; \
	args->dependencies = (hipGraphNode_t *) dependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->copyParams = (HIP_MEMCPY3D *) copyParams; \
	args->ctx = (hipCtx_t) ctx; \
};

#define GET_PTRS_VALUE_hipDrvGraphAddMemcpyNode(args) { \
	args_hipDrvGraphAddMemcpyNode_t* pargs = (args_hipDrvGraphAddMemcpyNode_t*) args; \
	if (pargs->phGraphNode != NULL) { \
		pargs->phGraphNode__ref.val = *pargs->phGraphNode; \
	} \
	if (pargs->dependencies != NULL) { \
		pargs->dependencies__ref.val = *pargs->dependencies; \
	} \
	if (pargs->copyParams != NULL) { \
		pargs->copyParams__ref.val = *pargs->copyParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemExportToShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemExportToShareableHandle` function call.
 *
 * @struct args_hipMemExportToShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemExportToShareableHandle (
 *			void * shareableHandle (void *)
 *			hipMemGenericAllocationHandle_t handle (struct ihipMemGenericAllocationHandle *)
 *			hipMemAllocationHandleType handleType (enum hipMemAllocationHandleType)
 *			unsigned long long flags (unsigned long long)
 *	)
 */
#if HAVE_hipMemExportToShareableHandle
typedef struct {
	void * shareableHandle;
	hipMemGenericAllocationHandle_t handle;
	hipMemAllocationHandleType handleType;
	unsigned long long flags;
	hipError_t retval;
} args_hipMemExportToShareableHandle_t;

#define GET_ARGS_VALUE_hipMemExportToShareableHandle(activity) { \
	args_hipMemExportToShareableHandle_t* args = (args_hipMemExportToShareableHandle_t*) activity->args; \
	args->shareableHandle = (void *) shareableHandle; \
	args->handle = (hipMemGenericAllocationHandle_t) handle; \
	args->handleType = (hipMemAllocationHandleType) handleType; \
	args->flags = (unsigned long long) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphLaunch_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphLaunch_spt` function call.
 *
 * @struct args_hipGraphLaunch_spt_t
 *
 * @note 
 *	hipError_t
 *	hipGraphLaunch_spt (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipGraphLaunch_spt
typedef struct {
	hipGraphExec_t graphExec;
	hipStream_t stream;
	hipError_t retval;
} args_hipGraphLaunch_spt_t;

#define GET_ARGS_VALUE_hipGraphLaunch_spt(activity) { \
	args_hipGraphLaunch_spt_t* args = (args_hipGraphLaunch_spt_t*) activity->args; \
	args->graphExec = (hipGraphExec_t) graphExec; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParamsFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParamsFromSymbol` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParamsFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParamsFromSymbol (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphMemcpyNodeSetParamsFromSymbol
typedef struct {
	hipGraphNode_t node;
	void * dst;
	void * symbol;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphMemcpyNodeSetParamsFromSymbol_t;

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParamsFromSymbol(activity) { \
	args_hipGraphMemcpyNodeSetParamsFromSymbol_t* args = (args_hipGraphMemcpyNodeSetParamsFromSymbol_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->dst = (void *) dst; \
	args->symbol = (void *) symbol; \
	args->count = (size_t) count; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetDependencies` function call.
 *
 * @struct args_hipGraphNodeGetDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetDependencies (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraphNode_t * pDependencies (struct hipGraphNode **)
 *			size_t * pNumDependencies (unsigned long*)
 *	)
 */
#if HAVE_hipGraphNodeGetDependencies
typedef struct {
	hipGraphNode_t node;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t * pNumDependencies;
	struct {
		size_t val;
	} pNumDependencies__ref;
	hipError_t retval;
} args_hipGraphNodeGetDependencies_t;

#define GET_ARGS_VALUE_hipGraphNodeGetDependencies(activity) { \
	args_hipGraphNodeGetDependencies_t* args = (args_hipGraphNodeGetDependencies_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->pNumDependencies = (size_t *) pNumDependencies; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetDependencies(args) { \
	args_hipGraphNodeGetDependencies_t* pargs = (args_hipGraphNodeGetDependencies_t*) args; \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->pNumDependencies != NULL) { \
		pargs->pNumDependencies__ref.val = *pargs->pNumDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3D` function call.
 *
 * @struct args_hipMemcpy3D_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3D (
 *			const struct hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *	)
 */
#if HAVE_hipMemcpy3D
typedef struct {
	struct hipMemcpy3DParms * p;
	struct {
		struct hipMemcpy3DParms val;
	} p__ref;
	hipError_t retval;
} args_hipMemcpy3D_t;

#define GET_ARGS_VALUE_hipMemcpy3D(activity) { \
	args_hipMemcpy3D_t* args = (args_hipMemcpy3D_t*) activity->args; \
	args->p = (struct hipMemcpy3DParms *) p; \
};

#define GET_PTRS_VALUE_hipMemcpy3D(args) { \
	args_hipMemcpy3D_t* pargs = (args_hipMemcpy3D_t*) args; \
	if (pargs->p != NULL) { \
		pargs->p__ref.val = *pargs->p; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNodeFromSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNodeFromSymbol` function call.
 *
 * @struct args_hipGraphAddMemcpyNodeFromSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNodeFromSymbol (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			void * dst (void *)
 *			const void * symbol (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphAddMemcpyNodeFromSymbol
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	void * dst;
	void * symbol;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphAddMemcpyNodeFromSymbol_t;

#define GET_ARGS_VALUE_hipGraphAddMemcpyNodeFromSymbol(activity) { \
	args_hipGraphAddMemcpyNodeFromSymbol_t* args = (args_hipGraphAddMemcpyNodeFromSymbol_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->dst = (void *) dst; \
	args->symbol = (void *) symbol; \
	args->count = (size_t) count; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNodeFromSymbol(args) { \
	args_hipGraphAddMemcpyNodeFromSymbol_t* pargs = (args_hipGraphAddMemcpyNodeFromSymbol_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetPriority_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetPriority_spt` function call.
 *
 * @struct args_hipStreamGetPriority_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetPriority_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			int * priority (int *)
 *	)
 */
#if HAVE_hipStreamGetPriority_spt
typedef struct {
	hipStream_t stream;
	int * priority;
	struct {
		int val;
	} priority__ref;
	hipError_t retval;
} args_hipStreamGetPriority_spt_t;

#define GET_ARGS_VALUE_hipStreamGetPriority_spt(activity) { \
	args_hipStreamGetPriority_spt_t* args = (args_hipStreamGetPriority_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->priority = (int *) priority; \
};

#define GET_PTRS_VALUE_hipStreamGetPriority_spt(args) { \
	args_hipStreamGetPriority_spt_t* pargs = (args_hipStreamGetPriority_spt_t*) args; \
	if (pargs->priority != NULL) { \
		pargs->priority__ref.val = *pargs->priority; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleLoadData` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLoadData` function call.
 *
 * @struct args_hipModuleLoadData_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLoadData (
 *			hipModule_t * module (struct ihipModule_t **)
 *			const void * image (const void *)
 *	)
 */
#if HAVE_hipModuleLoadData
typedef struct {
	hipModule_t * module;
	struct {
		hipModule_t val;
	} module__ref;
	void * image;
	hipError_t retval;
} args_hipModuleLoadData_t;

#define GET_ARGS_VALUE_hipModuleLoadData(activity) { \
	args_hipModuleLoadData_t* args = (args_hipModuleLoadData_t*) activity->args; \
	args->module = (hipModule_t *) module; \
	args->image = (void *) image; \
};

#define GET_PTRS_VALUE_hipModuleLoadData(args) { \
	args_hipModuleLoadData_t* pargs = (args_hipModuleLoadData_t*) args; \
	if (pargs->module != NULL) { \
		pargs->module__ref.val = *pargs->module; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipSetDeviceFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetDeviceFlags` function call.
 *
 * @struct args_hipSetDeviceFlags_t
 *
 * @note 
 *	hipError_t
 *	hipSetDeviceFlags (
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipSetDeviceFlags
typedef struct {
	unsigned int flags;
	hipError_t retval;
} args_hipSetDeviceFlags_t;

#define GET_ARGS_VALUE_hipSetDeviceFlags(activity) { \
	args_hipSetDeviceFlags_t* args = (args_hipSetDeviceFlags_t*) activity->args; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExternalMemoryGetMappedBuffer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExternalMemoryGetMappedBuffer` function call.
 *
 * @struct args_hipExternalMemoryGetMappedBuffer_t
 *
 * @note 
 *	hipError_t
 *	hipExternalMemoryGetMappedBuffer (
 *			void ** devPtr (void **)
 *			hipExternalMemory_t extMem (void *)
 *			const hipExternalMemoryBufferDesc * bufferDesc (const struct hipExternalMemoryBufferDesc_st *)
 *	)
 */
#if HAVE_hipExternalMemoryGetMappedBuffer
typedef struct {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	void * extMem;
	hipExternalMemoryBufferDesc * bufferDesc;
	struct {
		hipExternalMemoryBufferDesc val;
	} bufferDesc__ref;
	hipError_t retval;
} args_hipExternalMemoryGetMappedBuffer_t;

#define GET_ARGS_VALUE_hipExternalMemoryGetMappedBuffer(activity) { \
	args_hipExternalMemoryGetMappedBuffer_t* args = (args_hipExternalMemoryGetMappedBuffer_t*) activity->args; \
	args->devPtr = (void **) devPtr; \
	args->extMem = (void *) extMem; \
	args->bufferDesc = (hipExternalMemoryBufferDesc *) bufferDesc; \
};

#define GET_PTRS_VALUE_hipExternalMemoryGetMappedBuffer(args) { \
	args_hipExternalMemoryGetMappedBuffer_t* pargs = (args_hipExternalMemoryGetMappedBuffer_t*) args; \
	if (pargs->devPtr != NULL) { \
		pargs->devPtr__ref.ptr1 = *pargs->devPtr; \
	} \
	if (pargs->bufferDesc != NULL) { \
		pargs->bufferDesc__ref.val = *pargs->bufferDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchCooperativeKernel_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchCooperativeKernel_spt` function call.
 *
 * @struct args_hipLaunchCooperativeKernel_spt_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchCooperativeKernel_spt (
 *			const void * f (const void *)
 *			dim3 gridDim (struct dim3)
 *			dim3 blockDim (struct dim3)
 *			void ** kernelParams (void **)
 *			uint32_t sharedMemBytes (unsigned int)
 *			hipStream_t hStream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipLaunchCooperativeKernel_spt
typedef struct {
	void * f;
	dim3 gridDim;
	dim3 blockDim;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	uint32_t sharedMemBytes;
	hipStream_t hStream;
	hipError_t retval;
} args_hipLaunchCooperativeKernel_spt_t;

#define GET_ARGS_VALUE_hipLaunchCooperativeKernel_spt(activity) { \
	args_hipLaunchCooperativeKernel_spt_t* args = (args_hipLaunchCooperativeKernel_spt_t*) activity->args; \
	args->f = (void *) f; \
	args->gridDim = (dim3) gridDim; \
	args->blockDim = (dim3) blockDim; \
	args->kernelParams = (void **) kernelParams; \
	args->sharedMemBytes = (uint32_t) sharedMemBytes; \
	args->hStream = (hipStream_t) hStream; \
};

#define GET_PTRS_VALUE_hipLaunchCooperativeKernel_spt(args) { \
	args_hipLaunchCooperativeKernel_spt_t* pargs = (args_hipLaunchCooperativeKernel_spt_t*) args; \
	if (pargs->kernelParams != NULL) { \
		pargs->kernelParams__ref.ptr1 = *pargs->kernelParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchHostFunc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchHostFunc` function call.
 *
 * @struct args_hipLaunchHostFunc_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchHostFunc (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipHostFn_t fn (void (*)(void *))
 *			void * userData (void *)
 *	)
 */
#if HAVE_hipLaunchHostFunc
typedef struct {
	hipStream_t stream;
	hipHostFn_t fn;
	void * userData;
	hipError_t retval;
} args_hipLaunchHostFunc_t;

#define GET_ARGS_VALUE_hipLaunchHostFunc(activity) { \
	args_hipLaunchHostFunc_t* args = (args_hipLaunchHostFunc_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->fn = (hipHostFn_t) fn; \
	args->userData = (void *) userData; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAsync_spt` function call.
 *
 * @struct args_hipMemcpyAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAsync_spt (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyAsync_spt
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyAsync_spt_t;

#define GET_ARGS_VALUE_hipMemcpyAsync_spt(activity) { \
	args_hipMemcpyAsync_spt_t* args = (args_hipMemcpyAsync_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyPeer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyPeer` function call.
 *
 * @struct args_hipMemcpyPeer_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyPeer (
 *			void * dst (void *)
 *			int dstDeviceId (int)
 *			const void * src (const void *)
 *			int srcDeviceId (int)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyPeer
typedef struct {
	void * dst;
	int dstDeviceId;
	void * src;
	int srcDeviceId;
	size_t sizeBytes;
	hipError_t retval;
} args_hipMemcpyPeer_t;

#define GET_ARGS_VALUE_hipMemcpyPeer(activity) { \
	args_hipMemcpyPeer_t* args = (args_hipMemcpyPeer_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dstDeviceId = (int) dstDeviceId; \
	args->src = (void *) src; \
	args->srcDeviceId = (int) srcDeviceId; \
	args->sizeBytes = (size_t) sizeBytes; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceReset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceReset` function call.
 *
 * @struct args_hipDeviceReset_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceReset (
 *	)
 */
#if HAVE_hipDeviceReset
typedef struct {
	hipError_t retval;
} args_hipDeviceReset_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemAddressFree` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemAddressFree` function call.
 *
 * @struct args_hipMemAddressFree_t
 *
 * @note 
 *	hipError_t
 *	hipMemAddressFree (
 *			void * devPtr (void *)
 *			size_t size (unsigned long)
 *	)
 */
#if HAVE_hipMemAddressFree
typedef struct {
	void * devPtr;
	size_t size;
	hipError_t retval;
} args_hipMemAddressFree_t;

#define GET_ARGS_VALUE_hipMemAddressFree(activity) { \
	args_hipMemAddressFree_t* args = (args_hipMemAddressFree_t*) activity->args; \
	args->devPtr = (void *) devPtr; \
	args->size = (size_t) size; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipProfilerStop` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipProfilerStop` function call.
 *
 * @struct args_hipProfilerStop_t
 *
 * @note 
 *	hipError_t
 *	hipProfilerStop (
 *	)
 */
#if HAVE_hipProfilerStop
typedef struct {
	hipError_t retval;
} args_hipProfilerStop_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphEventWaitNodeSetEvent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphEventWaitNodeSetEvent` function call.
 *
 * @struct args_hipGraphEventWaitNodeSetEvent_t
 *
 * @note 
 *	hipError_t
 *	hipGraphEventWaitNodeSetEvent (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipGraphEventWaitNodeSetEvent
typedef struct {
	hipGraphNode_t node;
	hipEvent_t event;
	hipError_t retval;
} args_hipGraphEventWaitNodeSetEvent_t;

#define GET_ARGS_VALUE_hipGraphEventWaitNodeSetEvent(activity) { \
	args_hipGraphEventWaitNodeSetEvent_t* args = (args_hipGraphEventWaitNodeSetEvent_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->event = (hipEvent_t) event; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleLaunchCooperativeKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleLaunchCooperativeKernel` function call.
 *
 * @struct args_hipModuleLaunchCooperativeKernel_t
 *
 * @note 
 *	hipError_t
 *	hipModuleLaunchCooperativeKernel (
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			unsigned int gridDimX (unsigned int)
 *			unsigned int gridDimY (unsigned int)
 *			unsigned int gridDimZ (unsigned int)
 *			unsigned int blockDimX (unsigned int)
 *			unsigned int blockDimY (unsigned int)
 *			unsigned int blockDimZ (unsigned int)
 *			unsigned int sharedMemBytes (unsigned int)
 *			hipStream_t stream (struct ihipStream_t *)
 *			void ** kernelParams (void **)
 *	)
 */
#if HAVE_hipModuleLaunchCooperativeKernel
typedef struct {
	hipFunction_t f;
	unsigned int gridDimX;
	unsigned int gridDimY;
	unsigned int gridDimZ;
	unsigned int blockDimX;
	unsigned int blockDimY;
	unsigned int blockDimZ;
	unsigned int sharedMemBytes;
	hipStream_t stream;
	void ** kernelParams;
	struct {
		void* ptr1;
	} kernelParams__ref;
	hipError_t retval;
} args_hipModuleLaunchCooperativeKernel_t;

#define GET_ARGS_VALUE_hipModuleLaunchCooperativeKernel(activity) { \
	args_hipModuleLaunchCooperativeKernel_t* args = (args_hipModuleLaunchCooperativeKernel_t*) activity->args; \
	args->f = (hipFunction_t) f; \
	args->gridDimX = (unsigned int) gridDimX; \
	args->gridDimY = (unsigned int) gridDimY; \
	args->gridDimZ = (unsigned int) gridDimZ; \
	args->blockDimX = (unsigned int) blockDimX; \
	args->blockDimY = (unsigned int) blockDimY; \
	args->blockDimZ = (unsigned int) blockDimZ; \
	args->sharedMemBytes = (unsigned int) sharedMemBytes; \
	args->stream = (hipStream_t) stream; \
	args->kernelParams = (void **) kernelParams; \
};

#define GET_PTRS_VALUE_hipModuleLaunchCooperativeKernel(args) { \
	args_hipModuleLaunchCooperativeKernel_t* pargs = (args_hipModuleLaunchCooperativeKernel_t*) args; \
	if (pargs->kernelParams != NULL) { \
		pargs->kernelParams__ref.ptr1 = *pargs->kernelParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetName` function call.
 *
 * @struct args_hipDeviceGetName_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetName (
 *			char * name (char *)
 *			int len (int)
 *			hipDevice_t device (int)
 *	)
 */
#if HAVE_hipDeviceGetName
typedef struct {
	char * name;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} name__ref;
	int len;
	hipDevice_t device;
	hipError_t retval;
} args_hipDeviceGetName_t;

#define GET_ARGS_VALUE_hipDeviceGetName(activity) { \
	args_hipDeviceGetName_t* args = (args_hipDeviceGetName_t*) activity->args; \
	args->name = (char *) name; \
	args->len = (int) len; \
	args->device = (hipDevice_t) device; \
};

#define GET_PTRS_VALUE_hipDeviceGetName(args) { \
	args_hipDeviceGetName_t* pargs = (args_hipDeviceGetName_t*) args; \
	if (pargs->name != NULL) { \
		strncpy(pargs->name__ref.val, pargs->name, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeSetEnabled` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeSetEnabled` function call.
 *
 * @struct args_hipGraphNodeSetEnabled_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeSetEnabled (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			unsigned int isEnabled (unsigned int)
 *	)
 */
#if HAVE_hipGraphNodeSetEnabled
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t hNode;
	unsigned int isEnabled;
	hipError_t retval;
} args_hipGraphNodeSetEnabled_t;

#define GET_ARGS_VALUE_hipGraphNodeSetEnabled(activity) { \
	args_hipGraphNodeSetEnabled_t* args = (args_hipGraphNodeSetEnabled_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->isEnabled = (unsigned int) isEnabled; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetAddressMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetAddressMode` function call.
 *
 * @struct args_hipTexRefSetAddressMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetAddressMode (
 *			textureReference * texRef (struct textureReference*)
 *			int dim (int)
 *			enum hipTextureAddressMode am (enum hipTextureAddressMode)
 *	)
 */
#if HAVE_hipTexRefSetAddressMode
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	int dim;
	enum hipTextureAddressMode am;
	hipError_t retval;
} args_hipTexRefSetAddressMode_t;

#define GET_ARGS_VALUE_hipTexRefSetAddressMode(activity) { \
	args_hipTexRefSetAddressMode_t* args = (args_hipTexRefSetAddressMode_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->dim = (int) dim; \
	args->am = (enum hipTextureAddressMode) am; \
};

#define GET_PTRS_VALUE_hipTexRefSetAddressMode(args) { \
	args_hipTexRefSetAddressMode_t* pargs = (args_hipTexRefSetAddressMode_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventSynchronize` function call.
 *
 * @struct args_hipEventSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipEventSynchronize (
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipEventSynchronize
typedef struct {
	hipEvent_t event;
	hipError_t retval;
} args_hipEventSynchronize_t;

#define GET_ARGS_VALUE_hipEventSynchronize(activity) { \
	args_hipEventSynchronize_t* args = (args_hipEventSynchronize_t*) activity->args; \
	args->event = (hipEvent_t) event; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphGetRootNodes` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphGetRootNodes` function call.
 *
 * @struct args_hipGraphGetRootNodes_t
 *
 * @note 
 *	hipError_t
 *	hipGraphGetRootNodes (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * pRootNodes (struct hipGraphNode **)
 *			size_t * pNumRootNodes (unsigned long*)
 *	)
 */
#if HAVE_hipGraphGetRootNodes
typedef struct {
	hipGraph_t graph;
	hipGraphNode_t * pRootNodes;
	struct {
		hipGraphNode_t val;
	} pRootNodes__ref;
	size_t * pNumRootNodes;
	struct {
		size_t val;
	} pNumRootNodes__ref;
	hipError_t retval;
} args_hipGraphGetRootNodes_t;

#define GET_ARGS_VALUE_hipGraphGetRootNodes(activity) { \
	args_hipGraphGetRootNodes_t* args = (args_hipGraphGetRootNodes_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->pRootNodes = (hipGraphNode_t *) pRootNodes; \
	args->pNumRootNodes = (size_t *) pNumRootNodes; \
};

#define GET_PTRS_VALUE_hipGraphGetRootNodes(args) { \
	args_hipGraphGetRootNodes_t* pargs = (args_hipGraphGetRootNodes_t*) args; \
	if (pargs->pRootNodes != NULL) { \
		pargs->pRootNodes__ref.val = *pargs->pRootNodes; \
	} \
	if (pargs->pNumRootNodes != NULL) { \
		pargs->pNumRootNodes__ref.val = *pargs->pNumRootNodes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DFromArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DFromArray` function call.
 *
 * @struct args_hipMemcpy2DFromArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DFromArray (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy2DFromArray
typedef struct {
	void * dst;
	size_t dpitch;
	hipArray_const_t src;
	size_t wOffset;
	size_t hOffset;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy2DFromArray_t;

#define GET_ARGS_VALUE_hipMemcpy2DFromArray(activity) { \
	args_hipMemcpy2DFromArray_t* args = (args_hipMemcpy2DFromArray_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (hipArray_const_t) src; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExternalSemaphoresWaitNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExternalSemaphoresWaitNodeSetParams` function call.
 *
 * @struct args_hipGraphExternalSemaphoresWaitNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExternalSemaphoresWaitNodeSetParams (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreWaitNodeParams * nodeParams (const struct hipExternalSemaphoreWaitNodeParams *)
 *	)
 */
#if HAVE_hipGraphExternalSemaphoresWaitNodeSetParams
typedef struct {
	hipGraphNode_t hNode;
	hipExternalSemaphoreWaitNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
} args_hipGraphExternalSemaphoresWaitNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExternalSemaphoresWaitNodeSetParams(activity) { \
	args_hipGraphExternalSemaphoresWaitNodeSetParams_t* args = (args_hipGraphExternalSemaphoresWaitNodeSetParams_t*) activity->args; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->nodeParams = (hipExternalSemaphoreWaitNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeSetParams(args) { \
	args_hipGraphExternalSemaphoresWaitNodeSetParams_t* pargs = (args_hipGraphExternalSemaphoresWaitNodeSetParams_t*) args; \
	if (pargs->nodeParams != NULL) { \
		pargs->nodeParams__ref.val = *pargs->nodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoA` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoA` function call.
 *
 * @struct args_hipMemcpyDtoA_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoA (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			hipDeviceptr_t srcDevice (void *)
 *			size_t ByteCount (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyDtoA
typedef struct {
	hipArray_t dstArray;
	size_t dstOffset;
	void * srcDevice;
	size_t ByteCount;
	hipError_t retval;
} args_hipMemcpyDtoA_t;

#define GET_ARGS_VALUE_hipMemcpyDtoA(activity) { \
	args_hipMemcpyDtoA_t* args = (args_hipMemcpyDtoA_t*) activity->args; \
	args->dstArray = (hipArray_t) dstArray; \
	args->dstOffset = (size_t) dstOffset; \
	args->srcDevice = (void *) srcDevice; \
	args->ByteCount = (size_t) ByteCount; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeGetParams` function call.
 *
 * @struct args_hipGraphMemcpyNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemcpy3DParms * pNodeParams (struct hipMemcpy3DParms*)
 *	)
 */
#if HAVE_hipGraphMemcpyNodeGetParams
typedef struct {
	hipGraphNode_t node;
	hipMemcpy3DParms * pNodeParams;
	struct {
		hipMemcpy3DParms val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphMemcpyNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphMemcpyNodeGetParams(activity) { \
	args_hipGraphMemcpyNodeGetParams_t* args = (args_hipGraphMemcpyNodeGetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipMemcpy3DParms *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemcpyNodeGetParams(args) { \
	args_hipGraphMemcpyNodeGetParams_t* pargs = (args_hipGraphMemcpyNodeGetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy` function call.
 *
 * @struct args_hipMemcpy_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy_t;

#define GET_ARGS_VALUE_hipMemcpy(activity) { \
	args_hipMemcpy_t* args = (args_hipMemcpy_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipSetValidDevices` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipSetValidDevices` function call.
 *
 * @struct args_hipSetValidDevices_t
 *
 * @note 
 *	hipError_t
 *	hipSetValidDevices (
 *			int * device_arr (int *)
 *			int len (int)
 *	)
 */
#if HAVE_hipSetValidDevices
typedef struct {
	int * device_arr;
	struct {
		int val;
	} device_arr__ref;
	int len;
	hipError_t retval;
} args_hipSetValidDevices_t;

#define GET_ARGS_VALUE_hipSetValidDevices(activity) { \
	args_hipSetValidDevices_t* args = (args_hipSetValidDevices_t*) activity->args; \
	args->device_arr = (int *) device_arr; \
	args->len = (int) len; \
};

#define GET_PTRS_VALUE_hipSetValidDevices(args) { \
	args_hipSetValidDevices_t* pargs = (args_hipSetValidDevices_t*) args; \
	if (pargs->device_arr != NULL) { \
		pargs->device_arr__ref.val = *pargs->device_arr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DAsync` function call.
 *
 * @struct args_hipMemcpy2DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DAsync (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy2DAsync
typedef struct {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy2DAsync_t;

#define GET_ARGS_VALUE_hipMemcpy2DAsync(activity) { \
	args_hipMemcpy2DAsync_t* args = (args_hipMemcpy2DAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecExternalSemaphoresWaitNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecExternalSemaphoresWaitNodeSetParams` function call.
 *
 * @struct args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecExternalSemaphoresWaitNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreWaitNodeParams * nodeParams (const struct hipExternalSemaphoreWaitNodeParams *)
 *	)
 */
#if HAVE_hipGraphExecExternalSemaphoresWaitNodeSetParams
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t hNode;
	hipExternalSemaphoreWaitNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreWaitNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
} args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExecExternalSemaphoresWaitNodeSetParams(activity) { \
	args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t* args = (args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->nodeParams = (hipExternalSemaphoreWaitNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecExternalSemaphoresWaitNodeSetParams(args) { \
	args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t* pargs = (args_hipGraphExecExternalSemaphoresWaitNodeSetParams_t*) args; \
	if (pargs->nodeParams != NULL) { \
		pargs->nodeParams__ref.val = *pargs->nodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamAttachMemAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamAttachMemAsync` function call.
 *
 * @struct args_hipStreamAttachMemAsync_t
 *
 * @note 
 *	hipError_t
 *	hipStreamAttachMemAsync (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * dev_ptr (void *)
 *			size_t length (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamAttachMemAsync
typedef struct {
	hipStream_t stream;
	void * dev_ptr;
	size_t length;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamAttachMemAsync_t;

#define GET_ARGS_VALUE_hipStreamAttachMemAsync(activity) { \
	args_hipStreamAttachMemAsync_t* args = (args_hipStreamAttachMemAsync_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->dev_ptr = (void *) dev_ptr; \
	args->length = (size_t) length; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset2DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset2DAsync` function call.
 *
 * @struct args_hipMemset2DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemset2DAsync (
 *			void * dst (void *)
 *			size_t pitch (unsigned long)
 *			int value (int)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemset2DAsync
typedef struct {
	void * dst;
	size_t pitch;
	int value;
	size_t width;
	size_t height;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemset2DAsync_t;

#define GET_ARGS_VALUE_hipMemset2DAsync(activity) { \
	args_hipMemset2DAsync_t* args = (args_hipMemset2DAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->pitch = (size_t) pitch; \
	args->value = (int) value; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexObjectGetResourceViewDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectGetResourceViewDesc` function call.
 *
 * @struct args_hipTexObjectGetResourceViewDesc_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectGetResourceViewDesc (
 *			HIP_RESOURCE_VIEW_DESC * pResViewDesc (struct HIP_RESOURCE_VIEW_DESC_st*)
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipTexObjectGetResourceViewDesc
typedef struct {
	HIP_RESOURCE_VIEW_DESC * pResViewDesc;
	struct {
		HIP_RESOURCE_VIEW_DESC val;
	} pResViewDesc__ref;
	hipTextureObject_t texObject;
	hipError_t retval;
} args_hipTexObjectGetResourceViewDesc_t;

#define GET_ARGS_VALUE_hipTexObjectGetResourceViewDesc(activity) { \
	args_hipTexObjectGetResourceViewDesc_t* args = (args_hipTexObjectGetResourceViewDesc_t*) activity->args; \
	args->pResViewDesc = (HIP_RESOURCE_VIEW_DESC *) pResViewDesc; \
	args->texObject = (hipTextureObject_t) texObject; \
};

#define GET_PTRS_VALUE_hipTexObjectGetResourceViewDesc(args) { \
	args_hipTexObjectGetResourceViewDesc_t* pargs = (args_hipTexObjectGetResourceViewDesc_t*) args; \
	if (pargs->pResViewDesc != NULL) { \
		pargs->pResViewDesc__ref.val = *pargs->pResViewDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventCreateWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventCreateWithFlags` function call.
 *
 * @struct args_hipEventCreateWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipEventCreateWithFlags (
 *			hipEvent_t * event (struct ihipEvent_t **)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipEventCreateWithFlags
typedef struct {
	hipEvent_t * event;
	struct {
		hipEvent_t val;
	} event__ref;
	unsigned int flags;
	hipError_t retval;
} args_hipEventCreateWithFlags_t;

#define GET_ARGS_VALUE_hipEventCreateWithFlags(activity) { \
	args_hipEventCreateWithFlags_t* args = (args_hipEventCreateWithFlags_t*) activity->args; \
	args->event = (hipEvent_t *) event; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipEventCreateWithFlags(args) { \
	args_hipEventCreateWithFlags_t* pargs = (args_hipEventCreateWithFlags_t*) args; \
	if (pargs->event != NULL) { \
		pargs->event__ref.val = *pargs->event; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMipmappedArrayCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMipmappedArrayCreate` function call.
 *
 * @struct args_hipMipmappedArrayCreate_t
 *
 * @note 
 *	hipError_t
 *	hipMipmappedArrayCreate (
 *			hipMipmappedArray_t * pHandle (struct hipMipmappedArray **)
 *			HIP_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc (struct HIP_ARRAY3D_DESCRIPTOR*)
 *			unsigned int numMipmapLevels (unsigned int)
 *	)
 */
#if HAVE_hipMipmappedArrayCreate
typedef struct {
	struct hipMipmappedArray ** pHandle;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} pHandle__ref;
	HIP_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc;
	struct {
		HIP_ARRAY3D_DESCRIPTOR val;
	} pMipmappedArrayDesc__ref;
	unsigned int numMipmapLevels;
	hipError_t retval;
} args_hipMipmappedArrayCreate_t;

#define GET_ARGS_VALUE_hipMipmappedArrayCreate(activity) { \
	args_hipMipmappedArrayCreate_t* args = (args_hipMipmappedArrayCreate_t*) activity->args; \
	args->pHandle = (struct hipMipmappedArray **) pHandle; \
	args->pMipmappedArrayDesc = (HIP_ARRAY3D_DESCRIPTOR *) pMipmappedArrayDesc; \
	args->numMipmapLevels = (unsigned int) numMipmapLevels; \
};

#define GET_PTRS_VALUE_hipMipmappedArrayCreate(args) { \
	args_hipMipmappedArrayCreate_t* pargs = (args_hipMipmappedArrayCreate_t*) args; \
	if (pargs->pHandle != NULL) { \
		pargs->pHandle__ref.ptr1 = *pargs->pHandle; \
		if (pargs->pHandle__ref.ptr1 != NULL) { \
			pargs->pHandle__ref.val = **pargs->pHandle; \
		} \
	} \
	if (pargs->pMipmappedArrayDesc != NULL) { \
		pargs->pMipmappedArrayDesc__ref.val = *pargs->pMipmappedArrayDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2D_spt` function call.
 *
 * @struct args_hipMemcpy2D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2D_spt (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy2D_spt
typedef struct {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy2D_spt_t;

#define GET_ARGS_VALUE_hipMemcpy2D_spt(activity) { \
	args_hipMemcpy2D_spt_t* args = (args_hipMemcpy2D_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemcpyNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemcpyNode` function call.
 *
 * @struct args_hipGraphAddMemcpyNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemcpyNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const hipMemcpy3DParms * pCopyParams (const struct hipMemcpy3DParms *)
 *	)
 */
#if HAVE_hipGraphAddMemcpyNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipMemcpy3DParms * pCopyParams;
	struct {
		hipMemcpy3DParms val;
	} pCopyParams__ref;
	hipError_t retval;
} args_hipGraphAddMemcpyNode_t;

#define GET_ARGS_VALUE_hipGraphAddMemcpyNode(activity) { \
	args_hipGraphAddMemcpyNode_t* args = (args_hipGraphAddMemcpyNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->pCopyParams = (hipMemcpy3DParms *) pCopyParams; \
};

#define GET_PTRS_VALUE_hipGraphAddMemcpyNode(args) { \
	args_hipGraphAddMemcpyNode_t* pargs = (args_hipGraphAddMemcpyNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->pCopyParams != NULL) { \
		pargs->pCopyParams__ref.val = *pargs->pCopyParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbolAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbolAsync` function call.
 *
 * @struct args_hipMemcpyToSymbolAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbolAsync (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyToSymbolAsync
typedef struct {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyToSymbolAsync_t;

#define GET_ARGS_VALUE_hipMemcpyToSymbolAsync(activity) { \
	args_hipMemcpyToSymbolAsync_t* args = (args_hipMemcpyToSymbolAsync_t*) activity->args; \
	args->symbol = (void *) symbol; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMallocFromPoolAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocFromPoolAsync` function call.
 *
 * @struct args_hipMallocFromPoolAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMallocFromPoolAsync (
 *			void ** dev_ptr (void **)
 *			size_t size (unsigned long)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMallocFromPoolAsync
typedef struct {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	size_t size;
	hipMemPool_t mem_pool;
	hipStream_t stream;
	hipError_t retval;
} args_hipMallocFromPoolAsync_t;

#define GET_ARGS_VALUE_hipMallocFromPoolAsync(activity) { \
	args_hipMallocFromPoolAsync_t* args = (args_hipMallocFromPoolAsync_t*) activity->args; \
	args->dev_ptr = (void **) dev_ptr; \
	args->size = (size_t) size; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipMallocFromPoolAsync(args) { \
	args_hipMallocFromPoolAsync_t* pargs = (args_hipMallocFromPoolAsync_t*) args; \
	if (pargs->dev_ptr != NULL) { \
		pargs->dev_ptr__ref.ptr1 = *pargs->dev_ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags` function call.
 *
 * @struct args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (
 *			int * numBlocks (int *)
 *			const void * f (const void *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
typedef struct {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	void * f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	unsigned int flags;
	hipError_t retval;
} args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t;

#define GET_ARGS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(activity) { \
	args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t* args = (args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t*) activity->args; \
	args->numBlocks = (int *) numBlocks; \
	args->f = (void *) f; \
	args->blockSize = (int) blockSize; \
	args->dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args) { \
	args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t* pargs = (args_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_t*) args; \
	if (pargs->numBlocks != NULL) { \
		pargs->numBlocks__ref.val = *pargs->numBlocks; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemFreeNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemFreeNode` function call.
 *
 * @struct args_hipGraphAddMemFreeNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemFreeNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			void * dev_ptr (void *)
 *	)
 */
#if HAVE_hipGraphAddMemFreeNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	void * dev_ptr;
	hipError_t retval;
} args_hipGraphAddMemFreeNode_t;

#define GET_ARGS_VALUE_hipGraphAddMemFreeNode(activity) { \
	args_hipGraphAddMemFreeNode_t* args = (args_hipGraphAddMemFreeNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->dev_ptr = (void *) dev_ptr; \
};

#define GET_PTRS_VALUE_hipGraphAddMemFreeNode(args) { \
	args_hipGraphAddMemFreeNode_t* pargs = (args_hipGraphAddMemFreeNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipModuleOccupancyMaxActiveBlocksPerMultiprocessor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipModuleOccupancyMaxActiveBlocksPerMultiprocessor` function call.
 *
 * @struct args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t
 *
 * @note 
 *	hipError_t
 *	hipModuleOccupancyMaxActiveBlocksPerMultiprocessor (
 *			int * numBlocks (int *)
 *			hipFunction_t f (struct ihipModuleSymbol_t *)
 *			int blockSize (int)
 *			size_t dynSharedMemPerBlk (unsigned long)
 *	)
 */
#if HAVE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor
typedef struct {
	int * numBlocks;
	struct {
		int val;
	} numBlocks__ref;
	hipFunction_t f;
	int blockSize;
	size_t dynSharedMemPerBlk;
	hipError_t retval;
} args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t;

#define GET_ARGS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor(activity) { \
	args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t* args = (args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t*) activity->args; \
	args->numBlocks = (int *) numBlocks; \
	args->f = (hipFunction_t) f; \
	args->blockSize = (int) blockSize; \
	args->dynSharedMemPerBlk = (size_t) dynSharedMemPerBlk; \
};

#define GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor(args) { \
	args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t* pargs = (args_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor_t*) args; \
	if (pargs->numBlocks != NULL) { \
		pargs->numBlocks__ref.val = *pargs->numBlocks; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventDestroy` function call.
 *
 * @struct args_hipEventDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipEventDestroy (
 *			hipEvent_t event (struct ihipEvent_t *)
 *	)
 */
#if HAVE_hipEventDestroy
typedef struct {
	hipEvent_t event;
	hipError_t retval;
} args_hipEventDestroy_t;

#define GET_ARGS_VALUE_hipEventDestroy(activity) { \
	args_hipEventDestroy_t* args = (args_hipEventDestroy_t*) activity->args; \
	args->event = (hipEvent_t) event; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetCacheConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetCacheConfig` function call.
 *
 * @struct args_hipDeviceSetCacheConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetCacheConfig (
 *			hipFuncCache_t cacheConfig (enum hipFuncCache_t)
 *	)
 */
#if HAVE_hipDeviceSetCacheConfig
typedef struct {
	hipFuncCache_t cacheConfig;
	hipError_t retval;
} args_hipDeviceSetCacheConfig_t;

#define GET_ARGS_VALUE_hipDeviceSetCacheConfig(activity) { \
	args_hipDeviceSetCacheConfig_t* args = (args_hipDeviceSetCacheConfig_t*) activity->args; \
	args->cacheConfig = (hipFuncCache_t) cacheConfig; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFree` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFree` function call.
 *
 * @struct args_hipFree_t
 *
 * @note 
 *	hipError_t
 *	hipFree (
 *			void * ptr (void *)
 *	)
 */
#if HAVE_hipFree
typedef struct {
	void * ptr;
	hipError_t retval;
} args_hipFree_t;

#define GET_ARGS_VALUE_hipFree(activity) { \
	args_hipFree_t* args = (args_hipFree_t*) activity->args; \
	args->ptr = (void *) ptr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArrayAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArrayAsync_spt` function call.
 *
 * @struct args_hipMemcpy2DToArrayAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArrayAsync_spt (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy2DToArrayAsync_spt
typedef struct {
	hipArray_t dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy2DToArrayAsync_spt_t;

#define GET_ARGS_VALUE_hipMemcpy2DToArrayAsync_spt(activity) { \
	args_hipMemcpy2DToArrayAsync_spt_t* args = (args_hipMemcpy2DToArrayAsync_spt_t*) activity->args; \
	args->dst = (hipArray_t) dst; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetFlags` function call.
 *
 * @struct args_hipCtxGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetFlags (
 *			unsigned int * flags (unsigned int *)
 *	)
 */
#if HAVE_hipCtxGetFlags
typedef struct {
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
} args_hipCtxGetFlags_t;

#define GET_ARGS_VALUE_hipCtxGetFlags(activity) { \
	args_hipCtxGetFlags_t* args = (args_hipCtxGetFlags_t*) activity->args; \
	args->flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipCtxGetFlags(args) { \
	args_hipCtxGetFlags_t* pargs = (args_hipCtxGetFlags_t*) args; \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetSymbolAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetSymbolAddress` function call.
 *
 * @struct args_hipGetSymbolAddress_t
 *
 * @note 
 *	hipError_t
 *	hipGetSymbolAddress (
 *			void ** devPtr (void **)
 *			const void * symbol (const void *)
 *	)
 */
#if HAVE_hipGetSymbolAddress
typedef struct {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	void * symbol;
	hipError_t retval;
} args_hipGetSymbolAddress_t;

#define GET_ARGS_VALUE_hipGetSymbolAddress(activity) { \
	args_hipGetSymbolAddress_t* args = (args_hipGetSymbolAddress_t*) activity->args; \
	args->devPtr = (void **) devPtr; \
	args->symbol = (void *) symbol; \
};

#define GET_PTRS_VALUE_hipGetSymbolAddress(args) { \
	args_hipGetSymbolAddress_t* pargs = (args_hipGetSymbolAddress_t*) args; \
	if (pargs->devPtr != NULL) { \
		pargs->devPtr__ref.ptr1 = *pargs->devPtr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetAddress` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetAddress` function call.
 *
 * @struct args_hipTexRefGetAddress_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetAddress (
 *			hipDeviceptr_t * dev_ptr (void **)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetAddress
typedef struct {
	void ** dev_ptr;
	struct {
		void* ptr1;
	} dev_ptr__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetAddress_t;

#define GET_ARGS_VALUE_hipTexRefGetAddress(activity) { \
	args_hipTexRefGetAddress_t* args = (args_hipTexRefGetAddress_t*) activity->args; \
	args->dev_ptr = (void **) dev_ptr; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetAddress(args) { \
	args_hipTexRefGetAddress_t* pargs = (args_hipTexRefGetAddress_t*) args; \
	if (pargs->dev_ptr != NULL) { \
		pargs->dev_ptr__ref.ptr1 = *pargs->dev_ptr; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexObjectCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectCreate` function call.
 *
 * @struct args_hipTexObjectCreate_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectCreate (
 *			hipTextureObject_t * pTexObject (struct __hip_texture **)
 *			const HIP_RESOURCE_DESC * pResDesc (const struct HIP_RESOURCE_DESC_st *)
 *			const HIP_TEXTURE_DESC * pTexDesc (const struct HIP_TEXTURE_DESC_st *)
 *			const HIP_RESOURCE_VIEW_DESC * pResViewDesc (const struct HIP_RESOURCE_VIEW_DESC_st *)
 *	)
 */
#if HAVE_hipTexObjectCreate
typedef struct {
	hipTextureObject_t * pTexObject;
	struct {
		hipTextureObject_t val;
	} pTexObject__ref;
	HIP_RESOURCE_DESC * pResDesc;
	struct {
		HIP_RESOURCE_DESC val;
	} pResDesc__ref;
	HIP_TEXTURE_DESC * pTexDesc;
	struct {
		HIP_TEXTURE_DESC val;
	} pTexDesc__ref;
	HIP_RESOURCE_VIEW_DESC * pResViewDesc;
	struct {
		HIP_RESOURCE_VIEW_DESC val;
	} pResViewDesc__ref;
	hipError_t retval;
} args_hipTexObjectCreate_t;

#define GET_ARGS_VALUE_hipTexObjectCreate(activity) { \
	args_hipTexObjectCreate_t* args = (args_hipTexObjectCreate_t*) activity->args; \
	args->pTexObject = (hipTextureObject_t *) pTexObject; \
	args->pResDesc = (HIP_RESOURCE_DESC *) pResDesc; \
	args->pTexDesc = (HIP_TEXTURE_DESC *) pTexDesc; \
	args->pResViewDesc = (HIP_RESOURCE_VIEW_DESC *) pResViewDesc; \
};

#define GET_PTRS_VALUE_hipTexObjectCreate(args) { \
	args_hipTexObjectCreate_t* pargs = (args_hipTexObjectCreate_t*) args; \
	if (pargs->pTexObject != NULL) { \
		pargs->pTexObject__ref.val = *pargs->pTexObject; \
	} \
	if (pargs->pResDesc != NULL) { \
		pargs->pResDesc__ref.val = *pargs->pResDesc; \
	} \
	if (pargs->pTexDesc != NULL) { \
		pargs->pTexDesc__ref.val = *pargs->pTexDesc; \
	} \
	if (pargs->pResViewDesc != NULL) { \
		pargs->pResViewDesc__ref.val = *pargs->pResViewDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetSharedMemConfig` function call.
 *
 * @struct args_hipDeviceGetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetSharedMemConfig (
 *			hipSharedMemConfig * pConfig (enum hipSharedMemConfig*)
 *	)
 */
#if HAVE_hipDeviceGetSharedMemConfig
typedef struct {
	hipSharedMemConfig * pConfig;
	struct {
		hipSharedMemConfig val;
	} pConfig__ref;
	hipError_t retval;
} args_hipDeviceGetSharedMemConfig_t;

#define GET_ARGS_VALUE_hipDeviceGetSharedMemConfig(activity) { \
	args_hipDeviceGetSharedMemConfig_t* args = (args_hipDeviceGetSharedMemConfig_t*) activity->args; \
	args->pConfig = (hipSharedMemConfig *) pConfig; \
};

#define GET_PTRS_VALUE_hipDeviceGetSharedMemConfig(args) { \
	args_hipDeviceGetSharedMemConfig_t* pargs = (args_hipDeviceGetSharedMemConfig_t*) args; \
	if (pargs->pConfig != NULL) { \
		pargs->pConfig__ref.val = *pargs->pConfig; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyHtoAAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyHtoAAsync` function call.
 *
 * @struct args_hipMemcpyHtoAAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyHtoAAsync (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			const void * srcHost (const void *)
 *			size_t ByteCount (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyHtoAAsync
typedef struct {
	hipArray_t dstArray;
	size_t dstOffset;
	void * srcHost;
	size_t ByteCount;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyHtoAAsync_t;

#define GET_ARGS_VALUE_hipMemcpyHtoAAsync(activity) { \
	args_hipMemcpyHtoAAsync_t* args = (args_hipMemcpyHtoAAsync_t*) activity->args; \
	args->dstArray = (hipArray_t) dstArray; \
	args->dstOffset = (size_t) dstOffset; \
	args->srcHost = (void *) srcHost; \
	args->ByteCount = (size_t) ByteCount; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolGetAttribute` function call.
 *
 * @struct args_hipMemPoolGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolGetAttribute (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			hipMemPoolAttr attr (enum hipMemPoolAttr)
 *			void * value (void *)
 *	)
 */
#if HAVE_hipMemPoolGetAttribute
typedef struct {
	hipMemPool_t mem_pool;
	hipMemPoolAttr attr;
	void * value;
	hipError_t retval;
} args_hipMemPoolGetAttribute_t;

#define GET_ARGS_VALUE_hipMemPoolGetAttribute(activity) { \
	args_hipMemPoolGetAttribute_t* args = (args_hipMemPoolGetAttribute_t*) activity->args; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->attr = (hipMemPoolAttr) attr; \
	args->value = (void *) value; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddMemAllocNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddMemAllocNode` function call.
 *
 * @struct args_hipGraphAddMemAllocNode_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddMemAllocNode (
 *			hipGraphNode_t * pGraphNode (struct hipGraphNode **)
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * pDependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			hipMemAllocNodeParams * pNodeParams (struct hipMemAllocNodeParams*)
 *	)
 */
#if HAVE_hipGraphAddMemAllocNode
typedef struct {
	hipGraphNode_t * pGraphNode;
	struct {
		hipGraphNode_t val;
	} pGraphNode__ref;
	hipGraph_t graph;
	hipGraphNode_t * pDependencies;
	struct {
		hipGraphNode_t val;
	} pDependencies__ref;
	size_t numDependencies;
	hipMemAllocNodeParams * pNodeParams;
	struct {
		hipMemAllocNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphAddMemAllocNode_t;

#define GET_ARGS_VALUE_hipGraphAddMemAllocNode(activity) { \
	args_hipGraphAddMemAllocNode_t* args = (args_hipGraphAddMemAllocNode_t*) activity->args; \
	args->pGraphNode = (hipGraphNode_t *) pGraphNode; \
	args->graph = (hipGraph_t) graph; \
	args->pDependencies = (hipGraphNode_t *) pDependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->pNodeParams = (hipMemAllocNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphAddMemAllocNode(args) { \
	args_hipGraphAddMemAllocNode_t* pargs = (args_hipGraphAddMemAllocNode_t*) args; \
	if (pargs->pGraphNode != NULL) { \
		pargs->pGraphNode__ref.val = *pargs->pGraphNode; \
	} \
	if (pargs->pDependencies != NULL) { \
		pargs->pDependencies__ref.val = *pargs->pDependencies; \
	} \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemRetainAllocationHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemRetainAllocationHandle` function call.
 *
 * @struct args_hipMemRetainAllocationHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemRetainAllocationHandle (
 *			hipMemGenericAllocationHandle_t * handle (struct ihipMemGenericAllocationHandle **)
 *			void * addr (void *)
 *	)
 */
#if HAVE_hipMemRetainAllocationHandle
typedef struct {
	hipMemGenericAllocationHandle_t * handle;
	struct {
		hipMemGenericAllocationHandle_t val;
	} handle__ref;
	void * addr;
	hipError_t retval;
} args_hipMemRetainAllocationHandle_t;

#define GET_ARGS_VALUE_hipMemRetainAllocationHandle(activity) { \
	args_hipMemRetainAllocationHandle_t* args = (args_hipMemRetainAllocationHandle_t*) activity->args; \
	args->handle = (hipMemGenericAllocationHandle_t *) handle; \
	args->addr = (void *) addr; \
};

#define GET_PTRS_VALUE_hipMemRetainAllocationHandle(args) { \
	args_hipMemRetainAllocationHandle_t* pargs = (args_hipMemRetainAllocationHandle_t*) args; \
	if (pargs->handle != NULL) { \
		pargs->handle__ref.val = *pargs->handle; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetFuncBySymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetFuncBySymbol` function call.
 *
 * @struct args_hipGetFuncBySymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGetFuncBySymbol (
 *			hipFunction_t * functionPtr (struct ihipModuleSymbol_t **)
 *			const void * symbolPtr (const void *)
 *	)
 */
#if HAVE_hipGetFuncBySymbol
typedef struct {
	hipFunction_t * functionPtr;
	struct {
		hipFunction_t val;
	} functionPtr__ref;
	void * symbolPtr;
	hipError_t retval;
} args_hipGetFuncBySymbol_t;

#define GET_ARGS_VALUE_hipGetFuncBySymbol(activity) { \
	args_hipGetFuncBySymbol_t* args = (args_hipGetFuncBySymbol_t*) activity->args; \
	args->functionPtr = (hipFunction_t *) functionPtr; \
	args->symbolPtr = (void *) symbolPtr; \
};

#define GET_PTRS_VALUE_hipGetFuncBySymbol(args) { \
	args_hipGetFuncBySymbol_t* pargs = (args_hipGetFuncBySymbol_t*) args; \
	if (pargs->functionPtr != NULL) { \
		pargs->functionPtr__ref.val = *pargs->functionPtr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetMemPool` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetMemPool` function call.
 *
 * @struct args_hipDeviceSetMemPool_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetMemPool (
 *			int device (int)
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *	)
 */
#if HAVE_hipDeviceSetMemPool
typedef struct {
	int device;
	hipMemPool_t mem_pool;
	hipError_t retval;
} args_hipDeviceSetMemPool_t;

#define GET_ARGS_VALUE_hipDeviceSetMemPool(activity) { \
	args_hipDeviceSetMemPool_t* args = (args_hipDeviceSetMemPool_t*) activity->args; \
	args->device = (int) device; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetLimit` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetLimit` function call.
 *
 * @struct args_hipDeviceSetLimit_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetLimit (
 *			enum hipLimit_t limit (enum hipLimit_t)
 *			size_t value (unsigned long)
 *	)
 */
#if HAVE_hipDeviceSetLimit
typedef struct {
	enum hipLimit_t limit;
	size_t value;
	hipError_t retval;
} args_hipDeviceSetLimit_t;

#define GET_ARGS_VALUE_hipDeviceSetLimit(activity) { \
	args_hipDeviceSetLimit_t* args = (args_hipDeviceSetLimit_t*) activity->args; \
	args->limit = (enum hipLimit_t) limit; \
	args->value = (size_t) value; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemGetInfo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetInfo` function call.
 *
 * @struct args_hipMemGetInfo_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetInfo (
 *			size_t * free (unsigned long*)
 *			size_t * total (unsigned long*)
 *	)
 */
#if HAVE_hipMemGetInfo
typedef struct {
	size_t * free;
	struct {
		size_t val;
	} free__ref;
	size_t * total;
	struct {
		size_t val;
	} total__ref;
	hipError_t retval;
} args_hipMemGetInfo_t;

#define GET_ARGS_VALUE_hipMemGetInfo(activity) { \
	args_hipMemGetInfo_t* args = (args_hipMemGetInfo_t*) activity->args; \
	args->free = (size_t *) free; \
	args->total = (size_t *) total; \
};

#define GET_PTRS_VALUE_hipMemGetInfo(args) { \
	args_hipMemGetInfo_t* pargs = (args_hipMemGetInfo_t*) args; \
	if (pargs->free != NULL) { \
		pargs->free__ref.val = *pargs->free; \
	} \
	if (pargs->total != NULL) { \
		pargs->total__ref.val = *pargs->total; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyParam2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyParam2D` function call.
 *
 * @struct args_hipMemcpyParam2D_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyParam2D (
 *			const hip_Memcpy2D * pCopy (const struct hip_Memcpy2D *)
 *	)
 */
#if HAVE_hipMemcpyParam2D
typedef struct {
	hip_Memcpy2D * pCopy;
	struct {
		hip_Memcpy2D val;
	} pCopy__ref;
	hipError_t retval;
} args_hipMemcpyParam2D_t;

#define GET_ARGS_VALUE_hipMemcpyParam2D(activity) { \
	args_hipMemcpyParam2D_t* args = (args_hipMemcpyParam2D_t*) activity->args; \
	args->pCopy = (hip_Memcpy2D *) pCopy; \
};

#define GET_PTRS_VALUE_hipMemcpyParam2D(args) { \
	args_hipMemcpyParam2D_t* pargs = (args_hipMemcpyParam2D_t*) args; \
	if (pargs->pCopy != NULL) { \
		pargs->pCopy__ref.val = *pargs->pCopy; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphDebugDotPrint` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphDebugDotPrint` function call.
 *
 * @struct args_hipGraphDebugDotPrint_t
 *
 * @note 
 *	hipError_t
 *	hipGraphDebugDotPrint (
 *			hipGraph_t graph (struct ihipGraph *)
 *			const char * path (const char *)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipGraphDebugDotPrint
typedef struct {
	hipGraph_t graph;
	char * path;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} path__ref;
	unsigned int flags;
	hipError_t retval;
} args_hipGraphDebugDotPrint_t;

#define GET_ARGS_VALUE_hipGraphDebugDotPrint(activity) { \
	args_hipGraphDebugDotPrint_t* args = (args_hipGraphDebugDotPrint_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->path = (char *) path; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipGraphDebugDotPrint(args) { \
	args_hipGraphDebugDotPrint_t* pargs = (args_hipGraphDebugDotPrint_t*) args; \
	if (pargs->path != NULL) { \
		strncpy(pargs->path__ref.val, pargs->path, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceSetGraphMemAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceSetGraphMemAttribute` function call.
 *
 * @struct args_hipDeviceSetGraphMemAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceSetGraphMemAttribute (
 *			int device (int)
 *			hipGraphMemAttributeType attr (enum hipGraphMemAttributeType)
 *			void * value (void *)
 *	)
 */
#if HAVE_hipDeviceSetGraphMemAttribute
typedef struct {
	int device;
	hipGraphMemAttributeType attr;
	void * value;
	hipError_t retval;
} args_hipDeviceSetGraphMemAttribute_t;

#define GET_ARGS_VALUE_hipDeviceSetGraphMemAttribute(activity) { \
	args_hipDeviceSetGraphMemAttribute_t* args = (args_hipDeviceSetGraphMemAttribute_t*) activity->args; \
	args->device = (int) device; \
	args->attr = (hipGraphMemAttributeType) attr; \
	args->value = (void *) value; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvGetErrorString` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGetErrorString` function call.
 *
 * @struct args_hipDrvGetErrorString_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGetErrorString (
 *			hipError_t hipError (enum hipError_t)
 *			const char ** errorString (const char **)
 *	)
 */
#if HAVE_hipDrvGetErrorString
typedef struct {
	hipError_t hipError;
	char ** errorString;
	struct {
		void* ptr1;
		char val[HIP_STRING_SIZE_MAX];
	} errorString__ref;
	hipError_t retval;
} args_hipDrvGetErrorString_t;

#define GET_ARGS_VALUE_hipDrvGetErrorString(activity) { \
	args_hipDrvGetErrorString_t* args = (args_hipDrvGetErrorString_t*) activity->args; \
	args->hipError = (hipError_t) hipError; \
	args->errorString = (char **) errorString; \
};

#define GET_PTRS_VALUE_hipDrvGetErrorString(args) { \
	args_hipDrvGetErrorString_t* pargs = (args_hipDrvGetErrorString_t*) args; \
	if (pargs->errorString != NULL) { \
		pargs->errorString__ref.ptr1 = *pargs->errorString; \
		if (pargs->errorString__ref.ptr1 != NULL) { \
			strncpy(pargs->errorString__ref.val, pargs->errorString__ref.ptr1, HIP_STRING_SIZE_MAX-1); \
		} \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyDtoDAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyDtoDAsync` function call.
 *
 * @struct args_hipMemcpyDtoDAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyDtoDAsync (
 *			hipDeviceptr_t dst (void *)
 *			hipDeviceptr_t src (void *)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpyDtoDAsync
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpyDtoDAsync_t;

#define GET_ARGS_VALUE_hipMemcpyDtoDAsync(activity) { \
	args_hipMemcpyDtoDAsync_t* args = (args_hipMemcpyDtoDAsync_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxSynchronize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSynchronize` function call.
 *
 * @struct args_hipCtxSynchronize_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSynchronize (
 *	)
 */
#if HAVE_hipCtxSynchronize
typedef struct {
	hipError_t retval;
} args_hipCtxSynchronize_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexObjectDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexObjectDestroy` function call.
 *
 * @struct args_hipTexObjectDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipTexObjectDestroy (
 *			hipTextureObject_t texObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipTexObjectDestroy
typedef struct {
	hipTextureObject_t texObject;
	hipError_t retval;
} args_hipTexObjectDestroy_t;

#define GET_ARGS_VALUE_hipTexObjectDestroy(activity) { \
	args_hipTexObjectDestroy_t* args = (args_hipTexObjectDestroy_t*) activity->args; \
	args->texObject = (hipTextureObject_t) texObject; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetAddressMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetAddressMode` function call.
 *
 * @struct args_hipTexRefGetAddressMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetAddressMode (
 *			enum hipTextureAddressMode * pam (enum hipTextureAddressMode *)
 *			const textureReference * texRef (const struct textureReference *)
 *			int dim (int)
 *	)
 */
#if HAVE_hipTexRefGetAddressMode
typedef struct {
	enum hipTextureAddressMode * pam;
	struct {
		enum hipTextureAddressMode val;
	} pam__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	int dim;
	hipError_t retval;
} args_hipTexRefGetAddressMode_t;

#define GET_ARGS_VALUE_hipTexRefGetAddressMode(activity) { \
	args_hipTexRefGetAddressMode_t* args = (args_hipTexRefGetAddressMode_t*) activity->args; \
	args->pam = (enum hipTextureAddressMode *) pam; \
	args->texRef = (textureReference *) texRef; \
	args->dim = (int) dim; \
};

#define GET_PTRS_VALUE_hipTexRefGetAddressMode(args) { \
	args_hipTexRefGetAddressMode_t* pargs = (args_hipTexRefGetAddressMode_t*) args; \
	if (pargs->pam != NULL) { \
		pargs->pam__ref.val = *pargs->pam; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `__hipGetPCH` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `__hipGetPCH` function call.
 *
 * @struct args___hipGetPCH_t
 *
 * @note 
 *	void
 *	__hipGetPCH (
 *			const char ** pch (const char **)
 *			unsigned int * size (unsigned int *)
 *	)
 */
#if HAVE___hipGetPCH
typedef struct {
	char ** pch;
	struct {
		void* ptr1;
		char val[HIP_STRING_SIZE_MAX];
	} pch__ref;
	unsigned int * size;
	struct {
		unsigned int val;
	} size__ref;
} args___hipGetPCH_t;

#define GET_ARGS_VALUE___hipGetPCH(activity) { \
	args___hipGetPCH_t* args = (args___hipGetPCH_t*) activity->args; \
	args->pch = (char **) pch; \
	args->size = (unsigned int *) size; \
};

#define GET_PTRS_VALUE___hipGetPCH(args) { \
	args___hipGetPCH_t* pargs = (args___hipGetPCH_t*) args; \
	if (pargs->pch != NULL) { \
		pargs->pch__ref.ptr1 = *pargs->pch; \
		if (pargs->pch__ref.ptr1 != NULL) { \
			strncpy(pargs->pch__ref.val, pargs->pch__ref.ptr1, HIP_STRING_SIZE_MAX-1); \
		} \
	} \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetFlags` function call.
 *
 * @struct args_hipStreamGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetFlags (
 *			hipStream_t stream (struct ihipStream_t *)
 *			unsigned int * flags (unsigned int *)
 *	)
 */
#if HAVE_hipStreamGetFlags
typedef struct {
	hipStream_t stream;
	unsigned int * flags;
	struct {
		unsigned int val;
	} flags__ref;
	hipError_t retval;
} args_hipStreamGetFlags_t;

#define GET_ARGS_VALUE_hipStreamGetFlags(activity) { \
	args_hipStreamGetFlags_t* args = (args_hipStreamGetFlags_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->flags = (unsigned int *) flags; \
};

#define GET_PTRS_VALUE_hipStreamGetFlags(args) { \
	args_hipStreamGetFlags_t* pargs = (args_hipStreamGetFlags_t*) args; \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemGetAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAccess` function call.
 *
 * @struct args_hipMemGetAccess_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAccess (
 *			unsigned long long * flags (unsigned long long *)
 *			const hipMemLocation * location (const struct hipMemLocation *)
 *			void * ptr (void *)
 *	)
 */
#if HAVE_hipMemGetAccess
typedef struct {
	unsigned long long * flags;
	struct {
		unsigned long long val;
	} flags__ref;
	hipMemLocation * location;
	struct {
		hipMemLocation val;
	} location__ref;
	void * ptr;
	hipError_t retval;
} args_hipMemGetAccess_t;

#define GET_ARGS_VALUE_hipMemGetAccess(activity) { \
	args_hipMemGetAccess_t* args = (args_hipMemGetAccess_t*) activity->args; \
	args->flags = (unsigned long long *) flags; \
	args->location = (hipMemLocation *) location; \
	args->ptr = (void *) ptr; \
};

#define GET_PTRS_VALUE_hipMemGetAccess(args) { \
	args_hipMemGetAccess_t* pargs = (args_hipMemGetAccess_t*) args; \
	if (pargs->flags != NULL) { \
		pargs->flags__ref.val = *pargs->flags; \
	} \
	if (pargs->location != NULL) { \
		pargs->location__ref.val = *pargs->location; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoA` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoA` function call.
 *
 * @struct args_hipMemcpyAtoA_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoA (
 *			hipArray_t dstArray (struct hipArray *)
 *			size_t dstOffset (unsigned long)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t ByteCount (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyAtoA
typedef struct {
	hipArray_t dstArray;
	size_t dstOffset;
	hipArray_t srcArray;
	size_t srcOffset;
	size_t ByteCount;
	hipError_t retval;
} args_hipMemcpyAtoA_t;

#define GET_ARGS_VALUE_hipMemcpyAtoA(activity) { \
	args_hipMemcpyAtoA_t* args = (args_hipMemcpyAtoA_t*) activity->args; \
	args->dstArray = (hipArray_t) dstArray; \
	args->dstOffset = (size_t) dstOffset; \
	args->srcArray = (hipArray_t) srcArray; \
	args->srcOffset = (size_t) srcOffset; \
	args->ByteCount = (size_t) ByteCount; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToSymbol` function call.
 *
 * @struct args_hipMemcpyToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToSymbol (
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpyToSymbol
typedef struct {
	void * symbol;
	void * src;
	size_t sizeBytes;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpyToSymbol_t;

#define GET_ARGS_VALUE_hipMemcpyToSymbol(activity) { \
	args_hipMemcpyToSymbol_t* args = (args_hipMemcpyToSymbol_t*) activity->args; \
	args->symbol = (void *) symbol; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxSetCurrent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSetCurrent` function call.
 *
 * @struct args_hipCtxSetCurrent_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSetCurrent (
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
#if HAVE_hipCtxSetCurrent
typedef struct {
	hipCtx_t ctx;
	hipError_t retval;
} args_hipCtxSetCurrent_t;

#define GET_ARGS_VALUE_hipCtxSetCurrent(activity) { \
	args_hipCtxSetCurrent_t* args = (args_hipCtxSetCurrent_t*) activity->args; \
	args->ctx = (hipCtx_t) ctx; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamQuery_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamQuery_spt` function call.
 *
 * @struct args_hipStreamQuery_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamQuery_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipStreamQuery_spt
typedef struct {
	hipStream_t stream;
	hipError_t retval;
} args_hipStreamQuery_spt_t;

#define GET_ARGS_VALUE_hipStreamQuery_spt(activity) { \
	args_hipStreamQuery_spt_t* args = (args_hipStreamQuery_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetSymbolSize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetSymbolSize` function call.
 *
 * @struct args_hipGetSymbolSize_t
 *
 * @note 
 *	hipError_t
 *	hipGetSymbolSize (
 *			size_t * size (unsigned long*)
 *			const void * symbol (const void *)
 *	)
 */
#if HAVE_hipGetSymbolSize
typedef struct {
	size_t * size;
	struct {
		size_t val;
	} size__ref;
	void * symbol;
	hipError_t retval;
} args_hipGetSymbolSize_t;

#define GET_ARGS_VALUE_hipGetSymbolSize(activity) { \
	args_hipGetSymbolSize_t* args = (args_hipGetSymbolSize_t*) activity->args; \
	args->size = (size_t *) size; \
	args->symbol = (void *) symbol; \
};

#define GET_PTRS_VALUE_hipGetSymbolSize(args) { \
	args_hipGetSymbolSize_t* pargs = (args_hipGetSymbolSize_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMipmappedArrayGetLevel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMipmappedArrayGetLevel` function call.
 *
 * @struct args_hipMipmappedArrayGetLevel_t
 *
 * @note 
 *	hipError_t
 *	hipMipmappedArrayGetLevel (
 *			hipArray_t * pLevelArray (struct hipArray **)
 *			hipMipmappedArray_t hMipMappedArray (struct hipMipmappedArray *)
 *			unsigned int level (unsigned int)
 *	)
 */
#if HAVE_hipMipmappedArrayGetLevel
typedef struct {
	hipArray_t * pLevelArray;
	struct {
		hipArray_t val;
	} pLevelArray__ref;
	struct hipMipmappedArray * hMipMappedArray;
	struct {
		struct hipMipmappedArray val;
	} hMipMappedArray__ref;
	unsigned int level;
	hipError_t retval;
} args_hipMipmappedArrayGetLevel_t;

#define GET_ARGS_VALUE_hipMipmappedArrayGetLevel(activity) { \
	args_hipMipmappedArrayGetLevel_t* args = (args_hipMipmappedArrayGetLevel_t*) activity->args; \
	args->pLevelArray = (hipArray_t *) pLevelArray; \
	args->hMipMappedArray = (struct hipMipmappedArray *) hMipMappedArray; \
	args->level = (unsigned int) level; \
};

#define GET_PTRS_VALUE_hipMipmappedArrayGetLevel(args) { \
	args_hipMipmappedArrayGetLevel_t* pargs = (args_hipMipmappedArrayGetLevel_t*) args; \
	if (pargs->pLevelArray != NULL) { \
		pargs->pLevelArray__ref.val = *pargs->pLevelArray; \
	} \
	if (pargs->hMipMappedArray != NULL) { \
		pargs->hMipMappedArray__ref.val = *pargs->hMipMappedArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExternalMemoryGetMappedMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExternalMemoryGetMappedMipmappedArray` function call.
 *
 * @struct args_hipExternalMemoryGetMappedMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipExternalMemoryGetMappedMipmappedArray (
 *			hipMipmappedArray_t * mipmap (struct hipMipmappedArray **)
 *			hipExternalMemory_t extMem (void *)
 *			const hipExternalMemoryMipmappedArrayDesc * mipmapDesc (const struct hipExternalMemoryMipmappedArrayDesc_st *)
 *	)
 */
#if HAVE_hipExternalMemoryGetMappedMipmappedArray
typedef struct {
	struct hipMipmappedArray ** mipmap;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} mipmap__ref;
	void * extMem;
	hipExternalMemoryMipmappedArrayDesc * mipmapDesc;
	struct {
		hipExternalMemoryMipmappedArrayDesc val;
	} mipmapDesc__ref;
	hipError_t retval;
} args_hipExternalMemoryGetMappedMipmappedArray_t;

#define GET_ARGS_VALUE_hipExternalMemoryGetMappedMipmappedArray(activity) { \
	args_hipExternalMemoryGetMappedMipmappedArray_t* args = (args_hipExternalMemoryGetMappedMipmappedArray_t*) activity->args; \
	args->mipmap = (struct hipMipmappedArray **) mipmap; \
	args->extMem = (void *) extMem; \
	args->mipmapDesc = (hipExternalMemoryMipmappedArrayDesc *) mipmapDesc; \
};

#define GET_PTRS_VALUE_hipExternalMemoryGetMappedMipmappedArray(args) { \
	args_hipExternalMemoryGetMappedMipmappedArray_t* pargs = (args_hipExternalMemoryGetMappedMipmappedArray_t*) args; \
	if (pargs->mipmap != NULL) { \
		pargs->mipmap__ref.ptr1 = *pargs->mipmap; \
		if (pargs->mipmap__ref.ptr1 != NULL) { \
			pargs->mipmap__ref.val = **pargs->mipmap; \
		} \
	} \
	if (pargs->mipmapDesc != NULL) { \
		pargs->mipmapDesc__ref.val = *pargs->mipmapDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecMemcpyNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecMemcpyNodeSetParams` function call.
 *
 * @struct args_hipGraphExecMemcpyNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecMemcpyNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipMemcpy3DParms * pNodeParams (struct hipMemcpy3DParms*)
 *	)
 */
#if HAVE_hipGraphExecMemcpyNodeSetParams
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t node;
	hipMemcpy3DParms * pNodeParams;
	struct {
		hipMemcpy3DParms val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphExecMemcpyNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExecMemcpyNodeSetParams(activity) { \
	args_hipGraphExecMemcpyNodeSetParams_t* args = (args_hipGraphExecMemcpyNodeSetParams_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipMemcpy3DParms *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecMemcpyNodeSetParams(args) { \
	args_hipGraphExecMemcpyNodeSetParams_t* pargs = (args_hipGraphExecMemcpyNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipUserObjectCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUserObjectCreate` function call.
 *
 * @struct args_hipUserObjectCreate_t
 *
 * @note 
 *	hipError_t
 *	hipUserObjectCreate (
 *			hipUserObject_t * object_out (struct hipUserObject **)
 *			void * ptr (void *)
 *			hipHostFn_t destroy (void (*)(void *))
 *			unsigned int initialRefcount (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipUserObjectCreate
typedef struct {
	hipUserObject_t * object_out;
	struct {
		hipUserObject_t val;
	} object_out__ref;
	void * ptr;
	hipHostFn_t destroy;
	unsigned int initialRefcount;
	unsigned int flags;
	hipError_t retval;
} args_hipUserObjectCreate_t;

#define GET_ARGS_VALUE_hipUserObjectCreate(activity) { \
	args_hipUserObjectCreate_t* args = (args_hipUserObjectCreate_t*) activity->args; \
	args->object_out = (hipUserObject_t *) object_out; \
	args->ptr = (void *) ptr; \
	args->destroy = (hipHostFn_t) destroy; \
	args->initialRefcount = (unsigned int) initialRefcount; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipUserObjectCreate(args) { \
	args_hipUserObjectCreate_t* pargs = (args_hipUserObjectCreate_t*) args; \
	if (pargs->object_out != NULL) { \
		pargs->object_out__ref.val = *pargs->object_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo_v2` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo_v2` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_v2_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo_v2 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * captureStatus_out (enum hipStreamCaptureStatus*)
 *			unsigned long long * id_out (unsigned long long *)
 *			hipGraph_t * graph_out (struct ihipGraph **)
 *			const hipGraphNode_t ** dependencies_out (const struct hipGraphNode * **)
 *			size_t * numDependencies_out (unsigned long*)
 *	)
 */
#if HAVE_hipStreamGetCaptureInfo_v2
typedef struct {
	hipStream_t stream;
	hipStreamCaptureStatus * captureStatus_out;
	struct {
		hipStreamCaptureStatus val;
	} captureStatus_out__ref;
	unsigned long long * id_out;
	struct {
		unsigned long long val;
	} id_out__ref;
	hipGraph_t * graph_out;
	struct {
		hipGraph_t val;
	} graph_out__ref;
	hipGraphNode_t ** dependencies_out;
	struct {
		void* ptr1;
		hipGraphNode_t val;
	} dependencies_out__ref;
	size_t * numDependencies_out;
	struct {
		size_t val;
	} numDependencies_out__ref;
	hipError_t retval;
} args_hipStreamGetCaptureInfo_v2_t;

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo_v2(activity) { \
	args_hipStreamGetCaptureInfo_v2_t* args = (args_hipStreamGetCaptureInfo_v2_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->captureStatus_out = (hipStreamCaptureStatus *) captureStatus_out; \
	args->id_out = (unsigned long long *) id_out; \
	args->graph_out = (hipGraph_t *) graph_out; \
	args->dependencies_out = (hipGraphNode_t **) dependencies_out; \
	args->numDependencies_out = (size_t *) numDependencies_out; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2(args) { \
	args_hipStreamGetCaptureInfo_v2_t* pargs = (args_hipStreamGetCaptureInfo_v2_t*) args; \
	if (pargs->captureStatus_out != NULL) { \
		pargs->captureStatus_out__ref.val = *pargs->captureStatus_out; \
	} \
	if (pargs->id_out != NULL) { \
		pargs->id_out__ref.val = *pargs->id_out; \
	} \
	if (pargs->graph_out != NULL) { \
		pargs->graph_out__ref.val = *pargs->graph_out; \
	} \
	if (pargs->dependencies_out != NULL) { \
		pargs->dependencies_out__ref.ptr1 = *pargs->dependencies_out; \
		if (pargs->dependencies_out__ref.ptr1 != NULL) { \
			pargs->dependencies_out__ref.val = **pargs->dependencies_out; \
		} \
	} \
	if (pargs->numDependencies_out != NULL) { \
		pargs->numDependencies_out__ref.val = *pargs->numDependencies_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetArray` function call.
 *
 * @struct args_hipTexRefGetArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetArray (
 *			hipArray_t * pArray (struct hipArray **)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetArray
typedef struct {
	hipArray_t * pArray;
	struct {
		hipArray_t val;
	} pArray__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetArray_t;

#define GET_ARGS_VALUE_hipTexRefGetArray(activity) { \
	args_hipTexRefGetArray_t* args = (args_hipTexRefGetArray_t*) activity->args; \
	args->pArray = (hipArray_t *) pArray; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetArray(args) { \
	args_hipTexRefGetArray_t* pargs = (args_hipTexRefGetArray_t*) args; \
	if (pargs->pArray != NULL) { \
		pargs->pArray__ref.val = *pargs->pArray; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipImportExternalSemaphore` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipImportExternalSemaphore` function call.
 *
 * @struct args_hipImportExternalSemaphore_t
 *
 * @note 
 *	hipError_t
 *	hipImportExternalSemaphore (
 *			hipExternalSemaphore_t * extSem_out (void **)
 *			const hipExternalSemaphoreHandleDesc * semHandleDesc (const struct hipExternalSemaphoreHandleDesc_st *)
 *	)
 */
#if HAVE_hipImportExternalSemaphore
typedef struct {
	void ** extSem_out;
	struct {
		void* ptr1;
	} extSem_out__ref;
	hipExternalSemaphoreHandleDesc * semHandleDesc;
	struct {
		hipExternalSemaphoreHandleDesc val;
	} semHandleDesc__ref;
	hipError_t retval;
} args_hipImportExternalSemaphore_t;

#define GET_ARGS_VALUE_hipImportExternalSemaphore(activity) { \
	args_hipImportExternalSemaphore_t* args = (args_hipImportExternalSemaphore_t*) activity->args; \
	args->extSem_out = (void **) extSem_out; \
	args->semHandleDesc = (hipExternalSemaphoreHandleDesc *) semHandleDesc; \
};

#define GET_PTRS_VALUE_hipImportExternalSemaphore(args) { \
	args_hipImportExternalSemaphore_t* pargs = (args_hipImportExternalSemaphore_t*) args; \
	if (pargs->extSem_out != NULL) { \
		pargs->extSem_out__ref.ptr1 = *pargs->extSem_out; \
	} \
	if (pargs->semHandleDesc != NULL) { \
		pargs->semHandleDesc__ref.val = *pargs->semHandleDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetAttribute` function call.
 *
 * @struct args_hipDeviceGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetAttribute (
 *			int * pi (int *)
 *			hipDeviceAttribute_t attr (enum hipDeviceAttribute_t)
 *			int deviceId (int)
 *	)
 */
#if HAVE_hipDeviceGetAttribute
typedef struct {
	int * pi;
	struct {
		int val;
	} pi__ref;
	hipDeviceAttribute_t attr;
	int deviceId;
	hipError_t retval;
} args_hipDeviceGetAttribute_t;

#define GET_ARGS_VALUE_hipDeviceGetAttribute(activity) { \
	args_hipDeviceGetAttribute_t* args = (args_hipDeviceGetAttribute_t*) activity->args; \
	args->pi = (int *) pi; \
	args->attr = (hipDeviceAttribute_t) attr; \
	args->deviceId = (int) deviceId; \
};

#define GET_PTRS_VALUE_hipDeviceGetAttribute(args) { \
	args_hipDeviceGetAttribute_t* pargs = (args_hipDeviceGetAttribute_t*) args; \
	if (pargs->pi != NULL) { \
		pargs->pi__ref.val = *pargs->pi; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemFreeNodeGetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemFreeNodeGetParams` function call.
 *
 * @struct args_hipGraphMemFreeNodeGetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemFreeNodeGetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			void * dev_ptr (void *)
 *	)
 */
#if HAVE_hipGraphMemFreeNodeGetParams
typedef struct {
	hipGraphNode_t node;
	void * dev_ptr;
	hipError_t retval;
} args_hipGraphMemFreeNodeGetParams_t;

#define GET_ARGS_VALUE_hipGraphMemFreeNodeGetParams(activity) { \
	args_hipGraphMemFreeNodeGetParams_t* args = (args_hipGraphMemFreeNodeGetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->dev_ptr = (void *) dev_ptr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxGetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetSharedMemConfig` function call.
 *
 * @struct args_hipCtxGetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetSharedMemConfig (
 *			hipSharedMemConfig * pConfig (enum hipSharedMemConfig*)
 *	)
 */
#if HAVE_hipCtxGetSharedMemConfig
typedef struct {
	hipSharedMemConfig * pConfig;
	struct {
		hipSharedMemConfig val;
	} pConfig__ref;
	hipError_t retval;
} args_hipCtxGetSharedMemConfig_t;

#define GET_ARGS_VALUE_hipCtxGetSharedMemConfig(activity) { \
	args_hipCtxGetSharedMemConfig_t* args = (args_hipCtxGetSharedMemConfig_t*) activity->args; \
	args->pConfig = (hipSharedMemConfig *) pConfig; \
};

#define GET_PTRS_VALUE_hipCtxGetSharedMemConfig(args) { \
	args_hipCtxGetSharedMemConfig_t* pargs = (args_hipCtxGetSharedMemConfig_t*) args; \
	if (pargs->pConfig != NULL) { \
		pargs->pConfig__ref.val = *pargs->pConfig; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParamsToSymbol` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParamsToSymbol` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParamsToSymbol_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParamsToSymbol (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const void * symbol (const void *)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			size_t offset (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipGraphMemcpyNodeSetParamsToSymbol
typedef struct {
	hipGraphNode_t node;
	void * symbol;
	void * src;
	size_t count;
	size_t offset;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipGraphMemcpyNodeSetParamsToSymbol_t;

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParamsToSymbol(activity) { \
	args_hipGraphMemcpyNodeSetParamsToSymbol_t* args = (args_hipGraphMemcpyNodeSetParamsToSymbol_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->symbol = (void *) symbol; \
	args->src = (void *) src; \
	args->count = (size_t) count; \
	args->offset = (size_t) offset; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DToArray` function call.
 *
 * @struct args_hipMemcpy2DToArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DToArray (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy2DToArray
typedef struct {
	hipArray_t dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy2DToArray_t;

#define GET_ARGS_VALUE_hipMemcpy2DToArray(activity) { \
	args_hipMemcpy2DToArray_t* args = (args_hipMemcpy2DToArray_t*) activity->args; \
	args->dst = (hipArray_t) dst; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamIsCapturing_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamIsCapturing_spt` function call.
 *
 * @struct args_hipStreamIsCapturing_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamIsCapturing_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * pCaptureStatus (enum hipStreamCaptureStatus*)
 *	)
 */
#if HAVE_hipStreamIsCapturing_spt
typedef struct {
	hipStream_t stream;
	hipStreamCaptureStatus * pCaptureStatus;
	struct {
		hipStreamCaptureStatus val;
	} pCaptureStatus__ref;
	hipError_t retval;
} args_hipStreamIsCapturing_spt_t;

#define GET_ARGS_VALUE_hipStreamIsCapturing_spt(activity) { \
	args_hipStreamIsCapturing_spt_t* args = (args_hipStreamIsCapturing_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->pCaptureStatus = (hipStreamCaptureStatus *) pCaptureStatus; \
};

#define GET_PTRS_VALUE_hipStreamIsCapturing_spt(args) { \
	args_hipStreamIsCapturing_spt_t* pargs = (args_hipStreamIsCapturing_spt_t*) args; \
	if (pargs->pCaptureStatus != NULL) { \
		pargs->pCaptureStatus__ref.val = *pargs->pCaptureStatus; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFreeHost` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFreeHost` function call.
 *
 * @struct args_hipFreeHost_t
 *
 * @note 
 *	hipError_t
 *	hipFreeHost (
 *			void * ptr (void *)
 *	)
 */
#if HAVE_hipFreeHost
typedef struct {
	void * ptr;
	hipError_t retval;
} args_hipFreeHost_t;

#define GET_ARGS_VALUE_hipFreeHost(activity) { \
	args_hipFreeHost_t* args = (args_hipFreeHost_t*) activity->args; \
	args->ptr = (void *) ptr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeSetParams` function call.
 *
 * @struct args_hipGraphKernelNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipKernelNodeParams * pNodeParams (const struct hipKernelNodeParams *)
 *	)
 */
#if HAVE_hipGraphKernelNodeSetParams
typedef struct {
	hipGraphNode_t node;
	hipKernelNodeParams * pNodeParams;
	struct {
		hipKernelNodeParams val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphKernelNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphKernelNodeSetParams(activity) { \
	args_hipGraphKernelNodeSetParams_t* args = (args_hipGraphKernelNodeSetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipKernelNodeParams *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeSetParams(args) { \
	args_hipGraphKernelNodeSetParams_t* pargs = (args_hipGraphKernelNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMallocHost` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocHost` function call.
 *
 * @struct args_hipMallocHost_t
 *
 * @note 
 *	hipError_t
 *	hipMallocHost (
 *			void ** ptr (void **)
 *			size_t size (unsigned long)
 *	)
 */
#if HAVE_hipMallocHost
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t size;
	hipError_t retval;
} args_hipMallocHost_t;

#define GET_ARGS_VALUE_hipMallocHost(activity) { \
	args_hipMallocHost_t* args = (args_hipMallocHost_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->size = (size_t) size; \
};

#define GET_PTRS_VALUE_hipMallocHost(args) { \
	args_hipMallocHost_t* pargs = (args_hipMallocHost_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset3D_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3D_spt` function call.
 *
 * @struct args_hipMemset3D_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3D_spt (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *	)
 */
#if HAVE_hipMemset3D_spt
typedef struct {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	hipError_t retval;
} args_hipMemset3D_spt_t;

#define GET_ARGS_VALUE_hipMemset3D_spt(activity) { \
	args_hipMemset3D_spt_t* args = (args_hipMemset3D_spt_t*) activity->args; \
	args->pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	args->value = (int) value; \
	args->extent = (hipExtent) extent; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamGetCaptureInfo_v2_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamGetCaptureInfo_v2_spt` function call.
 *
 * @struct args_hipStreamGetCaptureInfo_v2_spt_t
 *
 * @note 
 *	hipError_t
 *	hipStreamGetCaptureInfo_v2_spt (
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipStreamCaptureStatus * captureStatus_out (enum hipStreamCaptureStatus*)
 *			unsigned long long * id_out (unsigned long long *)
 *			hipGraph_t * graph_out (struct ihipGraph **)
 *			const hipGraphNode_t ** dependencies_out (const struct hipGraphNode * **)
 *			size_t * numDependencies_out (unsigned long*)
 *	)
 */
#if HAVE_hipStreamGetCaptureInfo_v2_spt
typedef struct {
	hipStream_t stream;
	hipStreamCaptureStatus * captureStatus_out;
	struct {
		hipStreamCaptureStatus val;
	} captureStatus_out__ref;
	unsigned long long * id_out;
	struct {
		unsigned long long val;
	} id_out__ref;
	hipGraph_t * graph_out;
	struct {
		hipGraph_t val;
	} graph_out__ref;
	hipGraphNode_t ** dependencies_out;
	struct {
		void* ptr1;
		hipGraphNode_t val;
	} dependencies_out__ref;
	size_t * numDependencies_out;
	struct {
		size_t val;
	} numDependencies_out__ref;
	hipError_t retval;
} args_hipStreamGetCaptureInfo_v2_spt_t;

#define GET_ARGS_VALUE_hipStreamGetCaptureInfo_v2_spt(activity) { \
	args_hipStreamGetCaptureInfo_v2_spt_t* args = (args_hipStreamGetCaptureInfo_v2_spt_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->captureStatus_out = (hipStreamCaptureStatus *) captureStatus_out; \
	args->id_out = (unsigned long long *) id_out; \
	args->graph_out = (hipGraph_t *) graph_out; \
	args->dependencies_out = (hipGraphNode_t **) dependencies_out; \
	args->numDependencies_out = (size_t *) numDependencies_out; \
};

#define GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2_spt(args) { \
	args_hipStreamGetCaptureInfo_v2_spt_t* pargs = (args_hipStreamGetCaptureInfo_v2_spt_t*) args; \
	if (pargs->captureStatus_out != NULL) { \
		pargs->captureStatus_out__ref.val = *pargs->captureStatus_out; \
	} \
	if (pargs->id_out != NULL) { \
		pargs->id_out__ref.val = *pargs->id_out; \
	} \
	if (pargs->graph_out != NULL) { \
		pargs->graph_out__ref.val = *pargs->graph_out; \
	} \
	if (pargs->dependencies_out != NULL) { \
		pargs->dependencies_out__ref.ptr1 = *pargs->dependencies_out; \
		if (pargs->dependencies_out__ref.ptr1 != NULL) { \
			pargs->dependencies_out__ref.val = **pargs->dependencies_out; \
		} \
	} \
	if (pargs->numDependencies_out != NULL) { \
		pargs->numDependencies_out__ref.val = *pargs->numDependencies_out; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetTextureReference` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureReference` function call.
 *
 * @struct args_hipGetTextureReference_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureReference (
 *			const textureReference ** texref (const struct textureReference **)
 *			const void * symbol (const void *)
 *	)
 */
#if HAVE_hipGetTextureReference
typedef struct {
	textureReference ** texref;
	struct {
		void* ptr1;
		textureReference val;
	} texref__ref;
	void * symbol;
	hipError_t retval;
} args_hipGetTextureReference_t;

#define GET_ARGS_VALUE_hipGetTextureReference(activity) { \
	args_hipGetTextureReference_t* args = (args_hipGetTextureReference_t*) activity->args; \
	args->texref = (textureReference **) texref; \
	args->symbol = (void *) symbol; \
};

#define GET_PTRS_VALUE_hipGetTextureReference(args) { \
	args_hipGetTextureReference_t* pargs = (args_hipGetTextureReference_t*) args; \
	if (pargs->texref != NULL) { \
		pargs->texref__ref.ptr1 = *pargs->texref; \
		if (pargs->texref__ref.ptr1 != NULL) { \
			pargs->texref__ref.val = **pargs->texref; \
		} \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecExternalSemaphoresSignalNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecExternalSemaphoresSignalNodeSetParams` function call.
 *
 * @struct args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecExternalSemaphoresSignalNodeSetParams (
 *			hipGraphExec_t hGraphExec (struct hipGraphExec *)
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			const hipExternalSemaphoreSignalNodeParams * nodeParams (const struct hipExternalSemaphoreSignalNodeParams *)
 *	)
 */
#if HAVE_hipGraphExecExternalSemaphoresSignalNodeSetParams
typedef struct {
	hipGraphExec_t hGraphExec;
	hipGraphNode_t hNode;
	hipExternalSemaphoreSignalNodeParams * nodeParams;
	struct {
		hipExternalSemaphoreSignalNodeParams val;
	} nodeParams__ref;
	hipError_t retval;
} args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphExecExternalSemaphoresSignalNodeSetParams(activity) { \
	args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t* args = (args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t*) activity->args; \
	args->hGraphExec = (hipGraphExec_t) hGraphExec; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->nodeParams = (hipExternalSemaphoreSignalNodeParams *) nodeParams; \
};

#define GET_PTRS_VALUE_hipGraphExecExternalSemaphoresSignalNodeSetParams(args) { \
	args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t* pargs = (args_hipGraphExecExternalSemaphoresSignalNodeSetParams_t*) args; \
	if (pargs->nodeParams != NULL) { \
		pargs->nodeParams__ref.val = *pargs->nodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphAddDependencies` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphAddDependencies` function call.
 *
 * @struct args_hipGraphAddDependencies_t
 *
 * @note 
 *	hipError_t
 *	hipGraphAddDependencies (
 *			hipGraph_t graph (struct ihipGraph *)
 *			const hipGraphNode_t * from (const struct hipGraphNode * *)
 *			const hipGraphNode_t * to (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *	)
 */
#if HAVE_hipGraphAddDependencies
typedef struct {
	hipGraph_t graph;
	hipGraphNode_t * from;
	struct {
		hipGraphNode_t val;
	} from__ref;
	hipGraphNode_t * to;
	struct {
		hipGraphNode_t val;
	} to__ref;
	size_t numDependencies;
	hipError_t retval;
} args_hipGraphAddDependencies_t;

#define GET_ARGS_VALUE_hipGraphAddDependencies(activity) { \
	args_hipGraphAddDependencies_t* args = (args_hipGraphAddDependencies_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->from = (hipGraphNode_t *) from; \
	args->to = (hipGraphNode_t *) to; \
	args->numDependencies = (size_t) numDependencies; \
};

#define GET_PTRS_VALUE_hipGraphAddDependencies(args) { \
	args_hipGraphAddDependencies_t* pargs = (args_hipGraphAddDependencies_t*) args; \
	if (pargs->from != NULL) { \
		pargs->from__ref.val = *pargs->from; \
	} \
	if (pargs->to != NULL) { \
		pargs->to__ref.val = *pargs->to; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphNodeGetType` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphNodeGetType` function call.
 *
 * @struct args_hipGraphNodeGetType_t
 *
 * @note 
 *	hipError_t
 *	hipGraphNodeGetType (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			hipGraphNodeType * pType (enum hipGraphNodeType*)
 *	)
 */
#if HAVE_hipGraphNodeGetType
typedef struct {
	hipGraphNode_t node;
	hipGraphNodeType * pType;
	struct {
		hipGraphNodeType val;
	} pType__ref;
	hipError_t retval;
} args_hipGraphNodeGetType_t;

#define GET_ARGS_VALUE_hipGraphNodeGetType(activity) { \
	args_hipGraphNodeGetType_t* args = (args_hipGraphNodeGetType_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pType = (hipGraphNodeType *) pType; \
};

#define GET_PTRS_VALUE_hipGraphNodeGetType(args) { \
	args_hipGraphNodeGetType_t* pargs = (args_hipGraphNodeGetType_t*) args; \
	if (pargs->pType != NULL) { \
		pargs->pType__ref.val = *pargs->pType; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetBorderColor` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetBorderColor` function call.
 *
 * @struct args_hipTexRefSetBorderColor_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetBorderColor (
 *			textureReference * texRef (struct textureReference*)
 *			float * pBorderColor (float *)
 *	)
 */
#if HAVE_hipTexRefSetBorderColor
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	float * pBorderColor;
	struct {
		float val;
	} pBorderColor__ref;
	hipError_t retval;
} args_hipTexRefSetBorderColor_t;

#define GET_ARGS_VALUE_hipTexRefSetBorderColor(activity) { \
	args_hipTexRefSetBorderColor_t* args = (args_hipTexRefSetBorderColor_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->pBorderColor = (float *) pBorderColor; \
};

#define GET_PTRS_VALUE_hipTexRefSetBorderColor(args) { \
	args_hipTexRefSetBorderColor_t* pargs = (args_hipTexRefSetBorderColor_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
	if (pargs->pBorderColor != NULL) { \
		pargs->pBorderColor__ref.val = *pargs->pBorderColor; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPrefetchAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPrefetchAsync` function call.
 *
 * @struct args_hipMemPrefetchAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemPrefetchAsync (
 *			const void * dev_ptr (const void *)
 *			size_t count (unsigned long)
 *			int device (int)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemPrefetchAsync
typedef struct {
	void * dev_ptr;
	size_t count;
	int device;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemPrefetchAsync_t;

#define GET_ARGS_VALUE_hipMemPrefetchAsync(activity) { \
	args_hipMemPrefetchAsync_t* args = (args_hipMemPrefetchAsync_t*) activity->args; \
	args->dev_ptr = (void *) dev_ptr; \
	args->count = (size_t) count; \
	args->device = (int) device; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxGetDevice` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxGetDevice` function call.
 *
 * @struct args_hipCtxGetDevice_t
 *
 * @note 
 *	hipError_t
 *	hipCtxGetDevice (
 *			hipDevice_t * device (int*)
 *	)
 */
#if HAVE_hipCtxGetDevice
typedef struct {
	hipDevice_t * device;
	struct {
		hipDevice_t val;
	} device__ref;
	hipError_t retval;
} args_hipCtxGetDevice_t;

#define GET_ARGS_VALUE_hipCtxGetDevice(activity) { \
	args_hipCtxGetDevice_t* args = (args_hipCtxGetDevice_t*) activity->args; \
	args->device = (hipDevice_t *) device; \
};

#define GET_PTRS_VALUE_hipCtxGetDevice(args) { \
	args_hipCtxGetDevice_t* pargs = (args_hipCtxGetDevice_t*) args; \
	if (pargs->device != NULL) { \
		pargs->device__ref.val = *pargs->device; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2DArrayToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2DArrayToArray` function call.
 *
 * @struct args_hipMemcpy2DArrayToArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2DArrayToArray (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffsetDst (unsigned long)
 *			size_t hOffsetDst (unsigned long)
 *			hipArray_const_t src (const struct hipArray *)
 *			size_t wOffsetSrc (unsigned long)
 *			size_t hOffsetSrc (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy2DArrayToArray
typedef struct {
	hipArray_t dst;
	size_t wOffsetDst;
	size_t hOffsetDst;
	hipArray_const_t src;
	size_t wOffsetSrc;
	size_t hOffsetSrc;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy2DArrayToArray_t;

#define GET_ARGS_VALUE_hipMemcpy2DArrayToArray(activity) { \
	args_hipMemcpy2DArrayToArray_t* args = (args_hipMemcpy2DArrayToArray_t*) activity->args; \
	args->dst = (hipArray_t) dst; \
	args->wOffsetDst = (size_t) wOffsetDst; \
	args->hOffsetDst = (size_t) hOffsetDst; \
	args->src = (hipArray_const_t) src; \
	args->wOffsetSrc = (size_t) wOffsetSrc; \
	args->hOffsetSrc = (size_t) hOffsetSrc; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipUserObjectRelease` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipUserObjectRelease` function call.
 *
 * @struct args_hipUserObjectRelease_t
 *
 * @note 
 *	hipError_t
 *	hipUserObjectRelease (
 *			hipUserObject_t object (struct hipUserObject *)
 *			unsigned int count (unsigned int)
 *	)
 */
#if HAVE_hipUserObjectRelease
typedef struct {
	hipUserObject_t object;
	unsigned int count;
	hipError_t retval;
} args_hipUserObjectRelease_t;

#define GET_ARGS_VALUE_hipUserObjectRelease(activity) { \
	args_hipUserObjectRelease_t* args = (args_hipUserObjectRelease_t*) activity->args; \
	args->object = (hipUserObject_t) object; \
	args->count = (unsigned int) count; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipHostGetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipHostGetFlags` function call.
 *
 * @struct args_hipHostGetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipHostGetFlags (
 *			unsigned int * flagsPtr (unsigned int *)
 *			void * hostPtr (void *)
 *	)
 */
#if HAVE_hipHostGetFlags
typedef struct {
	unsigned int * flagsPtr;
	struct {
		unsigned int val;
	} flagsPtr__ref;
	void * hostPtr;
	hipError_t retval;
} args_hipHostGetFlags_t;

#define GET_ARGS_VALUE_hipHostGetFlags(activity) { \
	args_hipHostGetFlags_t* args = (args_hipHostGetFlags_t*) activity->args; \
	args->flagsPtr = (unsigned int *) flagsPtr; \
	args->hostPtr = (void *) hostPtr; \
};

#define GET_PTRS_VALUE_hipHostGetFlags(args) { \
	args_hipHostGetFlags_t* pargs = (args_hipHostGetFlags_t*) args; \
	if (pargs->flagsPtr != NULL) { \
		pargs->flagsPtr__ref.val = *pargs->flagsPtr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvGraphAddMemsetNode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGraphAddMemsetNode` function call.
 *
 * @struct args_hipDrvGraphAddMemsetNode_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGraphAddMemsetNode (
 *			hipGraphNode_t * phGraphNode (struct hipGraphNode **)
 *			hipGraph_t hGraph (struct ihipGraph *)
 *			const hipGraphNode_t * dependencies (const struct hipGraphNode * *)
 *			size_t numDependencies (unsigned long)
 *			const HIP_MEMSET_NODE_PARAMS * memsetParams (const struct HIP_MEMSET_NODE_PARAMS *)
 *			hipCtx_t ctx (struct ihipCtx_t *)
 *	)
 */
#if HAVE_hipDrvGraphAddMemsetNode
typedef struct {
	hipGraphNode_t * phGraphNode;
	struct {
		hipGraphNode_t val;
	} phGraphNode__ref;
	hipGraph_t hGraph;
	hipGraphNode_t * dependencies;
	struct {
		hipGraphNode_t val;
	} dependencies__ref;
	size_t numDependencies;
	HIP_MEMSET_NODE_PARAMS * memsetParams;
	struct {
		HIP_MEMSET_NODE_PARAMS val;
	} memsetParams__ref;
	hipCtx_t ctx;
	hipError_t retval;
} args_hipDrvGraphAddMemsetNode_t;

#define GET_ARGS_VALUE_hipDrvGraphAddMemsetNode(activity) { \
	args_hipDrvGraphAddMemsetNode_t* args = (args_hipDrvGraphAddMemsetNode_t*) activity->args; \
	args->phGraphNode = (hipGraphNode_t *) phGraphNode; \
	args->hGraph = (hipGraph_t) hGraph; \
	args->dependencies = (hipGraphNode_t *) dependencies; \
	args->numDependencies = (size_t) numDependencies; \
	args->memsetParams = (HIP_MEMSET_NODE_PARAMS *) memsetParams; \
	args->ctx = (hipCtx_t) ctx; \
};

#define GET_PTRS_VALUE_hipDrvGraphAddMemsetNode(args) { \
	args_hipDrvGraphAddMemsetNode_t* pargs = (args_hipDrvGraphAddMemsetNode_t*) args; \
	if (pargs->phGraphNode != NULL) { \
		pargs->phGraphNode__ref.val = *pargs->phGraphNode; \
	} \
	if (pargs->dependencies != NULL) { \
		pargs->dependencies__ref.val = *pargs->dependencies; \
	} \
	if (pargs->memsetParams != NULL) { \
		pargs->memsetParams__ref.val = *pargs->memsetParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyAtoD` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyAtoD` function call.
 *
 * @struct args_hipMemcpyAtoD_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyAtoD (
 *			hipDeviceptr_t dstDevice (void *)
 *			hipArray_t srcArray (struct hipArray *)
 *			size_t srcOffset (unsigned long)
 *			size_t ByteCount (unsigned long)
 *	)
 */
#if HAVE_hipMemcpyAtoD
typedef struct {
	void * dstDevice;
	hipArray_t srcArray;
	size_t srcOffset;
	size_t ByteCount;
	hipError_t retval;
} args_hipMemcpyAtoD_t;

#define GET_ARGS_VALUE_hipMemcpyAtoD(activity) { \
	args_hipMemcpyAtoD_t* args = (args_hipMemcpyAtoD_t*) activity->args; \
	args->dstDevice = (void *) dstDevice; \
	args->srcArray = (hipArray_t) srcArray; \
	args->srcOffset = (size_t) srcOffset; \
	args->ByteCount = (size_t) ByteCount; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolCreate` function call.
 *
 * @struct args_hipMemPoolCreate_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolCreate (
 *			hipMemPool_t * mem_pool (struct ihipMemPoolHandle_t **)
 *			const hipMemPoolProps * pool_props (const struct hipMemPoolProps *)
 *	)
 */
#if HAVE_hipMemPoolCreate
typedef struct {
	hipMemPool_t * mem_pool;
	struct {
		hipMemPool_t val;
	} mem_pool__ref;
	hipMemPoolProps * pool_props;
	struct {
		hipMemPoolProps val;
	} pool_props__ref;
	hipError_t retval;
} args_hipMemPoolCreate_t;

#define GET_ARGS_VALUE_hipMemPoolCreate(activity) { \
	args_hipMemPoolCreate_t* args = (args_hipMemPoolCreate_t*) activity->args; \
	args->mem_pool = (hipMemPool_t *) mem_pool; \
	args->pool_props = (hipMemPoolProps *) pool_props; \
};

#define GET_PTRS_VALUE_hipMemPoolCreate(args) { \
	args_hipMemPoolCreate_t* pargs = (args_hipMemPoolCreate_t*) args; \
	if (pargs->mem_pool != NULL) { \
		pargs->mem_pool__ref.val = *pargs->mem_pool; \
	} \
	if (pargs->pool_props != NULL) { \
		pargs->pool_props__ref.val = *pargs->pool_props; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipKernelNameRef` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipKernelNameRef` function call.
 *
 * @struct args_hipKernelNameRef_t
 *
 * @note 
 *	const char *
 *	hipKernelNameRef (
 *			const hipFunction_t f (const struct ihipModuleSymbol_t *)
 *	)
 */
#if HAVE_hipKernelNameRef
typedef struct {
	hipFunction_t f;
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
} args_hipKernelNameRef_t;

#define GET_ARGS_VALUE_hipKernelNameRef(activity) { \
	args_hipKernelNameRef_t* args = (args_hipKernelNameRef_t*) activity->args; \
	args->f = (hipFunction_t) f; \
};

#define GET_PTRS_RET_VALUE_hipKernelNameRef(args) { \
	args_hipKernelNameRef_t* pargs = (args_hipKernelNameRef_t*) args; \
	if (pargs->retval != NULL) { \
		strncpy(pargs->retval__ref.val, pargs->retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset3DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset3DAsync` function call.
 *
 * @struct args_hipMemset3DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemset3DAsync (
 *			hipPitchedPtr pitchedDevPtr (struct hipPitchedPtr)
 *			int value (int)
 *			hipExtent extent (struct hipExtent)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemset3DAsync
typedef struct {
	hipPitchedPtr pitchedDevPtr;
	int value;
	hipExtent extent;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemset3DAsync_t;

#define GET_ARGS_VALUE_hipMemset3DAsync(activity) { \
	args_hipMemset3DAsync_t* args = (args_hipMemset3DAsync_t*) activity->args; \
	args->pitchedDevPtr = (hipPitchedPtr) pitchedDevPtr; \
	args->value = (int) value; \
	args->extent = (hipExtent) extent; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipEventRecord` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipEventRecord` function call.
 *
 * @struct args_hipEventRecord_t
 *
 * @note 
 *	hipError_t
 *	hipEventRecord (
 *			hipEvent_t event (struct ihipEvent_t *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipEventRecord
typedef struct {
	hipEvent_t event;
	hipStream_t stream;
	hipError_t retval;
} args_hipEventRecord_t;

#define GET_ARGS_VALUE_hipEventRecord(activity) { \
	args_hipEventRecord_t* args = (args_hipEventRecord_t*) activity->args; \
	args->event = (hipEvent_t) event; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMipmappedArrayDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMipmappedArrayDestroy` function call.
 *
 * @struct args_hipMipmappedArrayDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipMipmappedArrayDestroy (
 *			hipMipmappedArray_t hMipmappedArray (struct hipMipmappedArray *)
 *	)
 */
#if HAVE_hipMipmappedArrayDestroy
typedef struct {
	struct hipMipmappedArray * hMipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} hMipmappedArray__ref;
	hipError_t retval;
} args_hipMipmappedArrayDestroy_t;

#define GET_ARGS_VALUE_hipMipmappedArrayDestroy(activity) { \
	args_hipMipmappedArrayDestroy_t* args = (args_hipMipmappedArrayDestroy_t*) activity->args; \
	args->hMipmappedArray = (struct hipMipmappedArray *) hMipmappedArray; \
};

#define GET_PTRS_VALUE_hipMipmappedArrayDestroy(args) { \
	args_hipMipmappedArrayDestroy_t* pargs = (args_hipMipmappedArrayDestroy_t*) args; \
	if (pargs->hMipmappedArray != NULL) { \
		pargs->hMipmappedArray__ref.val = *pargs->hMipmappedArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetAsync_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetAsync_spt` function call.
 *
 * @struct args_hipMemsetAsync_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetAsync_spt (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemsetAsync_spt
typedef struct {
	void * dst;
	int value;
	size_t sizeBytes;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemsetAsync_spt_t;

#define GET_ARGS_VALUE_hipMemsetAsync_spt(activity) { \
	args_hipMemsetAsync_spt_t* args = (args_hipMemsetAsync_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->value = (int) value; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDevicePrimaryCtxSetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDevicePrimaryCtxSetFlags` function call.
 *
 * @struct args_hipDevicePrimaryCtxSetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipDevicePrimaryCtxSetFlags (
 *			hipDevice_t dev (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipDevicePrimaryCtxSetFlags
typedef struct {
	hipDevice_t dev;
	unsigned int flags;
	hipError_t retval;
} args_hipDevicePrimaryCtxSetFlags_t;

#define GET_ARGS_VALUE_hipDevicePrimaryCtxSetFlags(activity) { \
	args_hipDevicePrimaryCtxSetFlags_t* args = (args_hipDevicePrimaryCtxSetFlags_t*) activity->args; \
	args->dev = (hipDevice_t) dev; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipPeekAtLastError` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipPeekAtLastError` function call.
 *
 * @struct args_hipPeekAtLastError_t
 *
 * @note 
 *	hipError_t
 *	hipPeekAtLastError (
 *	)
 */
#if HAVE_hipPeekAtLastError
typedef struct {
	hipError_t retval;
} args_hipPeekAtLastError_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceGetGraphMemAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceGetGraphMemAttribute` function call.
 *
 * @struct args_hipDeviceGetGraphMemAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceGetGraphMemAttribute (
 *			int device (int)
 *			hipGraphMemAttributeType attr (enum hipGraphMemAttributeType)
 *			void * value (void *)
 *	)
 */
#if HAVE_hipDeviceGetGraphMemAttribute
typedef struct {
	int device;
	hipGraphMemAttributeType attr;
	void * value;
	hipError_t retval;
} args_hipDeviceGetGraphMemAttribute_t;

#define GET_ARGS_VALUE_hipDeviceGetGraphMemAttribute(activity) { \
	args_hipDeviceGetGraphMemAttribute_t* args = (args_hipDeviceGetGraphMemAttribute_t*) activity->args; \
	args->device = (int) device; \
	args->attr = (hipGraphMemAttributeType) attr; \
	args->value = (void *) value; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDrvGetErrorName` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDrvGetErrorName` function call.
 *
 * @struct args_hipDrvGetErrorName_t
 *
 * @note 
 *	hipError_t
 *	hipDrvGetErrorName (
 *			hipError_t hipError (enum hipError_t)
 *			const char ** errorString (const char **)
 *	)
 */
#if HAVE_hipDrvGetErrorName
typedef struct {
	hipError_t hipError;
	char ** errorString;
	struct {
		void* ptr1;
		char val[HIP_STRING_SIZE_MAX];
	} errorString__ref;
	hipError_t retval;
} args_hipDrvGetErrorName_t;

#define GET_ARGS_VALUE_hipDrvGetErrorName(activity) { \
	args_hipDrvGetErrorName_t* args = (args_hipDrvGetErrorName_t*) activity->args; \
	args->hipError = (hipError_t) hipError; \
	args->errorString = (char **) errorString; \
};

#define GET_PTRS_VALUE_hipDrvGetErrorName(args) { \
	args_hipDrvGetErrorName_t* pargs = (args_hipDrvGetErrorName_t*) args; \
	if (pargs->errorString != NULL) { \
		pargs->errorString__ref.ptr1 = *pargs->errorString; \
		if (pargs->errorString__ref.ptr1 != NULL) { \
			strncpy(pargs->errorString__ref.val, pargs->errorString__ref.ptr1, HIP_STRING_SIZE_MAX-1); \
		} \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy_spt` function call.
 *
 * @struct args_hipMemcpy_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy_spt (
 *			void * dst (void *)
 *			const void * src (const void *)
 *			size_t sizeBytes (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy_spt
typedef struct {
	void * dst;
	void * src;
	size_t sizeBytes;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy_spt_t;

#define GET_ARGS_VALUE_hipMemcpy_spt(activity) { \
	args_hipMemcpy_spt_t* args = (args_hipMemcpy_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->src = (void *) src; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCtxSetSharedMemConfig` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCtxSetSharedMemConfig` function call.
 *
 * @struct args_hipCtxSetSharedMemConfig_t
 *
 * @note 
 *	hipError_t
 *	hipCtxSetSharedMemConfig (
 *			hipSharedMemConfig config (enum hipSharedMemConfig)
 *	)
 */
#if HAVE_hipCtxSetSharedMemConfig
typedef struct {
	hipSharedMemConfig config;
	hipError_t retval;
} args_hipCtxSetSharedMemConfig_t;

#define GET_ARGS_VALUE_hipCtxSetSharedMemConfig(activity) { \
	args_hipCtxSetSharedMemConfig_t* args = (args_hipCtxSetSharedMemConfig_t*) activity->args; \
	args->config = (hipSharedMemConfig) config; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipCreateSurfaceObject` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipCreateSurfaceObject` function call.
 *
 * @struct args_hipCreateSurfaceObject_t
 *
 * @note 
 *	hipError_t
 *	hipCreateSurfaceObject (
 *			hipSurfaceObject_t * pSurfObject (struct __hip_surface **)
 *			const hipResourceDesc * pResDesc (const struct hipResourceDesc *)
 *	)
 */
#if HAVE_hipCreateSurfaceObject
typedef struct {
	hipSurfaceObject_t * pSurfObject;
	struct {
		hipSurfaceObject_t val;
	} pSurfObject__ref;
	hipResourceDesc * pResDesc;
	struct {
		hipResourceDesc val;
	} pResDesc__ref;
	hipError_t retval;
} args_hipCreateSurfaceObject_t;

#define GET_ARGS_VALUE_hipCreateSurfaceObject(activity) { \
	args_hipCreateSurfaceObject_t* args = (args_hipCreateSurfaceObject_t*) activity->args; \
	args->pSurfObject = (hipSurfaceObject_t *) pSurfObject; \
	args->pResDesc = (hipResourceDesc *) pResDesc; \
};

#define GET_PTRS_VALUE_hipCreateSurfaceObject(args) { \
	args_hipCreateSurfaceObject_t* pargs = (args_hipCreateSurfaceObject_t*) args; \
	if (pargs->pSurfObject != NULL) { \
		pargs->pSurfObject__ref.val = *pargs->pSurfObject; \
	} \
	if (pargs->pResDesc != NULL) { \
		pargs->pResDesc__ref.val = *pargs->pResDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetMipmappedArrayLevel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetMipmappedArrayLevel` function call.
 *
 * @struct args_hipGetMipmappedArrayLevel_t
 *
 * @note 
 *	hipError_t
 *	hipGetMipmappedArrayLevel (
 *			hipArray_t * levelArray (struct hipArray **)
 *			hipMipmappedArray_const_t mipmappedArray (const struct hipMipmappedArray *)
 *			unsigned int level (unsigned int)
 *	)
 */
#if HAVE_hipGetMipmappedArrayLevel
typedef struct {
	hipArray_t * levelArray;
	struct {
		hipArray_t val;
	} levelArray__ref;
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	unsigned int level;
	hipError_t retval;
} args_hipGetMipmappedArrayLevel_t;

#define GET_ARGS_VALUE_hipGetMipmappedArrayLevel(activity) { \
	args_hipGetMipmappedArrayLevel_t* args = (args_hipGetMipmappedArrayLevel_t*) activity->args; \
	args->levelArray = (hipArray_t *) levelArray; \
	args->mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
	args->level = (unsigned int) level; \
};

#define GET_PTRS_VALUE_hipGetMipmappedArrayLevel(args) { \
	args_hipGetMipmappedArrayLevel_t* pargs = (args_hipGetMipmappedArrayLevel_t*) args; \
	if (pargs->levelArray != NULL) { \
		pargs->levelArray__ref.val = *pargs->levelArray; \
	} \
	if (pargs->mipmappedArray != NULL) { \
		pargs->mipmappedArray__ref.val = *pargs->mipmappedArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphExecDestroy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphExecDestroy` function call.
 *
 * @struct args_hipGraphExecDestroy_t
 *
 * @note 
 *	hipError_t
 *	hipGraphExecDestroy (
 *			hipGraphExec_t graphExec (struct hipGraphExec *)
 *	)
 */
#if HAVE_hipGraphExecDestroy
typedef struct {
	hipGraphExec_t graphExec;
	hipError_t retval;
} args_hipGraphExecDestroy_t;

#define GET_ARGS_VALUE_hipGraphExecDestroy(activity) { \
	args_hipGraphExecDestroy_t* args = (args_hipGraphExecDestroy_t*) activity->args; \
	args->graphExec = (hipGraphExec_t) graphExec; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemsetD32Async` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemsetD32Async` function call.
 *
 * @struct args_hipMemsetD32Async_t
 *
 * @note 
 *	hipError_t
 *	hipMemsetD32Async (
 *			hipDeviceptr_t dst (void *)
 *			int value (int)
 *			size_t count (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemsetD32Async
typedef struct {
	void * dst;
	int value;
	size_t count;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemsetD32Async_t;

#define GET_ARGS_VALUE_hipMemsetD32Async(activity) { \
	args_hipMemsetD32Async_t* args = (args_hipMemsetD32Async_t*) activity->args; \
	args->dst = (void *) dst; \
	args->value = (int) value; \
	args->count = (size_t) count; \
	args->stream = (hipStream_t) stream; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDeviceEnablePeerAccess` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDeviceEnablePeerAccess` function call.
 *
 * @struct args_hipDeviceEnablePeerAccess_t
 *
 * @note 
 *	hipError_t
 *	hipDeviceEnablePeerAccess (
 *			int peerDeviceId (int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipDeviceEnablePeerAccess
typedef struct {
	int peerDeviceId;
	unsigned int flags;
	hipError_t retval;
} args_hipDeviceEnablePeerAccess_t;

#define GET_ARGS_VALUE_hipDeviceEnablePeerAccess(activity) { \
	args_hipDeviceEnablePeerAccess_t* args = (args_hipDeviceEnablePeerAccess_t*) activity->args; \
	args->peerDeviceId = (int) peerDeviceId; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipArray3DCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArray3DCreate` function call.
 *
 * @struct args_hipArray3DCreate_t
 *
 * @note 
 *	hipError_t
 *	hipArray3DCreate (
 *			hipArray_t * array (struct hipArray **)
 *			const HIP_ARRAY3D_DESCRIPTOR * pAllocateArray (const struct HIP_ARRAY3D_DESCRIPTOR *)
 *	)
 */
#if HAVE_hipArray3DCreate
typedef struct {
	hipArray_t * array;
	struct {
		hipArray_t val;
	} array__ref;
	HIP_ARRAY3D_DESCRIPTOR * pAllocateArray;
	struct {
		HIP_ARRAY3D_DESCRIPTOR val;
	} pAllocateArray__ref;
	hipError_t retval;
} args_hipArray3DCreate_t;

#define GET_ARGS_VALUE_hipArray3DCreate(activity) { \
	args_hipArray3DCreate_t* args = (args_hipArray3DCreate_t*) activity->args; \
	args->array = (hipArray_t *) array; \
	args->pAllocateArray = (HIP_ARRAY3D_DESCRIPTOR *) pAllocateArray; \
};

#define GET_PTRS_VALUE_hipArray3DCreate(args) { \
	args_hipArray3DCreate_t* pargs = (args_hipArray3DCreate_t*) args; \
	if (pargs->array != NULL) { \
		pargs->array__ref.val = *pargs->array; \
	} \
	if (pargs->pAllocateArray != NULL) { \
		pargs->pAllocateArray__ref.val = *pargs->pAllocateArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipIpcOpenMemHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipIpcOpenMemHandle` function call.
 *
 * @struct args_hipIpcOpenMemHandle_t
 *
 * @note 
 *	hipError_t
 *	hipIpcOpenMemHandle (
 *			void ** devPtr (void **)
 *			hipIpcMemHandle_t handle (struct hipIpcMemHandle_st)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipIpcOpenMemHandle
typedef struct {
	void ** devPtr;
	struct {
		void* ptr1;
	} devPtr__ref;
	hipIpcMemHandle_t handle;
	unsigned int flags;
	hipError_t retval;
} args_hipIpcOpenMemHandle_t;

#define GET_ARGS_VALUE_hipIpcOpenMemHandle(activity) { \
	args_hipIpcOpenMemHandle_t* args = (args_hipIpcOpenMemHandle_t*) activity->args; \
	args->devPtr = (void **) devPtr; \
	args->handle = (hipIpcMemHandle_t) handle; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipIpcOpenMemHandle(args) { \
	args_hipIpcOpenMemHandle_t* pargs = (args_hipIpcOpenMemHandle_t*) args; \
	if (pargs->devPtr != NULL) { \
		pargs->devPtr__ref.ptr1 = *pargs->devPtr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemPoolTrimTo` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemPoolTrimTo` function call.
 *
 * @struct args_hipMemPoolTrimTo_t
 *
 * @note 
 *	hipError_t
 *	hipMemPoolTrimTo (
 *			hipMemPool_t mem_pool (struct ihipMemPoolHandle_t *)
 *			size_t min_bytes_to_hold (unsigned long)
 *	)
 */
#if HAVE_hipMemPoolTrimTo
typedef struct {
	hipMemPool_t mem_pool;
	size_t min_bytes_to_hold;
	hipError_t retval;
} args_hipMemPoolTrimTo_t;

#define GET_ARGS_VALUE_hipMemPoolTrimTo(activity) { \
	args_hipMemPoolTrimTo_t* args = (args_hipMemPoolTrimTo_t*) activity->args; \
	args->mem_pool = (hipMemPool_t) mem_pool; \
	args->min_bytes_to_hold = (size_t) min_bytes_to_hold; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy2D` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy2D` function call.
 *
 * @struct args_hipMemcpy2D_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy2D (
 *			void * dst (void *)
 *			size_t dpitch (unsigned long)
 *			const void * src (const void *)
 *			size_t spitch (unsigned long)
 *			size_t width (unsigned long)
 *			size_t height (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpy2D
typedef struct {
	void * dst;
	size_t dpitch;
	void * src;
	size_t spitch;
	size_t width;
	size_t height;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpy2D_t;

#define GET_ARGS_VALUE_hipMemcpy2D(activity) { \
	args_hipMemcpy2D_t* args = (args_hipMemcpy2D_t*) activity->args; \
	args->dst = (void *) dst; \
	args->dpitch = (size_t) dpitch; \
	args->src = (void *) src; \
	args->spitch = (size_t) spitch; \
	args->width = (size_t) width; \
	args->height = (size_t) height; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFuncGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncGetAttribute` function call.
 *
 * @struct args_hipFuncGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipFuncGetAttribute (
 *			int * value (int *)
 *			hipFunction_attribute attrib (enum hipFunction_attribute)
 *			hipFunction_t hfunc (struct ihipModuleSymbol_t *)
 *	)
 */
#if HAVE_hipFuncGetAttribute
typedef struct {
	int * value;
	struct {
		int val;
	} value__ref;
	hipFunction_attribute attrib;
	hipFunction_t hfunc;
	hipError_t retval;
} args_hipFuncGetAttribute_t;

#define GET_ARGS_VALUE_hipFuncGetAttribute(activity) { \
	args_hipFuncGetAttribute_t* args = (args_hipFuncGetAttribute_t*) activity->args; \
	args->value = (int *) value; \
	args->attrib = (hipFunction_attribute) attrib; \
	args->hfunc = (hipFunction_t) hfunc; \
};

#define GET_PTRS_VALUE_hipFuncGetAttribute(args) { \
	args_hipFuncGetAttribute_t* pargs = (args_hipFuncGetAttribute_t*) args; \
	if (pargs->value != NULL) { \
		pargs->value__ref.val = *pargs->value; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipBindTextureToMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipBindTextureToMipmappedArray` function call.
 *
 * @struct args_hipBindTextureToMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipBindTextureToMipmappedArray (
 *			const textureReference * tex (const struct textureReference *)
 *			hipMipmappedArray_const_t mipmappedArray (const struct hipMipmappedArray *)
 *			const hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *	)
 */
#if HAVE_hipBindTextureToMipmappedArray
typedef struct {
	textureReference * tex;
	struct {
		textureReference val;
	} tex__ref;
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	hipChannelFormatDesc * desc;
	struct {
		hipChannelFormatDesc val;
	} desc__ref;
	hipError_t retval;
} args_hipBindTextureToMipmappedArray_t;

#define GET_ARGS_VALUE_hipBindTextureToMipmappedArray(activity) { \
	args_hipBindTextureToMipmappedArray_t* args = (args_hipBindTextureToMipmappedArray_t*) activity->args; \
	args->tex = (textureReference *) tex; \
	args->mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
	args->desc = (hipChannelFormatDesc *) desc; \
};

#define GET_PTRS_VALUE_hipBindTextureToMipmappedArray(args) { \
	args_hipBindTextureToMipmappedArray_t* pargs = (args_hipBindTextureToMipmappedArray_t*) args; \
	if (pargs->tex != NULL) { \
		pargs->tex__ref.val = *pargs->tex; \
	} \
	if (pargs->mipmappedArray != NULL) { \
		pargs->mipmappedArray__ref.val = *pargs->mipmappedArray; \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphicsMapResources` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphicsMapResources` function call.
 *
 * @struct args_hipGraphicsMapResources_t
 *
 * @note 
 *	hipError_t
 *	hipGraphicsMapResources (
 *			int count (int)
 *			hipGraphicsResource_t * resources (struct _hipGraphicsResource**)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipGraphicsMapResources
typedef struct {
	int count;
	hipGraphicsResource_t * resources;
	struct {
		hipGraphicsResource_t val;
	} resources__ref;
	hipStream_t stream;
	hipError_t retval;
} args_hipGraphicsMapResources_t;

#define GET_ARGS_VALUE_hipGraphicsMapResources(activity) { \
	args_hipGraphicsMapResources_t* args = (args_hipGraphicsMapResources_t*) activity->args; \
	args->count = (int) count; \
	args->resources = (hipGraphicsResource_t *) resources; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipGraphicsMapResources(args) { \
	args_hipGraphicsMapResources_t* pargs = (args_hipGraphicsMapResources_t*) args; \
	if (pargs->resources != NULL) { \
		pargs->resources__ref.val = *pargs->resources; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipArrayCreate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipArrayCreate` function call.
 *
 * @struct args_hipArrayCreate_t
 *
 * @note 
 *	hipError_t
 *	hipArrayCreate (
 *			hipArray_t * pHandle (struct hipArray **)
 *			const HIP_ARRAY_DESCRIPTOR * pAllocateArray (const struct HIP_ARRAY_DESCRIPTOR *)
 *	)
 */
#if HAVE_hipArrayCreate
typedef struct {
	hipArray_t * pHandle;
	struct {
		hipArray_t val;
	} pHandle__ref;
	HIP_ARRAY_DESCRIPTOR * pAllocateArray;
	struct {
		HIP_ARRAY_DESCRIPTOR val;
	} pAllocateArray__ref;
	hipError_t retval;
} args_hipArrayCreate_t;

#define GET_ARGS_VALUE_hipArrayCreate(activity) { \
	args_hipArrayCreate_t* args = (args_hipArrayCreate_t*) activity->args; \
	args->pHandle = (hipArray_t *) pHandle; \
	args->pAllocateArray = (HIP_ARRAY_DESCRIPTOR *) pAllocateArray; \
};

#define GET_PTRS_VALUE_hipArrayCreate(args) { \
	args_hipArrayCreate_t* pargs = (args_hipArrayCreate_t*) args; \
	if (pargs->pHandle != NULL) { \
		pargs->pHandle__ref.val = *pargs->pHandle; \
	} \
	if (pargs->pAllocateArray != NULL) { \
		pargs->pAllocateArray__ref.val = *pargs->pAllocateArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMaxAnisotropy` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMaxAnisotropy` function call.
 *
 * @struct args_hipTexRefSetMaxAnisotropy_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMaxAnisotropy (
 *			textureReference * texRef (struct textureReference*)
 *			unsigned int maxAniso (unsigned int)
 *	)
 */
#if HAVE_hipTexRefSetMaxAnisotropy
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	unsigned int maxAniso;
	hipError_t retval;
} args_hipTexRefSetMaxAnisotropy_t;

#define GET_ARGS_VALUE_hipTexRefSetMaxAnisotropy(activity) { \
	args_hipTexRefSetMaxAnisotropy_t* args = (args_hipTexRefSetMaxAnisotropy_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->maxAniso = (unsigned int) maxAniso; \
};

#define GET_PTRS_VALUE_hipTexRefSetMaxAnisotropy(args) { \
	args_hipTexRefSetMaxAnisotropy_t* pargs = (args_hipTexRefSetMaxAnisotropy_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphKernelNodeGetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphKernelNodeGetAttribute` function call.
 *
 * @struct args_hipGraphKernelNodeGetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipGraphKernelNodeGetAttribute (
 *			hipGraphNode_t hNode (struct hipGraphNode *)
 *			hipLaunchAttributeID attr (enum hipLaunchAttributeID)
 *			hipLaunchAttributeValue * value (union hipLaunchAttributeValue*)
 *	)
 */
#if HAVE_hipGraphKernelNodeGetAttribute
typedef struct {
	hipGraphNode_t hNode;
	hipLaunchAttributeID attr;
	hipLaunchAttributeValue * value;
	struct {
		hipLaunchAttributeValue val;
	} value__ref;
	hipError_t retval;
} args_hipGraphKernelNodeGetAttribute_t;

#define GET_ARGS_VALUE_hipGraphKernelNodeGetAttribute(activity) { \
	args_hipGraphKernelNodeGetAttribute_t* args = (args_hipGraphKernelNodeGetAttribute_t*) activity->args; \
	args->hNode = (hipGraphNode_t) hNode; \
	args->attr = (hipLaunchAttributeID) attr; \
	args->value = (hipLaunchAttributeValue *) value; \
};

#define GET_PTRS_VALUE_hipGraphKernelNodeGetAttribute(args) { \
	args_hipGraphKernelNodeGetAttribute_t* pargs = (args_hipGraphKernelNodeGetAttribute_t*) args; \
	if (pargs->value != NULL) { \
		pargs->value__ref.val = *pargs->value; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExtLaunchKernel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtLaunchKernel` function call.
 *
 * @struct args_hipExtLaunchKernel_t
 *
 * @note 
 *	hipError_t
 *	hipExtLaunchKernel (
 *			const void * function_address (const void *)
 *			dim3 numBlocks (struct dim3)
 *			dim3 dimBlocks (struct dim3)
 *			void ** args (void **)
 *			size_t sharedMemBytes (unsigned long)
 *			hipStream_t stream (struct ihipStream_t *)
 *			hipEvent_t startEvent (struct ihipEvent_t *)
 *			hipEvent_t stopEvent (struct ihipEvent_t *)
 *			int flags (int)
 *	)
 */
#if HAVE_hipExtLaunchKernel
typedef struct {
	void * function_address;
	dim3 numBlocks;
	dim3 dimBlocks;
	void ** args;
	struct {
		void* ptr1;
	} args__ref;
	size_t sharedMemBytes;
	hipStream_t stream;
	hipEvent_t startEvent;
	hipEvent_t stopEvent;
	int flags;
	hipError_t retval;
} args_hipExtLaunchKernel_t;

#define GET_ARGS_VALUE_hipExtLaunchKernel(activity) { \
	args_hipExtLaunchKernel_t* args = (args_hipExtLaunchKernel_t*) activity->args; \
	args->function_address = (void *) function_address; \
	args->numBlocks = (dim3) numBlocks; \
	args->dimBlocks = (dim3) dimBlocks; \
	args->args = (void **) args; \
	args->sharedMemBytes = (size_t) sharedMemBytes; \
	args->stream = (hipStream_t) stream; \
	args->startEvent = (hipEvent_t) startEvent; \
	args->stopEvent = (hipEvent_t) stopEvent; \
	args->flags = (int) flags; \
};

#define GET_PTRS_VALUE_hipExtLaunchKernel(args) { \
	args_hipExtLaunchKernel_t* pargs = (args_hipExtLaunchKernel_t*) args; \
	if (pargs->args != NULL) { \
		pargs->args__ref.ptr1 = *pargs->args; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmapFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmapFilterMode` function call.
 *
 * @struct args_hipTexRefSetMipmapFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmapFilterMode (
 *			textureReference * texRef (struct textureReference*)
 *			enum hipTextureFilterMode fm (enum hipTextureFilterMode)
 *	)
 */
#if HAVE_hipTexRefSetMipmapFilterMode
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	enum hipTextureFilterMode fm;
	hipError_t retval;
} args_hipTexRefSetMipmapFilterMode_t;

#define GET_ARGS_VALUE_hipTexRefSetMipmapFilterMode(activity) { \
	args_hipTexRefSetMipmapFilterMode_t* args = (args_hipTexRefSetMipmapFilterMode_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->fm = (enum hipTextureFilterMode) fm; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmapFilterMode(args) { \
	args_hipTexRefSetMipmapFilterMode_t* pargs = (args_hipTexRefSetMipmapFilterMode_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemImportFromShareableHandle` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemImportFromShareableHandle` function call.
 *
 * @struct args_hipMemImportFromShareableHandle_t
 *
 * @note 
 *	hipError_t
 *	hipMemImportFromShareableHandle (
 *			hipMemGenericAllocationHandle_t * handle (struct ihipMemGenericAllocationHandle **)
 *			void * osHandle (void *)
 *			hipMemAllocationHandleType shHandleType (enum hipMemAllocationHandleType)
 *	)
 */
#if HAVE_hipMemImportFromShareableHandle
typedef struct {
	hipMemGenericAllocationHandle_t * handle;
	struct {
		hipMemGenericAllocationHandle_t val;
	} handle__ref;
	void * osHandle;
	hipMemAllocationHandleType shHandleType;
	hipError_t retval;
} args_hipMemImportFromShareableHandle_t;

#define GET_ARGS_VALUE_hipMemImportFromShareableHandle(activity) { \
	args_hipMemImportFromShareableHandle_t* args = (args_hipMemImportFromShareableHandle_t*) activity->args; \
	args->handle = (hipMemGenericAllocationHandle_t *) handle; \
	args->osHandle = (void *) osHandle; \
	args->shHandleType = (hipMemAllocationHandleType) shHandleType; \
};

#define GET_PTRS_VALUE_hipMemImportFromShareableHandle(args) { \
	args_hipMemImportFromShareableHandle_t* pargs = (args_hipMemImportFromShareableHandle_t*) args; \
	if (pargs->handle != NULL) { \
		pargs->handle__ref.val = *pargs->handle; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetFormat` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetFormat` function call.
 *
 * @struct args_hipTexRefSetFormat_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetFormat (
 *			textureReference * texRef (struct textureReference*)
 *			hipArray_Format fmt (enum hipArray_Format)
 *			int NumPackedComponents (int)
 *	)
 */
#if HAVE_hipTexRefSetFormat
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipArray_Format fmt;
	int NumPackedComponents;
	hipError_t retval;
} args_hipTexRefSetFormat_t;

#define GET_ARGS_VALUE_hipTexRefSetFormat(activity) { \
	args_hipTexRefSetFormat_t* args = (args_hipTexRefSetFormat_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->fmt = (hipArray_Format) fmt; \
	args->NumPackedComponents = (int) NumPackedComponents; \
};

#define GET_PTRS_VALUE_hipTexRefSetFormat(args) { \
	args_hipTexRefSetFormat_t* pargs = (args_hipTexRefSetFormat_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `amd_dbgapi_get_git_hash` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `amd_dbgapi_get_git_hash` function call.
 *
 * @struct args_amd_dbgapi_get_git_hash_t
 *
 * @note 
 *	const char *
 *	amd_dbgapi_get_git_hash (
 *	)
 */
#if HAVE_amd_dbgapi_get_git_hash
typedef struct {
	char * retval;
	struct {
		char val[HIP_STRING_SIZE_MAX];
	} retval__ref;
} args_amd_dbgapi_get_git_hash_t;

#define GET_PTRS_RET_VALUE_amd_dbgapi_get_git_hash(args) { \
	args_amd_dbgapi_get_git_hash_t* pargs = (args_amd_dbgapi_get_git_hash_t*) args; \
	if (pargs->retval != NULL) { \
		strncpy(pargs->retval__ref.val, pargs->retval, HIP_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipLaunchByPtr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipLaunchByPtr` function call.
 *
 * @struct args_hipLaunchByPtr_t
 *
 * @note 
 *	hipError_t
 *	hipLaunchByPtr (
 *			const void * func (const void *)
 *	)
 */
#if HAVE_hipLaunchByPtr
typedef struct {
	void * func;
	hipError_t retval;
} args_hipLaunchByPtr_t;

#define GET_ARGS_VALUE_hipLaunchByPtr(activity) { \
	args_hipLaunchByPtr_t* args = (args_hipLaunchByPtr_t*) activity->args; \
	args->func = (void *) func; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `amd_dbgapi_get_build_id` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `amd_dbgapi_get_build_id` function call.
 *
 * @struct args_amd_dbgapi_get_build_id_t
 *
 * @note 
 *	size_t
 *	amd_dbgapi_get_build_id (
 *	)
 */
#if HAVE_amd_dbgapi_get_build_id
typedef struct {
	size_t retval;
} args_amd_dbgapi_get_build_id_t;

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpy3DAsync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpy3DAsync` function call.
 *
 * @struct args_hipMemcpy3DAsync_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpy3DAsync (
 *			const struct hipMemcpy3DParms * p (const struct hipMemcpy3DParms *)
 *			hipStream_t stream (struct ihipStream_t *)
 *	)
 */
#if HAVE_hipMemcpy3DAsync
typedef struct {
	struct hipMemcpy3DParms * p;
	struct {
		struct hipMemcpy3DParms val;
	} p__ref;
	hipStream_t stream;
	hipError_t retval;
} args_hipMemcpy3DAsync_t;

#define GET_ARGS_VALUE_hipMemcpy3DAsync(activity) { \
	args_hipMemcpy3DAsync_t* args = (args_hipMemcpy3DAsync_t*) activity->args; \
	args->p = (struct hipMemcpy3DParms *) p; \
	args->stream = (hipStream_t) stream; \
};

#define GET_PTRS_VALUE_hipMemcpy3DAsync(args) { \
	args_hipMemcpy3DAsync_t* pargs = (args_hipMemcpy3DAsync_t*) args; \
	if (pargs->p != NULL) { \
		pargs->p__ref.val = *pargs->p; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGetTextureObjectResourceViewDesc` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGetTextureObjectResourceViewDesc` function call.
 *
 * @struct args_hipGetTextureObjectResourceViewDesc_t
 *
 * @note 
 *	hipError_t
 *	hipGetTextureObjectResourceViewDesc (
 *			struct hipResourceViewDesc * pResViewDesc (struct hipResourceViewDesc *)
 *			hipTextureObject_t textureObject (struct __hip_texture *)
 *	)
 */
#if HAVE_hipGetTextureObjectResourceViewDesc
typedef struct {
	struct hipResourceViewDesc * pResViewDesc;
	struct {
		struct hipResourceViewDesc val;
	} pResViewDesc__ref;
	hipTextureObject_t textureObject;
	hipError_t retval;
} args_hipGetTextureObjectResourceViewDesc_t;

#define GET_ARGS_VALUE_hipGetTextureObjectResourceViewDesc(activity) { \
	args_hipGetTextureObjectResourceViewDesc_t* args = (args_hipGetTextureObjectResourceViewDesc_t*) activity->args; \
	args->pResViewDesc = (struct hipResourceViewDesc *) pResViewDesc; \
	args->textureObject = (hipTextureObject_t) textureObject; \
};

#define GET_PTRS_VALUE_hipGetTextureObjectResourceViewDesc(args) { \
	args_hipGetTextureObjectResourceViewDesc_t* pargs = (args_hipGetTextureObjectResourceViewDesc_t*) args; \
	if (pargs->pResViewDesc != NULL) { \
		pargs->pResViewDesc__ref.val = *pargs->pResViewDesc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetFilterMode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetFilterMode` function call.
 *
 * @struct args_hipTexRefSetFilterMode_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetFilterMode (
 *			textureReference * texRef (struct textureReference*)
 *			enum hipTextureFilterMode fm (enum hipTextureFilterMode)
 *	)
 */
#if HAVE_hipTexRefSetFilterMode
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	enum hipTextureFilterMode fm;
	hipError_t retval;
} args_hipTexRefSetFilterMode_t;

#define GET_ARGS_VALUE_hipTexRefSetFilterMode(activity) { \
	args_hipTexRefSetFilterMode_t* args = (args_hipTexRefSetFilterMode_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->fm = (enum hipTextureFilterMode) fm; \
};

#define GET_PTRS_VALUE_hipTexRefSetFilterMode(args) { \
	args_hipTexRefSetFilterMode_t* pargs = (args_hipTexRefSetFilterMode_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipDriverGetVersion` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipDriverGetVersion` function call.
 *
 * @struct args_hipDriverGetVersion_t
 *
 * @note 
 *	hipError_t
 *	hipDriverGetVersion (
 *			int * driverVersion (int *)
 *	)
 */
#if HAVE_hipDriverGetVersion
typedef struct {
	int * driverVersion;
	struct {
		int val;
	} driverVersion__ref;
	hipError_t retval;
} args_hipDriverGetVersion_t;

#define GET_ARGS_VALUE_hipDriverGetVersion(activity) { \
	args_hipDriverGetVersion_t* args = (args_hipDriverGetVersion_t*) activity->args; \
	args->driverVersion = (int *) driverVersion; \
};

#define GET_PTRS_VALUE_hipDriverGetVersion(args) { \
	args_hipDriverGetVersion_t* pargs = (args_hipDriverGetVersion_t*) args; \
	if (pargs->driverVersion != NULL) { \
		pargs->driverVersion__ref.val = *pargs->driverVersion; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipStreamWriteValue64` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipStreamWriteValue64` function call.
 *
 * @struct args_hipStreamWriteValue64_t
 *
 * @note 
 *	hipError_t
 *	hipStreamWriteValue64 (
 *			hipStream_t stream (struct ihipStream_t *)
 *			void * ptr (void *)
 *			uint64_t value (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipStreamWriteValue64
typedef struct {
	hipStream_t stream;
	void * ptr;
	uint64_t value;
	unsigned int flags;
	hipError_t retval;
} args_hipStreamWriteValue64_t;

#define GET_ARGS_VALUE_hipStreamWriteValue64(activity) { \
	args_hipStreamWriteValue64_t* args = (args_hipStreamWriteValue64_t*) activity->args; \
	args->stream = (hipStream_t) stream; \
	args->ptr = (void *) ptr; \
	args->value = (uint64_t) value; \
	args->flags = (unsigned int) flags; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMallocMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMallocMipmappedArray` function call.
 *
 * @struct args_hipMallocMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipMallocMipmappedArray (
 *			hipMipmappedArray_t * mipmappedArray (struct hipMipmappedArray **)
 *			const struct hipChannelFormatDesc * desc (const struct hipChannelFormatDesc *)
 *			struct hipExtent extent (struct hipExtent)
 *			unsigned int numLevels (unsigned int)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipMallocMipmappedArray
typedef struct {
	struct hipMipmappedArray ** mipmappedArray;
	struct {
		void* ptr1;
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	struct hipChannelFormatDesc * desc;
	struct {
		struct hipChannelFormatDesc val;
	} desc__ref;
	struct hipExtent extent;
	unsigned int numLevels;
	unsigned int flags;
	hipError_t retval;
} args_hipMallocMipmappedArray_t;

#define GET_ARGS_VALUE_hipMallocMipmappedArray(activity) { \
	args_hipMallocMipmappedArray_t* args = (args_hipMallocMipmappedArray_t*) activity->args; \
	args->mipmappedArray = (struct hipMipmappedArray **) mipmappedArray; \
	args->desc = (struct hipChannelFormatDesc *) desc; \
	args->extent = (struct hipExtent) extent; \
	args->numLevels = (unsigned int) numLevels; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipMallocMipmappedArray(args) { \
	args_hipMallocMipmappedArray_t* pargs = (args_hipMallocMipmappedArray_t*) args; \
	if (pargs->mipmappedArray != NULL) { \
		pargs->mipmappedArray__ref.ptr1 = *pargs->mipmappedArray; \
		if (pargs->mipmappedArray__ref.ptr1 != NULL) { \
			pargs->mipmappedArray__ref.val = **pargs->mipmappedArray; \
		} \
	} \
	if (pargs->desc != NULL) { \
		pargs->desc__ref.val = *pargs->desc; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset_spt` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset_spt` function call.
 *
 * @struct args_hipMemset_spt_t
 *
 * @note 
 *	hipError_t
 *	hipMemset_spt (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
#if HAVE_hipMemset_spt
typedef struct {
	void * dst;
	int value;
	size_t sizeBytes;
	hipError_t retval;
} args_hipMemset_spt_t;

#define GET_ARGS_VALUE_hipMemset_spt(activity) { \
	args_hipMemset_spt_t* args = (args_hipMemset_spt_t*) activity->args; \
	args->dst = (void *) dst; \
	args->value = (int) value; \
	args->sizeBytes = (size_t) sizeBytes; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetFlags` function call.
 *
 * @struct args_hipTexRefSetFlags_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetFlags (
 *			textureReference * texRef (struct textureReference*)
 *			unsigned int Flags (unsigned int)
 *	)
 */
#if HAVE_hipTexRefSetFlags
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	unsigned int Flags;
	hipError_t retval;
} args_hipTexRefSetFlags_t;

#define GET_ARGS_VALUE_hipTexRefSetFlags(activity) { \
	args_hipTexRefSetFlags_t* args = (args_hipTexRefSetFlags_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->Flags = (unsigned int) Flags; \
};

#define GET_PTRS_VALUE_hipTexRefSetFlags(args) { \
	args_hipTexRefSetFlags_t* pargs = (args_hipTexRefSetFlags_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemGetAddressRange` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemGetAddressRange` function call.
 *
 * @struct args_hipMemGetAddressRange_t
 *
 * @note 
 *	hipError_t
 *	hipMemGetAddressRange (
 *			hipDeviceptr_t * pbase (void **)
 *			size_t * psize (unsigned long*)
 *			hipDeviceptr_t dptr (void *)
 *	)
 */
#if HAVE_hipMemGetAddressRange
typedef struct {
	void ** pbase;
	struct {
		void* ptr1;
	} pbase__ref;
	size_t * psize;
	struct {
		size_t val;
	} psize__ref;
	void * dptr;
	hipError_t retval;
} args_hipMemGetAddressRange_t;

#define GET_ARGS_VALUE_hipMemGetAddressRange(activity) { \
	args_hipMemGetAddressRange_t* args = (args_hipMemGetAddressRange_t*) activity->args; \
	args->pbase = (void **) pbase; \
	args->psize = (size_t *) psize; \
	args->dptr = (void *) dptr; \
};

#define GET_PTRS_VALUE_hipMemGetAddressRange(args) { \
	args_hipMemGetAddressRange_t* pargs = (args_hipMemGetAddressRange_t*) args; \
	if (pargs->pbase != NULL) { \
		pargs->pbase__ref.ptr1 = *pargs->pbase; \
	} \
	if (pargs->psize != NULL) { \
		pargs->psize__ref.val = *pargs->psize; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmapLevelClamp` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmapLevelClamp` function call.
 *
 * @struct args_hipTexRefSetMipmapLevelClamp_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmapLevelClamp (
 *			textureReference * texRef (struct textureReference*)
 *			float minMipMapLevelClamp (float)
 *			float maxMipMapLevelClamp (float)
 *	)
 */
#if HAVE_hipTexRefSetMipmapLevelClamp
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	float minMipMapLevelClamp;
	float maxMipMapLevelClamp;
	hipError_t retval;
} args_hipTexRefSetMipmapLevelClamp_t;

#define GET_ARGS_VALUE_hipTexRefSetMipmapLevelClamp(activity) { \
	args_hipTexRefSetMipmapLevelClamp_t* args = (args_hipTexRefSetMipmapLevelClamp_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->minMipMapLevelClamp = (float) minMipMapLevelClamp; \
	args->maxMipMapLevelClamp = (float) maxMipMapLevelClamp; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmapLevelClamp(args) { \
	args_hipTexRefSetMipmapLevelClamp_t* pargs = (args_hipTexRefSetMipmapLevelClamp_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphMemcpyNodeSetParams` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphMemcpyNodeSetParams` function call.
 *
 * @struct args_hipGraphMemcpyNodeSetParams_t
 *
 * @note 
 *	hipError_t
 *	hipGraphMemcpyNodeSetParams (
 *			hipGraphNode_t node (struct hipGraphNode *)
 *			const hipMemcpy3DParms * pNodeParams (const struct hipMemcpy3DParms *)
 *	)
 */
#if HAVE_hipGraphMemcpyNodeSetParams
typedef struct {
	hipGraphNode_t node;
	hipMemcpy3DParms * pNodeParams;
	struct {
		hipMemcpy3DParms val;
	} pNodeParams__ref;
	hipError_t retval;
} args_hipGraphMemcpyNodeSetParams_t;

#define GET_ARGS_VALUE_hipGraphMemcpyNodeSetParams(activity) { \
	args_hipGraphMemcpyNodeSetParams_t* args = (args_hipGraphMemcpyNodeSetParams_t*) activity->args; \
	args->node = (hipGraphNode_t) node; \
	args->pNodeParams = (hipMemcpy3DParms *) pNodeParams; \
};

#define GET_PTRS_VALUE_hipGraphMemcpyNodeSetParams(args) { \
	args_hipGraphMemcpyNodeSetParams_t* pargs = (args_hipGraphMemcpyNodeSetParams_t*) args; \
	if (pargs->pNodeParams != NULL) { \
		pargs->pNodeParams__ref.val = *pargs->pNodeParams; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipGraphGetEdges` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipGraphGetEdges` function call.
 *
 * @struct args_hipGraphGetEdges_t
 *
 * @note 
 *	hipError_t
 *	hipGraphGetEdges (
 *			hipGraph_t graph (struct ihipGraph *)
 *			hipGraphNode_t * from (struct hipGraphNode **)
 *			hipGraphNode_t * to (struct hipGraphNode **)
 *			size_t * numEdges (unsigned long*)
 *	)
 */
#if HAVE_hipGraphGetEdges
typedef struct {
	hipGraph_t graph;
	hipGraphNode_t * from;
	struct {
		hipGraphNode_t val;
	} from__ref;
	hipGraphNode_t * to;
	struct {
		hipGraphNode_t val;
	} to__ref;
	size_t * numEdges;
	struct {
		size_t val;
	} numEdges__ref;
	hipError_t retval;
} args_hipGraphGetEdges_t;

#define GET_ARGS_VALUE_hipGraphGetEdges(activity) { \
	args_hipGraphGetEdges_t* args = (args_hipGraphGetEdges_t*) activity->args; \
	args->graph = (hipGraph_t) graph; \
	args->from = (hipGraphNode_t *) from; \
	args->to = (hipGraphNode_t *) to; \
	args->numEdges = (size_t *) numEdges; \
};

#define GET_PTRS_VALUE_hipGraphGetEdges(args) { \
	args_hipGraphGetEdges_t* pargs = (args_hipGraphGetEdges_t*) args; \
	if (pargs->from != NULL) { \
		pargs->from__ref.val = *pargs->from; \
	} \
	if (pargs->to != NULL) { \
		pargs->to__ref.val = *pargs->to; \
	} \
	if (pargs->numEdges != NULL) { \
		pargs->numEdges__ref.val = *pargs->numEdges; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemcpyToArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemcpyToArray` function call.
 *
 * @struct args_hipMemcpyToArray_t
 *
 * @note 
 *	hipError_t
 *	hipMemcpyToArray (
 *			hipArray_t dst (struct hipArray *)
 *			size_t wOffset (unsigned long)
 *			size_t hOffset (unsigned long)
 *			const void * src (const void *)
 *			size_t count (unsigned long)
 *			hipMemcpyKind kind (enum hipMemcpyKind)
 *	)
 */
#if HAVE_hipMemcpyToArray
typedef struct {
	hipArray_t dst;
	size_t wOffset;
	size_t hOffset;
	void * src;
	size_t count;
	hipMemcpyKind kind;
	hipError_t retval;
} args_hipMemcpyToArray_t;

#define GET_ARGS_VALUE_hipMemcpyToArray(activity) { \
	args_hipMemcpyToArray_t* args = (args_hipMemcpyToArray_t*) activity->args; \
	args->dst = (hipArray_t) dst; \
	args->wOffset = (size_t) wOffset; \
	args->hOffset = (size_t) hOffset; \
	args->src = (void *) src; \
	args->count = (size_t) count; \
	args->kind = (hipMemcpyKind) kind; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipExtMallocWithFlags` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipExtMallocWithFlags` function call.
 *
 * @struct args_hipExtMallocWithFlags_t
 *
 * @note 
 *	hipError_t
 *	hipExtMallocWithFlags (
 *			void ** ptr (void **)
 *			size_t sizeBytes (unsigned long)
 *			unsigned int flags (unsigned int)
 *	)
 */
#if HAVE_hipExtMallocWithFlags
typedef struct {
	void ** ptr;
	struct {
		void* ptr1;
	} ptr__ref;
	size_t sizeBytes;
	unsigned int flags;
	hipError_t retval;
} args_hipExtMallocWithFlags_t;

#define GET_ARGS_VALUE_hipExtMallocWithFlags(activity) { \
	args_hipExtMallocWithFlags_t* args = (args_hipExtMallocWithFlags_t*) activity->args; \
	args->ptr = (void **) ptr; \
	args->sizeBytes = (size_t) sizeBytes; \
	args->flags = (unsigned int) flags; \
};

#define GET_PTRS_VALUE_hipExtMallocWithFlags(args) { \
	args_hipExtMallocWithFlags_t* pargs = (args_hipExtMallocWithFlags_t*) args; \
	if (pargs->ptr != NULL) { \
		pargs->ptr__ref.ptr1 = *pargs->ptr; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipFuncSetAttribute` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipFuncSetAttribute` function call.
 *
 * @struct args_hipFuncSetAttribute_t
 *
 * @note 
 *	hipError_t
 *	hipFuncSetAttribute (
 *			const void * func (const void *)
 *			hipFuncAttribute attr (enum hipFuncAttribute)
 *			int value (int)
 *	)
 */
#if HAVE_hipFuncSetAttribute
typedef struct {
	void * func;
	hipFuncAttribute attr;
	int value;
	hipError_t retval;
} args_hipFuncSetAttribute_t;

#define GET_ARGS_VALUE_hipFuncSetAttribute(activity) { \
	args_hipFuncSetAttribute_t* args = (args_hipFuncSetAttribute_t*) activity->args; \
	args->func = (void *) func; \
	args->attr = (hipFuncAttribute) attr; \
	args->value = (int) value; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipChooseDeviceR0600` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipChooseDeviceR0600` function call.
 *
 * @struct args_hipChooseDeviceR0600_t
 *
 * @note 
 *	hipError_t
 *	hipChooseDeviceR0600 (
 *			int * device (int *)
 *			const hipDeviceProp_tR0600 * prop (const struct hipDeviceProp_tR0600 *)
 *	)
 */
#if HAVE_hipChooseDeviceR0600
typedef struct {
	int * device;
	struct {
		int val;
	} device__ref;
	hipDeviceProp_tR0600 * prop;
	struct {
		hipDeviceProp_tR0600 val;
	} prop__ref;
	hipError_t retval;
} args_hipChooseDeviceR0600_t;

#define GET_ARGS_VALUE_hipChooseDeviceR0600(activity) { \
	args_hipChooseDeviceR0600_t* args = (args_hipChooseDeviceR0600_t*) activity->args; \
	args->device = (int *) device; \
	args->prop = (hipDeviceProp_tR0600 *) prop; \
};

#define GET_PTRS_VALUE_hipChooseDeviceR0600(args) { \
	args_hipChooseDeviceR0600_t* pargs = (args_hipChooseDeviceR0600_t*) args; \
	if (pargs->device != NULL) { \
		pargs->device__ref.val = *pargs->device; \
	} \
	if (pargs->prop != NULL) { \
		pargs->prop__ref.val = *pargs->prop; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefSetMipmappedArray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefSetMipmappedArray` function call.
 *
 * @struct args_hipTexRefSetMipmappedArray_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefSetMipmappedArray (
 *			textureReference * texRef (struct textureReference*)
 *			struct hipMipmappedArray * mipmappedArray (struct hipMipmappedArray *)
 *			unsigned int Flags (unsigned int)
 *	)
 */
#if HAVE_hipTexRefSetMipmappedArray
typedef struct {
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	struct hipMipmappedArray * mipmappedArray;
	struct {
		struct hipMipmappedArray val;
	} mipmappedArray__ref;
	unsigned int Flags;
	hipError_t retval;
} args_hipTexRefSetMipmappedArray_t;

#define GET_ARGS_VALUE_hipTexRefSetMipmappedArray(activity) { \
	args_hipTexRefSetMipmappedArray_t* args = (args_hipTexRefSetMipmappedArray_t*) activity->args; \
	args->texRef = (textureReference *) texRef; \
	args->mipmappedArray = (struct hipMipmappedArray *) mipmappedArray; \
	args->Flags = (unsigned int) Flags; \
};

#define GET_PTRS_VALUE_hipTexRefSetMipmappedArray(args) { \
	args_hipTexRefSetMipmappedArray_t* pargs = (args_hipTexRefSetMipmappedArray_t*) args; \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
	if (pargs->mipmappedArray != NULL) { \
		pargs->mipmappedArray__ref.val = *pargs->mipmappedArray; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipMemset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipMemset` function call.
 *
 * @struct args_hipMemset_t
 *
 * @note 
 *	hipError_t
 *	hipMemset (
 *			void * dst (void *)
 *			int value (int)
 *			size_t sizeBytes (unsigned long)
 *	)
 */
#if HAVE_hipMemset
typedef struct {
	void * dst;
	int value;
	size_t sizeBytes;
	hipError_t retval;
} args_hipMemset_t;

#define GET_ARGS_VALUE_hipMemset(activity) { \
	args_hipMemset_t* args = (args_hipMemset_t*) activity->args; \
	args->dst = (void *) dst; \
	args->value = (int) value; \
	args->sizeBytes = (size_t) sizeBytes; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `hipTexRefGetMipmapLevelClamp` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `hipTexRefGetMipmapLevelClamp` function call.
 *
 * @struct args_hipTexRefGetMipmapLevelClamp_t
 *
 * @note 
 *	hipError_t
 *	hipTexRefGetMipmapLevelClamp (
 *			float * pminMipmapLevelClamp (float *)
 *			float * pmaxMipmapLevelClamp (float *)
 *			const textureReference * texRef (const struct textureReference *)
 *	)
 */
#if HAVE_hipTexRefGetMipmapLevelClamp
typedef struct {
	float * pminMipmapLevelClamp;
	struct {
		float val;
	} pminMipmapLevelClamp__ref;
	float * pmaxMipmapLevelClamp;
	struct {
		float val;
	} pmaxMipmapLevelClamp__ref;
	textureReference * texRef;
	struct {
		textureReference val;
	} texRef__ref;
	hipError_t retval;
} args_hipTexRefGetMipmapLevelClamp_t;

#define GET_ARGS_VALUE_hipTexRefGetMipmapLevelClamp(activity) { \
	args_hipTexRefGetMipmapLevelClamp_t* args = (args_hipTexRefGetMipmapLevelClamp_t*) activity->args; \
	args->pminMipmapLevelClamp = (float *) pminMipmapLevelClamp; \
	args->pmaxMipmapLevelClamp = (float *) pmaxMipmapLevelClamp; \
	args->texRef = (textureReference *) texRef; \
};

#define GET_PTRS_VALUE_hipTexRefGetMipmapLevelClamp(args) { \
	args_hipTexRefGetMipmapLevelClamp_t* pargs = (args_hipTexRefGetMipmapLevelClamp_t*) args; \
	if (pargs->pminMipmapLevelClamp != NULL) { \
		pargs->pminMipmapLevelClamp__ref.val = *pargs->pminMipmapLevelClamp; \
	} \
	if (pargs->pmaxMipmapLevelClamp != NULL) { \
		pargs->pmaxMipmapLevelClamp__ref.val = *pargs->pmaxMipmapLevelClamp; \
	} \
	if (pargs->texRef != NULL) { \
		pargs->texRef__ref.val = *pargs->texRef; \
	} \
};

#endif



/**
 * @brief Retrieves pointer-based argument values for HIP API calls.
 *
 * This function extracts pointer-based arguments based on the given HIP API ID.
 *
 * @param[in] id The HIP API function identifier.
 * @param[in,out] args Pointer to the HIP API arguments structure.
 * @param[in] is_enter Boolean flag indicating whether this function is handling an "enter" or "exit" event.
 */
static inline void get_hip_pointed_args_for(hip_api_id_t id, void* args, bool is_enter) 
{
    if (!is_enter) {
        switch(id) {
			#if HAVE_hipMemPtrGetInfo
			case HIP_API_ID_hipMemPtrGetInfo : {
				GET_PTRS_VALUE_hipMemPtrGetInfo(args);
				return;
			}
			#endif
			#if HAVE_hipDevicePrimaryCtxGetState
			case HIP_API_ID_hipDevicePrimaryCtxGetState : {
				GET_PTRS_VALUE_hipDevicePrimaryCtxGetState(args);
				return;
			}
			#endif
			#if HAVE_hipMemPoolGetAccess
			case HIP_API_ID_hipMemPoolGetAccess : {
				GET_PTRS_VALUE_hipMemPoolGetAccess(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetMipMappedArray
			case HIP_API_ID_hipTexRefGetMipMappedArray : {
				GET_PTRS_VALUE_hipTexRefGetMipMappedArray(args);
				return;
			}
			#endif
			#if HAVE_hipMalloc3D
			case HIP_API_ID_hipMalloc3D : {
				GET_PTRS_VALUE_hipMalloc3D(args);
				return;
			}
			#endif
			#if HAVE_hipMallocArray
			case HIP_API_ID_hipMallocArray : {
				GET_PTRS_VALUE_hipMallocArray(args);
				return;
			}
			#endif
			#if HAVE_hipGraphEventWaitNodeGetEvent
			case HIP_API_ID_hipGraphEventWaitNodeGetEvent : {
				GET_PTRS_VALUE_hipGraphEventWaitNodeGetEvent(args);
				return;
			}
			#endif
			#if HAVE_hipDrvMemcpy3D
			case HIP_API_ID_hipDrvMemcpy3D : {
				GET_PTRS_VALUE_hipDrvMemcpy3D(args);
				return;
			}
			#endif
			#if HAVE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
			case HIP_API_ID_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags : {
				GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args);
				return;
			}
			#endif
			#if HAVE_hipHostMalloc
			case HIP_API_ID_hipHostMalloc : {
				GET_PTRS_VALUE_hipHostMalloc(args);
				return;
			}
			#endif
			#if HAVE_hipModuleGetTexRef
			case HIP_API_ID_hipModuleGetTexRef : {
				GET_PTRS_VALUE_hipModuleGetTexRef(args);
				return;
			}
			#endif
			#if HAVE_hipIpcGetMemHandle
			case HIP_API_ID_hipIpcGetMemHandle : {
				GET_PTRS_VALUE_hipIpcGetMemHandle(args);
				return;
			}
			#endif
			#if HAVE_hipModuleLoad
			case HIP_API_ID_hipModuleLoad : {
				GET_PTRS_VALUE_hipModuleLoad(args);
				return;
			}
			#endif
			#if HAVE_hipWaitExternalSemaphoresAsync
			case HIP_API_ID_hipWaitExternalSemaphoresAsync : {
				GET_PTRS_VALUE_hipWaitExternalSemaphoresAsync(args);
				return;
			}
			#endif
			#if HAVE_hipGraphKernelNodeGetParams
			case HIP_API_ID_hipGraphKernelNodeGetParams : {
				GET_PTRS_VALUE_hipGraphKernelNodeGetParams(args);
				return;
			}
			#endif
			#if HAVE_hipHostAlloc
			case HIP_API_ID_hipHostAlloc : {
				GET_PTRS_VALUE_hipHostAlloc(args);
				return;
			}
			#endif
			#if HAVE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags
			case HIP_API_ID_hipModuleOccupancyMaxPotentialBlockSizeWithFlags : {
				GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSizeWithFlags(args);
				return;
			}
			#endif
			#if HAVE_hipGraphNodeGetDependentNodes
			case HIP_API_ID_hipGraphNodeGetDependentNodes : {
				GET_PTRS_VALUE_hipGraphNodeGetDependentNodes(args);
				return;
			}
			#endif
			#if HAVE_hipExtStreamGetCUMask
			case HIP_API_ID_hipExtStreamGetCUMask : {
				GET_PTRS_VALUE_hipExtStreamGetCUMask(args);
				return;
			}
			#endif
			#if HAVE_hipLaunchKernel
			case HIP_API_ID_hipLaunchKernel : {
				GET_PTRS_VALUE_hipLaunchKernel(args);
				return;
			}
			#endif
			#if HAVE_hipGetErrorString
			case HIP_API_ID_hipGetErrorString : {
				GET_PTRS_RET_VALUE_hipGetErrorString(args);
				return;
			}
			#endif
			#if HAVE_hipModuleLoadDataEx
			case HIP_API_ID_hipModuleLoadDataEx : {
				GET_PTRS_VALUE_hipModuleLoadDataEx(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetFilterMode
			case HIP_API_ID_hipTexRefGetFilterMode : {
				GET_PTRS_VALUE_hipTexRefGetFilterMode(args);
				return;
			}
			#endif
			#if HAVE_hipGraphInstantiateWithParams
			case HIP_API_ID_hipGraphInstantiateWithParams : {
				GET_PTRS_VALUE_hipGraphInstantiateWithParams(args);
				return;
			}
			#endif
			#if HAVE_hipGraphicsUnmapResources
			case HIP_API_ID_hipGraphicsUnmapResources : {
				GET_PTRS_VALUE_hipGraphicsUnmapResources(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetMipmapLevelBias
			case HIP_API_ID_hipTexRefGetMipmapLevelBias : {
				GET_PTRS_VALUE_hipTexRefGetMipmapLevelBias(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddExternalSemaphoresSignalNode
			case HIP_API_ID_hipGraphAddExternalSemaphoresSignalNode : {
				GET_PTRS_VALUE_hipGraphAddExternalSemaphoresSignalNode(args);
				return;
			}
			#endif
			#if HAVE_hipMemMapArrayAsync
			case HIP_API_ID_hipMemMapArrayAsync : {
				GET_PTRS_VALUE_hipMemMapArrayAsync(args);
				return;
			}
			#endif
			#if HAVE_hipGraphKernelNodeSetAttribute
			case HIP_API_ID_hipGraphKernelNodeSetAttribute : {
				GET_PTRS_VALUE_hipGraphKernelNodeSetAttribute(args);
				return;
			}
			#endif
			#if HAVE_hipDrvMemcpy2DUnaligned
			case HIP_API_ID_hipDrvMemcpy2DUnaligned : {
				GET_PTRS_VALUE_hipDrvMemcpy2DUnaligned(args);
				return;
			}
			#endif
			#if HAVE_hipGraphRemoveDependencies
			case HIP_API_ID_hipGraphRemoveDependencies : {
				GET_PTRS_VALUE_hipGraphRemoveDependencies(args);
				return;
			}
			#endif
			#if HAVE_hipGraphCreate
			case HIP_API_ID_hipGraphCreate : {
				GET_PTRS_VALUE_hipGraphCreate(args);
				return;
			}
			#endif
			#if HAVE_hipExtLaunchMultiKernelMultiDevice
			case HIP_API_ID_hipExtLaunchMultiKernelMultiDevice : {
				GET_PTRS_VALUE_hipExtLaunchMultiKernelMultiDevice(args);
				return;
			}
			#endif
			#if HAVE_hipGetDeviceCount
			case HIP_API_ID_hipGetDeviceCount : {
				GET_PTRS_VALUE_hipGetDeviceCount(args);
				return;
			}
			#endif
			#if HAVE_hipTexObjectGetResourceDesc
			case HIP_API_ID_hipTexObjectGetResourceDesc : {
				GET_PTRS_VALUE_hipTexObjectGetResourceDesc(args);
				return;
			}
			#endif
			#if HAVE_hipThreadExchangeStreamCaptureMode
			case HIP_API_ID_hipThreadExchangeStreamCaptureMode : {
				GET_PTRS_VALUE_hipThreadExchangeStreamCaptureMode(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetP2PAttribute
			case HIP_API_ID_hipDeviceGetP2PAttribute : {
				GET_PTRS_VALUE_hipDeviceGetP2PAttribute(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetByPCIBusId
			case HIP_API_ID_hipDeviceGetByPCIBusId : {
				GET_PTRS_VALUE_hipDeviceGetByPCIBusId(args);
				return;
			}
			#endif
			#if HAVE_hipExtGetLinkTypeAndHopCount
			case HIP_API_ID_hipExtGetLinkTypeAndHopCount : {
				GET_PTRS_VALUE_hipExtGetLinkTypeAndHopCount(args);
				return;
			}
			#endif
			#if HAVE_hipUnbindTexture
			case HIP_API_ID_hipUnbindTexture : {
				GET_PTRS_VALUE_hipUnbindTexture(args);
				return;
			}
			#endif
			#if HAVE_hipDrvMemcpy3DAsync
			case HIP_API_ID_hipDrvMemcpy3DAsync : {
				GET_PTRS_VALUE_hipDrvMemcpy3DAsync(args);
				return;
			}
			#endif
			#if HAVE_hipIpcGetEventHandle
			case HIP_API_ID_hipIpcGetEventHandle : {
				GET_PTRS_VALUE_hipIpcGetEventHandle(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetMemPool
			case HIP_API_ID_hipDeviceGetMemPool : {
				GET_PTRS_VALUE_hipDeviceGetMemPool(args);
				return;
			}
			#endif
			#if HAVE_hipGraphHostNodeSetParams
			case HIP_API_ID_hipGraphHostNodeSetParams : {
				GET_PTRS_VALUE_hipGraphHostNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddEventWaitNode
			case HIP_API_ID_hipGraphAddEventWaitNode : {
				GET_PTRS_VALUE_hipGraphAddEventWaitNode(args);
				return;
			}
			#endif
			#if HAVE_hipArrayGetDescriptor
			case HIP_API_ID_hipArrayGetDescriptor : {
				GET_PTRS_VALUE_hipArrayGetDescriptor(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExecUpdate
			case HIP_API_ID_hipGraphExecUpdate : {
				GET_PTRS_VALUE_hipGraphExecUpdate(args);
				return;
			}
			#endif
			#if HAVE_hipMemGetAllocationPropertiesFromHandle
			case HIP_API_ID_hipMemGetAllocationPropertiesFromHandle : {
				GET_PTRS_VALUE_hipMemGetAllocationPropertiesFromHandle(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddExternalSemaphoresWaitNode
			case HIP_API_ID_hipGraphAddExternalSemaphoresWaitNode : {
				GET_PTRS_VALUE_hipGraphAddExternalSemaphoresWaitNode(args);
				return;
			}
			#endif
			#if HAVE_hipGetDevicePropertiesR0600
			case HIP_API_ID_hipGetDevicePropertiesR0600 : {
				GET_PTRS_VALUE_hipGetDevicePropertiesR0600(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceCanAccessPeer
			case HIP_API_ID_hipDeviceCanAccessPeer : {
				GET_PTRS_VALUE_hipDeviceCanAccessPeer(args);
				return;
			}
			#endif
			#if HAVE_hipMemSetAccess
			case HIP_API_ID_hipMemSetAccess : {
				GET_PTRS_VALUE_hipMemSetAccess(args);
				return;
			}
			#endif
			#if HAVE_hipApiName
			case HIP_API_ID_hipApiName : {
				GET_PTRS_RET_VALUE_hipApiName(args);
				return;
			}
			#endif
			#if HAVE_hipGraphicsSubResourceGetMappedArray
			case HIP_API_ID_hipGraphicsSubResourceGetMappedArray : {
				GET_PTRS_VALUE_hipGraphicsSubResourceGetMappedArray(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetBorderColor
			case HIP_API_ID_hipTexRefGetBorderColor : {
				GET_PTRS_VALUE_hipTexRefGetBorderColor(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddMemcpyNode1D
			case HIP_API_ID_hipGraphAddMemcpyNode1D : {
				GET_PTRS_VALUE_hipGraphAddMemcpyNode1D(args);
				return;
			}
			#endif
			#if HAVE_hipGraphGetNodes
			case HIP_API_ID_hipGraphGetNodes : {
				GET_PTRS_VALUE_hipGraphGetNodes(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetFlags_spt
			case HIP_API_ID_hipStreamGetFlags_spt : {
				GET_PTRS_VALUE_hipStreamGetFlags_spt(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetAddress2D
			case HIP_API_ID_hipTexRefSetAddress2D : {
				GET_PTRS_VALUE_hipTexRefSetAddress2D(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetPriority
			case HIP_API_ID_hipStreamGetPriority : {
				GET_PTRS_VALUE_hipStreamGetPriority(args);
				return;
			}
			#endif
			#if HAVE_hipStreamCreate
			case HIP_API_ID_hipStreamCreate : {
				GET_PTRS_VALUE_hipStreamCreate(args);
				return;
			}
			#endif
			#if HAVE_hipGraphNodeGetEnabled
			case HIP_API_ID_hipGraphNodeGetEnabled : {
				GET_PTRS_VALUE_hipGraphNodeGetEnabled(args);
				return;
			}
			#endif
			#if HAVE_hipGetTextureAlignmentOffset
			case HIP_API_ID_hipGetTextureAlignmentOffset : {
				GET_PTRS_VALUE_hipGetTextureAlignmentOffset(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddEventRecordNode
			case HIP_API_ID_hipGraphAddEventRecordNode : {
				GET_PTRS_VALUE_hipGraphAddEventRecordNode(args);
				return;
			}
			#endif
			#if HAVE_hipGraphNodeFindInClone
			case HIP_API_ID_hipGraphNodeFindInClone : {
				GET_PTRS_VALUE_hipGraphNodeFindInClone(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetCacheConfig
			case HIP_API_ID_hipDeviceGetCacheConfig : {
				GET_PTRS_VALUE_hipDeviceGetCacheConfig(args);
				return;
			}
			#endif
			#if HAVE_hipMemCreate
			case HIP_API_ID_hipMemCreate : {
				GET_PTRS_VALUE_hipMemCreate(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExternalSemaphoresWaitNodeGetParams
			case HIP_API_ID_hipGraphExternalSemaphoresWaitNodeGetParams : {
				GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeGetParams(args);
				return;
			}
			#endif
			#if HAVE_hipStreamEndCapture
			case HIP_API_ID_hipStreamEndCapture : {
				GET_PTRS_VALUE_hipStreamEndCapture(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExecHostNodeSetParams
			case HIP_API_ID_hipGraphExecHostNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExecHostNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipMalloc
			case HIP_API_ID_hipMalloc : {
				GET_PTRS_VALUE_hipMalloc(args);
				return;
			}
			#endif
			#if HAVE_hipMalloc3DArray
			case HIP_API_ID_hipMalloc3DArray : {
				GET_PTRS_VALUE_hipMalloc3DArray(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExecKernelNodeSetParams
			case HIP_API_ID_hipGraphExecKernelNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExecKernelNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipGetTextureObjectResourceDesc
			case HIP_API_ID_hipGetTextureObjectResourceDesc : {
				GET_PTRS_VALUE_hipGetTextureObjectResourceDesc(args);
				return;
			}
			#endif
			#if HAVE_hipMemcpy3DAsync_spt
			case HIP_API_ID_hipMemcpy3DAsync_spt : {
				GET_PTRS_VALUE_hipMemcpy3DAsync_spt(args);
				return;
			}
			#endif
			#if HAVE_hipMemPoolImportPointer
			case HIP_API_ID_hipMemPoolImportPointer : {
				GET_PTRS_VALUE_hipMemPoolImportPointer(args);
				return;
			}
			#endif
			#if HAVE_hipFuncGetAttributes
			case HIP_API_ID_hipFuncGetAttributes : {
				GET_PTRS_VALUE_hipFuncGetAttributes(args);
				return;
			}
			#endif
			#if HAVE_hipCtxGetCurrent
			case HIP_API_ID_hipCtxGetCurrent : {
				GET_PTRS_VALUE_hipCtxGetCurrent(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddChildGraphNode
			case HIP_API_ID_hipGraphAddChildGraphNode : {
				GET_PTRS_VALUE_hipGraphAddChildGraphNode(args);
				return;
			}
			#endif
			#if HAVE_hipEventCreate
			case HIP_API_ID_hipEventCreate : {
				GET_PTRS_VALUE_hipEventCreate(args);
				return;
			}
			#endif
			#if HAVE_hipHostGetDevicePointer
			case HIP_API_ID_hipHostGetDevicePointer : {
				GET_PTRS_VALUE_hipHostGetDevicePointer(args);
				return;
			}
			#endif
			#if HAVE_hipBindTextureToArray
			case HIP_API_ID_hipBindTextureToArray : {
				GET_PTRS_VALUE_hipBindTextureToArray(args);
				return;
			}
			#endif
			#if HAVE_hipStreamEndCapture_spt
			case HIP_API_ID_hipStreamEndCapture_spt : {
				GET_PTRS_VALUE_hipStreamEndCapture_spt(args);
				return;
			}
			#endif
			#if HAVE_hipModuleOccupancyMaxPotentialBlockSize
			case HIP_API_ID_hipModuleOccupancyMaxPotentialBlockSize : {
				GET_PTRS_VALUE_hipModuleOccupancyMaxPotentialBlockSize(args);
				return;
			}
			#endif
			#if HAVE_hipKernelNameRefByPtr
			case HIP_API_ID_hipKernelNameRefByPtr : {
				GET_PTRS_RET_VALUE_hipKernelNameRefByPtr(args);
				return;
			}
			#endif
			#if HAVE_hipGetDevice
			case HIP_API_ID_hipGetDevice : {
				GET_PTRS_VALUE_hipGetDevice(args);
				return;
			}
			#endif
			#if HAVE_hipMemcpy3D_spt
			case HIP_API_ID_hipMemcpy3D_spt : {
				GET_PTRS_VALUE_hipMemcpy3D_spt(args);
				return;
			}
			#endif
			#if HAVE_hipTexObjectGetTextureDesc
			case HIP_API_ID_hipTexObjectGetTextureDesc : {
				GET_PTRS_VALUE_hipTexObjectGetTextureDesc(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGet
			case HIP_API_ID_hipDeviceGet : {
				GET_PTRS_VALUE_hipDeviceGet(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExternalSemaphoresSignalNodeSetParams
			case HIP_API_ID_hipGraphExternalSemaphoresSignalNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetDevice
			case HIP_API_ID_hipStreamGetDevice : {
				GET_PTRS_VALUE_hipStreamGetDevice(args);
				return;
			}
			#endif
			#if HAVE_hipMemAllocPitch
			case HIP_API_ID_hipMemAllocPitch : {
				GET_PTRS_VALUE_hipMemAllocPitch(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddNode
			case HIP_API_ID_hipGraphAddNode : {
				GET_PTRS_VALUE_hipGraphAddNode(args);
				return;
			}
			#endif
			#if HAVE_hipRuntimeGetVersion
			case HIP_API_ID_hipRuntimeGetVersion : {
				GET_PTRS_VALUE_hipRuntimeGetVersion(args);
				return;
			}
			#endif
			#if HAVE_hipGraphChildGraphNodeGetGraph
			case HIP_API_ID_hipGraphChildGraphNodeGetGraph : {
				GET_PTRS_VALUE_hipGraphChildGraphNodeGetGraph(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExecMemsetNodeSetParams
			case HIP_API_ID_hipGraphExecMemsetNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExecMemsetNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipEventElapsedTime
			case HIP_API_ID_hipEventElapsedTime : {
				GET_PTRS_VALUE_hipEventElapsedTime(args);
				return;
			}
			#endif
			#if HAVE_hipStreamCreateWithFlags
			case HIP_API_ID_hipStreamCreateWithFlags : {
				GET_PTRS_VALUE_hipStreamCreateWithFlags(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetAddress
			case HIP_API_ID_hipTexRefSetAddress : {
				GET_PTRS_VALUE_hipTexRefSetAddress(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddKernelNode
			case HIP_API_ID_hipGraphAddKernelNode : {
				GET_PTRS_VALUE_hipGraphAddKernelNode(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceTotalMem
			case HIP_API_ID_hipDeviceTotalMem : {
				GET_PTRS_VALUE_hipDeviceTotalMem(args);
				return;
			}
			#endif
			#if HAVE_hipMemAllocHost
			case HIP_API_ID_hipMemAllocHost : {
				GET_PTRS_VALUE_hipMemAllocHost(args);
				return;
			}
			#endif
			#if HAVE_hipGraphHostNodeGetParams
			case HIP_API_ID_hipGraphHostNodeGetParams : {
				GET_PTRS_VALUE_hipGraphHostNodeGetParams(args);
				return;
			}
			#endif
			#if HAVE_hipCtxGetCacheConfig
			case HIP_API_ID_hipCtxGetCacheConfig : {
				GET_PTRS_VALUE_hipCtxGetCacheConfig(args);
				return;
			}
			#endif
			#if HAVE_hipDrvPointerGetAttributes
			case HIP_API_ID_hipDrvPointerGetAttributes : {
				GET_PTRS_VALUE_hipDrvPointerGetAttributes(args);
				return;
			}
			#endif
			#if HAVE_hipModuleLaunchCooperativeKernelMultiDevice
			case HIP_API_ID_hipModuleLaunchCooperativeKernelMultiDevice : {
				GET_PTRS_VALUE_hipModuleLaunchCooperativeKernelMultiDevice(args);
				return;
			}
			#endif
			#if HAVE_hipModuleGetGlobal
			case HIP_API_ID_hipModuleGetGlobal : {
				GET_PTRS_VALUE_hipModuleGetGlobal(args);
				return;
			}
			#endif
			#if HAVE_hipGraphEventRecordNodeGetEvent
			case HIP_API_ID_hipGraphEventRecordNodeGetEvent : {
				GET_PTRS_VALUE_hipGraphEventRecordNodeGetEvent(args);
				return;
			}
			#endif
			#if HAVE_hipGraphInstantiate
			case HIP_API_ID_hipGraphInstantiate : {
				GET_PTRS_VALUE_hipGraphInstantiate(args);
				return;
			}
			#endif
			#if HAVE_hipGraphMemAllocNodeGetParams
			case HIP_API_ID_hipGraphMemAllocNodeGetParams : {
				GET_PTRS_VALUE_hipGraphMemAllocNodeGetParams(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetCaptureInfo
			case HIP_API_ID_hipStreamGetCaptureInfo : {
				GET_PTRS_VALUE_hipStreamGetCaptureInfo(args);
				return;
			}
			#endif
			#if HAVE_hipCtxPopCurrent
			case HIP_API_ID_hipCtxPopCurrent : {
				GET_PTRS_VALUE_hipCtxPopCurrent(args);
				return;
			}
			#endif
			#if HAVE_hipPointerGetAttributes
			case HIP_API_ID_hipPointerGetAttributes : {
				GET_PTRS_VALUE_hipPointerGetAttributes(args);
				return;
			}
			#endif
			#if HAVE_hipMallocPitch
			case HIP_API_ID_hipMallocPitch : {
				GET_PTRS_VALUE_hipMallocPitch(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceComputeCapability
			case HIP_API_ID_hipDeviceComputeCapability : {
				GET_PTRS_VALUE_hipDeviceComputeCapability(args);
				return;
			}
			#endif
			#if HAVE_hipOccupancyMaxActiveBlocksPerMultiprocessor
			case HIP_API_ID_hipOccupancyMaxActiveBlocksPerMultiprocessor : {
				GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessor(args);
				return;
			}
			#endif
			#if HAVE_hipSignalExternalSemaphoresAsync
			case HIP_API_ID_hipSignalExternalSemaphoresAsync : {
				GET_PTRS_VALUE_hipSignalExternalSemaphoresAsync(args);
				return;
			}
			#endif
			#if HAVE_hipArray3DGetDescriptor
			case HIP_API_ID_hipArray3DGetDescriptor : {
				GET_PTRS_VALUE_hipArray3DGetDescriptor(args);
				return;
			}
			#endif
			#if HAVE___hipPopCallConfiguration
			case HIP_API_ID___hipPopCallConfiguration : {
				GET_PTRS_VALUE___hipPopCallConfiguration(args);
				return;
			}
			#endif
			#if HAVE_hipLaunchCooperativeKernelMultiDevice
			case HIP_API_ID_hipLaunchCooperativeKernelMultiDevice : {
				GET_PTRS_VALUE_hipLaunchCooperativeKernelMultiDevice(args);
				return;
			}
			#endif
			#if HAVE_hipGraphMemsetNodeSetParams
			case HIP_API_ID_hipGraphMemsetNodeSetParams : {
				GET_PTRS_VALUE_hipGraphMemsetNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipMemPoolSetAccess
			case HIP_API_ID_hipMemPoolSetAccess : {
				GET_PTRS_VALUE_hipMemPoolSetAccess(args);
				return;
			}
			#endif
			#if HAVE_hipExtStreamCreateWithCUMask
			case HIP_API_ID_hipExtStreamCreateWithCUMask : {
				GET_PTRS_VALUE_hipExtStreamCreateWithCUMask(args);
				return;
			}
			#endif
			#if HAVE_hipGetTextureObjectTextureDesc
			case HIP_API_ID_hipGetTextureObjectTextureDesc : {
				GET_PTRS_VALUE_hipGetTextureObjectTextureDesc(args);
				return;
			}
			#endif
			#if HAVE_hipModuleGetFunction
			case HIP_API_ID_hipModuleGetFunction : {
				GET_PTRS_VALUE_hipModuleGetFunction(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetLimit
			case HIP_API_ID_hipDeviceGetLimit : {
				GET_PTRS_VALUE_hipDeviceGetLimit(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetMaxAnisotropy
			case HIP_API_ID_hipTexRefGetMaxAnisotropy : {
				GET_PTRS_VALUE_hipTexRefGetMaxAnisotropy(args);
				return;
			}
			#endif
			#if HAVE_hipLaunchKernel_spt
			case HIP_API_ID_hipLaunchKernel_spt : {
				GET_PTRS_VALUE_hipLaunchKernel_spt(args);
				return;
			}
			#endif
			#if HAVE_hipStreamBeginCaptureToGraph
			case HIP_API_ID_hipStreamBeginCaptureToGraph : {
				GET_PTRS_VALUE_hipStreamBeginCaptureToGraph(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetFormat
			case HIP_API_ID_hipTexRefGetFormat : {
				GET_PTRS_VALUE_hipTexRefGetFormat(args);
				return;
			}
			#endif
			#if HAVE_hipDevicePrimaryCtxRetain
			case HIP_API_ID_hipDevicePrimaryCtxRetain : {
				GET_PTRS_VALUE_hipDevicePrimaryCtxRetain(args);
				return;
			}
			#endif
			#if HAVE_hipMallocManaged
			case HIP_API_ID_hipMallocManaged : {
				GET_PTRS_VALUE_hipMallocManaged(args);
				return;
			}
			#endif
			#if HAVE_hipStreamCreateWithPriority
			case HIP_API_ID_hipStreamCreateWithPriority : {
				GET_PTRS_VALUE_hipStreamCreateWithPriority(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetCaptureInfo_spt
			case HIP_API_ID_hipStreamGetCaptureInfo_spt : {
				GET_PTRS_VALUE_hipStreamGetCaptureInfo_spt(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddHostNode
			case HIP_API_ID_hipGraphAddHostNode : {
				GET_PTRS_VALUE_hipGraphAddHostNode(args);
				return;
			}
			#endif
			#if HAVE_hipLaunchCooperativeKernel
			case HIP_API_ID_hipLaunchCooperativeKernel : {
				GET_PTRS_VALUE_hipLaunchCooperativeKernel(args);
				return;
			}
			#endif
			#if HAVE_hipGetErrorName
			case HIP_API_ID_hipGetErrorName : {
				GET_PTRS_RET_VALUE_hipGetErrorName(args);
				return;
			}
			#endif
			#if HAVE_hipGraphMemsetNodeGetParams
			case HIP_API_ID_hipGraphMemsetNodeGetParams : {
				GET_PTRS_VALUE_hipGraphMemsetNodeGetParams(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetArray
			case HIP_API_ID_hipTexRefSetArray : {
				GET_PTRS_VALUE_hipTexRefSetArray(args);
				return;
			}
			#endif
			#if HAVE_hipMemcpyParam2DAsync
			case HIP_API_ID_hipMemcpyParam2DAsync : {
				GET_PTRS_VALUE_hipMemcpyParam2DAsync(args);
				return;
			}
			#endif
			#if HAVE_hipMemPoolExportPointer
			case HIP_API_ID_hipMemPoolExportPointer : {
				GET_PTRS_VALUE_hipMemPoolExportPointer(args);
				return;
			}
			#endif
			#if HAVE_hipMemGetAllocationGranularity
			case HIP_API_ID_hipMemGetAllocationGranularity : {
				GET_PTRS_VALUE_hipMemGetAllocationGranularity(args);
				return;
			}
			#endif
			#if HAVE_hipGraphClone
			case HIP_API_ID_hipGraphClone : {
				GET_PTRS_VALUE_hipGraphClone(args);
				return;
			}
			#endif
			#if HAVE_hipBindTexture2D
			case HIP_API_ID_hipBindTexture2D : {
				GET_PTRS_VALUE_hipBindTexture2D(args);
				return;
			}
			#endif
			#if HAVE_hipArrayGetInfo
			case HIP_API_ID_hipArrayGetInfo : {
				GET_PTRS_VALUE_hipArrayGetInfo(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExternalSemaphoresSignalNodeGetParams
			case HIP_API_ID_hipGraphExternalSemaphoresSignalNodeGetParams : {
				GET_PTRS_VALUE_hipGraphExternalSemaphoresSignalNodeGetParams(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetStreamPriorityRange
			case HIP_API_ID_hipDeviceGetStreamPriorityRange : {
				GET_PTRS_VALUE_hipDeviceGetStreamPriorityRange(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetDefaultMemPool
			case HIP_API_ID_hipDeviceGetDefaultMemPool : {
				GET_PTRS_VALUE_hipDeviceGetDefaultMemPool(args);
				return;
			}
			#endif
			#if HAVE_hipCtxCreate
			case HIP_API_ID_hipCtxCreate : {
				GET_PTRS_VALUE_hipCtxCreate(args);
				return;
			}
			#endif
			#if HAVE_hipStreamIsCapturing
			case HIP_API_ID_hipStreamIsCapturing : {
				GET_PTRS_VALUE_hipStreamIsCapturing(args);
				return;
			}
			#endif
			#if HAVE_hipStreamUpdateCaptureDependencies
			case HIP_API_ID_hipStreamUpdateCaptureDependencies : {
				GET_PTRS_VALUE_hipStreamUpdateCaptureDependencies(args);
				return;
			}
			#endif
			#if HAVE_hipMemAddressReserve
			case HIP_API_ID_hipMemAddressReserve : {
				GET_PTRS_VALUE_hipMemAddressReserve(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddMemsetNode
			case HIP_API_ID_hipGraphAddMemsetNode : {
				GET_PTRS_VALUE_hipGraphAddMemsetNode(args);
				return;
			}
			#endif
			#if HAVE_hipGraphicsResourceGetMappedPointer
			case HIP_API_ID_hipGraphicsResourceGetMappedPointer : {
				GET_PTRS_VALUE_hipGraphicsResourceGetMappedPointer(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetUuid
			case HIP_API_ID_hipDeviceGetUuid : {
				GET_PTRS_VALUE_hipDeviceGetUuid(args);
				return;
			}
			#endif
			#if HAVE_hipModuleLaunchKernel
			case HIP_API_ID_hipModuleLaunchKernel : {
				GET_PTRS_VALUE_hipModuleLaunchKernel(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddEmptyNode
			case HIP_API_ID_hipGraphAddEmptyNode : {
				GET_PTRS_VALUE_hipGraphAddEmptyNode(args);
				return;
			}
			#endif
			#if HAVE_hipGraphInstantiateWithFlags
			case HIP_API_ID_hipGraphInstantiateWithFlags : {
				GET_PTRS_VALUE_hipGraphInstantiateWithFlags(args);
				return;
			}
			#endif
			#if HAVE_hipCtxGetApiVersion
			case HIP_API_ID_hipCtxGetApiVersion : {
				GET_PTRS_VALUE_hipCtxGetApiVersion(args);
				return;
			}
			#endif
			#if HAVE_hipBindTexture
			case HIP_API_ID_hipBindTexture : {
				GET_PTRS_VALUE_hipBindTexture(args);
				return;
			}
			#endif
			#if HAVE_hipGetDeviceFlags
			case HIP_API_ID_hipGetDeviceFlags : {
				GET_PTRS_VALUE_hipGetDeviceFlags(args);
				return;
			}
			#endif
			#if HAVE_hipMemRangeGetAttributes
			case HIP_API_ID_hipMemRangeGetAttributes : {
				GET_PTRS_VALUE_hipMemRangeGetAttributes(args);
				return;
			}
			#endif
			#if HAVE_hipIpcOpenEventHandle
			case HIP_API_ID_hipIpcOpenEventHandle : {
				GET_PTRS_VALUE_hipIpcOpenEventHandle(args);
				return;
			}
			#endif
			#if HAVE_hipMallocAsync
			case HIP_API_ID_hipMallocAsync : {
				GET_PTRS_VALUE_hipMallocAsync(args);
				return;
			}
			#endif
			#if HAVE_hipOccupancyMaxPotentialBlockSize
			case HIP_API_ID_hipOccupancyMaxPotentialBlockSize : {
				GET_PTRS_VALUE_hipOccupancyMaxPotentialBlockSize(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddMemcpyNodeToSymbol
			case HIP_API_ID_hipGraphAddMemcpyNodeToSymbol : {
				GET_PTRS_VALUE_hipGraphAddMemcpyNodeToSymbol(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetPCIBusId
			case HIP_API_ID_hipDeviceGetPCIBusId : {
				GET_PTRS_VALUE_hipDeviceGetPCIBusId(args);
				return;
			}
			#endif
			#if HAVE_hipGetChannelDesc
			case HIP_API_ID_hipGetChannelDesc : {
				GET_PTRS_VALUE_hipGetChannelDesc(args);
				return;
			}
			#endif
			#if HAVE_hipImportExternalMemory
			case HIP_API_ID_hipImportExternalMemory : {
				GET_PTRS_VALUE_hipImportExternalMemory(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetMipmapLevelBias
			case HIP_API_ID_hipTexRefSetMipmapLevelBias : {
				GET_PTRS_VALUE_hipTexRefSetMipmapLevelBias(args);
				return;
			}
			#endif
			#if HAVE_hipMemPoolImportFromShareableHandle
			case HIP_API_ID_hipMemPoolImportFromShareableHandle : {
				GET_PTRS_VALUE_hipMemPoolImportFromShareableHandle(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetMipmapFilterMode
			case HIP_API_ID_hipTexRefGetMipmapFilterMode : {
				GET_PTRS_VALUE_hipTexRefGetMipmapFilterMode(args);
				return;
			}
			#endif
			#if HAVE_hipGetProcAddress
			case HIP_API_ID_hipGetProcAddress : {
				GET_PTRS_VALUE_hipGetProcAddress(args);
				return;
			}
			#endif
			#if HAVE_hipCreateTextureObject
			case HIP_API_ID_hipCreateTextureObject : {
				GET_PTRS_VALUE_hipCreateTextureObject(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetFlags
			case HIP_API_ID_hipTexRefGetFlags : {
				GET_PTRS_VALUE_hipTexRefGetFlags(args);
				return;
			}
			#endif
			#if HAVE_hipDrvGraphAddMemcpyNode
			case HIP_API_ID_hipDrvGraphAddMemcpyNode : {
				GET_PTRS_VALUE_hipDrvGraphAddMemcpyNode(args);
				return;
			}
			#endif
			#if HAVE_hipGraphNodeGetDependencies
			case HIP_API_ID_hipGraphNodeGetDependencies : {
				GET_PTRS_VALUE_hipGraphNodeGetDependencies(args);
				return;
			}
			#endif
			#if HAVE_hipMemcpy3D
			case HIP_API_ID_hipMemcpy3D : {
				GET_PTRS_VALUE_hipMemcpy3D(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddMemcpyNodeFromSymbol
			case HIP_API_ID_hipGraphAddMemcpyNodeFromSymbol : {
				GET_PTRS_VALUE_hipGraphAddMemcpyNodeFromSymbol(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetPriority_spt
			case HIP_API_ID_hipStreamGetPriority_spt : {
				GET_PTRS_VALUE_hipStreamGetPriority_spt(args);
				return;
			}
			#endif
			#if HAVE_hipModuleLoadData
			case HIP_API_ID_hipModuleLoadData : {
				GET_PTRS_VALUE_hipModuleLoadData(args);
				return;
			}
			#endif
			#if HAVE_hipExternalMemoryGetMappedBuffer
			case HIP_API_ID_hipExternalMemoryGetMappedBuffer : {
				GET_PTRS_VALUE_hipExternalMemoryGetMappedBuffer(args);
				return;
			}
			#endif
			#if HAVE_hipLaunchCooperativeKernel_spt
			case HIP_API_ID_hipLaunchCooperativeKernel_spt : {
				GET_PTRS_VALUE_hipLaunchCooperativeKernel_spt(args);
				return;
			}
			#endif
			#if HAVE_hipModuleLaunchCooperativeKernel
			case HIP_API_ID_hipModuleLaunchCooperativeKernel : {
				GET_PTRS_VALUE_hipModuleLaunchCooperativeKernel(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetName
			case HIP_API_ID_hipDeviceGetName : {
				GET_PTRS_VALUE_hipDeviceGetName(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetAddressMode
			case HIP_API_ID_hipTexRefSetAddressMode : {
				GET_PTRS_VALUE_hipTexRefSetAddressMode(args);
				return;
			}
			#endif
			#if HAVE_hipGraphGetRootNodes
			case HIP_API_ID_hipGraphGetRootNodes : {
				GET_PTRS_VALUE_hipGraphGetRootNodes(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExternalSemaphoresWaitNodeSetParams
			case HIP_API_ID_hipGraphExternalSemaphoresWaitNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExternalSemaphoresWaitNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipGraphMemcpyNodeGetParams
			case HIP_API_ID_hipGraphMemcpyNodeGetParams : {
				GET_PTRS_VALUE_hipGraphMemcpyNodeGetParams(args);
				return;
			}
			#endif
			#if HAVE_hipSetValidDevices
			case HIP_API_ID_hipSetValidDevices : {
				GET_PTRS_VALUE_hipSetValidDevices(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExecExternalSemaphoresWaitNodeSetParams
			case HIP_API_ID_hipGraphExecExternalSemaphoresWaitNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExecExternalSemaphoresWaitNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipTexObjectGetResourceViewDesc
			case HIP_API_ID_hipTexObjectGetResourceViewDesc : {
				GET_PTRS_VALUE_hipTexObjectGetResourceViewDesc(args);
				return;
			}
			#endif
			#if HAVE_hipEventCreateWithFlags
			case HIP_API_ID_hipEventCreateWithFlags : {
				GET_PTRS_VALUE_hipEventCreateWithFlags(args);
				return;
			}
			#endif
			#if HAVE_hipMipmappedArrayCreate
			case HIP_API_ID_hipMipmappedArrayCreate : {
				GET_PTRS_VALUE_hipMipmappedArrayCreate(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddMemcpyNode
			case HIP_API_ID_hipGraphAddMemcpyNode : {
				GET_PTRS_VALUE_hipGraphAddMemcpyNode(args);
				return;
			}
			#endif
			#if HAVE_hipMallocFromPoolAsync
			case HIP_API_ID_hipMallocFromPoolAsync : {
				GET_PTRS_VALUE_hipMallocFromPoolAsync(args);
				return;
			}
			#endif
			#if HAVE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
			case HIP_API_ID_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags : {
				GET_PTRS_VALUE_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(args);
				return;
			}
			#endif
			#if HAVE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor
			case HIP_API_ID_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor : {
				GET_PTRS_VALUE_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor(args);
				return;
			}
			#endif
			#if HAVE_hipCtxGetFlags
			case HIP_API_ID_hipCtxGetFlags : {
				GET_PTRS_VALUE_hipCtxGetFlags(args);
				return;
			}
			#endif
			#if HAVE_hipGetSymbolAddress
			case HIP_API_ID_hipGetSymbolAddress : {
				GET_PTRS_VALUE_hipGetSymbolAddress(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetAddress
			case HIP_API_ID_hipTexRefGetAddress : {
				GET_PTRS_VALUE_hipTexRefGetAddress(args);
				return;
			}
			#endif
			#if HAVE_hipTexObjectCreate
			case HIP_API_ID_hipTexObjectCreate : {
				GET_PTRS_VALUE_hipTexObjectCreate(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetSharedMemConfig
			case HIP_API_ID_hipDeviceGetSharedMemConfig : {
				GET_PTRS_VALUE_hipDeviceGetSharedMemConfig(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddMemAllocNode
			case HIP_API_ID_hipGraphAddMemAllocNode : {
				GET_PTRS_VALUE_hipGraphAddMemAllocNode(args);
				return;
			}
			#endif
			#if HAVE_hipMemRetainAllocationHandle
			case HIP_API_ID_hipMemRetainAllocationHandle : {
				GET_PTRS_VALUE_hipMemRetainAllocationHandle(args);
				return;
			}
			#endif
			#if HAVE_hipGetFuncBySymbol
			case HIP_API_ID_hipGetFuncBySymbol : {
				GET_PTRS_VALUE_hipGetFuncBySymbol(args);
				return;
			}
			#endif
			#if HAVE_hipMemGetInfo
			case HIP_API_ID_hipMemGetInfo : {
				GET_PTRS_VALUE_hipMemGetInfo(args);
				return;
			}
			#endif
			#if HAVE_hipMemcpyParam2D
			case HIP_API_ID_hipMemcpyParam2D : {
				GET_PTRS_VALUE_hipMemcpyParam2D(args);
				return;
			}
			#endif
			#if HAVE_hipGraphDebugDotPrint
			case HIP_API_ID_hipGraphDebugDotPrint : {
				GET_PTRS_VALUE_hipGraphDebugDotPrint(args);
				return;
			}
			#endif
			#if HAVE_hipDrvGetErrorString
			case HIP_API_ID_hipDrvGetErrorString : {
				GET_PTRS_VALUE_hipDrvGetErrorString(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetAddressMode
			case HIP_API_ID_hipTexRefGetAddressMode : {
				GET_PTRS_VALUE_hipTexRefGetAddressMode(args);
				return;
			}
			#endif
			#if HAVE___hipGetPCH
			case HIP_API_ID___hipGetPCH : {
				GET_PTRS_VALUE___hipGetPCH(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetFlags
			case HIP_API_ID_hipStreamGetFlags : {
				GET_PTRS_VALUE_hipStreamGetFlags(args);
				return;
			}
			#endif
			#if HAVE_hipMemGetAccess
			case HIP_API_ID_hipMemGetAccess : {
				GET_PTRS_VALUE_hipMemGetAccess(args);
				return;
			}
			#endif
			#if HAVE_hipGetSymbolSize
			case HIP_API_ID_hipGetSymbolSize : {
				GET_PTRS_VALUE_hipGetSymbolSize(args);
				return;
			}
			#endif
			#if HAVE_hipMipmappedArrayGetLevel
			case HIP_API_ID_hipMipmappedArrayGetLevel : {
				GET_PTRS_VALUE_hipMipmappedArrayGetLevel(args);
				return;
			}
			#endif
			#if HAVE_hipExternalMemoryGetMappedMipmappedArray
			case HIP_API_ID_hipExternalMemoryGetMappedMipmappedArray : {
				GET_PTRS_VALUE_hipExternalMemoryGetMappedMipmappedArray(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExecMemcpyNodeSetParams
			case HIP_API_ID_hipGraphExecMemcpyNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExecMemcpyNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipUserObjectCreate
			case HIP_API_ID_hipUserObjectCreate : {
				GET_PTRS_VALUE_hipUserObjectCreate(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetCaptureInfo_v2
			case HIP_API_ID_hipStreamGetCaptureInfo_v2 : {
				GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetArray
			case HIP_API_ID_hipTexRefGetArray : {
				GET_PTRS_VALUE_hipTexRefGetArray(args);
				return;
			}
			#endif
			#if HAVE_hipImportExternalSemaphore
			case HIP_API_ID_hipImportExternalSemaphore : {
				GET_PTRS_VALUE_hipImportExternalSemaphore(args);
				return;
			}
			#endif
			#if HAVE_hipDeviceGetAttribute
			case HIP_API_ID_hipDeviceGetAttribute : {
				GET_PTRS_VALUE_hipDeviceGetAttribute(args);
				return;
			}
			#endif
			#if HAVE_hipCtxGetSharedMemConfig
			case HIP_API_ID_hipCtxGetSharedMemConfig : {
				GET_PTRS_VALUE_hipCtxGetSharedMemConfig(args);
				return;
			}
			#endif
			#if HAVE_hipStreamIsCapturing_spt
			case HIP_API_ID_hipStreamIsCapturing_spt : {
				GET_PTRS_VALUE_hipStreamIsCapturing_spt(args);
				return;
			}
			#endif
			#if HAVE_hipGraphKernelNodeSetParams
			case HIP_API_ID_hipGraphKernelNodeSetParams : {
				GET_PTRS_VALUE_hipGraphKernelNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipMallocHost
			case HIP_API_ID_hipMallocHost : {
				GET_PTRS_VALUE_hipMallocHost(args);
				return;
			}
			#endif
			#if HAVE_hipStreamGetCaptureInfo_v2_spt
			case HIP_API_ID_hipStreamGetCaptureInfo_v2_spt : {
				GET_PTRS_VALUE_hipStreamGetCaptureInfo_v2_spt(args);
				return;
			}
			#endif
			#if HAVE_hipGetTextureReference
			case HIP_API_ID_hipGetTextureReference : {
				GET_PTRS_VALUE_hipGetTextureReference(args);
				return;
			}
			#endif
			#if HAVE_hipGraphExecExternalSemaphoresSignalNodeSetParams
			case HIP_API_ID_hipGraphExecExternalSemaphoresSignalNodeSetParams : {
				GET_PTRS_VALUE_hipGraphExecExternalSemaphoresSignalNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddDependencies
			case HIP_API_ID_hipGraphAddDependencies : {
				GET_PTRS_VALUE_hipGraphAddDependencies(args);
				return;
			}
			#endif
			#if HAVE_hipGraphNodeGetType
			case HIP_API_ID_hipGraphNodeGetType : {
				GET_PTRS_VALUE_hipGraphNodeGetType(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetBorderColor
			case HIP_API_ID_hipTexRefSetBorderColor : {
				GET_PTRS_VALUE_hipTexRefSetBorderColor(args);
				return;
			}
			#endif
			#if HAVE_hipCtxGetDevice
			case HIP_API_ID_hipCtxGetDevice : {
				GET_PTRS_VALUE_hipCtxGetDevice(args);
				return;
			}
			#endif
			#if HAVE_hipHostGetFlags
			case HIP_API_ID_hipHostGetFlags : {
				GET_PTRS_VALUE_hipHostGetFlags(args);
				return;
			}
			#endif
			#if HAVE_hipDrvGraphAddMemsetNode
			case HIP_API_ID_hipDrvGraphAddMemsetNode : {
				GET_PTRS_VALUE_hipDrvGraphAddMemsetNode(args);
				return;
			}
			#endif
			#if HAVE_hipMemPoolCreate
			case HIP_API_ID_hipMemPoolCreate : {
				GET_PTRS_VALUE_hipMemPoolCreate(args);
				return;
			}
			#endif
			#if HAVE_hipKernelNameRef
			case HIP_API_ID_hipKernelNameRef : {
				GET_PTRS_RET_VALUE_hipKernelNameRef(args);
				return;
			}
			#endif
			#if HAVE_hipDrvGetErrorName
			case HIP_API_ID_hipDrvGetErrorName : {
				GET_PTRS_VALUE_hipDrvGetErrorName(args);
				return;
			}
			#endif
			#if HAVE_hipCreateSurfaceObject
			case HIP_API_ID_hipCreateSurfaceObject : {
				GET_PTRS_VALUE_hipCreateSurfaceObject(args);
				return;
			}
			#endif
			#if HAVE_hipGetMipmappedArrayLevel
			case HIP_API_ID_hipGetMipmappedArrayLevel : {
				GET_PTRS_VALUE_hipGetMipmappedArrayLevel(args);
				return;
			}
			#endif
			#if HAVE_hipArray3DCreate
			case HIP_API_ID_hipArray3DCreate : {
				GET_PTRS_VALUE_hipArray3DCreate(args);
				return;
			}
			#endif
			#if HAVE_hipIpcOpenMemHandle
			case HIP_API_ID_hipIpcOpenMemHandle : {
				GET_PTRS_VALUE_hipIpcOpenMemHandle(args);
				return;
			}
			#endif
			#if HAVE_hipFuncGetAttribute
			case HIP_API_ID_hipFuncGetAttribute : {
				GET_PTRS_VALUE_hipFuncGetAttribute(args);
				return;
			}
			#endif
			#if HAVE_hipBindTextureToMipmappedArray
			case HIP_API_ID_hipBindTextureToMipmappedArray : {
				GET_PTRS_VALUE_hipBindTextureToMipmappedArray(args);
				return;
			}
			#endif
			#if HAVE_hipGraphicsMapResources
			case HIP_API_ID_hipGraphicsMapResources : {
				GET_PTRS_VALUE_hipGraphicsMapResources(args);
				return;
			}
			#endif
			#if HAVE_hipArrayCreate
			case HIP_API_ID_hipArrayCreate : {
				GET_PTRS_VALUE_hipArrayCreate(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetMaxAnisotropy
			case HIP_API_ID_hipTexRefSetMaxAnisotropy : {
				GET_PTRS_VALUE_hipTexRefSetMaxAnisotropy(args);
				return;
			}
			#endif
			#if HAVE_hipGraphKernelNodeGetAttribute
			case HIP_API_ID_hipGraphKernelNodeGetAttribute : {
				GET_PTRS_VALUE_hipGraphKernelNodeGetAttribute(args);
				return;
			}
			#endif
			#if HAVE_hipExtLaunchKernel
			case HIP_API_ID_hipExtLaunchKernel : {
				GET_PTRS_VALUE_hipExtLaunchKernel(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetMipmapFilterMode
			case HIP_API_ID_hipTexRefSetMipmapFilterMode : {
				GET_PTRS_VALUE_hipTexRefSetMipmapFilterMode(args);
				return;
			}
			#endif
			#if HAVE_hipMemImportFromShareableHandle
			case HIP_API_ID_hipMemImportFromShareableHandle : {
				GET_PTRS_VALUE_hipMemImportFromShareableHandle(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetFormat
			case HIP_API_ID_hipTexRefSetFormat : {
				GET_PTRS_VALUE_hipTexRefSetFormat(args);
				return;
			}
			#endif
			#if HAVE_hipMemcpy3DAsync
			case HIP_API_ID_hipMemcpy3DAsync : {
				GET_PTRS_VALUE_hipMemcpy3DAsync(args);
				return;
			}
			#endif
			#if HAVE_hipGetTextureObjectResourceViewDesc
			case HIP_API_ID_hipGetTextureObjectResourceViewDesc : {
				GET_PTRS_VALUE_hipGetTextureObjectResourceViewDesc(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetFilterMode
			case HIP_API_ID_hipTexRefSetFilterMode : {
				GET_PTRS_VALUE_hipTexRefSetFilterMode(args);
				return;
			}
			#endif
			#if HAVE_hipDriverGetVersion
			case HIP_API_ID_hipDriverGetVersion : {
				GET_PTRS_VALUE_hipDriverGetVersion(args);
				return;
			}
			#endif
			#if HAVE_hipMallocMipmappedArray
			case HIP_API_ID_hipMallocMipmappedArray : {
				GET_PTRS_VALUE_hipMallocMipmappedArray(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetFlags
			case HIP_API_ID_hipTexRefSetFlags : {
				GET_PTRS_VALUE_hipTexRefSetFlags(args);
				return;
			}
			#endif
			#if HAVE_hipMemGetAddressRange
			case HIP_API_ID_hipMemGetAddressRange : {
				GET_PTRS_VALUE_hipMemGetAddressRange(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetMipmapLevelClamp
			case HIP_API_ID_hipTexRefSetMipmapLevelClamp : {
				GET_PTRS_VALUE_hipTexRefSetMipmapLevelClamp(args);
				return;
			}
			#endif
			#if HAVE_hipGraphMemcpyNodeSetParams
			case HIP_API_ID_hipGraphMemcpyNodeSetParams : {
				GET_PTRS_VALUE_hipGraphMemcpyNodeSetParams(args);
				return;
			}
			#endif
			#if HAVE_hipGraphGetEdges
			case HIP_API_ID_hipGraphGetEdges : {
				GET_PTRS_VALUE_hipGraphGetEdges(args);
				return;
			}
			#endif
			#if HAVE_hipExtMallocWithFlags
			case HIP_API_ID_hipExtMallocWithFlags : {
				GET_PTRS_VALUE_hipExtMallocWithFlags(args);
				return;
			}
			#endif
			#if HAVE_hipChooseDeviceR0600
			case HIP_API_ID_hipChooseDeviceR0600 : {
				GET_PTRS_VALUE_hipChooseDeviceR0600(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefSetMipmappedArray
			case HIP_API_ID_hipTexRefSetMipmappedArray : {
				GET_PTRS_VALUE_hipTexRefSetMipmappedArray(args);
				return;
			}
			#endif
			#if HAVE_hipTexRefGetMipmapLevelClamp
			case HIP_API_ID_hipTexRefGetMipmapLevelClamp : {
				GET_PTRS_VALUE_hipTexRefGetMipmapLevelClamp(args);
				return;
			}
			#endif
            default : break;
        }
    } else {
        switch(id) {
			#if HAVE_hipFreeMipmappedArray
			case HIP_API_ID_hipFreeMipmappedArray : {
				GET_PTRS_VALUE_hipFreeMipmappedArray(args);
				return;
			}
			#endif
			#if HAVE_hipGraphAddMemFreeNode
			case HIP_API_ID_hipGraphAddMemFreeNode : {
				GET_PTRS_VALUE_hipGraphAddMemFreeNode(args);
				return;
			}
			#endif
			#if HAVE_hipMipmappedArrayDestroy
			case HIP_API_ID_hipMipmappedArrayDestroy : {
				GET_PTRS_VALUE_hipMipmappedArrayDestroy(args);
				return;
			}
			#endif
            default : break;
        }
    }
}
#endif // HIP_API_HELPER_H