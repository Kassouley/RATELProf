/**
 * @file mpi_api_helper.h
 * @brief Helper functions for managing MPI API calls in the profiling framework.
 *
 * This file contains various utility functions used to handle MPI API calls 
 * within the profiling system, including retrieving argument values and 
 * managing function identifiers.
 * 
 * @note THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 * 
 */

#ifndef MPI_API_HELPER_H
#define MPI_API_HELPER_H

#include <string.h>
#include <stdbool.h>
#include "domains/fun_proto/mpi_profiled_functions.h"
#include "mpi.h" 

#define MPI_STRING_SIZE_MAX 128

#ifdef ADD_API_PREFIX
#undef ADD_API_PREFIX
#endif
#define ADD_API_PREFIX(str) MPI_API_##str


#define FOR_EACH_MPI_FUNC(macro) \
IF_ENABLED(MPI_Init, macro)                        \
IF_ENABLED(MPI_Init_thread, macro)                 \
IF_ENABLED(MPI_Finalize, macro)                    \
IF_ENABLED(MPI_Initialized, macro)                 \
IF_ENABLED(MPI_Query_thread, macro)                \
IF_ENABLED(MPI_Abort, macro)                       \
IF_ENABLED(MPI_Send, macro)                        \
IF_ENABLED(MPI_Recv, macro)                        \
IF_ENABLED(MPI_Sendrecv, macro)                    \
IF_ENABLED(MPI_Sendrecv_replace, macro)            \
IF_ENABLED(MPI_Isend, macro)                       \
IF_ENABLED(MPI_Irecv, macro)                       \
IF_ENABLED(MPI_Wait, macro)                        \
IF_ENABLED(MPI_Waitall, macro)                     \
IF_ENABLED(MPI_Waitany, macro)                     \
IF_ENABLED(MPI_Waitsome, macro)                    \
IF_ENABLED(MPI_Test, macro)                        \
IF_ENABLED(MPI_Testall, macro)                     \
IF_ENABLED(MPI_Testany, macro)                     \
IF_ENABLED(MPI_Testsome, macro)                    \
IF_ENABLED(MPI_Request_free, macro)                \
IF_ENABLED(MPI_Cancel, macro)                      \
IF_ENABLED(MPI_Type_contiguous, macro)             \
IF_ENABLED(MPI_Type_vector, macro)                 \
IF_ENABLED(MPI_Type_indexed, macro)                \
IF_ENABLED(MPI_Type_create_indexed_block, macro)   \
IF_ENABLED(MPI_Type_create_struct, macro)          \
IF_ENABLED(MPI_Type_create_resized, macro)         \
IF_ENABLED(MPI_Type_commit, macro)                 \
IF_ENABLED(MPI_Type_free, macro)                   \
IF_ENABLED(MPI_Get_count, macro)                   \
IF_ENABLED(MPI_Get_elements, macro)                \
IF_ENABLED(MPI_Pack, macro)                        \
IF_ENABLED(MPI_Unpack, macro)                      \
IF_ENABLED(MPI_Pack_size, macro)                   \
IF_ENABLED(MPI_Barrier, macro)                     \
IF_ENABLED(MPI_Bcast, macro)                       \
IF_ENABLED(MPI_Gather, macro)                      \
IF_ENABLED(MPI_Gatherv, macro)                     \
IF_ENABLED(MPI_Scatter, macro)                     \
IF_ENABLED(MPI_Scatterv, macro)                    \
IF_ENABLED(MPI_Allgather, macro)                   \
IF_ENABLED(MPI_Allgatherv, macro)                  \
IF_ENABLED(MPI_Alltoall, macro)                    \
IF_ENABLED(MPI_Alltoallv, macro)                   \
IF_ENABLED(MPI_Reduce, macro)                      \
IF_ENABLED(MPI_Allreduce, macro)                   \
IF_ENABLED(MPI_Reduce_scatter, macro)              \
IF_ENABLED(MPI_Reduce_scatter_block, macro)        \
IF_ENABLED(MPI_Scan, macro)                        \
IF_ENABLED(MPI_Exscan, macro)                      \
IF_ENABLED(MPI_Comm_size, macro)                   \
IF_ENABLED(MPI_Comm_rank, macro)                   \
IF_ENABLED(MPI_Comm_group, macro)                  \
IF_ENABLED(MPI_Comm_dup, macro)                    \
IF_ENABLED(MPI_Comm_create, macro)                 \
IF_ENABLED(MPI_Comm_split, macro)                  \
IF_ENABLED(MPI_Comm_free, macro)                   \
IF_ENABLED(MPI_Comm_test_inter, macro)             \
IF_ENABLED(MPI_Comm_remote_size, macro)            \
IF_ENABLED(MPI_Comm_remote_group, macro)           \
IF_ENABLED(MPI_Comm_compare, macro)                \
IF_ENABLED(MPI_Comm_create_keyval, macro)          \
IF_ENABLED(MPI_Comm_set_attr, macro)               \
IF_ENABLED(MPI_Comm_get_attr, macro)               \
IF_ENABLED(MPI_Comm_delete_attr, macro)            \
IF_ENABLED(MPI_Comm_get_name, macro)               \
IF_ENABLED(MPI_Comm_set_name, macro)               \
IF_ENABLED(MPI_Group_size, macro)                  \
IF_ENABLED(MPI_Group_rank, macro)                  \
IF_ENABLED(MPI_Group_translate_ranks, macro)       \
IF_ENABLED(MPI_Group_compare, macro)               \
IF_ENABLED(MPI_Group_union, macro)                 \
IF_ENABLED(MPI_Group_intersection, macro)          \
IF_ENABLED(MPI_Group_difference, macro)            \
IF_ENABLED(MPI_Group_incl, macro)                  \
IF_ENABLED(MPI_Group_excl, macro)                  \
IF_ENABLED(MPI_Group_range_incl, macro)            \
IF_ENABLED(MPI_Group_range_excl, macro)            \
IF_ENABLED(MPI_Group_free, macro)                  \
IF_ENABLED(MPI_Op_create, macro)                   \
IF_ENABLED(MPI_Op_free, macro)                     \
IF_ENABLED(MPI_Wtime, macro)                       \
IF_ENABLED(MPI_Wtick, macro)                       \
IF_ENABLED(MPI_Get_address, macro)                 \
IF_ENABLED(MPI_Get_elements_x, macro)              \
IF_ENABLED(MPI_Cart_shift, macro)                  \
IF_ENABLED(MPI_Win_flush_local_all, macro)         \
IF_ENABLED(MPI_File_get_byte_offset, macro)        \
IF_ENABLED(MPI_Win_get_info, macro)                \
IF_ENABLED(MPI_Rput, macro)                        \
IF_ENABLED(MPI_Dist_graph_neighbors_count, macro)  \
IF_ENABLED(MPI_Ireduce, macro)                     \
IF_ENABLED(MPI_Psend_init, macro)                  \
IF_ENABLED(MPI_Reduce_init, macro)                 \
IF_ENABLED(MPI_Win_wait, macro)                    \
IF_ENABLED(MPI_Rsend_init, macro)                  \
IF_ENABLED(MPI_File_write_at_all, macro)           \
IF_ENABLED(MPI_File_write_ordered_end, macro)      \
IF_ENABLED(MPI_Errhandler_free, macro)             \
IF_ENABLED(MPI_Win_shared_query, macro)            \
IF_ENABLED(MPI_Win_lock, macro)                    \
IF_ENABLED(MPI_Get_accumulate, macro)              \
IF_ENABLED(MPI_Type_get_name, macro)               \
IF_ENABLED(MPI_File_get_atomicity, macro)          \
IF_ENABLED(MPI_Session_set_info, macro)            \
IF_ENABLED(MPI_Group_from_session_pset, macro)     \
IF_ENABLED(MPI_Comm_idup, macro)                   \
IF_ENABLED(MPI_Win_get_name, macro)                \
IF_ENABLED(MPI_Allgatherv_init, macro)             \
IF_ENABLED(MPI_Comm_dup_with_info, macro)          \
IF_ENABLED(MPI_Session_get_num_psets, macro)       \
IF_ENABLED(MPI_Igather, macro)                     \
IF_ENABLED(MPI_File_read_at, macro)                \
IF_ENABLED(MPI_Type_create_hvector, macro)         \
IF_ENABLED(MPI_File_write_at_all_begin, macro)     \
IF_ENABLED(MPI_Grequest_start, macro)              \
IF_ENABLED(MPI_Bsend_init, macro)                  \
IF_ENABLED(MPI_File_set_size, macro)               \
IF_ENABLED(MPI_Type_set_name, macro)               \
IF_ENABLED(MPI_Comm_split_type, macro)             \
IF_ENABLED(MPI_File_read_at_all_end, macro)        \
IF_ENABLED(MPI_File_write_all, macro)              \
IF_ENABLED(MPI_Improbe, macro)                     \
IF_ENABLED(MPI_Comm_get_info, macro)               \
IF_ENABLED(MPI_File_read_all_end, macro)           \
IF_ENABLED(MPI_Win_unlock_all, macro)              \
IF_ENABLED(MPI_Type_create_f90_integer, macro)     \
IF_ENABLED(MPI_Exscan_init, macro)                 \
IF_ENABLED(MPI_Ibsend, macro)                      \
IF_ENABLED(MPI_Win_flush_local, macro)             \
IF_ENABLED(MPI_Ialltoallw, macro)                  \
IF_ENABLED(MPI_Comm_create_from_group, macro)      \
IF_ENABLED(MPI_Type_get_contents, macro)           \
IF_ENABLED(MPI_File_iwrite_at, macro)              \
IF_ENABLED(MPI_Status_set_elements, macro)         \
IF_ENABLED(MPI_File_read_ordered, macro)           \
IF_ENABLED(MPI_Is_thread_main, macro)              \
IF_ENABLED(MPI_Allreduce_init, macro)              \
IF_ENABLED(MPI_Info_get_valuelen, macro)           \
IF_ENABLED(MPI_Comm_create_errhandler, macro)      \
IF_ENABLED(MPI_Info_free, macro)                   \
IF_ENABLED(MPI_Info_get_nthkey, macro)             \
IF_ENABLED(MPI_Ssend_init, macro)                  \
IF_ENABLED(MPI_Comm_set_info, macro)               \
IF_ENABLED(MPI_Cart_create, macro)                 \
IF_ENABLED(MPI_File_write_all_begin, macro)        \
IF_ENABLED(MPI_Scan_init, macro)                   \
IF_ENABLED(MPI_Irsend, macro)                      \
IF_ENABLED(MPI_Neighbor_alltoallv, macro)          \
IF_ENABLED(MPI_Pready_list, macro)                 \
IF_ENABLED(MPI_Alltoallw_init, macro)              \
IF_ENABLED(MPI_File_read_ordered_begin, macro)     \
IF_ENABLED(MPI_Dist_graph_create_adjacent, macro)  \
IF_ENABLED(MPI_Reduce_scatter_init, macro)         \
IF_ENABLED(MPI_Comm_get_parent, macro)             \
IF_ENABLED(MPI_Keyval_free, macro)                 \
IF_ENABLED(MPI_Info_set, macro)                    \
IF_ENABLED(MPI_Keyval_create, macro)               \
IF_ENABLED(MPI_Comm_connect, macro)                \
IF_ENABLED(MPI_Ssend, macro)                       \
IF_ENABLED(MPI_Scatterv_init, macro)               \
IF_ENABLED(MPI_File_write_at_all_end, macro)       \
IF_ENABLED(MPI_File_write_all_end, macro)          \
IF_ENABLED(MPI_Buffer_detach, macro)               \
IF_ENABLED(MPI_Startall, macro)                    \
IF_ENABLED(MPI_Neighbor_alltoall, macro)           \
IF_ENABLED(MPI_Put, macro)                         \
IF_ENABLED(MPI_File_read_ordered_end, macro)       \
IF_ENABLED(MPI_Win_call_errhandler, macro)         \
IF_ENABLED(MPI_File_write_at, macro)               \
IF_ENABLED(MPI_Session_get_pset_info, macro)       \
IF_ENABLED(MPI_Topo_test, macro)                   \
IF_ENABLED(MPI_Comm_disconnect, macro)             \
IF_ENABLED(MPI_Add_error_class, macro)             \
IF_ENABLED(MPI_Ireduce_scatter, macro)             \
IF_ENABLED(MPI_Cart_map, macro)                    \
IF_ENABLED(MPI_Intercomm_merge, macro)             \
IF_ENABLED(MPI_Type_create_hindexed, macro)        \
IF_ENABLED(MPI_Info_get_nkeys, macro)              \
IF_ENABLED(MPI_File_read, macro)                   \
IF_ENABLED(MPI_Ineighbor_allgatherv, macro)        \
IF_ENABLED(MPI_Attr_put, macro)                    \
IF_ENABLED(MPI_File_write_ordered_begin, macro)    \
IF_ENABLED(MPI_Status_set_elements_x, macro)       \
IF_ENABLED(MPI_Compare_and_swap, macro)            \
IF_ENABLED(MPI_Type_create_f90_real, macro)        \
IF_ENABLED(MPI_Type_delete_attr, macro)            \
IF_ENABLED(MPI_Probe, macro)                       \
IF_ENABLED(MPI_File_close, macro)                  \
IF_ENABLED(MPI_Request_get_status, macro)          \
IF_ENABLED(MPI_Session_call_errhandler, macro)     \
IF_ENABLED(MPI_Rget_accumulate, macro)             \
IF_ENABLED(MPI_File_iread_all, macro)              \
IF_ENABLED(MPI_Isendrecv, macro)                   \
IF_ENABLED(MPI_Pack_external, macro)               \
IF_ENABLED(MPI_Pready_range, macro)                \
IF_ENABLED(MPI_Type_get_envelope, macro)           \
IF_ENABLED(MPI_Win_create, macro)                  \
IF_ENABLED(MPI_Isendrecv_replace, macro)           \
IF_ENABLED(MPI_Win_set_errhandler, macro)          \
IF_ENABLED(MPI_Fetch_and_op, macro)                \
IF_ENABLED(MPI_Cartdim_get, macro)                 \
IF_ENABLED(MPI_Dist_graph_neighbors, macro)        \
IF_ENABLED(MPI_File_seek, macro)                   \
IF_ENABLED(MPI_Get, macro)                         \
IF_ENABLED(MPI_Pack_external_size, macro)          \
IF_ENABLED(MPI_Win_flush_all, macro)               \
IF_ENABLED(MPI_Rsend, macro)                       \
IF_ENABLED(MPI_Win_free, macro)                    \
IF_ENABLED(MPI_Type_create_f90_complex, macro)     \
IF_ENABLED(MPI_Neighbor_alltoallw_init, macro)     \
IF_ENABLED(MPI_Rget, macro)                        \
IF_ENABLED(MPI_Win_create_keyval, macro)           \
IF_ENABLED(MPI_Op_commutative, macro)              \
IF_ENABLED(MPI_Neighbor_allgather, macro)          \
IF_ENABLED(MPI_Comm_call_errhandler, macro)        \
IF_ENABLED(MPI_Scatter_init, macro)                \
IF_ENABLED(MPI_Info_get_string, macro)             \
IF_ENABLED(MPI_Mrecv, macro)                       \
IF_ENABLED(MPI_Open_port, macro)                   \
IF_ENABLED(MPI_Cart_get, macro)                    \
IF_ENABLED(MPI_Lookup_name, macro)                 \
IF_ENABLED(MPI_Type_get_extent, macro)             \
IF_ENABLED(MPI_Comm_spawn, macro)                  \
IF_ENABLED(MPI_Unpublish_name, macro)              \
IF_ENABLED(MPI_Grequest_complete, macro)           \
IF_ENABLED(MPI_File_get_group, macro)              \
IF_ENABLED(MPI_File_iread_at_all, macro)           \
IF_ENABLED(MPI_Graphdims_get, macro)               \
IF_ENABLED(MPI_File_iread_shared, macro)           \
IF_ENABLED(MPI_Comm_idup_with_info, macro)         \
IF_ENABLED(MPI_Get_version, macro)                 \
IF_ENABLED(MPI_Win_lock_all, macro)                \
IF_ENABLED(MPI_Intercomm_create_from_groups, macro) \
IF_ENABLED(MPI_Neighbor_alltoallv_init, macro)     \
IF_ENABLED(MPI_Type_create_darray, macro)          \
IF_ENABLED(MPI_File_get_position_shared, macro)    \
IF_ENABLED(MPI_Win_get_group, macro)               \
IF_ENABLED(MPI_Error_class, macro)                 \
IF_ENABLED(MPI_Win_get_attr, macro)                \
IF_ENABLED(MPI_Reduce_local, macro)                \
IF_ENABLED(MPI_Ireduce_scatter_block, macro)       \
IF_ENABLED(MPI_Status_set_cancelled, macro)        \
IF_ENABLED(MPI_Win_test, macro)                    \
IF_ENABLED(MPI_Test_cancelled, macro)              \
IF_ENABLED(MPI_File_seek_shared, macro)            \
IF_ENABLED(MPI_Error_string, macro)                \
IF_ENABLED(MPI_Graph_neighbors_count, macro)       \
IF_ENABLED(MPI_Session_create_errhandler, macro)   \
IF_ENABLED(MPI_Win_unlock, macro)                  \
IF_ENABLED(MPI_Iscatter, macro)                    \
IF_ENABLED(MPI_File_read_all, macro)               \
IF_ENABLED(MPI_File_set_errhandler, macro)         \
IF_ENABLED(MPI_Type_set_attr, macro)               \
IF_ENABLED(MPI_File_get_errhandler, macro)         \
IF_ENABLED(MPI_Session_finalize, macro)            \
IF_ENABLED(MPI_Comm_free_keyval, macro)            \
IF_ENABLED(MPI_File_iwrite_all, macro)             \
IF_ENABLED(MPI_Free_mem, macro)                    \
IF_ENABLED(MPI_Win_set_info, macro)                \
IF_ENABLED(MPI_Alltoallv_init, macro)              \
IF_ENABLED(MPI_Win_attach, macro)                  \
IF_ENABLED(MPI_File_get_position, macro)           \
IF_ENABLED(MPI_Accumulate, macro)                  \
IF_ENABLED(MPI_File_write_shared, macro)           \
IF_ENABLED(MPI_Win_create_dynamic, macro)          \
IF_ENABLED(MPI_Neighbor_alltoallw, macro)          \
IF_ENABLED(MPI_Iexscan, macro)                     \
IF_ENABLED(MPI_Graph_map, macro)                   \
IF_ENABLED(MPI_Recv_init, macro)                   \
IF_ENABLED(MPI_Type_create_subarray, macro)        \
IF_ENABLED(MPI_Comm_create_group, macro)           \
IF_ENABLED(MPI_Allgather_init, macro)              \
IF_ENABLED(MPI_Reduce_scatter_block_init, macro)   \
IF_ENABLED(MPI_Type_match_size, macro)             \
IF_ENABLED(MPI_Type_get_true_extent, macro)        \
IF_ENABLED(MPI_Alltoall_init, macro)               \
IF_ENABLED(MPI_Send_init, macro)                   \
IF_ENABLED(MPI_Neighbor_allgather_init, macro)     \
IF_ENABLED(MPI_Ibcast, macro)                      \
IF_ENABLED(MPI_File_iread, macro)                  \
IF_ENABLED(MPI_Neighbor_alltoall_init, macro)      \
IF_ENABLED(MPI_Cart_rank, macro)                   \
IF_ENABLED(MPI_Publish_name, macro)                \
IF_ENABLED(MPI_Win_set_attr, macro)                \
IF_ENABLED(MPI_Win_sync, macro)                    \
IF_ENABLED(MPI_Type_free_keyval, macro)            \
IF_ENABLED(MPI_File_write, macro)                  \
IF_ENABLED(MPI_Register_datarep, macro)            \
IF_ENABLED(MPI_Ineighbor_alltoall, macro)          \
IF_ENABLED(MPI_File_preallocate, macro)            \
IF_ENABLED(MPI_Iallgatherv, macro)                 \
IF_ENABLED(MPI_Neighbor_allgatherv_init, macro)    \
IF_ENABLED(MPI_Iprobe, macro)                      \
IF_ENABLED(MPI_Type_get_true_extent_x, macro)      \
IF_ENABLED(MPI_Win_complete, macro)                \
IF_ENABLED(MPI_File_set_atomicity, macro)          \
IF_ENABLED(MPI_Unpack_external, macro)             \
IF_ENABLED(MPI_Mprobe, macro)                      \
IF_ENABLED(MPI_Add_error_code, macro)              \
IF_ENABLED(MPI_Win_delete_attr, macro)             \
IF_ENABLED(MPI_File_read_at_all, macro)            \
IF_ENABLED(MPI_Pready, macro)                      \
IF_ENABLED(MPI_Iscatterv, macro)                   \
IF_ENABLED(MPI_Win_detach, macro)                  \
IF_ENABLED(MPI_File_call_errhandler, macro)        \
IF_ENABLED(MPI_Iallreduce, macro)                  \
IF_ENABLED(MPI_Get_processor_name, macro)          \
IF_ENABLED(MPI_Start, macro)                       \
IF_ENABLED(MPI_File_get_type_extent, macro)        \
IF_ENABLED(MPI_File_read_shared, macro)            \
IF_ENABLED(MPI_File_open, macro)                   \
IF_ENABLED(MPI_File_get_amode, macro)              \
IF_ENABLED(MPI_Type_create_hindexed_block, macro)  \
IF_ENABLED(MPI_Cart_coords, macro)                 \
IF_ENABLED(MPI_Issend, macro)                      \
IF_ENABLED(MPI_Graph_get, macro)                   \
IF_ENABLED(MPI_Win_free_keyval, macro)             \
IF_ENABLED(MPI_Ineighbor_alltoallw, macro)         \
IF_ENABLED(MPI_File_set_info, macro)               \
IF_ENABLED(MPI_File_iread_at, macro)               \
IF_ENABLED(MPI_Attr_delete, macro)                 \
IF_ENABLED(MPI_Session_get_info, macro)            \
IF_ENABLED(MPI_Session_get_nth_pset, macro)        \
IF_ENABLED(MPI_Type_create_keyval, macro)          \
IF_ENABLED(MPI_Attr_get, macro)                    \
IF_ENABLED(MPI_Add_error_string, macro)            \
IF_ENABLED(MPI_Ineighbor_alltoallv, macro)         \
IF_ENABLED(MPI_Imrecv, macro)                      \
IF_ENABLED(MPI_Alltoallw, macro)                   \
IF_ENABLED(MPI_Bcast_init, macro)                  \
IF_ENABLED(MPI_Ibarrier, macro)                    \
IF_ENABLED(MPI_File_iwrite_at_all, macro)          \
IF_ENABLED(MPI_File_get_size, macro)               \
IF_ENABLED(MPI_Barrier_init, macro)                \
IF_ENABLED(MPI_File_get_view, macro)               \
IF_ENABLED(MPI_Win_allocate_shared, macro)         \
IF_ENABLED(MPI_Close_port, macro)                  \
IF_ENABLED(MPI_Finalized, macro)                   \
IF_ENABLED(MPI_Info_dup, macro)                    \
IF_ENABLED(MPI_Info_get, macro)                    \
IF_ENABLED(MPI_Get_library_version, macro)         \
IF_ENABLED(MPI_Info_create, macro)                 \
IF_ENABLED(MPI_Win_fence, macro)                   \
IF_ENABLED(MPI_Iallgather, macro)                  \
IF_ENABLED(MPI_Comm_spawn_multiple, macro)         \
IF_ENABLED(MPI_Precv_init, macro)                  \
IF_ENABLED(MPI_Comm_set_errhandler, macro)         \
IF_ENABLED(MPI_File_set_view, macro)               \
IF_ENABLED(MPI_Bsend, macro)                       \
IF_ENABLED(MPI_Type_size, macro)                   \
IF_ENABLED(MPI_Type_get_attr, macro)               \
IF_ENABLED(MPI_File_write_ordered, macro)          \
IF_ENABLED(MPI_File_get_info, macro)               \
IF_ENABLED(MPI_Graph_neighbors, macro)             \
IF_ENABLED(MPI_Igatherv, macro)                    \
IF_ENABLED(MPI_Info_delete, macro)                 \
IF_ENABLED(MPI_Alloc_mem, macro)                   \
IF_ENABLED(MPI_Comm_get_errhandler, macro)         \
IF_ENABLED(MPI_Session_init, macro)                \
IF_ENABLED(MPI_Win_post, macro)                    \
IF_ENABLED(MPI_Intercomm_create, macro)            \
IF_ENABLED(MPI_File_read_all_begin, macro)         \
IF_ENABLED(MPI_Ialltoallv, macro)                  \
IF_ENABLED(MPI_File_delete, macro)                 \
IF_ENABLED(MPI_Dims_create, macro)                 \
IF_ENABLED(MPI_Cart_sub, macro)                    \
IF_ENABLED(MPI_Win_allocate, macro)                \
IF_ENABLED(MPI_Session_get_errhandler, macro)      \
IF_ENABLED(MPI_Parrived, macro)                    \
IF_ENABLED(MPI_Info_create_env, macro)             \
IF_ENABLED(MPI_File_create_errhandler, macro)      \
IF_ENABLED(MPI_Ialltoall, macro)                   \
IF_ENABLED(MPI_Raccumulate, macro)                 \
IF_ENABLED(MPI_Type_size_x, macro)                 \
IF_ENABLED(MPI_Type_get_extent_x, macro)           \
IF_ENABLED(MPI_File_read_at_all_begin, macro)      \
IF_ENABLED(MPI_Dist_graph_create, macro)           \
IF_ENABLED(MPI_Comm_join, macro)                   \
IF_ENABLED(MPI_Gatherv_init, macro)                \
IF_ENABLED(MPI_File_sync, macro)                   \
IF_ENABLED(MPI_Comm_accept, macro)                 \
IF_ENABLED(MPI_Ineighbor_allgather, macro)         \
IF_ENABLED(MPI_Type_dup, macro)                    \
IF_ENABLED(MPI_File_iwrite_shared, macro)          \
IF_ENABLED(MPI_Win_get_errhandler, macro)          \
IF_ENABLED(MPI_Iscan, macro)                       \
IF_ENABLED(MPI_Win_flush, macro)                   \
IF_ENABLED(MPI_Graph_create, macro)                \
IF_ENABLED(MPI_Win_set_name, macro)                \
IF_ENABLED(MPI_Win_create_errhandler, macro)       \
IF_ENABLED(MPI_Gather_init, macro)                 \
IF_ENABLED(MPI_Neighbor_allgatherv, macro)         \
IF_ENABLED(MPI_File_iwrite, macro)                 \
IF_ENABLED(MPI_Buffer_attach, macro)               \
IF_ENABLED(MPI_Session_set_errhandler, macro)      \
IF_ENABLED(MPI_Win_start, macro)                   \
IF_ENABLED(MPI_Info_f2c, macro)                    \
IF_ENABLED(MPI_Info_c2f, macro)                    \
IF_ENABLED(MPI_Op_c2f, macro)                      \
IF_ENABLED(MPI_Win_c2f, macro)                     \
IF_ENABLED(MPI_Group_f2c, macro)                   \
IF_ENABLED(MPI_File_c2f, macro)                    \
IF_ENABLED(MPI_Request_c2f, macro)                 \
IF_ENABLED(MPI_File_f2c, macro)                    \
IF_ENABLED(MPI_Session_f2c, macro)                 \
IF_ENABLED(MPI_Status_f082f, macro)                \
IF_ENABLED(MPI_Status_c2f08, macro)                \
IF_ENABLED(MPI_Type_f2c, macro)                    \
IF_ENABLED(MPI_Message_c2f, macro)                 \
IF_ENABLED(MPI_Session_c2f, macro)                 \
IF_ENABLED(MPI_Message_f2c, macro)                 \
IF_ENABLED(MPI_Errhandler_f2c, macro)              \
IF_ENABLED(MPI_Request_f2c, macro)                 \
IF_ENABLED(MPI_Status_c2f, macro)                  \
IF_ENABLED(MPI_Comm_f2c, macro)                    \
IF_ENABLED(MPI_Comm_c2f, macro)                    \
IF_ENABLED(MPI_Group_c2f, macro)                   \
IF_ENABLED(MPI_Win_f2c, macro)                     \
IF_ENABLED(MPI_Status_f082c, macro)                \
IF_ENABLED(MPI_Errhandler_c2f, macro)              \
IF_ENABLED(MPI_Status_f2f08, macro)                \
IF_ENABLED(MPI_Type_c2f, macro)                    \
IF_ENABLED(MPI_Status_f2c, macro)                  \
IF_ENABLED(MPI_Op_f2c, macro)                      \


/**
 * @enum mpi_api_id_t 
 * @brief Enumeration of MPI API function identifiers.
 *
 * This enumeration defines unique identifiers for various MPI API functions. 
 * These identifiers are used for profiling, tracking, and identifying specific MPI function calls.
 */
typedef enum mpi_api_id_e {
    FOR_EACH_MPI_FUNC(GET_FUNC_API_ID)
    MPI_API_ID_NB_FUNCTION,
    MPI_API_ID_UNKNOWN,
} mpi_api_id_t;


/**
 * @brief Retrieves the function name corresponding to a given MPI API function ID.
 *
 * This function maps a MPI API function identifier (`mpi_api_id_t`) to its corresponding function name
 * as a string. If the provided function ID does not match any known functions, the function returns `NULL`.
 *
 * @param id The MPI API function identifier of type `mpi_api_id_t`.
 * @return A constant string representing the function name, or `NULL` if the ID is unknown.
 */
static inline const char* get_mpi_funame_by_id(mpi_api_id_t id) 
{
    switch(id) {
        FOR_EACH_MPI_FUNC(GET_FUNAME_BY_ID_OF)
        default : return NULL;
    }
    return NULL;
}


/**
 * @brief Retrieves the function pointer corresponding to a given MPI API function ID.
 *
 * This function maps a MPI API function ID (`mpi_api_id_t`) to its corresponding function address.
 * If the provided function ID does not match any known functions, the function returns `NULL`.
 *
 * @param id The function ID of type `mpi_api_id_t`.
 * @return A pointer to the corresponding MPI API function, or `NULL` if not found.
 */
static inline void* get_mpi_funaddr_by_id(mpi_api_id_t id) 
{
    switch(id) {
        FOR_EACH_MPI_FUNC(GET_FUNADDR_BY_ID_OF)
        default : return NULL;
    }
    return NULL;
}


/**
 * @brief Retrieves the MPI API function ID corresponding to a given function name.
 *
 * This function maps a MPI API function name (string) to its corresponding function ID (`mpi_api_id_t`).
 * If the provided function name does not match any known functions, the function returns `MPI_API_ID_UNKNOWN`.
 *
 * @param name The function name as a null-terminated string.
 * @return The corresponding MPI API function ID of type `mpi_api_id_t`, or `MPI_API_ID_UNKNOWN` if not found.
 */
static inline mpi_api_id_t get_mpi_funid_by_name(const char* name) 
{
    if (name == NULL) return MPI_API_ID_UNKNOWN;
    FOR_EACH_MPI_FUNC(GET_FUNID_BY_NAME_OF)
    return MPI_API_ID_UNKNOWN;
}


// MPI API Args Data
/**
 * @brief Structure to hold the arguments for the `MPI_Init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Init` function call.
 *
 * @struct args_MPI_Init_t
 *
 * @note 
 *	int
 *	MPI_Init (
 *			int * argc (int *)
 *			char *** argv (char ***)
 *	)
 */
#if HAVE_MPI_Init
typedef struct {
	int * argc;
	struct {
		int val;
	} argc__ref;
	char *** argv;
	struct {
		void* ptr1;
		void* ptr2;
		char val[MPI_STRING_SIZE_MAX];
	} argv__ref;
	int retval;
} args_MPI_Init_t;

#define GET_ARGS_VALUE_MPI_Init(activity) { \
	args_MPI_Init_t* args = (args_MPI_Init_t*) activity->args; \
	args->argc = (int *) argc; \
	args->argv = (char ***) argv; \
};

#define GET_PTRS_VALUE_MPI_Init(args) { \
	args_MPI_Init_t* pargs = (args_MPI_Init_t*) args; \
	if (pargs->argc != NULL) { \
		pargs->argc__ref.val = *pargs->argc; \
	} \
	if (pargs->argv != NULL) { \
		pargs->argv__ref.ptr1 = *pargs->argv; \
		if (pargs->argv__ref.ptr1 != NULL) { \
			pargs->argv__ref.ptr2 = **pargs->argv; \
			if (pargs->argv__ref.ptr2 != NULL) { \
				strncpy(pargs->argv__ref.val, pargs->argv__ref.ptr2, MPI_STRING_SIZE_MAX-1); \
			} \
		} \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Init_thread` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Init_thread` function call.
 *
 * @struct args_MPI_Init_thread_t
 *
 * @note 
 *	int
 *	MPI_Init_thread (
 *			int * argc (int *)
 *			char *** argv (char ***)
 *			int required (int)
 *			int * provided (int *)
 *	)
 */
#if HAVE_MPI_Init_thread
typedef struct {
	int * argc;
	struct {
		int val;
	} argc__ref;
	char *** argv;
	struct {
		void* ptr1;
		void* ptr2;
		char val[MPI_STRING_SIZE_MAX];
	} argv__ref;
	int required;
	int * provided;
	struct {
		int val;
	} provided__ref;
	int retval;
} args_MPI_Init_thread_t;

#define GET_ARGS_VALUE_MPI_Init_thread(activity) { \
	args_MPI_Init_thread_t* args = (args_MPI_Init_thread_t*) activity->args; \
	args->argc = (int *) argc; \
	args->argv = (char ***) argv; \
	args->required = (int) required; \
	args->provided = (int *) provided; \
};

#define GET_PTRS_VALUE_MPI_Init_thread(args) { \
	args_MPI_Init_thread_t* pargs = (args_MPI_Init_thread_t*) args; \
	if (pargs->argc != NULL) { \
		pargs->argc__ref.val = *pargs->argc; \
	} \
	if (pargs->argv != NULL) { \
		pargs->argv__ref.ptr1 = *pargs->argv; \
		if (pargs->argv__ref.ptr1 != NULL) { \
			pargs->argv__ref.ptr2 = **pargs->argv; \
			if (pargs->argv__ref.ptr2 != NULL) { \
				strncpy(pargs->argv__ref.val, pargs->argv__ref.ptr2, MPI_STRING_SIZE_MAX-1); \
			} \
		} \
	} \
	if (pargs->provided != NULL) { \
		pargs->provided__ref.val = *pargs->provided; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Finalize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Finalize` function call.
 *
 * @struct args_MPI_Finalize_t
 *
 * @note 
 *	int
 *	MPI_Finalize (
 *	)
 */
#if HAVE_MPI_Finalize
typedef struct {
	int retval;
} args_MPI_Finalize_t;

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Initialized` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Initialized` function call.
 *
 * @struct args_MPI_Initialized_t
 *
 * @note 
 *	int
 *	MPI_Initialized (
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Initialized
typedef struct {
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Initialized_t;

#define GET_ARGS_VALUE_MPI_Initialized(activity) { \
	args_MPI_Initialized_t* args = (args_MPI_Initialized_t*) activity->args; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Initialized(args) { \
	args_MPI_Initialized_t* pargs = (args_MPI_Initialized_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Query_thread` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Query_thread` function call.
 *
 * @struct args_MPI_Query_thread_t
 *
 * @note 
 *	int
 *	MPI_Query_thread (
 *			int * provided (int *)
 *	)
 */
#if HAVE_MPI_Query_thread
typedef struct {
	int * provided;
	struct {
		int val;
	} provided__ref;
	int retval;
} args_MPI_Query_thread_t;

#define GET_ARGS_VALUE_MPI_Query_thread(activity) { \
	args_MPI_Query_thread_t* args = (args_MPI_Query_thread_t*) activity->args; \
	args->provided = (int *) provided; \
};

#define GET_PTRS_VALUE_MPI_Query_thread(args) { \
	args_MPI_Query_thread_t* pargs = (args_MPI_Query_thread_t*) args; \
	if (pargs->provided != NULL) { \
		pargs->provided__ref.val = *pargs->provided; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Abort` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Abort` function call.
 *
 * @struct args_MPI_Abort_t
 *
 * @note 
 *	int
 *	MPI_Abort (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int errorcode (int)
 *	)
 */
#if HAVE_MPI_Abort
typedef struct {
	MPI_Comm comm;
	int errorcode;
	int retval;
} args_MPI_Abort_t;

#define GET_ARGS_VALUE_MPI_Abort(activity) { \
	args_MPI_Abort_t* args = (args_MPI_Abort_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->errorcode = (int) errorcode; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Send` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Send` function call.
 *
 * @struct args_MPI_Send_t
 *
 * @note 
 *	int
 *	MPI_Send (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Send
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	int retval;
} args_MPI_Send_t;

#define GET_ARGS_VALUE_MPI_Send(activity) { \
	args_MPI_Send_t* args = (args_MPI_Send_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Recv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Recv` function call.
 *
 * @struct args_MPI_Recv_t
 *
 * @note 
 *	int
 *	MPI_Recv (
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Recv
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int source;
	int tag;
	MPI_Comm comm;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Recv_t;

#define GET_ARGS_VALUE_MPI_Recv(activity) { \
	args_MPI_Recv_t* args = (args_MPI_Recv_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Recv(args) { \
	args_MPI_Recv_t* pargs = (args_MPI_Recv_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Sendrecv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Sendrecv` function call.
 *
 * @struct args_MPI_Sendrecv_t
 *
 * @note 
 *	int
 *	MPI_Sendrecv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int sendtag (int)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int source (int)
 *			int recvtag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Sendrecv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	int dest;
	int sendtag;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int source;
	int recvtag;
	MPI_Comm comm;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Sendrecv_t;

#define GET_ARGS_VALUE_MPI_Sendrecv(activity) { \
	args_MPI_Sendrecv_t* args = (args_MPI_Sendrecv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->dest = (int) dest; \
	args->sendtag = (int) sendtag; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->source = (int) source; \
	args->recvtag = (int) recvtag; \
	args->comm = (MPI_Comm) comm; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Sendrecv(args) { \
	args_MPI_Sendrecv_t* pargs = (args_MPI_Sendrecv_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Sendrecv_replace` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Sendrecv_replace` function call.
 *
 * @struct args_MPI_Sendrecv_replace_t
 *
 * @note 
 *	int
 *	MPI_Sendrecv_replace (
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int sendtag (int)
 *			int source (int)
 *			int recvtag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Sendrecv_replace
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int sendtag;
	int source;
	int recvtag;
	MPI_Comm comm;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Sendrecv_replace_t;

#define GET_ARGS_VALUE_MPI_Sendrecv_replace(activity) { \
	args_MPI_Sendrecv_replace_t* args = (args_MPI_Sendrecv_replace_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->sendtag = (int) sendtag; \
	args->source = (int) source; \
	args->recvtag = (int) recvtag; \
	args->comm = (MPI_Comm) comm; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Sendrecv_replace(args) { \
	args_MPI_Sendrecv_replace_t* pargs = (args_MPI_Sendrecv_replace_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Isend` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Isend` function call.
 *
 * @struct args_MPI_Isend_t
 *
 * @note 
 *	int
 *	MPI_Isend (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Isend
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Isend_t;

#define GET_ARGS_VALUE_MPI_Isend(activity) { \
	args_MPI_Isend_t* args = (args_MPI_Isend_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Isend(args) { \
	args_MPI_Isend_t* pargs = (args_MPI_Isend_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Irecv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Irecv` function call.
 *
 * @struct args_MPI_Irecv_t
 *
 * @note 
 *	int
 *	MPI_Irecv (
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Irecv
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int source;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Irecv_t;

#define GET_ARGS_VALUE_MPI_Irecv(activity) { \
	args_MPI_Irecv_t* args = (args_MPI_Irecv_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Irecv(args) { \
	args_MPI_Irecv_t* pargs = (args_MPI_Irecv_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Wait` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Wait` function call.
 *
 * @struct args_MPI_Wait_t
 *
 * @note 
 *	int
 *	MPI_Wait (
 *			MPI_Request * request (struct mpi_request_t **)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Wait
typedef struct {
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Wait_t;

#define GET_ARGS_VALUE_MPI_Wait(activity) { \
	args_MPI_Wait_t* args = (args_MPI_Wait_t*) activity->args; \
	args->request = (MPI_Request *) request; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Wait(args) { \
	args_MPI_Wait_t* pargs = (args_MPI_Wait_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Waitall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Waitall` function call.
 *
 * @struct args_MPI_Waitall_t
 *
 * @note 
 *	int
 *	MPI_Waitall (
 *			int count (int)
 *			MPI_Request[] array_of_requests (struct mpi_request_t *[])
 *			MPI_Status * array_of_statuses (struct opaque **)
 *	)
 */
#if HAVE_MPI_Waitall
typedef struct {
	int count;
	MPI_Request(* array_of_requests);
	struct {
		MPI_Request val;
	} array_of_requests__ref;
	MPI_Status * array_of_statuses;
	struct {
		MPI_Status val;
	} array_of_statuses__ref;
	int retval;
} args_MPI_Waitall_t;

#define GET_ARGS_VALUE_MPI_Waitall(activity) { \
	args_MPI_Waitall_t* args = (args_MPI_Waitall_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_requests = (MPI_Request(*)) array_of_requests; \
	args->array_of_statuses = (MPI_Status *) array_of_statuses; \
};

#define GET_PTRS_VALUE_MPI_Waitall(args) { \
	args_MPI_Waitall_t* pargs = (args_MPI_Waitall_t*) args; \
	if (pargs->array_of_requests != NULL) { \
		pargs->array_of_requests__ref.val = *pargs->array_of_requests; \
	} \
	if (pargs->array_of_statuses != NULL) { \
		pargs->array_of_statuses__ref.val = *pargs->array_of_statuses; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Waitany` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Waitany` function call.
 *
 * @struct args_MPI_Waitany_t
 *
 * @note 
 *	int
 *	MPI_Waitany (
 *			int count (int)
 *			MPI_Request[] array_of_requests (struct mpi_request_t *[])
 *			int * index (int *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Waitany
typedef struct {
	int count;
	MPI_Request(* array_of_requests);
	struct {
		MPI_Request val;
	} array_of_requests__ref;
	int * index;
	struct {
		int val;
	} index__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Waitany_t;

#define GET_ARGS_VALUE_MPI_Waitany(activity) { \
	args_MPI_Waitany_t* args = (args_MPI_Waitany_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_requests = (MPI_Request(*)) array_of_requests; \
	args->index = (int *) index; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Waitany(args) { \
	args_MPI_Waitany_t* pargs = (args_MPI_Waitany_t*) args; \
	if (pargs->array_of_requests != NULL) { \
		pargs->array_of_requests__ref.val = *pargs->array_of_requests; \
	} \
	if (pargs->index != NULL) { \
		pargs->index__ref.val = *pargs->index; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Waitsome` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Waitsome` function call.
 *
 * @struct args_MPI_Waitsome_t
 *
 * @note 
 *	int
 *	MPI_Waitsome (
 *			int incount (int)
 *			MPI_Request[] array_of_requests (struct mpi_request_t *[])
 *			int * outcount (int *)
 *			int[] array_of_indices (int[])
 *			MPI_Status[] array_of_statuses (struct opaque *[])
 *	)
 */
#if HAVE_MPI_Waitsome
typedef struct {
	int incount;
	MPI_Request(* array_of_requests);
	struct {
		MPI_Request val;
	} array_of_requests__ref;
	int * outcount;
	struct {
		int val;
	} outcount__ref;
	int(* array_of_indices);
	struct {
		int val;
	} array_of_indices__ref;
	MPI_Status(* array_of_statuses);
	struct {
		MPI_Status val;
	} array_of_statuses__ref;
	int retval;
} args_MPI_Waitsome_t;

#define GET_ARGS_VALUE_MPI_Waitsome(activity) { \
	args_MPI_Waitsome_t* args = (args_MPI_Waitsome_t*) activity->args; \
	args->incount = (int) incount; \
	args->array_of_requests = (MPI_Request(*)) array_of_requests; \
	args->outcount = (int *) outcount; \
	args->array_of_indices = (int(*)) array_of_indices; \
	args->array_of_statuses = (MPI_Status(*)) array_of_statuses; \
};

#define GET_PTRS_VALUE_MPI_Waitsome(args) { \
	args_MPI_Waitsome_t* pargs = (args_MPI_Waitsome_t*) args; \
	if (pargs->array_of_requests != NULL) { \
		pargs->array_of_requests__ref.val = *pargs->array_of_requests; \
	} \
	if (pargs->outcount != NULL) { \
		pargs->outcount__ref.val = *pargs->outcount; \
	} \
	if (pargs->array_of_indices != NULL) { \
		pargs->array_of_indices__ref.val = *pargs->array_of_indices; \
	} \
	if (pargs->array_of_statuses != NULL) { \
		pargs->array_of_statuses__ref.val = *pargs->array_of_statuses; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Test` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Test` function call.
 *
 * @struct args_MPI_Test_t
 *
 * @note 
 *	int
 *	MPI_Test (
 *			MPI_Request * request (struct mpi_request_t **)
 *			int * flag (int *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Test
typedef struct {
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int * flag;
	struct {
		int val;
	} flag__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Test_t;

#define GET_ARGS_VALUE_MPI_Test(activity) { \
	args_MPI_Test_t* args = (args_MPI_Test_t*) activity->args; \
	args->request = (MPI_Request *) request; \
	args->flag = (int *) flag; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Test(args) { \
	args_MPI_Test_t* pargs = (args_MPI_Test_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Testall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Testall` function call.
 *
 * @struct args_MPI_Testall_t
 *
 * @note 
 *	int
 *	MPI_Testall (
 *			int count (int)
 *			MPI_Request[] array_of_requests (struct mpi_request_t *[])
 *			int * flag (int *)
 *			MPI_Status[] array_of_statuses (struct opaque *[])
 *	)
 */
#if HAVE_MPI_Testall
typedef struct {
	int count;
	MPI_Request(* array_of_requests);
	struct {
		MPI_Request val;
	} array_of_requests__ref;
	int * flag;
	struct {
		int val;
	} flag__ref;
	MPI_Status(* array_of_statuses);
	struct {
		MPI_Status val;
	} array_of_statuses__ref;
	int retval;
} args_MPI_Testall_t;

#define GET_ARGS_VALUE_MPI_Testall(activity) { \
	args_MPI_Testall_t* args = (args_MPI_Testall_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_requests = (MPI_Request(*)) array_of_requests; \
	args->flag = (int *) flag; \
	args->array_of_statuses = (MPI_Status(*)) array_of_statuses; \
};

#define GET_PTRS_VALUE_MPI_Testall(args) { \
	args_MPI_Testall_t* pargs = (args_MPI_Testall_t*) args; \
	if (pargs->array_of_requests != NULL) { \
		pargs->array_of_requests__ref.val = *pargs->array_of_requests; \
	} \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
	if (pargs->array_of_statuses != NULL) { \
		pargs->array_of_statuses__ref.val = *pargs->array_of_statuses; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Testany` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Testany` function call.
 *
 * @struct args_MPI_Testany_t
 *
 * @note 
 *	int
 *	MPI_Testany (
 *			int count (int)
 *			MPI_Request[] array_of_requests (struct mpi_request_t *[])
 *			int * index (int *)
 *			int * flag (int *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Testany
typedef struct {
	int count;
	MPI_Request(* array_of_requests);
	struct {
		MPI_Request val;
	} array_of_requests__ref;
	int * index;
	struct {
		int val;
	} index__ref;
	int * flag;
	struct {
		int val;
	} flag__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Testany_t;

#define GET_ARGS_VALUE_MPI_Testany(activity) { \
	args_MPI_Testany_t* args = (args_MPI_Testany_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_requests = (MPI_Request(*)) array_of_requests; \
	args->index = (int *) index; \
	args->flag = (int *) flag; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Testany(args) { \
	args_MPI_Testany_t* pargs = (args_MPI_Testany_t*) args; \
	if (pargs->array_of_requests != NULL) { \
		pargs->array_of_requests__ref.val = *pargs->array_of_requests; \
	} \
	if (pargs->index != NULL) { \
		pargs->index__ref.val = *pargs->index; \
	} \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Testsome` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Testsome` function call.
 *
 * @struct args_MPI_Testsome_t
 *
 * @note 
 *	int
 *	MPI_Testsome (
 *			int incount (int)
 *			MPI_Request[] array_of_requests (struct mpi_request_t *[])
 *			int * outcount (int *)
 *			int[] array_of_indices (int[])
 *			MPI_Status[] array_of_statuses (struct opaque *[])
 *	)
 */
#if HAVE_MPI_Testsome
typedef struct {
	int incount;
	MPI_Request(* array_of_requests);
	struct {
		MPI_Request val;
	} array_of_requests__ref;
	int * outcount;
	struct {
		int val;
	} outcount__ref;
	int(* array_of_indices);
	struct {
		int val;
	} array_of_indices__ref;
	MPI_Status(* array_of_statuses);
	struct {
		MPI_Status val;
	} array_of_statuses__ref;
	int retval;
} args_MPI_Testsome_t;

#define GET_ARGS_VALUE_MPI_Testsome(activity) { \
	args_MPI_Testsome_t* args = (args_MPI_Testsome_t*) activity->args; \
	args->incount = (int) incount; \
	args->array_of_requests = (MPI_Request(*)) array_of_requests; \
	args->outcount = (int *) outcount; \
	args->array_of_indices = (int(*)) array_of_indices; \
	args->array_of_statuses = (MPI_Status(*)) array_of_statuses; \
};

#define GET_PTRS_VALUE_MPI_Testsome(args) { \
	args_MPI_Testsome_t* pargs = (args_MPI_Testsome_t*) args; \
	if (pargs->array_of_requests != NULL) { \
		pargs->array_of_requests__ref.val = *pargs->array_of_requests; \
	} \
	if (pargs->outcount != NULL) { \
		pargs->outcount__ref.val = *pargs->outcount; \
	} \
	if (pargs->array_of_indices != NULL) { \
		pargs->array_of_indices__ref.val = *pargs->array_of_indices; \
	} \
	if (pargs->array_of_statuses != NULL) { \
		pargs->array_of_statuses__ref.val = *pargs->array_of_statuses; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Request_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Request_free` function call.
 *
 * @struct args_MPI_Request_free_t
 *
 * @note 
 *	int
 *	MPI_Request_free (
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Request_free
typedef struct {
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Request_free_t;

#define GET_ARGS_VALUE_MPI_Request_free(activity) { \
	args_MPI_Request_free_t* args = (args_MPI_Request_free_t*) activity->args; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Request_free(args) { \
	args_MPI_Request_free_t* pargs = (args_MPI_Request_free_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cancel` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cancel` function call.
 *
 * @struct args_MPI_Cancel_t
 *
 * @note 
 *	int
 *	MPI_Cancel (
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Cancel
typedef struct {
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Cancel_t;

#define GET_ARGS_VALUE_MPI_Cancel(activity) { \
	args_MPI_Cancel_t* args = (args_MPI_Cancel_t*) activity->args; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Cancel(args) { \
	args_MPI_Cancel_t* pargs = (args_MPI_Cancel_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_contiguous` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_contiguous` function call.
 *
 * @struct args_MPI_Type_contiguous_t
 *
 * @note 
 *	int
 *	MPI_Type_contiguous (
 *			int count (int)
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_contiguous
typedef struct {
	int count;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_contiguous_t;

#define GET_ARGS_VALUE_MPI_Type_contiguous(activity) { \
	args_MPI_Type_contiguous_t* args = (args_MPI_Type_contiguous_t*) activity->args; \
	args->count = (int) count; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_contiguous(args) { \
	args_MPI_Type_contiguous_t* pargs = (args_MPI_Type_contiguous_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_vector` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_vector` function call.
 *
 * @struct args_MPI_Type_vector_t
 *
 * @note 
 *	int
 *	MPI_Type_vector (
 *			int count (int)
 *			int blocklength (int)
 *			int stride (int)
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_vector
typedef struct {
	int count;
	int blocklength;
	int stride;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_vector_t;

#define GET_ARGS_VALUE_MPI_Type_vector(activity) { \
	args_MPI_Type_vector_t* args = (args_MPI_Type_vector_t*) activity->args; \
	args->count = (int) count; \
	args->blocklength = (int) blocklength; \
	args->stride = (int) stride; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_vector(args) { \
	args_MPI_Type_vector_t* pargs = (args_MPI_Type_vector_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_indexed` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_indexed` function call.
 *
 * @struct args_MPI_Type_indexed_t
 *
 * @note 
 *	int
 *	MPI_Type_indexed (
 *			int count (int)
 *			const int[] array_of_blocklengths (const int[])
 *			const int[] array_of_displacements (const int[])
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_indexed
typedef struct {
	int count;
	int(* array_of_blocklengths);
	struct {
		int val;
	} array_of_blocklengths__ref;
	int(* array_of_displacements);
	struct {
		int val;
	} array_of_displacements__ref;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_indexed_t;

#define GET_ARGS_VALUE_MPI_Type_indexed(activity) { \
	args_MPI_Type_indexed_t* args = (args_MPI_Type_indexed_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_blocklengths = (int(*)) array_of_blocklengths; \
	args->array_of_displacements = (int(*)) array_of_displacements; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_indexed(args) { \
	args_MPI_Type_indexed_t* pargs = (args_MPI_Type_indexed_t*) args; \
	if (pargs->array_of_blocklengths != NULL) { \
		pargs->array_of_blocklengths__ref.val = *pargs->array_of_blocklengths; \
	} \
	if (pargs->array_of_displacements != NULL) { \
		pargs->array_of_displacements__ref.val = *pargs->array_of_displacements; \
	} \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_indexed_block` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_indexed_block` function call.
 *
 * @struct args_MPI_Type_create_indexed_block_t
 *
 * @note 
 *	int
 *	MPI_Type_create_indexed_block (
 *			int count (int)
 *			int blocklength (int)
 *			const int[] array_of_displacements (const int[])
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_indexed_block
typedef struct {
	int count;
	int blocklength;
	int(* array_of_displacements);
	struct {
		int val;
	} array_of_displacements__ref;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_indexed_block_t;

#define GET_ARGS_VALUE_MPI_Type_create_indexed_block(activity) { \
	args_MPI_Type_create_indexed_block_t* args = (args_MPI_Type_create_indexed_block_t*) activity->args; \
	args->count = (int) count; \
	args->blocklength = (int) blocklength; \
	args->array_of_displacements = (int(*)) array_of_displacements; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_indexed_block(args) { \
	args_MPI_Type_create_indexed_block_t* pargs = (args_MPI_Type_create_indexed_block_t*) args; \
	if (pargs->array_of_displacements != NULL) { \
		pargs->array_of_displacements__ref.val = *pargs->array_of_displacements; \
	} \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_struct` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_struct` function call.
 *
 * @struct args_MPI_Type_create_struct_t
 *
 * @note 
 *	int
 *	MPI_Type_create_struct (
 *			int count (int)
 *			const int[] array_of_block_lengths (const int[])
 *			const MPI_Aint[] array_of_displacements (const long[])
 *			const MPI_Datatype[] array_of_types (const struct mpi_datatype_t *[])
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_struct
typedef struct {
	int count;
	int(* array_of_block_lengths);
	struct {
		int val;
	} array_of_block_lengths__ref;
	MPI_Aint(* array_of_displacements);
	struct {
		MPI_Aint val;
	} array_of_displacements__ref;
	MPI_Datatype(* array_of_types);
	struct {
		MPI_Datatype val;
	} array_of_types__ref;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_struct_t;

#define GET_ARGS_VALUE_MPI_Type_create_struct(activity) { \
	args_MPI_Type_create_struct_t* args = (args_MPI_Type_create_struct_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_block_lengths = (int(*)) array_of_block_lengths; \
	args->array_of_displacements = (MPI_Aint(*)) array_of_displacements; \
	args->array_of_types = (MPI_Datatype(*)) array_of_types; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_struct(args) { \
	args_MPI_Type_create_struct_t* pargs = (args_MPI_Type_create_struct_t*) args; \
	if (pargs->array_of_block_lengths != NULL) { \
		pargs->array_of_block_lengths__ref.val = *pargs->array_of_block_lengths; \
	} \
	if (pargs->array_of_displacements != NULL) { \
		pargs->array_of_displacements__ref.val = *pargs->array_of_displacements; \
	} \
	if (pargs->array_of_types != NULL) { \
		pargs->array_of_types__ref.val = *pargs->array_of_types; \
	} \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_resized` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_resized` function call.
 *
 * @struct args_MPI_Type_create_resized_t
 *
 * @note 
 *	int
 *	MPI_Type_create_resized (
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Aint lb (long)
 *			MPI_Aint extent (long)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_resized
typedef struct {
	MPI_Datatype oldtype;
	MPI_Aint lb;
	MPI_Aint extent;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_resized_t;

#define GET_ARGS_VALUE_MPI_Type_create_resized(activity) { \
	args_MPI_Type_create_resized_t* args = (args_MPI_Type_create_resized_t*) activity->args; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->lb = (MPI_Aint) lb; \
	args->extent = (MPI_Aint) extent; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_resized(args) { \
	args_MPI_Type_create_resized_t* pargs = (args_MPI_Type_create_resized_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_commit` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_commit` function call.
 *
 * @struct args_MPI_Type_commit_t
 *
 * @note 
 *	int
 *	MPI_Type_commit (
 *			MPI_Datatype * type (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_commit
typedef struct {
	MPI_Datatype * type;
	struct {
		MPI_Datatype val;
	} type__ref;
	int retval;
} args_MPI_Type_commit_t;

#define GET_ARGS_VALUE_MPI_Type_commit(activity) { \
	args_MPI_Type_commit_t* args = (args_MPI_Type_commit_t*) activity->args; \
	args->type = (MPI_Datatype *) type; \
};

#define GET_PTRS_VALUE_MPI_Type_commit(args) { \
	args_MPI_Type_commit_t* pargs = (args_MPI_Type_commit_t*) args; \
	if (pargs->type != NULL) { \
		pargs->type__ref.val = *pargs->type; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_free` function call.
 *
 * @struct args_MPI_Type_free_t
 *
 * @note 
 *	int
 *	MPI_Type_free (
 *			MPI_Datatype * type (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_free
typedef struct {
	MPI_Datatype * type;
	struct {
		MPI_Datatype val;
	} type__ref;
	int retval;
} args_MPI_Type_free_t;

#define GET_ARGS_VALUE_MPI_Type_free(activity) { \
	args_MPI_Type_free_t* args = (args_MPI_Type_free_t*) activity->args; \
	args->type = (MPI_Datatype *) type; \
};

#define GET_PTRS_VALUE_MPI_Type_free(args) { \
	args_MPI_Type_free_t* pargs = (args_MPI_Type_free_t*) args; \
	if (pargs->type != NULL) { \
		pargs->type__ref.val = *pargs->type; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_count` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_count` function call.
 *
 * @struct args_MPI_Get_count_t
 *
 * @note 
 *	int
 *	MPI_Get_count (
 *			const MPI_Status * status (const struct opaque * *)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int * count (int *)
 *	)
 */
#if HAVE_MPI_Get_count
typedef struct {
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	MPI_Datatype datatype;
	int * count;
	struct {
		int val;
	} count__ref;
	int retval;
} args_MPI_Get_count_t;

#define GET_ARGS_VALUE_MPI_Get_count(activity) { \
	args_MPI_Get_count_t* args = (args_MPI_Get_count_t*) activity->args; \
	args->status = (MPI_Status *) status; \
	args->datatype = (MPI_Datatype) datatype; \
	args->count = (int *) count; \
};

#define GET_PTRS_VALUE_MPI_Get_count(args) { \
	args_MPI_Get_count_t* pargs = (args_MPI_Get_count_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
	if (pargs->count != NULL) { \
		pargs->count__ref.val = *pargs->count; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_elements` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_elements` function call.
 *
 * @struct args_MPI_Get_elements_t
 *
 * @note 
 *	int
 *	MPI_Get_elements (
 *			const MPI_Status * status (const struct opaque * *)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int * count (int *)
 *	)
 */
#if HAVE_MPI_Get_elements
typedef struct {
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	MPI_Datatype datatype;
	int * count;
	struct {
		int val;
	} count__ref;
	int retval;
} args_MPI_Get_elements_t;

#define GET_ARGS_VALUE_MPI_Get_elements(activity) { \
	args_MPI_Get_elements_t* args = (args_MPI_Get_elements_t*) activity->args; \
	args->status = (MPI_Status *) status; \
	args->datatype = (MPI_Datatype) datatype; \
	args->count = (int *) count; \
};

#define GET_PTRS_VALUE_MPI_Get_elements(args) { \
	args_MPI_Get_elements_t* pargs = (args_MPI_Get_elements_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
	if (pargs->count != NULL) { \
		pargs->count__ref.val = *pargs->count; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Pack` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Pack` function call.
 *
 * @struct args_MPI_Pack_t
 *
 * @note 
 *	int
 *	MPI_Pack (
 *			const void * inbuf (const void *)
 *			int incount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			void * outbuf (void *)
 *			int outsize (int)
 *			int * position (int *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Pack
typedef struct {
	void * inbuf;
	int incount;
	MPI_Datatype datatype;
	void * outbuf;
	int outsize;
	int * position;
	struct {
		int val;
	} position__ref;
	MPI_Comm comm;
	int retval;
} args_MPI_Pack_t;

#define GET_ARGS_VALUE_MPI_Pack(activity) { \
	args_MPI_Pack_t* args = (args_MPI_Pack_t*) activity->args; \
	args->inbuf = (void *) inbuf; \
	args->incount = (int) incount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->outbuf = (void *) outbuf; \
	args->outsize = (int) outsize; \
	args->position = (int *) position; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Pack(args) { \
	args_MPI_Pack_t* pargs = (args_MPI_Pack_t*) args; \
	if (pargs->position != NULL) { \
		pargs->position__ref.val = *pargs->position; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Unpack` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Unpack` function call.
 *
 * @struct args_MPI_Unpack_t
 *
 * @note 
 *	int
 *	MPI_Unpack (
 *			const void * inbuf (const void *)
 *			int insize (int)
 *			int * position (int *)
 *			void * outbuf (void *)
 *			int outcount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Unpack
typedef struct {
	void * inbuf;
	int insize;
	int * position;
	struct {
		int val;
	} position__ref;
	void * outbuf;
	int outcount;
	MPI_Datatype datatype;
	MPI_Comm comm;
	int retval;
} args_MPI_Unpack_t;

#define GET_ARGS_VALUE_MPI_Unpack(activity) { \
	args_MPI_Unpack_t* args = (args_MPI_Unpack_t*) activity->args; \
	args->inbuf = (void *) inbuf; \
	args->insize = (int) insize; \
	args->position = (int *) position; \
	args->outbuf = (void *) outbuf; \
	args->outcount = (int) outcount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Unpack(args) { \
	args_MPI_Unpack_t* pargs = (args_MPI_Unpack_t*) args; \
	if (pargs->position != NULL) { \
		pargs->position__ref.val = *pargs->position; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Pack_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Pack_size` function call.
 *
 * @struct args_MPI_Pack_size_t
 *
 * @note 
 *	int
 *	MPI_Pack_size (
 *			int incount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * size (int *)
 *	)
 */
#if HAVE_MPI_Pack_size
typedef struct {
	int incount;
	MPI_Datatype datatype;
	MPI_Comm comm;
	int * size;
	struct {
		int val;
	} size__ref;
	int retval;
} args_MPI_Pack_size_t;

#define GET_ARGS_VALUE_MPI_Pack_size(activity) { \
	args_MPI_Pack_size_t* args = (args_MPI_Pack_size_t*) activity->args; \
	args->incount = (int) incount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->comm = (MPI_Comm) comm; \
	args->size = (int *) size; \
};

#define GET_PTRS_VALUE_MPI_Pack_size(args) { \
	args_MPI_Pack_size_t* pargs = (args_MPI_Pack_size_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Barrier` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Barrier` function call.
 *
 * @struct args_MPI_Barrier_t
 *
 * @note 
 *	int
 *	MPI_Barrier (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Barrier
typedef struct {
	MPI_Comm comm;
	int retval;
} args_MPI_Barrier_t;

#define GET_ARGS_VALUE_MPI_Barrier(activity) { \
	args_MPI_Barrier_t* args = (args_MPI_Barrier_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Bcast` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Bcast` function call.
 *
 * @struct args_MPI_Bcast_t
 *
 * @note 
 *	int
 *	MPI_Bcast (
 *			void * buffer (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Bcast
typedef struct {
	void * buffer;
	int count;
	MPI_Datatype datatype;
	int root;
	MPI_Comm comm;
	int retval;
} args_MPI_Bcast_t;

#define GET_ARGS_VALUE_MPI_Bcast(activity) { \
	args_MPI_Bcast_t* args = (args_MPI_Bcast_t*) activity->args; \
	args->buffer = (void *) buffer; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Gather` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Gather` function call.
 *
 * @struct args_MPI_Gather_t
 *
 * @note 
 *	int
 *	MPI_Gather (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Gather
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	int retval;
} args_MPI_Gather_t;

#define GET_ARGS_VALUE_MPI_Gather(activity) { \
	args_MPI_Gather_t* args = (args_MPI_Gather_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Gatherv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Gatherv` function call.
 *
 * @struct args_MPI_Gatherv_t
 *
 * @note 
 *	int
 *	MPI_Gatherv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Gatherv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	int retval;
} args_MPI_Gatherv_t;

#define GET_ARGS_VALUE_MPI_Gatherv(activity) { \
	args_MPI_Gatherv_t* args = (args_MPI_Gatherv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Gatherv(args) { \
	args_MPI_Gatherv_t* pargs = (args_MPI_Gatherv_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Scatter` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Scatter` function call.
 *
 * @struct args_MPI_Scatter_t
 *
 * @note 
 *	int
 *	MPI_Scatter (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Scatter
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	int retval;
} args_MPI_Scatter_t;

#define GET_ARGS_VALUE_MPI_Scatter(activity) { \
	args_MPI_Scatter_t* args = (args_MPI_Scatter_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Scatterv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Scatterv` function call.
 *
 * @struct args_MPI_Scatterv_t
 *
 * @note 
 *	int
 *	MPI_Scatterv (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Scatterv
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	int retval;
} args_MPI_Scatterv_t;

#define GET_ARGS_VALUE_MPI_Scatterv(activity) { \
	args_MPI_Scatterv_t* args = (args_MPI_Scatterv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->displs = (int(*)) displs; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Scatterv(args) { \
	args_MPI_Scatterv_t* pargs = (args_MPI_Scatterv_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Allgather` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Allgather` function call.
 *
 * @struct args_MPI_Allgather_t
 *
 * @note 
 *	int
 *	MPI_Allgather (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Allgather
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Allgather_t;

#define GET_ARGS_VALUE_MPI_Allgather(activity) { \
	args_MPI_Allgather_t* args = (args_MPI_Allgather_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Allgatherv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Allgatherv` function call.
 *
 * @struct args_MPI_Allgatherv_t
 *
 * @note 
 *	int
 *	MPI_Allgatherv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Allgatherv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Allgatherv_t;

#define GET_ARGS_VALUE_MPI_Allgatherv(activity) { \
	args_MPI_Allgatherv_t* args = (args_MPI_Allgatherv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Allgatherv(args) { \
	args_MPI_Allgatherv_t* pargs = (args_MPI_Allgatherv_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Alltoall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Alltoall` function call.
 *
 * @struct args_MPI_Alltoall_t
 *
 * @note 
 *	int
 *	MPI_Alltoall (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Alltoall
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Alltoall_t;

#define GET_ARGS_VALUE_MPI_Alltoall(activity) { \
	args_MPI_Alltoall_t* args = (args_MPI_Alltoall_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Alltoallv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Alltoallv` function call.
 *
 * @struct args_MPI_Alltoallv_t
 *
 * @note 
 *	int
 *	MPI_Alltoallv (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Alltoallv
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Alltoallv_t;

#define GET_ARGS_VALUE_MPI_Alltoallv(activity) { \
	args_MPI_Alltoallv_t* args = (args_MPI_Alltoallv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Alltoallv(args) { \
	args_MPI_Alltoallv_t* pargs = (args_MPI_Alltoallv_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Reduce` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Reduce` function call.
 *
 * @struct args_MPI_Reduce_t
 *
 * @note 
 *	int
 *	MPI_Reduce (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Reduce
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	int root;
	MPI_Comm comm;
	int retval;
} args_MPI_Reduce_t;

#define GET_ARGS_VALUE_MPI_Reduce(activity) { \
	args_MPI_Reduce_t* args = (args_MPI_Reduce_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Allreduce` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Allreduce` function call.
 *
 * @struct args_MPI_Allreduce_t
 *
 * @note 
 *	int
 *	MPI_Allreduce (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Allreduce
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	int retval;
} args_MPI_Allreduce_t;

#define GET_ARGS_VALUE_MPI_Allreduce(activity) { \
	args_MPI_Allreduce_t* args = (args_MPI_Allreduce_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Reduce_scatter` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Reduce_scatter` function call.
 *
 * @struct args_MPI_Reduce_scatter_t
 *
 * @note 
 *	int
 *	MPI_Reduce_scatter (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Reduce_scatter
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	int retval;
} args_MPI_Reduce_scatter_t;

#define GET_ARGS_VALUE_MPI_Reduce_scatter(activity) { \
	args_MPI_Reduce_scatter_t* args = (args_MPI_Reduce_scatter_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Reduce_scatter(args) { \
	args_MPI_Reduce_scatter_t* pargs = (args_MPI_Reduce_scatter_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Reduce_scatter_block` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Reduce_scatter_block` function call.
 *
 * @struct args_MPI_Reduce_scatter_block_t
 *
 * @note 
 *	int
 *	MPI_Reduce_scatter_block (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Reduce_scatter_block
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int recvcount;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	int retval;
} args_MPI_Reduce_scatter_block_t;

#define GET_ARGS_VALUE_MPI_Reduce_scatter_block(activity) { \
	args_MPI_Reduce_scatter_block_t* args = (args_MPI_Reduce_scatter_block_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Scan` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Scan` function call.
 *
 * @struct args_MPI_Scan_t
 *
 * @note 
 *	int
 *	MPI_Scan (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Scan
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	int retval;
} args_MPI_Scan_t;

#define GET_ARGS_VALUE_MPI_Scan(activity) { \
	args_MPI_Scan_t* args = (args_MPI_Scan_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Exscan` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Exscan` function call.
 *
 * @struct args_MPI_Exscan_t
 *
 * @note 
 *	int
 *	MPI_Exscan (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Exscan
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	int retval;
} args_MPI_Exscan_t;

#define GET_ARGS_VALUE_MPI_Exscan(activity) { \
	args_MPI_Exscan_t* args = (args_MPI_Exscan_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_size` function call.
 *
 * @struct args_MPI_Comm_size_t
 *
 * @note 
 *	int
 *	MPI_Comm_size (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * size (int *)
 *	)
 */
#if HAVE_MPI_Comm_size
typedef struct {
	MPI_Comm comm;
	int * size;
	struct {
		int val;
	} size__ref;
	int retval;
} args_MPI_Comm_size_t;

#define GET_ARGS_VALUE_MPI_Comm_size(activity) { \
	args_MPI_Comm_size_t* args = (args_MPI_Comm_size_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->size = (int *) size; \
};

#define GET_PTRS_VALUE_MPI_Comm_size(args) { \
	args_MPI_Comm_size_t* pargs = (args_MPI_Comm_size_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_rank` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_rank` function call.
 *
 * @struct args_MPI_Comm_rank_t
 *
 * @note 
 *	int
 *	MPI_Comm_rank (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * rank (int *)
 *	)
 */
#if HAVE_MPI_Comm_rank
typedef struct {
	MPI_Comm comm;
	int * rank;
	struct {
		int val;
	} rank__ref;
	int retval;
} args_MPI_Comm_rank_t;

#define GET_ARGS_VALUE_MPI_Comm_rank(activity) { \
	args_MPI_Comm_rank_t* args = (args_MPI_Comm_rank_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->rank = (int *) rank; \
};

#define GET_PTRS_VALUE_MPI_Comm_rank(args) { \
	args_MPI_Comm_rank_t* pargs = (args_MPI_Comm_rank_t*) args; \
	if (pargs->rank != NULL) { \
		pargs->rank__ref.val = *pargs->rank; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_group` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_group` function call.
 *
 * @struct args_MPI_Comm_group_t
 *
 * @note 
 *	int
 *	MPI_Comm_group (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Group * group (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Comm_group
typedef struct {
	MPI_Comm comm;
	MPI_Group * group;
	struct {
		MPI_Group val;
	} group__ref;
	int retval;
} args_MPI_Comm_group_t;

#define GET_ARGS_VALUE_MPI_Comm_group(activity) { \
	args_MPI_Comm_group_t* args = (args_MPI_Comm_group_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->group = (MPI_Group *) group; \
};

#define GET_PTRS_VALUE_MPI_Comm_group(args) { \
	args_MPI_Comm_group_t* pargs = (args_MPI_Comm_group_t*) args; \
	if (pargs->group != NULL) { \
		pargs->group__ref.val = *pargs->group; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_dup` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_dup` function call.
 *
 * @struct args_MPI_Comm_dup_t
 *
 * @note 
 *	int
 *	MPI_Comm_dup (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_dup
typedef struct {
	MPI_Comm comm;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_dup_t;

#define GET_ARGS_VALUE_MPI_Comm_dup(activity) { \
	args_MPI_Comm_dup_t* args = (args_MPI_Comm_dup_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_dup(args) { \
	args_MPI_Comm_dup_t* pargs = (args_MPI_Comm_dup_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_create` function call.
 *
 * @struct args_MPI_Comm_create_t
 *
 * @note 
 *	int
 *	MPI_Comm_create (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Group group (struct mpi_group_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_create
typedef struct {
	MPI_Comm comm;
	MPI_Group group;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_create_t;

#define GET_ARGS_VALUE_MPI_Comm_create(activity) { \
	args_MPI_Comm_create_t* args = (args_MPI_Comm_create_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->group = (MPI_Group) group; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_create(args) { \
	args_MPI_Comm_create_t* pargs = (args_MPI_Comm_create_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_split` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_split` function call.
 *
 * @struct args_MPI_Comm_split_t
 *
 * @note 
 *	int
 *	MPI_Comm_split (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int color (int)
 *			int key (int)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_split
typedef struct {
	MPI_Comm comm;
	int color;
	int key;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_split_t;

#define GET_ARGS_VALUE_MPI_Comm_split(activity) { \
	args_MPI_Comm_split_t* args = (args_MPI_Comm_split_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->color = (int) color; \
	args->key = (int) key; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_split(args) { \
	args_MPI_Comm_split_t* pargs = (args_MPI_Comm_split_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_free` function call.
 *
 * @struct args_MPI_Comm_free_t
 *
 * @note 
 *	int
 *	MPI_Comm_free (
 *			MPI_Comm * comm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_free
typedef struct {
	MPI_Comm * comm;
	struct {
		MPI_Comm val;
	} comm__ref;
	int retval;
} args_MPI_Comm_free_t;

#define GET_ARGS_VALUE_MPI_Comm_free(activity) { \
	args_MPI_Comm_free_t* args = (args_MPI_Comm_free_t*) activity->args; \
	args->comm = (MPI_Comm *) comm; \
};

#define GET_PTRS_VALUE_MPI_Comm_free(args) { \
	args_MPI_Comm_free_t* pargs = (args_MPI_Comm_free_t*) args; \
	if (pargs->comm != NULL) { \
		pargs->comm__ref.val = *pargs->comm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_test_inter` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_test_inter` function call.
 *
 * @struct args_MPI_Comm_test_inter_t
 *
 * @note 
 *	int
 *	MPI_Comm_test_inter (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Comm_test_inter
typedef struct {
	MPI_Comm comm;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Comm_test_inter_t;

#define GET_ARGS_VALUE_MPI_Comm_test_inter(activity) { \
	args_MPI_Comm_test_inter_t* args = (args_MPI_Comm_test_inter_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Comm_test_inter(args) { \
	args_MPI_Comm_test_inter_t* pargs = (args_MPI_Comm_test_inter_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_remote_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_remote_size` function call.
 *
 * @struct args_MPI_Comm_remote_size_t
 *
 * @note 
 *	int
 *	MPI_Comm_remote_size (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * size (int *)
 *	)
 */
#if HAVE_MPI_Comm_remote_size
typedef struct {
	MPI_Comm comm;
	int * size;
	struct {
		int val;
	} size__ref;
	int retval;
} args_MPI_Comm_remote_size_t;

#define GET_ARGS_VALUE_MPI_Comm_remote_size(activity) { \
	args_MPI_Comm_remote_size_t* args = (args_MPI_Comm_remote_size_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->size = (int *) size; \
};

#define GET_PTRS_VALUE_MPI_Comm_remote_size(args) { \
	args_MPI_Comm_remote_size_t* pargs = (args_MPI_Comm_remote_size_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_remote_group` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_remote_group` function call.
 *
 * @struct args_MPI_Comm_remote_group_t
 *
 * @note 
 *	int
 *	MPI_Comm_remote_group (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Group * group (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Comm_remote_group
typedef struct {
	MPI_Comm comm;
	MPI_Group * group;
	struct {
		MPI_Group val;
	} group__ref;
	int retval;
} args_MPI_Comm_remote_group_t;

#define GET_ARGS_VALUE_MPI_Comm_remote_group(activity) { \
	args_MPI_Comm_remote_group_t* args = (args_MPI_Comm_remote_group_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->group = (MPI_Group *) group; \
};

#define GET_PTRS_VALUE_MPI_Comm_remote_group(args) { \
	args_MPI_Comm_remote_group_t* pargs = (args_MPI_Comm_remote_group_t*) args; \
	if (pargs->group != NULL) { \
		pargs->group__ref.val = *pargs->group; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_compare` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_compare` function call.
 *
 * @struct args_MPI_Comm_compare_t
 *
 * @note 
 *	int
 *	MPI_Comm_compare (
 *			MPI_Comm comm1 (struct mpi_communicator_t *)
 *			MPI_Comm comm2 (struct mpi_communicator_t *)
 *			int * result (int *)
 *	)
 */
#if HAVE_MPI_Comm_compare
typedef struct {
	MPI_Comm comm1;
	MPI_Comm comm2;
	int * result;
	struct {
		int val;
	} result__ref;
	int retval;
} args_MPI_Comm_compare_t;

#define GET_ARGS_VALUE_MPI_Comm_compare(activity) { \
	args_MPI_Comm_compare_t* args = (args_MPI_Comm_compare_t*) activity->args; \
	args->comm1 = (MPI_Comm) comm1; \
	args->comm2 = (MPI_Comm) comm2; \
	args->result = (int *) result; \
};

#define GET_PTRS_VALUE_MPI_Comm_compare(args) { \
	args_MPI_Comm_compare_t* pargs = (args_MPI_Comm_compare_t*) args; \
	if (pargs->result != NULL) { \
		pargs->result__ref.val = *pargs->result; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_create_keyval` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_create_keyval` function call.
 *
 * @struct args_MPI_Comm_create_keyval_t
 *
 * @note 
 *	int
 *	MPI_Comm_create_keyval (
 *			MPI_Comm_copy_attr_function * comm_copy_attr_fn (int (*)(struct mpi_communicator_t *, int, void *, void *, void *, int *))
 *			MPI_Comm_delete_attr_function * comm_delete_attr_fn (int (*)(struct mpi_communicator_t *, int, void *, void *))
 *			int * comm_keyval (int *)
 *			void * extra_state (void *)
 *	)
 */
#if HAVE_MPI_Comm_create_keyval
typedef struct {
	MPI_Comm_copy_attr_function * comm_copy_attr_fn;
	MPI_Comm_delete_attr_function * comm_delete_attr_fn;
	int * comm_keyval;
	struct {
		int val;
	} comm_keyval__ref;
	void * extra_state;
	int retval;
} args_MPI_Comm_create_keyval_t;

#define GET_ARGS_VALUE_MPI_Comm_create_keyval(activity) { \
	args_MPI_Comm_create_keyval_t* args = (args_MPI_Comm_create_keyval_t*) activity->args; \
	args->comm_copy_attr_fn = (MPI_Comm_copy_attr_function *) comm_copy_attr_fn; \
	args->comm_delete_attr_fn = (MPI_Comm_delete_attr_function *) comm_delete_attr_fn; \
	args->comm_keyval = (int *) comm_keyval; \
	args->extra_state = (void *) extra_state; \
};

#define GET_PTRS_VALUE_MPI_Comm_create_keyval(args) { \
	args_MPI_Comm_create_keyval_t* pargs = (args_MPI_Comm_create_keyval_t*) args; \
	if (pargs->comm_keyval != NULL) { \
		pargs->comm_keyval__ref.val = *pargs->comm_keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_set_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_set_attr` function call.
 *
 * @struct args_MPI_Comm_set_attr_t
 *
 * @note 
 *	int
 *	MPI_Comm_set_attr (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int comm_keyval (int)
 *			void * attribute_val (void *)
 *	)
 */
#if HAVE_MPI_Comm_set_attr
typedef struct {
	MPI_Comm comm;
	int comm_keyval;
	void * attribute_val;
	int retval;
} args_MPI_Comm_set_attr_t;

#define GET_ARGS_VALUE_MPI_Comm_set_attr(activity) { \
	args_MPI_Comm_set_attr_t* args = (args_MPI_Comm_set_attr_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->comm_keyval = (int) comm_keyval; \
	args->attribute_val = (void *) attribute_val; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_get_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_get_attr` function call.
 *
 * @struct args_MPI_Comm_get_attr_t
 *
 * @note 
 *	int
 *	MPI_Comm_get_attr (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int comm_keyval (int)
 *			void * attribute_val (void *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Comm_get_attr
typedef struct {
	MPI_Comm comm;
	int comm_keyval;
	void * attribute_val;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Comm_get_attr_t;

#define GET_ARGS_VALUE_MPI_Comm_get_attr(activity) { \
	args_MPI_Comm_get_attr_t* args = (args_MPI_Comm_get_attr_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->comm_keyval = (int) comm_keyval; \
	args->attribute_val = (void *) attribute_val; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Comm_get_attr(args) { \
	args_MPI_Comm_get_attr_t* pargs = (args_MPI_Comm_get_attr_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_delete_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_delete_attr` function call.
 *
 * @struct args_MPI_Comm_delete_attr_t
 *
 * @note 
 *	int
 *	MPI_Comm_delete_attr (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int comm_keyval (int)
 *	)
 */
#if HAVE_MPI_Comm_delete_attr
typedef struct {
	MPI_Comm comm;
	int comm_keyval;
	int retval;
} args_MPI_Comm_delete_attr_t;

#define GET_ARGS_VALUE_MPI_Comm_delete_attr(activity) { \
	args_MPI_Comm_delete_attr_t* args = (args_MPI_Comm_delete_attr_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->comm_keyval = (int) comm_keyval; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_get_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_get_name` function call.
 *
 * @struct args_MPI_Comm_get_name_t
 *
 * @note 
 *	int
 *	MPI_Comm_get_name (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			char * comm_name (char *)
 *			int * resultlen (int *)
 *	)
 */
#if HAVE_MPI_Comm_get_name
typedef struct {
	MPI_Comm comm;
	char * comm_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} comm_name__ref;
	int * resultlen;
	struct {
		int val;
	} resultlen__ref;
	int retval;
} args_MPI_Comm_get_name_t;

#define GET_ARGS_VALUE_MPI_Comm_get_name(activity) { \
	args_MPI_Comm_get_name_t* args = (args_MPI_Comm_get_name_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->comm_name = (char *) comm_name; \
	args->resultlen = (int *) resultlen; \
};

#define GET_PTRS_VALUE_MPI_Comm_get_name(args) { \
	args_MPI_Comm_get_name_t* pargs = (args_MPI_Comm_get_name_t*) args; \
	if (pargs->comm_name != NULL) { \
		strncpy(pargs->comm_name__ref.val, pargs->comm_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->resultlen != NULL) { \
		pargs->resultlen__ref.val = *pargs->resultlen; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_set_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_set_name` function call.
 *
 * @struct args_MPI_Comm_set_name_t
 *
 * @note 
 *	int
 *	MPI_Comm_set_name (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			const char * comm_name (const char *)
 *	)
 */
#if HAVE_MPI_Comm_set_name
typedef struct {
	MPI_Comm comm;
	char * comm_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} comm_name__ref;
	int retval;
} args_MPI_Comm_set_name_t;

#define GET_ARGS_VALUE_MPI_Comm_set_name(activity) { \
	args_MPI_Comm_set_name_t* args = (args_MPI_Comm_set_name_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->comm_name = (char *) comm_name; \
};

#define GET_PTRS_VALUE_MPI_Comm_set_name(args) { \
	args_MPI_Comm_set_name_t* pargs = (args_MPI_Comm_set_name_t*) args; \
	if (pargs->comm_name != NULL) { \
		strncpy(pargs->comm_name__ref.val, pargs->comm_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_size` function call.
 *
 * @struct args_MPI_Group_size_t
 *
 * @note 
 *	int
 *	MPI_Group_size (
 *			MPI_Group group (struct mpi_group_t *)
 *			int * size (int *)
 *	)
 */
#if HAVE_MPI_Group_size
typedef struct {
	MPI_Group group;
	int * size;
	struct {
		int val;
	} size__ref;
	int retval;
} args_MPI_Group_size_t;

#define GET_ARGS_VALUE_MPI_Group_size(activity) { \
	args_MPI_Group_size_t* args = (args_MPI_Group_size_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->size = (int *) size; \
};

#define GET_PTRS_VALUE_MPI_Group_size(args) { \
	args_MPI_Group_size_t* pargs = (args_MPI_Group_size_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_rank` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_rank` function call.
 *
 * @struct args_MPI_Group_rank_t
 *
 * @note 
 *	int
 *	MPI_Group_rank (
 *			MPI_Group group (struct mpi_group_t *)
 *			int * rank (int *)
 *	)
 */
#if HAVE_MPI_Group_rank
typedef struct {
	MPI_Group group;
	int * rank;
	struct {
		int val;
	} rank__ref;
	int retval;
} args_MPI_Group_rank_t;

#define GET_ARGS_VALUE_MPI_Group_rank(activity) { \
	args_MPI_Group_rank_t* args = (args_MPI_Group_rank_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->rank = (int *) rank; \
};

#define GET_PTRS_VALUE_MPI_Group_rank(args) { \
	args_MPI_Group_rank_t* pargs = (args_MPI_Group_rank_t*) args; \
	if (pargs->rank != NULL) { \
		pargs->rank__ref.val = *pargs->rank; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_translate_ranks` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_translate_ranks` function call.
 *
 * @struct args_MPI_Group_translate_ranks_t
 *
 * @note 
 *	int
 *	MPI_Group_translate_ranks (
 *			MPI_Group group1 (struct mpi_group_t *)
 *			int n (int)
 *			const int[] ranks1 (const int[])
 *			MPI_Group group2 (struct mpi_group_t *)
 *			int[] ranks2 (int[])
 *	)
 */
#if HAVE_MPI_Group_translate_ranks
typedef struct {
	MPI_Group group1;
	int n;
	int(* ranks1);
	struct {
		int val;
	} ranks1__ref;
	MPI_Group group2;
	int(* ranks2);
	struct {
		int val;
	} ranks2__ref;
	int retval;
} args_MPI_Group_translate_ranks_t;

#define GET_ARGS_VALUE_MPI_Group_translate_ranks(activity) { \
	args_MPI_Group_translate_ranks_t* args = (args_MPI_Group_translate_ranks_t*) activity->args; \
	args->group1 = (MPI_Group) group1; \
	args->n = (int) n; \
	args->ranks1 = (int(*)) ranks1; \
	args->group2 = (MPI_Group) group2; \
	args->ranks2 = (int(*)) ranks2; \
};

#define GET_PTRS_VALUE_MPI_Group_translate_ranks(args) { \
	args_MPI_Group_translate_ranks_t* pargs = (args_MPI_Group_translate_ranks_t*) args; \
	if (pargs->ranks1 != NULL) { \
		pargs->ranks1__ref.val = *pargs->ranks1; \
	} \
	if (pargs->ranks2 != NULL) { \
		pargs->ranks2__ref.val = *pargs->ranks2; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_compare` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_compare` function call.
 *
 * @struct args_MPI_Group_compare_t
 *
 * @note 
 *	int
 *	MPI_Group_compare (
 *			MPI_Group group1 (struct mpi_group_t *)
 *			MPI_Group group2 (struct mpi_group_t *)
 *			int * result (int *)
 *	)
 */
#if HAVE_MPI_Group_compare
typedef struct {
	MPI_Group group1;
	MPI_Group group2;
	int * result;
	struct {
		int val;
	} result__ref;
	int retval;
} args_MPI_Group_compare_t;

#define GET_ARGS_VALUE_MPI_Group_compare(activity) { \
	args_MPI_Group_compare_t* args = (args_MPI_Group_compare_t*) activity->args; \
	args->group1 = (MPI_Group) group1; \
	args->group2 = (MPI_Group) group2; \
	args->result = (int *) result; \
};

#define GET_PTRS_VALUE_MPI_Group_compare(args) { \
	args_MPI_Group_compare_t* pargs = (args_MPI_Group_compare_t*) args; \
	if (pargs->result != NULL) { \
		pargs->result__ref.val = *pargs->result; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_union` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_union` function call.
 *
 * @struct args_MPI_Group_union_t
 *
 * @note 
 *	int
 *	MPI_Group_union (
 *			MPI_Group group1 (struct mpi_group_t *)
 *			MPI_Group group2 (struct mpi_group_t *)
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_union
typedef struct {
	MPI_Group group1;
	MPI_Group group2;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_union_t;

#define GET_ARGS_VALUE_MPI_Group_union(activity) { \
	args_MPI_Group_union_t* args = (args_MPI_Group_union_t*) activity->args; \
	args->group1 = (MPI_Group) group1; \
	args->group2 = (MPI_Group) group2; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_union(args) { \
	args_MPI_Group_union_t* pargs = (args_MPI_Group_union_t*) args; \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_intersection` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_intersection` function call.
 *
 * @struct args_MPI_Group_intersection_t
 *
 * @note 
 *	int
 *	MPI_Group_intersection (
 *			MPI_Group group1 (struct mpi_group_t *)
 *			MPI_Group group2 (struct mpi_group_t *)
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_intersection
typedef struct {
	MPI_Group group1;
	MPI_Group group2;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_intersection_t;

#define GET_ARGS_VALUE_MPI_Group_intersection(activity) { \
	args_MPI_Group_intersection_t* args = (args_MPI_Group_intersection_t*) activity->args; \
	args->group1 = (MPI_Group) group1; \
	args->group2 = (MPI_Group) group2; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_intersection(args) { \
	args_MPI_Group_intersection_t* pargs = (args_MPI_Group_intersection_t*) args; \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_difference` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_difference` function call.
 *
 * @struct args_MPI_Group_difference_t
 *
 * @note 
 *	int
 *	MPI_Group_difference (
 *			MPI_Group group1 (struct mpi_group_t *)
 *			MPI_Group group2 (struct mpi_group_t *)
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_difference
typedef struct {
	MPI_Group group1;
	MPI_Group group2;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_difference_t;

#define GET_ARGS_VALUE_MPI_Group_difference(activity) { \
	args_MPI_Group_difference_t* args = (args_MPI_Group_difference_t*) activity->args; \
	args->group1 = (MPI_Group) group1; \
	args->group2 = (MPI_Group) group2; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_difference(args) { \
	args_MPI_Group_difference_t* pargs = (args_MPI_Group_difference_t*) args; \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_incl` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_incl` function call.
 *
 * @struct args_MPI_Group_incl_t
 *
 * @note 
 *	int
 *	MPI_Group_incl (
 *			MPI_Group group (struct mpi_group_t *)
 *			int n (int)
 *			const int[] ranks (const int[])
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_incl
typedef struct {
	MPI_Group group;
	int n;
	int(* ranks);
	struct {
		int val;
	} ranks__ref;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_incl_t;

#define GET_ARGS_VALUE_MPI_Group_incl(activity) { \
	args_MPI_Group_incl_t* args = (args_MPI_Group_incl_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->n = (int) n; \
	args->ranks = (int(*)) ranks; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_incl(args) { \
	args_MPI_Group_incl_t* pargs = (args_MPI_Group_incl_t*) args; \
	if (pargs->ranks != NULL) { \
		pargs->ranks__ref.val = *pargs->ranks; \
	} \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_excl` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_excl` function call.
 *
 * @struct args_MPI_Group_excl_t
 *
 * @note 
 *	int
 *	MPI_Group_excl (
 *			MPI_Group group (struct mpi_group_t *)
 *			int n (int)
 *			const int[] ranks (const int[])
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_excl
typedef struct {
	MPI_Group group;
	int n;
	int(* ranks);
	struct {
		int val;
	} ranks__ref;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_excl_t;

#define GET_ARGS_VALUE_MPI_Group_excl(activity) { \
	args_MPI_Group_excl_t* args = (args_MPI_Group_excl_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->n = (int) n; \
	args->ranks = (int(*)) ranks; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_excl(args) { \
	args_MPI_Group_excl_t* pargs = (args_MPI_Group_excl_t*) args; \
	if (pargs->ranks != NULL) { \
		pargs->ranks__ref.val = *pargs->ranks; \
	} \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_range_incl` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_range_incl` function call.
 *
 * @struct args_MPI_Group_range_incl_t
 *
 * @note 
 *	int
 *	MPI_Group_range_incl (
 *			MPI_Group group (struct mpi_group_t *)
 *			int n (int)
 *			int[][3] ranges (int[][3])
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_range_incl
typedef struct {
	MPI_Group group;
	int n;
	int(* ranges)[3];
	struct {
		int val[3];
	} ranges__ref;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_range_incl_t;

#define GET_ARGS_VALUE_MPI_Group_range_incl(activity) { \
	args_MPI_Group_range_incl_t* args = (args_MPI_Group_range_incl_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->n = (int) n; \
	args->ranges = (int(*)[3]) ranges; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_range_incl(args) { \
	args_MPI_Group_range_incl_t* pargs = (args_MPI_Group_range_incl_t*) args; \
	if (pargs->ranges != NULL) { \
		memcpy(pargs->ranges__ref.val, pargs->ranges, sizeof(pargs->ranges__ref.val)); \
	} \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_range_excl` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_range_excl` function call.
 *
 * @struct args_MPI_Group_range_excl_t
 *
 * @note 
 *	int
 *	MPI_Group_range_excl (
 *			MPI_Group group (struct mpi_group_t *)
 *			int n (int)
 *			int[][3] ranges (int[][3])
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_range_excl
typedef struct {
	MPI_Group group;
	int n;
	int(* ranges)[3];
	struct {
		int val[3];
	} ranges__ref;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_range_excl_t;

#define GET_ARGS_VALUE_MPI_Group_range_excl(activity) { \
	args_MPI_Group_range_excl_t* args = (args_MPI_Group_range_excl_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->n = (int) n; \
	args->ranges = (int(*)[3]) ranges; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_range_excl(args) { \
	args_MPI_Group_range_excl_t* pargs = (args_MPI_Group_range_excl_t*) args; \
	if (pargs->ranges != NULL) { \
		memcpy(pargs->ranges__ref.val, pargs->ranges, sizeof(pargs->ranges__ref.val)); \
	} \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_free` function call.
 *
 * @struct args_MPI_Group_free_t
 *
 * @note 
 *	int
 *	MPI_Group_free (
 *			MPI_Group * group (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_free
typedef struct {
	MPI_Group * group;
	struct {
		MPI_Group val;
	} group__ref;
	int retval;
} args_MPI_Group_free_t;

#define GET_ARGS_VALUE_MPI_Group_free(activity) { \
	args_MPI_Group_free_t* args = (args_MPI_Group_free_t*) activity->args; \
	args->group = (MPI_Group *) group; \
};

#define GET_PTRS_VALUE_MPI_Group_free(args) { \
	args_MPI_Group_free_t* pargs = (args_MPI_Group_free_t*) args; \
	if (pargs->group != NULL) { \
		pargs->group__ref.val = *pargs->group; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Op_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Op_create` function call.
 *
 * @struct args_MPI_Op_create_t
 *
 * @note 
 *	int
 *	MPI_Op_create (
 *			MPI_User_function * function (void (*)(void *, void *, int *, struct mpi_datatype_t * *))
 *			int commute (int)
 *			MPI_Op * op (struct mpi_op_t **)
 *	)
 */
#if HAVE_MPI_Op_create
typedef struct {
	MPI_User_function * function;
	int commute;
	MPI_Op * op;
	struct {
		MPI_Op val;
	} op__ref;
	int retval;
} args_MPI_Op_create_t;

#define GET_ARGS_VALUE_MPI_Op_create(activity) { \
	args_MPI_Op_create_t* args = (args_MPI_Op_create_t*) activity->args; \
	args->function = (MPI_User_function *) function; \
	args->commute = (int) commute; \
	args->op = (MPI_Op *) op; \
};

#define GET_PTRS_VALUE_MPI_Op_create(args) { \
	args_MPI_Op_create_t* pargs = (args_MPI_Op_create_t*) args; \
	if (pargs->op != NULL) { \
		pargs->op__ref.val = *pargs->op; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Op_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Op_free` function call.
 *
 * @struct args_MPI_Op_free_t
 *
 * @note 
 *	int
 *	MPI_Op_free (
 *			MPI_Op * op (struct mpi_op_t **)
 *	)
 */
#if HAVE_MPI_Op_free
typedef struct {
	MPI_Op * op;
	struct {
		MPI_Op val;
	} op__ref;
	int retval;
} args_MPI_Op_free_t;

#define GET_ARGS_VALUE_MPI_Op_free(activity) { \
	args_MPI_Op_free_t* args = (args_MPI_Op_free_t*) activity->args; \
	args->op = (MPI_Op *) op; \
};

#define GET_PTRS_VALUE_MPI_Op_free(args) { \
	args_MPI_Op_free_t* pargs = (args_MPI_Op_free_t*) args; \
	if (pargs->op != NULL) { \
		pargs->op__ref.val = *pargs->op; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Wtime` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Wtime` function call.
 *
 * @struct args_MPI_Wtime_t
 *
 * @note 
 *	double
 *	MPI_Wtime (
 *	)
 */
#if HAVE_MPI_Wtime
typedef struct {
	double retval;
} args_MPI_Wtime_t;

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Wtick` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Wtick` function call.
 *
 * @struct args_MPI_Wtick_t
 *
 * @note 
 *	double
 *	MPI_Wtick (
 *	)
 */
#if HAVE_MPI_Wtick
typedef struct {
	double retval;
} args_MPI_Wtick_t;

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_address` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_address` function call.
 *
 * @struct args_MPI_Get_address_t
 *
 * @note 
 *	int
 *	MPI_Get_address (
 *			const void * location (const void *)
 *			MPI_Aint * address (long*)
 *	)
 */
#if HAVE_MPI_Get_address
typedef struct {
	void * location;
	MPI_Aint * address;
	struct {
		MPI_Aint val;
	} address__ref;
	int retval;
} args_MPI_Get_address_t;

#define GET_ARGS_VALUE_MPI_Get_address(activity) { \
	args_MPI_Get_address_t* args = (args_MPI_Get_address_t*) activity->args; \
	args->location = (void *) location; \
	args->address = (MPI_Aint *) address; \
};

#define GET_PTRS_VALUE_MPI_Get_address(args) { \
	args_MPI_Get_address_t* pargs = (args_MPI_Get_address_t*) args; \
	if (pargs->address != NULL) { \
		pargs->address__ref.val = *pargs->address; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_elements_x` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_elements_x` function call.
 *
 * @struct args_MPI_Get_elements_x_t
 *
 * @note 
 *	int
 *	MPI_Get_elements_x (
 *			const MPI_Status * status (const struct opaque * *)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Count * count (long long*)
 *	)
 */
#if HAVE_MPI_Get_elements_x
typedef struct {
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	MPI_Datatype datatype;
	MPI_Count * count;
	struct {
		MPI_Count val;
	} count__ref;
	int retval;
} args_MPI_Get_elements_x_t;

#define GET_ARGS_VALUE_MPI_Get_elements_x(activity) { \
	args_MPI_Get_elements_x_t* args = (args_MPI_Get_elements_x_t*) activity->args; \
	args->status = (MPI_Status *) status; \
	args->datatype = (MPI_Datatype) datatype; \
	args->count = (MPI_Count *) count; \
};

#define GET_PTRS_VALUE_MPI_Get_elements_x(args) { \
	args_MPI_Get_elements_x_t* pargs = (args_MPI_Get_elements_x_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
	if (pargs->count != NULL) { \
		pargs->count__ref.val = *pargs->count; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cart_shift` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cart_shift` function call.
 *
 * @struct args_MPI_Cart_shift_t
 *
 * @note 
 *	int
 *	MPI_Cart_shift (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int direction (int)
 *			int disp (int)
 *			int * rank_source (int *)
 *			int * rank_dest (int *)
 *	)
 */
#if HAVE_MPI_Cart_shift
typedef struct {
	MPI_Comm comm;
	int direction;
	int disp;
	int * rank_source;
	struct {
		int val;
	} rank_source__ref;
	int * rank_dest;
	struct {
		int val;
	} rank_dest__ref;
	int retval;
} args_MPI_Cart_shift_t;

#define GET_ARGS_VALUE_MPI_Cart_shift(activity) { \
	args_MPI_Cart_shift_t* args = (args_MPI_Cart_shift_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->direction = (int) direction; \
	args->disp = (int) disp; \
	args->rank_source = (int *) rank_source; \
	args->rank_dest = (int *) rank_dest; \
};

#define GET_PTRS_VALUE_MPI_Cart_shift(args) { \
	args_MPI_Cart_shift_t* pargs = (args_MPI_Cart_shift_t*) args; \
	if (pargs->rank_source != NULL) { \
		pargs->rank_source__ref.val = *pargs->rank_source; \
	} \
	if (pargs->rank_dest != NULL) { \
		pargs->rank_dest__ref.val = *pargs->rank_dest; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_flush_local_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_flush_local_all` function call.
 *
 * @struct args_MPI_Win_flush_local_all_t
 *
 * @note 
 *	int
 *	MPI_Win_flush_local_all (
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_flush_local_all
typedef struct {
	MPI_Win win;
	int retval;
} args_MPI_Win_flush_local_all_t;

#define GET_ARGS_VALUE_MPI_Win_flush_local_all(activity) { \
	args_MPI_Win_flush_local_all_t* args = (args_MPI_Win_flush_local_all_t*) activity->args; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_byte_offset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_byte_offset` function call.
 *
 * @struct args_MPI_File_get_byte_offset_t
 *
 * @note 
 *	int
 *	MPI_File_get_byte_offset (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			MPI_Offset * disp (long long*)
 *	)
 */
#if HAVE_MPI_File_get_byte_offset
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	MPI_Offset * disp;
	struct {
		MPI_Offset val;
	} disp__ref;
	int retval;
} args_MPI_File_get_byte_offset_t;

#define GET_ARGS_VALUE_MPI_File_get_byte_offset(activity) { \
	args_MPI_File_get_byte_offset_t* args = (args_MPI_File_get_byte_offset_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->disp = (MPI_Offset *) disp; \
};

#define GET_PTRS_VALUE_MPI_File_get_byte_offset(args) { \
	args_MPI_File_get_byte_offset_t* pargs = (args_MPI_File_get_byte_offset_t*) args; \
	if (pargs->disp != NULL) { \
		pargs->disp__ref.val = *pargs->disp; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_get_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_get_info` function call.
 *
 * @struct args_MPI_Win_get_info_t
 *
 * @note 
 *	int
 *	MPI_Win_get_info (
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Info * info_used (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Win_get_info
typedef struct {
	MPI_Win win;
	MPI_Info * info_used;
	struct {
		MPI_Info val;
	} info_used__ref;
	int retval;
} args_MPI_Win_get_info_t;

#define GET_ARGS_VALUE_MPI_Win_get_info(activity) { \
	args_MPI_Win_get_info_t* args = (args_MPI_Win_get_info_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->info_used = (MPI_Info *) info_used; \
};

#define GET_PTRS_VALUE_MPI_Win_get_info(args) { \
	args_MPI_Win_get_info_t* pargs = (args_MPI_Win_get_info_t*) args; \
	if (pargs->info_used != NULL) { \
		pargs->info_used__ref.val = *pargs->info_used; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Rput` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Rput` function call.
 *
 * @struct args_MPI_Rput_t
 *
 * @note 
 *	int
 *	MPI_Rput (
 *			const void * origin_addr (const void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_cout (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Rput
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_cout;
	MPI_Datatype target_datatype;
	MPI_Win win;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Rput_t;

#define GET_ARGS_VALUE_MPI_Rput(activity) { \
	args_MPI_Rput_t* args = (args_MPI_Rput_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_cout = (int) target_cout; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->win = (MPI_Win) win; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Rput(args) { \
	args_MPI_Rput_t* pargs = (args_MPI_Rput_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Dist_graph_neighbors_count` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Dist_graph_neighbors_count` function call.
 *
 * @struct args_MPI_Dist_graph_neighbors_count_t
 *
 * @note 
 *	int
 *	MPI_Dist_graph_neighbors_count (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * inneighbors (int *)
 *			int * outneighbors (int *)
 *			int * weighted (int *)
 *	)
 */
#if HAVE_MPI_Dist_graph_neighbors_count
typedef struct {
	MPI_Comm comm;
	int * inneighbors;
	struct {
		int val;
	} inneighbors__ref;
	int * outneighbors;
	struct {
		int val;
	} outneighbors__ref;
	int * weighted;
	struct {
		int val;
	} weighted__ref;
	int retval;
} args_MPI_Dist_graph_neighbors_count_t;

#define GET_ARGS_VALUE_MPI_Dist_graph_neighbors_count(activity) { \
	args_MPI_Dist_graph_neighbors_count_t* args = (args_MPI_Dist_graph_neighbors_count_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->inneighbors = (int *) inneighbors; \
	args->outneighbors = (int *) outneighbors; \
	args->weighted = (int *) weighted; \
};

#define GET_PTRS_VALUE_MPI_Dist_graph_neighbors_count(args) { \
	args_MPI_Dist_graph_neighbors_count_t* pargs = (args_MPI_Dist_graph_neighbors_count_t*) args; \
	if (pargs->inneighbors != NULL) { \
		pargs->inneighbors__ref.val = *pargs->inneighbors; \
	} \
	if (pargs->outneighbors != NULL) { \
		pargs->outneighbors__ref.val = *pargs->outneighbors; \
	} \
	if (pargs->weighted != NULL) { \
		pargs->weighted__ref.val = *pargs->weighted; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ireduce` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ireduce` function call.
 *
 * @struct args_MPI_Ireduce_t
 *
 * @note 
 *	int
 *	MPI_Ireduce (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ireduce
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	int root;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ireduce_t;

#define GET_ARGS_VALUE_MPI_Ireduce(activity) { \
	args_MPI_Ireduce_t* args = (args_MPI_Ireduce_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ireduce(args) { \
	args_MPI_Ireduce_t* pargs = (args_MPI_Ireduce_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Psend_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Psend_init` function call.
 *
 * @struct args_MPI_Psend_init_t
 *
 * @note 
 *	int
 *	MPI_Psend_init (
 *			const void * buf (const void *)
 *			int partitions (int)
 *			MPI_Count count (long long)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Psend_init
typedef struct {
	void * buf;
	int partitions;
	MPI_Count count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Psend_init_t;

#define GET_ARGS_VALUE_MPI_Psend_init(activity) { \
	args_MPI_Psend_init_t* args = (args_MPI_Psend_init_t*) activity->args; \
	args->buf = (void *) buf; \
	args->partitions = (int) partitions; \
	args->count = (MPI_Count) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Psend_init(args) { \
	args_MPI_Psend_init_t* pargs = (args_MPI_Psend_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Reduce_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Reduce_init` function call.
 *
 * @struct args_MPI_Reduce_init_t
 *
 * @note 
 *	int
 *	MPI_Reduce_init (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Reduce_init
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	int root;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Reduce_init_t;

#define GET_ARGS_VALUE_MPI_Reduce_init(activity) { \
	args_MPI_Reduce_init_t* args = (args_MPI_Reduce_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Reduce_init(args) { \
	args_MPI_Reduce_init_t* pargs = (args_MPI_Reduce_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_wait` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_wait` function call.
 *
 * @struct args_MPI_Win_wait_t
 *
 * @note 
 *	int
 *	MPI_Win_wait (
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_wait
typedef struct {
	MPI_Win win;
	int retval;
} args_MPI_Win_wait_t;

#define GET_ARGS_VALUE_MPI_Win_wait(activity) { \
	args_MPI_Win_wait_t* args = (args_MPI_Win_wait_t*) activity->args; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Rsend_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Rsend_init` function call.
 *
 * @struct args_MPI_Rsend_init_t
 *
 * @note 
 *	int
 *	MPI_Rsend_init (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Rsend_init
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Rsend_init_t;

#define GET_ARGS_VALUE_MPI_Rsend_init(activity) { \
	args_MPI_Rsend_init_t* args = (args_MPI_Rsend_init_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Rsend_init(args) { \
	args_MPI_Rsend_init_t* pargs = (args_MPI_Rsend_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_at_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_at_all` function call.
 *
 * @struct args_MPI_File_write_at_all_t
 *
 * @note 
 *	int
 *	MPI_File_write_at_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_at_all
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_at_all_t;

#define GET_ARGS_VALUE_MPI_File_write_at_all(activity) { \
	args_MPI_File_write_at_all_t* args = (args_MPI_File_write_at_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_at_all(args) { \
	args_MPI_File_write_at_all_t* pargs = (args_MPI_File_write_at_all_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_ordered_end` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_ordered_end` function call.
 *
 * @struct args_MPI_File_write_ordered_end_t
 *
 * @note 
 *	int
 *	MPI_File_write_ordered_end (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_ordered_end
typedef struct {
	MPI_File fh;
	void * buf;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_ordered_end_t;

#define GET_ARGS_VALUE_MPI_File_write_ordered_end(activity) { \
	args_MPI_File_write_ordered_end_t* args = (args_MPI_File_write_ordered_end_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_ordered_end(args) { \
	args_MPI_File_write_ordered_end_t* pargs = (args_MPI_File_write_ordered_end_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Errhandler_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Errhandler_free` function call.
 *
 * @struct args_MPI_Errhandler_free_t
 *
 * @note 
 *	int
 *	MPI_Errhandler_free (
 *			MPI_Errhandler * errhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_Errhandler_free
typedef struct {
	MPI_Errhandler * errhandler;
	struct {
		MPI_Errhandler val;
	} errhandler__ref;
	int retval;
} args_MPI_Errhandler_free_t;

#define GET_ARGS_VALUE_MPI_Errhandler_free(activity) { \
	args_MPI_Errhandler_free_t* args = (args_MPI_Errhandler_free_t*) activity->args; \
	args->errhandler = (MPI_Errhandler *) errhandler; \
};

#define GET_PTRS_VALUE_MPI_Errhandler_free(args) { \
	args_MPI_Errhandler_free_t* pargs = (args_MPI_Errhandler_free_t*) args; \
	if (pargs->errhandler != NULL) { \
		pargs->errhandler__ref.val = *pargs->errhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_shared_query` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_shared_query` function call.
 *
 * @struct args_MPI_Win_shared_query_t
 *
 * @note 
 *	int
 *	MPI_Win_shared_query (
 *			MPI_Win win (struct mpi_win_t *)
 *			int rank (int)
 *			MPI_Aint * size (long*)
 *			int * disp_unit (int *)
 *			void * baseptr (void *)
 *	)
 */
#if HAVE_MPI_Win_shared_query
typedef struct {
	MPI_Win win;
	int rank;
	MPI_Aint * size;
	struct {
		MPI_Aint val;
	} size__ref;
	int * disp_unit;
	struct {
		int val;
	} disp_unit__ref;
	void * baseptr;
	int retval;
} args_MPI_Win_shared_query_t;

#define GET_ARGS_VALUE_MPI_Win_shared_query(activity) { \
	args_MPI_Win_shared_query_t* args = (args_MPI_Win_shared_query_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->rank = (int) rank; \
	args->size = (MPI_Aint *) size; \
	args->disp_unit = (int *) disp_unit; \
	args->baseptr = (void *) baseptr; \
};

#define GET_PTRS_VALUE_MPI_Win_shared_query(args) { \
	args_MPI_Win_shared_query_t* pargs = (args_MPI_Win_shared_query_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
	if (pargs->disp_unit != NULL) { \
		pargs->disp_unit__ref.val = *pargs->disp_unit; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_lock` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_lock` function call.
 *
 * @struct args_MPI_Win_lock_t
 *
 * @note 
 *	int
 *	MPI_Win_lock (
 *			int lock_type (int)
 *			int rank (int)
 *			int mpi_assert (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_lock
typedef struct {
	int lock_type;
	int rank;
	int mpi_assert;
	MPI_Win win;
	int retval;
} args_MPI_Win_lock_t;

#define GET_ARGS_VALUE_MPI_Win_lock(activity) { \
	args_MPI_Win_lock_t* args = (args_MPI_Win_lock_t*) activity->args; \
	args->lock_type = (int) lock_type; \
	args->rank = (int) rank; \
	args->mpi_assert = (int) mpi_assert; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_accumulate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_accumulate` function call.
 *
 * @struct args_MPI_Get_accumulate_t
 *
 * @note 
 *	int
 *	MPI_Get_accumulate (
 *			const void * origin_addr (const void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			void * result_addr (void *)
 *			int result_count (int)
 *			MPI_Datatype result_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_count (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Get_accumulate
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	void * result_addr;
	int result_count;
	MPI_Datatype result_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_count;
	MPI_Datatype target_datatype;
	MPI_Op op;
	MPI_Win win;
	int retval;
} args_MPI_Get_accumulate_t;

#define GET_ARGS_VALUE_MPI_Get_accumulate(activity) { \
	args_MPI_Get_accumulate_t* args = (args_MPI_Get_accumulate_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->result_addr = (void *) result_addr; \
	args->result_count = (int) result_count; \
	args->result_datatype = (MPI_Datatype) result_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_count = (int) target_count; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->op = (MPI_Op) op; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_name` function call.
 *
 * @struct args_MPI_Type_get_name_t
 *
 * @note 
 *	int
 *	MPI_Type_get_name (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			char * type_name (char *)
 *			int * resultlen (int *)
 *	)
 */
#if HAVE_MPI_Type_get_name
typedef struct {
	MPI_Datatype type;
	char * type_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} type_name__ref;
	int * resultlen;
	struct {
		int val;
	} resultlen__ref;
	int retval;
} args_MPI_Type_get_name_t;

#define GET_ARGS_VALUE_MPI_Type_get_name(activity) { \
	args_MPI_Type_get_name_t* args = (args_MPI_Type_get_name_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->type_name = (char *) type_name; \
	args->resultlen = (int *) resultlen; \
};

#define GET_PTRS_VALUE_MPI_Type_get_name(args) { \
	args_MPI_Type_get_name_t* pargs = (args_MPI_Type_get_name_t*) args; \
	if (pargs->type_name != NULL) { \
		strncpy(pargs->type_name__ref.val, pargs->type_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->resultlen != NULL) { \
		pargs->resultlen__ref.val = *pargs->resultlen; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_atomicity` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_atomicity` function call.
 *
 * @struct args_MPI_File_get_atomicity_t
 *
 * @note 
 *	int
 *	MPI_File_get_atomicity (
 *			MPI_File fh (struct mpi_file_t *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_File_get_atomicity
typedef struct {
	MPI_File fh;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_File_get_atomicity_t;

#define GET_ARGS_VALUE_MPI_File_get_atomicity(activity) { \
	args_MPI_File_get_atomicity_t* args = (args_MPI_File_get_atomicity_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_File_get_atomicity(args) { \
	args_MPI_File_get_atomicity_t* pargs = (args_MPI_File_get_atomicity_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_set_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_set_info` function call.
 *
 * @struct args_MPI_Session_set_info_t
 *
 * @note 
 *	int
 *	MPI_Session_set_info (
 *			MPI_Session session (struct mpi_instance_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *	)
 */
#if HAVE_MPI_Session_set_info
typedef struct {
	MPI_Session session;
	MPI_Info info;
	int retval;
} args_MPI_Session_set_info_t;

#define GET_ARGS_VALUE_MPI_Session_set_info(activity) { \
	args_MPI_Session_set_info_t* args = (args_MPI_Session_set_info_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->info = (MPI_Info) info; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_from_session_pset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_from_session_pset` function call.
 *
 * @struct args_MPI_Group_from_session_pset_t
 *
 * @note 
 *	int
 *	MPI_Group_from_session_pset (
 *			MPI_Session session (struct mpi_instance_t *)
 *			const char * pset_name (const char *)
 *			MPI_Group * newgroup (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Group_from_session_pset
typedef struct {
	MPI_Session session;
	char * pset_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} pset_name__ref;
	MPI_Group * newgroup;
	struct {
		MPI_Group val;
	} newgroup__ref;
	int retval;
} args_MPI_Group_from_session_pset_t;

#define GET_ARGS_VALUE_MPI_Group_from_session_pset(activity) { \
	args_MPI_Group_from_session_pset_t* args = (args_MPI_Group_from_session_pset_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->pset_name = (char *) pset_name; \
	args->newgroup = (MPI_Group *) newgroup; \
};

#define GET_PTRS_VALUE_MPI_Group_from_session_pset(args) { \
	args_MPI_Group_from_session_pset_t* pargs = (args_MPI_Group_from_session_pset_t*) args; \
	if (pargs->pset_name != NULL) { \
		strncpy(pargs->pset_name__ref.val, pargs->pset_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->newgroup != NULL) { \
		pargs->newgroup__ref.val = *pargs->newgroup; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_idup` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_idup` function call.
 *
 * @struct args_MPI_Comm_idup_t
 *
 * @note 
 *	int
 *	MPI_Comm_idup (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Comm_idup
typedef struct {
	MPI_Comm comm;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Comm_idup_t;

#define GET_ARGS_VALUE_MPI_Comm_idup(activity) { \
	args_MPI_Comm_idup_t* args = (args_MPI_Comm_idup_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->newcomm = (MPI_Comm *) newcomm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Comm_idup(args) { \
	args_MPI_Comm_idup_t* pargs = (args_MPI_Comm_idup_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_get_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_get_name` function call.
 *
 * @struct args_MPI_Win_get_name_t
 *
 * @note 
 *	int
 *	MPI_Win_get_name (
 *			MPI_Win win (struct mpi_win_t *)
 *			char * win_name (char *)
 *			int * resultlen (int *)
 *	)
 */
#if HAVE_MPI_Win_get_name
typedef struct {
	MPI_Win win;
	char * win_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} win_name__ref;
	int * resultlen;
	struct {
		int val;
	} resultlen__ref;
	int retval;
} args_MPI_Win_get_name_t;

#define GET_ARGS_VALUE_MPI_Win_get_name(activity) { \
	args_MPI_Win_get_name_t* args = (args_MPI_Win_get_name_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->win_name = (char *) win_name; \
	args->resultlen = (int *) resultlen; \
};

#define GET_PTRS_VALUE_MPI_Win_get_name(args) { \
	args_MPI_Win_get_name_t* pargs = (args_MPI_Win_get_name_t*) args; \
	if (pargs->win_name != NULL) { \
		strncpy(pargs->win_name__ref.val, pargs->win_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->resultlen != NULL) { \
		pargs->resultlen__ref.val = *pargs->resultlen; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Allgatherv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Allgatherv_init` function call.
 *
 * @struct args_MPI_Allgatherv_init_t
 *
 * @note 
 *	int
 *	MPI_Allgatherv_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Allgatherv_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Allgatherv_init_t;

#define GET_ARGS_VALUE_MPI_Allgatherv_init(activity) { \
	args_MPI_Allgatherv_init_t* args = (args_MPI_Allgatherv_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Allgatherv_init(args) { \
	args_MPI_Allgatherv_init_t* pargs = (args_MPI_Allgatherv_init_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_dup_with_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_dup_with_info` function call.
 *
 * @struct args_MPI_Comm_dup_with_info_t
 *
 * @note 
 *	int
 *	MPI_Comm_dup_with_info (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_dup_with_info
typedef struct {
	MPI_Comm comm;
	MPI_Info info;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_dup_with_info_t;

#define GET_ARGS_VALUE_MPI_Comm_dup_with_info(activity) { \
	args_MPI_Comm_dup_with_info_t* args = (args_MPI_Comm_dup_with_info_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_dup_with_info(args) { \
	args_MPI_Comm_dup_with_info_t* pargs = (args_MPI_Comm_dup_with_info_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_get_num_psets` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_get_num_psets` function call.
 *
 * @struct args_MPI_Session_get_num_psets_t
 *
 * @note 
 *	int
 *	MPI_Session_get_num_psets (
 *			MPI_Session session (struct mpi_instance_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			int * npset_names (int *)
 *	)
 */
#if HAVE_MPI_Session_get_num_psets
typedef struct {
	MPI_Session session;
	MPI_Info info;
	int * npset_names;
	struct {
		int val;
	} npset_names__ref;
	int retval;
} args_MPI_Session_get_num_psets_t;

#define GET_ARGS_VALUE_MPI_Session_get_num_psets(activity) { \
	args_MPI_Session_get_num_psets_t* args = (args_MPI_Session_get_num_psets_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->info = (MPI_Info) info; \
	args->npset_names = (int *) npset_names; \
};

#define GET_PTRS_VALUE_MPI_Session_get_num_psets(args) { \
	args_MPI_Session_get_num_psets_t* pargs = (args_MPI_Session_get_num_psets_t*) args; \
	if (pargs->npset_names != NULL) { \
		pargs->npset_names__ref.val = *pargs->npset_names; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Igather` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Igather` function call.
 *
 * @struct args_MPI_Igather_t
 *
 * @note 
 *	int
 *	MPI_Igather (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Igather
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Igather_t;

#define GET_ARGS_VALUE_MPI_Igather(activity) { \
	args_MPI_Igather_t* args = (args_MPI_Igather_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Igather(args) { \
	args_MPI_Igather_t* pargs = (args_MPI_Igather_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_at` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_at` function call.
 *
 * @struct args_MPI_File_read_at_t
 *
 * @note 
 *	int
 *	MPI_File_read_at (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_at
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_at_t;

#define GET_ARGS_VALUE_MPI_File_read_at(activity) { \
	args_MPI_File_read_at_t* args = (args_MPI_File_read_at_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_at(args) { \
	args_MPI_File_read_at_t* pargs = (args_MPI_File_read_at_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_hvector` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_hvector` function call.
 *
 * @struct args_MPI_Type_create_hvector_t
 *
 * @note 
 *	int
 *	MPI_Type_create_hvector (
 *			int count (int)
 *			int blocklength (int)
 *			MPI_Aint stride (long)
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_hvector
typedef struct {
	int count;
	int blocklength;
	MPI_Aint stride;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_hvector_t;

#define GET_ARGS_VALUE_MPI_Type_create_hvector(activity) { \
	args_MPI_Type_create_hvector_t* args = (args_MPI_Type_create_hvector_t*) activity->args; \
	args->count = (int) count; \
	args->blocklength = (int) blocklength; \
	args->stride = (MPI_Aint) stride; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_hvector(args) { \
	args_MPI_Type_create_hvector_t* pargs = (args_MPI_Type_create_hvector_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_at_all_begin` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_at_all_begin` function call.
 *
 * @struct args_MPI_File_write_at_all_begin_t
 *
 * @note 
 *	int
 *	MPI_File_write_at_all_begin (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_File_write_at_all_begin
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	int retval;
} args_MPI_File_write_at_all_begin_t;

#define GET_ARGS_VALUE_MPI_File_write_at_all_begin(activity) { \
	args_MPI_File_write_at_all_begin_t* args = (args_MPI_File_write_at_all_begin_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Grequest_start` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Grequest_start` function call.
 *
 * @struct args_MPI_Grequest_start_t
 *
 * @note 
 *	int
 *	MPI_Grequest_start (
 *			MPI_Grequest_query_function * query_fn (int (*)(void *, struct opaque * *))
 *			MPI_Grequest_free_function * free_fn (int (*)(void *))
 *			MPI_Grequest_cancel_function * cancel_fn (int (*)(void *, int))
 *			void * extra_state (void *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Grequest_start
typedef struct {
	MPI_Grequest_query_function * query_fn;
	MPI_Grequest_free_function * free_fn;
	MPI_Grequest_cancel_function * cancel_fn;
	void * extra_state;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Grequest_start_t;

#define GET_ARGS_VALUE_MPI_Grequest_start(activity) { \
	args_MPI_Grequest_start_t* args = (args_MPI_Grequest_start_t*) activity->args; \
	args->query_fn = (MPI_Grequest_query_function *) query_fn; \
	args->free_fn = (MPI_Grequest_free_function *) free_fn; \
	args->cancel_fn = (MPI_Grequest_cancel_function *) cancel_fn; \
	args->extra_state = (void *) extra_state; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Grequest_start(args) { \
	args_MPI_Grequest_start_t* pargs = (args_MPI_Grequest_start_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Bsend_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Bsend_init` function call.
 *
 * @struct args_MPI_Bsend_init_t
 *
 * @note 
 *	int
 *	MPI_Bsend_init (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Bsend_init
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Bsend_init_t;

#define GET_ARGS_VALUE_MPI_Bsend_init(activity) { \
	args_MPI_Bsend_init_t* args = (args_MPI_Bsend_init_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Bsend_init(args) { \
	args_MPI_Bsend_init_t* pargs = (args_MPI_Bsend_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_set_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_set_size` function call.
 *
 * @struct args_MPI_File_set_size_t
 *
 * @note 
 *	int
 *	MPI_File_set_size (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset size (long long)
 *	)
 */
#if HAVE_MPI_File_set_size
typedef struct {
	MPI_File fh;
	MPI_Offset size;
	int retval;
} args_MPI_File_set_size_t;

#define GET_ARGS_VALUE_MPI_File_set_size(activity) { \
	args_MPI_File_set_size_t* args = (args_MPI_File_set_size_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->size = (MPI_Offset) size; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_set_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_set_name` function call.
 *
 * @struct args_MPI_Type_set_name_t
 *
 * @note 
 *	int
 *	MPI_Type_set_name (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			const char * type_name (const char *)
 *	)
 */
#if HAVE_MPI_Type_set_name
typedef struct {
	MPI_Datatype type;
	char * type_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} type_name__ref;
	int retval;
} args_MPI_Type_set_name_t;

#define GET_ARGS_VALUE_MPI_Type_set_name(activity) { \
	args_MPI_Type_set_name_t* args = (args_MPI_Type_set_name_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->type_name = (char *) type_name; \
};

#define GET_PTRS_VALUE_MPI_Type_set_name(args) { \
	args_MPI_Type_set_name_t* pargs = (args_MPI_Type_set_name_t*) args; \
	if (pargs->type_name != NULL) { \
		strncpy(pargs->type_name__ref.val, pargs->type_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_split_type` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_split_type` function call.
 *
 * @struct args_MPI_Comm_split_type_t
 *
 * @note 
 *	int
 *	MPI_Comm_split_type (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int split_type (int)
 *			int key (int)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_split_type
typedef struct {
	MPI_Comm comm;
	int split_type;
	int key;
	MPI_Info info;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_split_type_t;

#define GET_ARGS_VALUE_MPI_Comm_split_type(activity) { \
	args_MPI_Comm_split_type_t* args = (args_MPI_Comm_split_type_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->split_type = (int) split_type; \
	args->key = (int) key; \
	args->info = (MPI_Info) info; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_split_type(args) { \
	args_MPI_Comm_split_type_t* pargs = (args_MPI_Comm_split_type_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_at_all_end` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_at_all_end` function call.
 *
 * @struct args_MPI_File_read_at_all_end_t
 *
 * @note 
 *	int
 *	MPI_File_read_at_all_end (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_at_all_end
typedef struct {
	MPI_File fh;
	void * buf;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_at_all_end_t;

#define GET_ARGS_VALUE_MPI_File_read_at_all_end(activity) { \
	args_MPI_File_read_at_all_end_t* args = (args_MPI_File_read_at_all_end_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_at_all_end(args) { \
	args_MPI_File_read_at_all_end_t* pargs = (args_MPI_File_read_at_all_end_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_all` function call.
 *
 * @struct args_MPI_File_write_all_t
 *
 * @note 
 *	int
 *	MPI_File_write_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_all
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_all_t;

#define GET_ARGS_VALUE_MPI_File_write_all(activity) { \
	args_MPI_File_write_all_t* args = (args_MPI_File_write_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_all(args) { \
	args_MPI_File_write_all_t* pargs = (args_MPI_File_write_all_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Improbe` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Improbe` function call.
 *
 * @struct args_MPI_Improbe_t
 *
 * @note 
 *	int
 *	MPI_Improbe (
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * flag (int *)
 *			MPI_Message * message (struct mpi_message_t **)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Improbe
typedef struct {
	int source;
	int tag;
	MPI_Comm comm;
	int * flag;
	struct {
		int val;
	} flag__ref;
	MPI_Message * message;
	struct {
		MPI_Message val;
	} message__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Improbe_t;

#define GET_ARGS_VALUE_MPI_Improbe(activity) { \
	args_MPI_Improbe_t* args = (args_MPI_Improbe_t*) activity->args; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->flag = (int *) flag; \
	args->message = (MPI_Message *) message; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Improbe(args) { \
	args_MPI_Improbe_t* pargs = (args_MPI_Improbe_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
	if (pargs->message != NULL) { \
		pargs->message__ref.val = *pargs->message; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_get_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_get_info` function call.
 *
 * @struct args_MPI_Comm_get_info_t
 *
 * @note 
 *	int
 *	MPI_Comm_get_info (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info * info_used (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Comm_get_info
typedef struct {
	MPI_Comm comm;
	MPI_Info * info_used;
	struct {
		MPI_Info val;
	} info_used__ref;
	int retval;
} args_MPI_Comm_get_info_t;

#define GET_ARGS_VALUE_MPI_Comm_get_info(activity) { \
	args_MPI_Comm_get_info_t* args = (args_MPI_Comm_get_info_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->info_used = (MPI_Info *) info_used; \
};

#define GET_PTRS_VALUE_MPI_Comm_get_info(args) { \
	args_MPI_Comm_get_info_t* pargs = (args_MPI_Comm_get_info_t*) args; \
	if (pargs->info_used != NULL) { \
		pargs->info_used__ref.val = *pargs->info_used; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_all_end` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_all_end` function call.
 *
 * @struct args_MPI_File_read_all_end_t
 *
 * @note 
 *	int
 *	MPI_File_read_all_end (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_all_end
typedef struct {
	MPI_File fh;
	void * buf;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_all_end_t;

#define GET_ARGS_VALUE_MPI_File_read_all_end(activity) { \
	args_MPI_File_read_all_end_t* args = (args_MPI_File_read_all_end_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_all_end(args) { \
	args_MPI_File_read_all_end_t* pargs = (args_MPI_File_read_all_end_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_unlock_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_unlock_all` function call.
 *
 * @struct args_MPI_Win_unlock_all_t
 *
 * @note 
 *	int
 *	MPI_Win_unlock_all (
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_unlock_all
typedef struct {
	MPI_Win win;
	int retval;
} args_MPI_Win_unlock_all_t;

#define GET_ARGS_VALUE_MPI_Win_unlock_all(activity) { \
	args_MPI_Win_unlock_all_t* args = (args_MPI_Win_unlock_all_t*) activity->args; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_f90_integer` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_f90_integer` function call.
 *
 * @struct args_MPI_Type_create_f90_integer_t
 *
 * @note 
 *	int
 *	MPI_Type_create_f90_integer (
 *			int r (int)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_f90_integer
typedef struct {
	int r;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_f90_integer_t;

#define GET_ARGS_VALUE_MPI_Type_create_f90_integer(activity) { \
	args_MPI_Type_create_f90_integer_t* args = (args_MPI_Type_create_f90_integer_t*) activity->args; \
	args->r = (int) r; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_f90_integer(args) { \
	args_MPI_Type_create_f90_integer_t* pargs = (args_MPI_Type_create_f90_integer_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Exscan_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Exscan_init` function call.
 *
 * @struct args_MPI_Exscan_init_t
 *
 * @note 
 *	int
 *	MPI_Exscan_init (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Exscan_init
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Exscan_init_t;

#define GET_ARGS_VALUE_MPI_Exscan_init(activity) { \
	args_MPI_Exscan_init_t* args = (args_MPI_Exscan_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Exscan_init(args) { \
	args_MPI_Exscan_init_t* pargs = (args_MPI_Exscan_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ibsend` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ibsend` function call.
 *
 * @struct args_MPI_Ibsend_t
 *
 * @note 
 *	int
 *	MPI_Ibsend (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ibsend
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ibsend_t;

#define GET_ARGS_VALUE_MPI_Ibsend(activity) { \
	args_MPI_Ibsend_t* args = (args_MPI_Ibsend_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ibsend(args) { \
	args_MPI_Ibsend_t* pargs = (args_MPI_Ibsend_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_flush_local` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_flush_local` function call.
 *
 * @struct args_MPI_Win_flush_local_t
 *
 * @note 
 *	int
 *	MPI_Win_flush_local (
 *			int rank (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_flush_local
typedef struct {
	int rank;
	MPI_Win win;
	int retval;
} args_MPI_Win_flush_local_t;

#define GET_ARGS_VALUE_MPI_Win_flush_local(activity) { \
	args_MPI_Win_flush_local_t* args = (args_MPI_Win_flush_local_t*) activity->args; \
	args->rank = (int) rank; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ialltoallw` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ialltoallw` function call.
 *
 * @struct args_MPI_Ialltoallw_t
 *
 * @note 
 *	int
 *	MPI_Ialltoallw (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			const MPI_Datatype[] sendtypes (const struct mpi_datatype_t *[])
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			const MPI_Datatype[] recvtypes (const struct mpi_datatype_t *[])
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ialltoallw
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype(* sendtypes);
	struct {
		MPI_Datatype val;
	} sendtypes__ref;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype(* recvtypes);
	struct {
		MPI_Datatype val;
	} recvtypes__ref;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ialltoallw_t;

#define GET_ARGS_VALUE_MPI_Ialltoallw(activity) { \
	args_MPI_Ialltoallw_t* args = (args_MPI_Ialltoallw_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtypes = (MPI_Datatype(*)) sendtypes; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtypes = (MPI_Datatype(*)) recvtypes; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ialltoallw(args) { \
	args_MPI_Ialltoallw_t* pargs = (args_MPI_Ialltoallw_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->sendtypes != NULL) { \
		pargs->sendtypes__ref.val = *pargs->sendtypes; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->recvtypes != NULL) { \
		pargs->recvtypes__ref.val = *pargs->recvtypes; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_create_from_group` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_create_from_group` function call.
 *
 * @struct args_MPI_Comm_create_from_group_t
 *
 * @note 
 *	int
 *	MPI_Comm_create_from_group (
 *			MPI_Group group (struct mpi_group_t *)
 *			const char * tag (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_create_from_group
typedef struct {
	MPI_Group group;
	char * tag;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} tag__ref;
	MPI_Info info;
	MPI_Errhandler errhandler;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_create_from_group_t;

#define GET_ARGS_VALUE_MPI_Comm_create_from_group(activity) { \
	args_MPI_Comm_create_from_group_t* args = (args_MPI_Comm_create_from_group_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->tag = (char *) tag; \
	args->info = (MPI_Info) info; \
	args->errhandler = (MPI_Errhandler) errhandler; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_create_from_group(args) { \
	args_MPI_Comm_create_from_group_t* pargs = (args_MPI_Comm_create_from_group_t*) args; \
	if (pargs->tag != NULL) { \
		strncpy(pargs->tag__ref.val, pargs->tag, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_contents` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_contents` function call.
 *
 * @struct args_MPI_Type_get_contents_t
 *
 * @note 
 *	int
 *	MPI_Type_get_contents (
 *			MPI_Datatype mtype (struct mpi_datatype_t *)
 *			int max_integers (int)
 *			int max_addresses (int)
 *			int max_datatypes (int)
 *			int[] array_of_integers (int[])
 *			MPI_Aint[] array_of_addresses (long[])
 *			MPI_Datatype[] array_of_datatypes (struct mpi_datatype_t *[])
 *	)
 */
#if HAVE_MPI_Type_get_contents
typedef struct {
	MPI_Datatype mtype;
	int max_integers;
	int max_addresses;
	int max_datatypes;
	int(* array_of_integers);
	struct {
		int val;
	} array_of_integers__ref;
	MPI_Aint(* array_of_addresses);
	struct {
		MPI_Aint val;
	} array_of_addresses__ref;
	MPI_Datatype(* array_of_datatypes);
	struct {
		MPI_Datatype val;
	} array_of_datatypes__ref;
	int retval;
} args_MPI_Type_get_contents_t;

#define GET_ARGS_VALUE_MPI_Type_get_contents(activity) { \
	args_MPI_Type_get_contents_t* args = (args_MPI_Type_get_contents_t*) activity->args; \
	args->mtype = (MPI_Datatype) mtype; \
	args->max_integers = (int) max_integers; \
	args->max_addresses = (int) max_addresses; \
	args->max_datatypes = (int) max_datatypes; \
	args->array_of_integers = (int(*)) array_of_integers; \
	args->array_of_addresses = (MPI_Aint(*)) array_of_addresses; \
	args->array_of_datatypes = (MPI_Datatype(*)) array_of_datatypes; \
};

#define GET_PTRS_VALUE_MPI_Type_get_contents(args) { \
	args_MPI_Type_get_contents_t* pargs = (args_MPI_Type_get_contents_t*) args; \
	if (pargs->array_of_integers != NULL) { \
		pargs->array_of_integers__ref.val = *pargs->array_of_integers; \
	} \
	if (pargs->array_of_addresses != NULL) { \
		pargs->array_of_addresses__ref.val = *pargs->array_of_addresses; \
	} \
	if (pargs->array_of_datatypes != NULL) { \
		pargs->array_of_datatypes__ref.val = *pargs->array_of_datatypes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iwrite_at` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iwrite_at` function call.
 *
 * @struct args_MPI_File_iwrite_at_t
 *
 * @note 
 *	int
 *	MPI_File_iwrite_at (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iwrite_at
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iwrite_at_t;

#define GET_ARGS_VALUE_MPI_File_iwrite_at(activity) { \
	args_MPI_File_iwrite_at_t* args = (args_MPI_File_iwrite_at_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iwrite_at(args) { \
	args_MPI_File_iwrite_at_t* pargs = (args_MPI_File_iwrite_at_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_set_elements` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_set_elements` function call.
 *
 * @struct args_MPI_Status_set_elements_t
 *
 * @note 
 *	int
 *	MPI_Status_set_elements (
 *			MPI_Status * status (struct opaque **)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int count (int)
 *	)
 */
#if HAVE_MPI_Status_set_elements
typedef struct {
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	MPI_Datatype datatype;
	int count;
	int retval;
} args_MPI_Status_set_elements_t;

#define GET_ARGS_VALUE_MPI_Status_set_elements(activity) { \
	args_MPI_Status_set_elements_t* args = (args_MPI_Status_set_elements_t*) activity->args; \
	args->status = (MPI_Status *) status; \
	args->datatype = (MPI_Datatype) datatype; \
	args->count = (int) count; \
};

#define GET_PTRS_VALUE_MPI_Status_set_elements(args) { \
	args_MPI_Status_set_elements_t* pargs = (args_MPI_Status_set_elements_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_ordered` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_ordered` function call.
 *
 * @struct args_MPI_File_read_ordered_t
 *
 * @note 
 *	int
 *	MPI_File_read_ordered (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_ordered
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_ordered_t;

#define GET_ARGS_VALUE_MPI_File_read_ordered(activity) { \
	args_MPI_File_read_ordered_t* args = (args_MPI_File_read_ordered_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_ordered(args) { \
	args_MPI_File_read_ordered_t* pargs = (args_MPI_File_read_ordered_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Is_thread_main` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Is_thread_main` function call.
 *
 * @struct args_MPI_Is_thread_main_t
 *
 * @note 
 *	int
 *	MPI_Is_thread_main (
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Is_thread_main
typedef struct {
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Is_thread_main_t;

#define GET_ARGS_VALUE_MPI_Is_thread_main(activity) { \
	args_MPI_Is_thread_main_t* args = (args_MPI_Is_thread_main_t*) activity->args; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Is_thread_main(args) { \
	args_MPI_Is_thread_main_t* pargs = (args_MPI_Is_thread_main_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Allreduce_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Allreduce_init` function call.
 *
 * @struct args_MPI_Allreduce_init_t
 *
 * @note 
 *	int
 *	MPI_Allreduce_init (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Allreduce_init
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Allreduce_init_t;

#define GET_ARGS_VALUE_MPI_Allreduce_init(activity) { \
	args_MPI_Allreduce_init_t* args = (args_MPI_Allreduce_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Allreduce_init(args) { \
	args_MPI_Allreduce_init_t* pargs = (args_MPI_Allreduce_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_get_valuelen` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_get_valuelen` function call.
 *
 * @struct args_MPI_Info_get_valuelen_t
 *
 * @note 
 *	int
 *	MPI_Info_get_valuelen (
 *			MPI_Info info (struct mpi_info_t *)
 *			const char * key (const char *)
 *			int * valuelen (int *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Info_get_valuelen
typedef struct {
	MPI_Info info;
	char * key;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} key__ref;
	int * valuelen;
	struct {
		int val;
	} valuelen__ref;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Info_get_valuelen_t;

#define GET_ARGS_VALUE_MPI_Info_get_valuelen(activity) { \
	args_MPI_Info_get_valuelen_t* args = (args_MPI_Info_get_valuelen_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->key = (char *) key; \
	args->valuelen = (int *) valuelen; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Info_get_valuelen(args) { \
	args_MPI_Info_get_valuelen_t* pargs = (args_MPI_Info_get_valuelen_t*) args; \
	if (pargs->key != NULL) { \
		strncpy(pargs->key__ref.val, pargs->key, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->valuelen != NULL) { \
		pargs->valuelen__ref.val = *pargs->valuelen; \
	} \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_create_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_create_errhandler` function call.
 *
 * @struct args_MPI_Comm_create_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Comm_create_errhandler (
 *			MPI_Comm_errhandler_function * function (void (*)(struct mpi_communicator_t * *, int *, ...))
 *			MPI_Errhandler * errhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_Comm_create_errhandler
typedef struct {
	MPI_Comm_errhandler_function * function;
	MPI_Errhandler * errhandler;
	struct {
		MPI_Errhandler val;
	} errhandler__ref;
	int retval;
} args_MPI_Comm_create_errhandler_t;

#define GET_ARGS_VALUE_MPI_Comm_create_errhandler(activity) { \
	args_MPI_Comm_create_errhandler_t* args = (args_MPI_Comm_create_errhandler_t*) activity->args; \
	args->function = (MPI_Comm_errhandler_function *) function; \
	args->errhandler = (MPI_Errhandler *) errhandler; \
};

#define GET_PTRS_VALUE_MPI_Comm_create_errhandler(args) { \
	args_MPI_Comm_create_errhandler_t* pargs = (args_MPI_Comm_create_errhandler_t*) args; \
	if (pargs->errhandler != NULL) { \
		pargs->errhandler__ref.val = *pargs->errhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_free` function call.
 *
 * @struct args_MPI_Info_free_t
 *
 * @note 
 *	int
 *	MPI_Info_free (
 *			MPI_Info * info (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Info_free
typedef struct {
	MPI_Info * info;
	struct {
		MPI_Info val;
	} info__ref;
	int retval;
} args_MPI_Info_free_t;

#define GET_ARGS_VALUE_MPI_Info_free(activity) { \
	args_MPI_Info_free_t* args = (args_MPI_Info_free_t*) activity->args; \
	args->info = (MPI_Info *) info; \
};

#define GET_PTRS_VALUE_MPI_Info_free(args) { \
	args_MPI_Info_free_t* pargs = (args_MPI_Info_free_t*) args; \
	if (pargs->info != NULL) { \
		pargs->info__ref.val = *pargs->info; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_get_nthkey` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_get_nthkey` function call.
 *
 * @struct args_MPI_Info_get_nthkey_t
 *
 * @note 
 *	int
 *	MPI_Info_get_nthkey (
 *			MPI_Info info (struct mpi_info_t *)
 *			int n (int)
 *			char * key (char *)
 *	)
 */
#if HAVE_MPI_Info_get_nthkey
typedef struct {
	MPI_Info info;
	int n;
	char * key;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} key__ref;
	int retval;
} args_MPI_Info_get_nthkey_t;

#define GET_ARGS_VALUE_MPI_Info_get_nthkey(activity) { \
	args_MPI_Info_get_nthkey_t* args = (args_MPI_Info_get_nthkey_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->n = (int) n; \
	args->key = (char *) key; \
};

#define GET_PTRS_VALUE_MPI_Info_get_nthkey(args) { \
	args_MPI_Info_get_nthkey_t* pargs = (args_MPI_Info_get_nthkey_t*) args; \
	if (pargs->key != NULL) { \
		strncpy(pargs->key__ref.val, pargs->key, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ssend_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ssend_init` function call.
 *
 * @struct args_MPI_Ssend_init_t
 *
 * @note 
 *	int
 *	MPI_Ssend_init (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ssend_init
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ssend_init_t;

#define GET_ARGS_VALUE_MPI_Ssend_init(activity) { \
	args_MPI_Ssend_init_t* args = (args_MPI_Ssend_init_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ssend_init(args) { \
	args_MPI_Ssend_init_t* pargs = (args_MPI_Ssend_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_set_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_set_info` function call.
 *
 * @struct args_MPI_Comm_set_info_t
 *
 * @note 
 *	int
 *	MPI_Comm_set_info (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *	)
 */
#if HAVE_MPI_Comm_set_info
typedef struct {
	MPI_Comm comm;
	MPI_Info info;
	int retval;
} args_MPI_Comm_set_info_t;

#define GET_ARGS_VALUE_MPI_Comm_set_info(activity) { \
	args_MPI_Comm_set_info_t* args = (args_MPI_Comm_set_info_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cart_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cart_create` function call.
 *
 * @struct args_MPI_Cart_create_t
 *
 * @note 
 *	int
 *	MPI_Cart_create (
 *			MPI_Comm old_comm (struct mpi_communicator_t *)
 *			int ndims (int)
 *			const int[] dims (const int[])
 *			const int[] periods (const int[])
 *			int reorder (int)
 *			MPI_Comm * comm_cart (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Cart_create
typedef struct {
	MPI_Comm old_comm;
	int ndims;
	int(* dims);
	struct {
		int val;
	} dims__ref;
	int(* periods);
	struct {
		int val;
	} periods__ref;
	int reorder;
	MPI_Comm * comm_cart;
	struct {
		MPI_Comm val;
	} comm_cart__ref;
	int retval;
} args_MPI_Cart_create_t;

#define GET_ARGS_VALUE_MPI_Cart_create(activity) { \
	args_MPI_Cart_create_t* args = (args_MPI_Cart_create_t*) activity->args; \
	args->old_comm = (MPI_Comm) old_comm; \
	args->ndims = (int) ndims; \
	args->dims = (int(*)) dims; \
	args->periods = (int(*)) periods; \
	args->reorder = (int) reorder; \
	args->comm_cart = (MPI_Comm *) comm_cart; \
};

#define GET_PTRS_VALUE_MPI_Cart_create(args) { \
	args_MPI_Cart_create_t* pargs = (args_MPI_Cart_create_t*) args; \
	if (pargs->dims != NULL) { \
		pargs->dims__ref.val = *pargs->dims; \
	} \
	if (pargs->periods != NULL) { \
		pargs->periods__ref.val = *pargs->periods; \
	} \
	if (pargs->comm_cart != NULL) { \
		pargs->comm_cart__ref.val = *pargs->comm_cart; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_all_begin` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_all_begin` function call.
 *
 * @struct args_MPI_File_write_all_begin_t
 *
 * @note 
 *	int
 *	MPI_File_write_all_begin (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_File_write_all_begin
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	int retval;
} args_MPI_File_write_all_begin_t;

#define GET_ARGS_VALUE_MPI_File_write_all_begin(activity) { \
	args_MPI_File_write_all_begin_t* args = (args_MPI_File_write_all_begin_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Scan_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Scan_init` function call.
 *
 * @struct args_MPI_Scan_init_t
 *
 * @note 
 *	int
 *	MPI_Scan_init (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Scan_init
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Scan_init_t;

#define GET_ARGS_VALUE_MPI_Scan_init(activity) { \
	args_MPI_Scan_init_t* args = (args_MPI_Scan_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Scan_init(args) { \
	args_MPI_Scan_init_t* pargs = (args_MPI_Scan_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Irsend` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Irsend` function call.
 *
 * @struct args_MPI_Irsend_t
 *
 * @note 
 *	int
 *	MPI_Irsend (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Irsend
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Irsend_t;

#define GET_ARGS_VALUE_MPI_Irsend(activity) { \
	args_MPI_Irsend_t* args = (args_MPI_Irsend_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Irsend(args) { \
	args_MPI_Irsend_t* pargs = (args_MPI_Irsend_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_alltoallv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_alltoallv` function call.
 *
 * @struct args_MPI_Neighbor_alltoallv_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_alltoallv (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Neighbor_alltoallv
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Neighbor_alltoallv_t;

#define GET_ARGS_VALUE_MPI_Neighbor_alltoallv(activity) { \
	args_MPI_Neighbor_alltoallv_t* args = (args_MPI_Neighbor_alltoallv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_alltoallv(args) { \
	args_MPI_Neighbor_alltoallv_t* pargs = (args_MPI_Neighbor_alltoallv_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Pready_list` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Pready_list` function call.
 *
 * @struct args_MPI_Pready_list_t
 *
 * @note 
 *	int
 *	MPI_Pready_list (
 *			int length (int)
 *			int[] partition_list (int[])
 *			MPI_Request request (struct mpi_request_t *)
 *	)
 */
#if HAVE_MPI_Pready_list
typedef struct {
	int length;
	int(* partition_list);
	struct {
		int val;
	} partition_list__ref;
	MPI_Request request;
	int retval;
} args_MPI_Pready_list_t;

#define GET_ARGS_VALUE_MPI_Pready_list(activity) { \
	args_MPI_Pready_list_t* args = (args_MPI_Pready_list_t*) activity->args; \
	args->length = (int) length; \
	args->partition_list = (int(*)) partition_list; \
	args->request = (MPI_Request) request; \
};

#define GET_PTRS_VALUE_MPI_Pready_list(args) { \
	args_MPI_Pready_list_t* pargs = (args_MPI_Pready_list_t*) args; \
	if (pargs->partition_list != NULL) { \
		pargs->partition_list__ref.val = *pargs->partition_list; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Alltoallw_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Alltoallw_init` function call.
 *
 * @struct args_MPI_Alltoallw_init_t
 *
 * @note 
 *	int
 *	MPI_Alltoallw_init (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			const MPI_Datatype[] sendtypes (const struct mpi_datatype_t *[])
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			const MPI_Datatype[] recvtypes (const struct mpi_datatype_t *[])
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Alltoallw_init
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype(* sendtypes);
	struct {
		MPI_Datatype val;
	} sendtypes__ref;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype(* recvtypes);
	struct {
		MPI_Datatype val;
	} recvtypes__ref;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Alltoallw_init_t;

#define GET_ARGS_VALUE_MPI_Alltoallw_init(activity) { \
	args_MPI_Alltoallw_init_t* args = (args_MPI_Alltoallw_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtypes = (MPI_Datatype(*)) sendtypes; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtypes = (MPI_Datatype(*)) recvtypes; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Alltoallw_init(args) { \
	args_MPI_Alltoallw_init_t* pargs = (args_MPI_Alltoallw_init_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->sendtypes != NULL) { \
		pargs->sendtypes__ref.val = *pargs->sendtypes; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->recvtypes != NULL) { \
		pargs->recvtypes__ref.val = *pargs->recvtypes; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_ordered_begin` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_ordered_begin` function call.
 *
 * @struct args_MPI_File_read_ordered_begin_t
 *
 * @note 
 *	int
 *	MPI_File_read_ordered_begin (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_File_read_ordered_begin
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	int retval;
} args_MPI_File_read_ordered_begin_t;

#define GET_ARGS_VALUE_MPI_File_read_ordered_begin(activity) { \
	args_MPI_File_read_ordered_begin_t* args = (args_MPI_File_read_ordered_begin_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Dist_graph_create_adjacent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Dist_graph_create_adjacent` function call.
 *
 * @struct args_MPI_Dist_graph_create_adjacent_t
 *
 * @note 
 *	int
 *	MPI_Dist_graph_create_adjacent (
 *			MPI_Comm comm_old (struct mpi_communicator_t *)
 *			int indegree (int)
 *			const int[] sources (const int[])
 *			const int[] sourceweights (const int[])
 *			int outdegree (int)
 *			const int[] destinations (const int[])
 *			const int[] destweights (const int[])
 *			MPI_Info info (struct mpi_info_t *)
 *			int reorder (int)
 *			MPI_Comm * comm_dist_graph (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Dist_graph_create_adjacent
typedef struct {
	MPI_Comm comm_old;
	int indegree;
	int(* sources);
	struct {
		int val;
	} sources__ref;
	int(* sourceweights);
	struct {
		int val;
	} sourceweights__ref;
	int outdegree;
	int(* destinations);
	struct {
		int val;
	} destinations__ref;
	int(* destweights);
	struct {
		int val;
	} destweights__ref;
	MPI_Info info;
	int reorder;
	MPI_Comm * comm_dist_graph;
	struct {
		MPI_Comm val;
	} comm_dist_graph__ref;
	int retval;
} args_MPI_Dist_graph_create_adjacent_t;

#define GET_ARGS_VALUE_MPI_Dist_graph_create_adjacent(activity) { \
	args_MPI_Dist_graph_create_adjacent_t* args = (args_MPI_Dist_graph_create_adjacent_t*) activity->args; \
	args->comm_old = (MPI_Comm) comm_old; \
	args->indegree = (int) indegree; \
	args->sources = (int(*)) sources; \
	args->sourceweights = (int(*)) sourceweights; \
	args->outdegree = (int) outdegree; \
	args->destinations = (int(*)) destinations; \
	args->destweights = (int(*)) destweights; \
	args->info = (MPI_Info) info; \
	args->reorder = (int) reorder; \
	args->comm_dist_graph = (MPI_Comm *) comm_dist_graph; \
};

#define GET_PTRS_VALUE_MPI_Dist_graph_create_adjacent(args) { \
	args_MPI_Dist_graph_create_adjacent_t* pargs = (args_MPI_Dist_graph_create_adjacent_t*) args; \
	if (pargs->sources != NULL) { \
		pargs->sources__ref.val = *pargs->sources; \
	} \
	if (pargs->sourceweights != NULL) { \
		pargs->sourceweights__ref.val = *pargs->sourceweights; \
	} \
	if (pargs->destinations != NULL) { \
		pargs->destinations__ref.val = *pargs->destinations; \
	} \
	if (pargs->destweights != NULL) { \
		pargs->destweights__ref.val = *pargs->destweights; \
	} \
	if (pargs->comm_dist_graph != NULL) { \
		pargs->comm_dist_graph__ref.val = *pargs->comm_dist_graph; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Reduce_scatter_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Reduce_scatter_init` function call.
 *
 * @struct args_MPI_Reduce_scatter_init_t
 *
 * @note 
 *	int
 *	MPI_Reduce_scatter_init (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Reduce_scatter_init
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Reduce_scatter_init_t;

#define GET_ARGS_VALUE_MPI_Reduce_scatter_init(activity) { \
	args_MPI_Reduce_scatter_init_t* args = (args_MPI_Reduce_scatter_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Reduce_scatter_init(args) { \
	args_MPI_Reduce_scatter_init_t* pargs = (args_MPI_Reduce_scatter_init_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_get_parent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_get_parent` function call.
 *
 * @struct args_MPI_Comm_get_parent_t
 *
 * @note 
 *	int
 *	MPI_Comm_get_parent (
 *			MPI_Comm * parent (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_get_parent
typedef struct {
	MPI_Comm * parent;
	struct {
		MPI_Comm val;
	} parent__ref;
	int retval;
} args_MPI_Comm_get_parent_t;

#define GET_ARGS_VALUE_MPI_Comm_get_parent(activity) { \
	args_MPI_Comm_get_parent_t* args = (args_MPI_Comm_get_parent_t*) activity->args; \
	args->parent = (MPI_Comm *) parent; \
};

#define GET_PTRS_VALUE_MPI_Comm_get_parent(args) { \
	args_MPI_Comm_get_parent_t* pargs = (args_MPI_Comm_get_parent_t*) args; \
	if (pargs->parent != NULL) { \
		pargs->parent__ref.val = *pargs->parent; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Keyval_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Keyval_free` function call.
 *
 * @struct args_MPI_Keyval_free_t
 *
 * @note 
 *	int
 *	MPI_Keyval_free (
 *			int * keyval (int *)
 *	)
 */
#if HAVE_MPI_Keyval_free
typedef struct {
	int * keyval;
	struct {
		int val;
	} keyval__ref;
	int retval;
} args_MPI_Keyval_free_t;

#define GET_ARGS_VALUE_MPI_Keyval_free(activity) { \
	args_MPI_Keyval_free_t* args = (args_MPI_Keyval_free_t*) activity->args; \
	args->keyval = (int *) keyval; \
};

#define GET_PTRS_VALUE_MPI_Keyval_free(args) { \
	args_MPI_Keyval_free_t* pargs = (args_MPI_Keyval_free_t*) args; \
	if (pargs->keyval != NULL) { \
		pargs->keyval__ref.val = *pargs->keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_set` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_set` function call.
 *
 * @struct args_MPI_Info_set_t
 *
 * @note 
 *	int
 *	MPI_Info_set (
 *			MPI_Info info (struct mpi_info_t *)
 *			const char * key (const char *)
 *			const char * value (const char *)
 *	)
 */
#if HAVE_MPI_Info_set
typedef struct {
	MPI_Info info;
	char * key;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} key__ref;
	char * value;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} value__ref;
	int retval;
} args_MPI_Info_set_t;

#define GET_ARGS_VALUE_MPI_Info_set(activity) { \
	args_MPI_Info_set_t* args = (args_MPI_Info_set_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->key = (char *) key; \
	args->value = (char *) value; \
};

#define GET_PTRS_VALUE_MPI_Info_set(args) { \
	args_MPI_Info_set_t* pargs = (args_MPI_Info_set_t*) args; \
	if (pargs->key != NULL) { \
		strncpy(pargs->key__ref.val, pargs->key, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->value != NULL) { \
		strncpy(pargs->value__ref.val, pargs->value, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Keyval_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Keyval_create` function call.
 *
 * @struct args_MPI_Keyval_create_t
 *
 * @note 
 *	int
 *	MPI_Keyval_create (
 *			MPI_Copy_function * copy_fn (int (*)(struct mpi_communicator_t *, int, void *, void *, void *, int *))
 *			MPI_Delete_function * delete_fn (int (*)(struct mpi_communicator_t *, int, void *, void *))
 *			int * keyval (int *)
 *			void * extra_state (void *)
 *	)
 */
#if HAVE_MPI_Keyval_create
typedef struct {
	MPI_Copy_function * copy_fn;
	MPI_Delete_function * delete_fn;
	int * keyval;
	struct {
		int val;
	} keyval__ref;
	void * extra_state;
	int retval;
} args_MPI_Keyval_create_t;

#define GET_ARGS_VALUE_MPI_Keyval_create(activity) { \
	args_MPI_Keyval_create_t* args = (args_MPI_Keyval_create_t*) activity->args; \
	args->copy_fn = (MPI_Copy_function *) copy_fn; \
	args->delete_fn = (MPI_Delete_function *) delete_fn; \
	args->keyval = (int *) keyval; \
	args->extra_state = (void *) extra_state; \
};

#define GET_PTRS_VALUE_MPI_Keyval_create(args) { \
	args_MPI_Keyval_create_t* pargs = (args_MPI_Keyval_create_t*) args; \
	if (pargs->keyval != NULL) { \
		pargs->keyval__ref.val = *pargs->keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_connect` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_connect` function call.
 *
 * @struct args_MPI_Comm_connect_t
 *
 * @note 
 *	int
 *	MPI_Comm_connect (
 *			const char * port_name (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_connect
typedef struct {
	char * port_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} port_name__ref;
	MPI_Info info;
	int root;
	MPI_Comm comm;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_connect_t;

#define GET_ARGS_VALUE_MPI_Comm_connect(activity) { \
	args_MPI_Comm_connect_t* args = (args_MPI_Comm_connect_t*) activity->args; \
	args->port_name = (char *) port_name; \
	args->info = (MPI_Info) info; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_connect(args) { \
	args_MPI_Comm_connect_t* pargs = (args_MPI_Comm_connect_t*) args; \
	if (pargs->port_name != NULL) { \
		strncpy(pargs->port_name__ref.val, pargs->port_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ssend` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ssend` function call.
 *
 * @struct args_MPI_Ssend_t
 *
 * @note 
 *	int
 *	MPI_Ssend (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Ssend
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	int retval;
} args_MPI_Ssend_t;

#define GET_ARGS_VALUE_MPI_Ssend(activity) { \
	args_MPI_Ssend_t* args = (args_MPI_Ssend_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Scatterv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Scatterv_init` function call.
 *
 * @struct args_MPI_Scatterv_init_t
 *
 * @note 
 *	int
 *	MPI_Scatterv_init (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Scatterv_init
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Scatterv_init_t;

#define GET_ARGS_VALUE_MPI_Scatterv_init(activity) { \
	args_MPI_Scatterv_init_t* args = (args_MPI_Scatterv_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->displs = (int(*)) displs; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Scatterv_init(args) { \
	args_MPI_Scatterv_init_t* pargs = (args_MPI_Scatterv_init_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_at_all_end` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_at_all_end` function call.
 *
 * @struct args_MPI_File_write_at_all_end_t
 *
 * @note 
 *	int
 *	MPI_File_write_at_all_end (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_at_all_end
typedef struct {
	MPI_File fh;
	void * buf;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_at_all_end_t;

#define GET_ARGS_VALUE_MPI_File_write_at_all_end(activity) { \
	args_MPI_File_write_at_all_end_t* args = (args_MPI_File_write_at_all_end_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_at_all_end(args) { \
	args_MPI_File_write_at_all_end_t* pargs = (args_MPI_File_write_at_all_end_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_all_end` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_all_end` function call.
 *
 * @struct args_MPI_File_write_all_end_t
 *
 * @note 
 *	int
 *	MPI_File_write_all_end (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_all_end
typedef struct {
	MPI_File fh;
	void * buf;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_all_end_t;

#define GET_ARGS_VALUE_MPI_File_write_all_end(activity) { \
	args_MPI_File_write_all_end_t* args = (args_MPI_File_write_all_end_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_all_end(args) { \
	args_MPI_File_write_all_end_t* pargs = (args_MPI_File_write_all_end_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Buffer_detach` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Buffer_detach` function call.
 *
 * @struct args_MPI_Buffer_detach_t
 *
 * @note 
 *	int
 *	MPI_Buffer_detach (
 *			void * buffer (void *)
 *			int * size (int *)
 *	)
 */
#if HAVE_MPI_Buffer_detach
typedef struct {
	void * buffer;
	int * size;
	struct {
		int val;
	} size__ref;
	int retval;
} args_MPI_Buffer_detach_t;

#define GET_ARGS_VALUE_MPI_Buffer_detach(activity) { \
	args_MPI_Buffer_detach_t* args = (args_MPI_Buffer_detach_t*) activity->args; \
	args->buffer = (void *) buffer; \
	args->size = (int *) size; \
};

#define GET_PTRS_VALUE_MPI_Buffer_detach(args) { \
	args_MPI_Buffer_detach_t* pargs = (args_MPI_Buffer_detach_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Startall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Startall` function call.
 *
 * @struct args_MPI_Startall_t
 *
 * @note 
 *	int
 *	MPI_Startall (
 *			int count (int)
 *			MPI_Request[] array_of_requests (struct mpi_request_t *[])
 *	)
 */
#if HAVE_MPI_Startall
typedef struct {
	int count;
	MPI_Request(* array_of_requests);
	struct {
		MPI_Request val;
	} array_of_requests__ref;
	int retval;
} args_MPI_Startall_t;

#define GET_ARGS_VALUE_MPI_Startall(activity) { \
	args_MPI_Startall_t* args = (args_MPI_Startall_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_requests = (MPI_Request(*)) array_of_requests; \
};

#define GET_PTRS_VALUE_MPI_Startall(args) { \
	args_MPI_Startall_t* pargs = (args_MPI_Startall_t*) args; \
	if (pargs->array_of_requests != NULL) { \
		pargs->array_of_requests__ref.val = *pargs->array_of_requests; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_alltoall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_alltoall` function call.
 *
 * @struct args_MPI_Neighbor_alltoall_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_alltoall (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Neighbor_alltoall
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Neighbor_alltoall_t;

#define GET_ARGS_VALUE_MPI_Neighbor_alltoall(activity) { \
	args_MPI_Neighbor_alltoall_t* args = (args_MPI_Neighbor_alltoall_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Put` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Put` function call.
 *
 * @struct args_MPI_Put_t
 *
 * @note 
 *	int
 *	MPI_Put (
 *			const void * origin_addr (const void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_count (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Put
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_count;
	MPI_Datatype target_datatype;
	MPI_Win win;
	int retval;
} args_MPI_Put_t;

#define GET_ARGS_VALUE_MPI_Put(activity) { \
	args_MPI_Put_t* args = (args_MPI_Put_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_count = (int) target_count; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_ordered_end` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_ordered_end` function call.
 *
 * @struct args_MPI_File_read_ordered_end_t
 *
 * @note 
 *	int
 *	MPI_File_read_ordered_end (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_ordered_end
typedef struct {
	MPI_File fh;
	void * buf;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_ordered_end_t;

#define GET_ARGS_VALUE_MPI_File_read_ordered_end(activity) { \
	args_MPI_File_read_ordered_end_t* args = (args_MPI_File_read_ordered_end_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_ordered_end(args) { \
	args_MPI_File_read_ordered_end_t* pargs = (args_MPI_File_read_ordered_end_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_call_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_call_errhandler` function call.
 *
 * @struct args_MPI_Win_call_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Win_call_errhandler (
 *			MPI_Win win (struct mpi_win_t *)
 *			int errorcode (int)
 *	)
 */
#if HAVE_MPI_Win_call_errhandler
typedef struct {
	MPI_Win win;
	int errorcode;
	int retval;
} args_MPI_Win_call_errhandler_t;

#define GET_ARGS_VALUE_MPI_Win_call_errhandler(activity) { \
	args_MPI_Win_call_errhandler_t* args = (args_MPI_Win_call_errhandler_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->errorcode = (int) errorcode; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_at` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_at` function call.
 *
 * @struct args_MPI_File_write_at_t
 *
 * @note 
 *	int
 *	MPI_File_write_at (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_at
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_at_t;

#define GET_ARGS_VALUE_MPI_File_write_at(activity) { \
	args_MPI_File_write_at_t* args = (args_MPI_File_write_at_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_at(args) { \
	args_MPI_File_write_at_t* pargs = (args_MPI_File_write_at_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_get_pset_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_get_pset_info` function call.
 *
 * @struct args_MPI_Session_get_pset_info_t
 *
 * @note 
 *	int
 *	MPI_Session_get_pset_info (
 *			MPI_Session session (struct mpi_instance_t *)
 *			const char * pset_name (const char *)
 *			MPI_Info * info_used (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Session_get_pset_info
typedef struct {
	MPI_Session session;
	char * pset_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} pset_name__ref;
	MPI_Info * info_used;
	struct {
		MPI_Info val;
	} info_used__ref;
	int retval;
} args_MPI_Session_get_pset_info_t;

#define GET_ARGS_VALUE_MPI_Session_get_pset_info(activity) { \
	args_MPI_Session_get_pset_info_t* args = (args_MPI_Session_get_pset_info_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->pset_name = (char *) pset_name; \
	args->info_used = (MPI_Info *) info_used; \
};

#define GET_PTRS_VALUE_MPI_Session_get_pset_info(args) { \
	args_MPI_Session_get_pset_info_t* pargs = (args_MPI_Session_get_pset_info_t*) args; \
	if (pargs->pset_name != NULL) { \
		strncpy(pargs->pset_name__ref.val, pargs->pset_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->info_used != NULL) { \
		pargs->info_used__ref.val = *pargs->info_used; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Topo_test` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Topo_test` function call.
 *
 * @struct args_MPI_Topo_test_t
 *
 * @note 
 *	int
 *	MPI_Topo_test (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * status (int *)
 *	)
 */
#if HAVE_MPI_Topo_test
typedef struct {
	MPI_Comm comm;
	int * status;
	struct {
		int val;
	} status__ref;
	int retval;
} args_MPI_Topo_test_t;

#define GET_ARGS_VALUE_MPI_Topo_test(activity) { \
	args_MPI_Topo_test_t* args = (args_MPI_Topo_test_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->status = (int *) status; \
};

#define GET_PTRS_VALUE_MPI_Topo_test(args) { \
	args_MPI_Topo_test_t* pargs = (args_MPI_Topo_test_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_disconnect` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_disconnect` function call.
 *
 * @struct args_MPI_Comm_disconnect_t
 *
 * @note 
 *	int
 *	MPI_Comm_disconnect (
 *			MPI_Comm * comm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_disconnect
typedef struct {
	MPI_Comm * comm;
	struct {
		MPI_Comm val;
	} comm__ref;
	int retval;
} args_MPI_Comm_disconnect_t;

#define GET_ARGS_VALUE_MPI_Comm_disconnect(activity) { \
	args_MPI_Comm_disconnect_t* args = (args_MPI_Comm_disconnect_t*) activity->args; \
	args->comm = (MPI_Comm *) comm; \
};

#define GET_PTRS_VALUE_MPI_Comm_disconnect(args) { \
	args_MPI_Comm_disconnect_t* pargs = (args_MPI_Comm_disconnect_t*) args; \
	if (pargs->comm != NULL) { \
		pargs->comm__ref.val = *pargs->comm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Add_error_class` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Add_error_class` function call.
 *
 * @struct args_MPI_Add_error_class_t
 *
 * @note 
 *	int
 *	MPI_Add_error_class (
 *			int * errorclass (int *)
 *	)
 */
#if HAVE_MPI_Add_error_class
typedef struct {
	int * errorclass;
	struct {
		int val;
	} errorclass__ref;
	int retval;
} args_MPI_Add_error_class_t;

#define GET_ARGS_VALUE_MPI_Add_error_class(activity) { \
	args_MPI_Add_error_class_t* args = (args_MPI_Add_error_class_t*) activity->args; \
	args->errorclass = (int *) errorclass; \
};

#define GET_PTRS_VALUE_MPI_Add_error_class(args) { \
	args_MPI_Add_error_class_t* pargs = (args_MPI_Add_error_class_t*) args; \
	if (pargs->errorclass != NULL) { \
		pargs->errorclass__ref.val = *pargs->errorclass; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ireduce_scatter` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ireduce_scatter` function call.
 *
 * @struct args_MPI_Ireduce_scatter_t
 *
 * @note 
 *	int
 *	MPI_Ireduce_scatter (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ireduce_scatter
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ireduce_scatter_t;

#define GET_ARGS_VALUE_MPI_Ireduce_scatter(activity) { \
	args_MPI_Ireduce_scatter_t* args = (args_MPI_Ireduce_scatter_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ireduce_scatter(args) { \
	args_MPI_Ireduce_scatter_t* pargs = (args_MPI_Ireduce_scatter_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cart_map` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cart_map` function call.
 *
 * @struct args_MPI_Cart_map_t
 *
 * @note 
 *	int
 *	MPI_Cart_map (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int ndims (int)
 *			const int[] dims (const int[])
 *			const int[] periods (const int[])
 *			int * newrank (int *)
 *	)
 */
#if HAVE_MPI_Cart_map
typedef struct {
	MPI_Comm comm;
	int ndims;
	int(* dims);
	struct {
		int val;
	} dims__ref;
	int(* periods);
	struct {
		int val;
	} periods__ref;
	int * newrank;
	struct {
		int val;
	} newrank__ref;
	int retval;
} args_MPI_Cart_map_t;

#define GET_ARGS_VALUE_MPI_Cart_map(activity) { \
	args_MPI_Cart_map_t* args = (args_MPI_Cart_map_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->ndims = (int) ndims; \
	args->dims = (int(*)) dims; \
	args->periods = (int(*)) periods; \
	args->newrank = (int *) newrank; \
};

#define GET_PTRS_VALUE_MPI_Cart_map(args) { \
	args_MPI_Cart_map_t* pargs = (args_MPI_Cart_map_t*) args; \
	if (pargs->dims != NULL) { \
		pargs->dims__ref.val = *pargs->dims; \
	} \
	if (pargs->periods != NULL) { \
		pargs->periods__ref.val = *pargs->periods; \
	} \
	if (pargs->newrank != NULL) { \
		pargs->newrank__ref.val = *pargs->newrank; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Intercomm_merge` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Intercomm_merge` function call.
 *
 * @struct args_MPI_Intercomm_merge_t
 *
 * @note 
 *	int
 *	MPI_Intercomm_merge (
 *			MPI_Comm intercomm (struct mpi_communicator_t *)
 *			int high (int)
 *			MPI_Comm * newintracomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Intercomm_merge
typedef struct {
	MPI_Comm intercomm;
	int high;
	MPI_Comm * newintracomm;
	struct {
		MPI_Comm val;
	} newintracomm__ref;
	int retval;
} args_MPI_Intercomm_merge_t;

#define GET_ARGS_VALUE_MPI_Intercomm_merge(activity) { \
	args_MPI_Intercomm_merge_t* args = (args_MPI_Intercomm_merge_t*) activity->args; \
	args->intercomm = (MPI_Comm) intercomm; \
	args->high = (int) high; \
	args->newintracomm = (MPI_Comm *) newintracomm; \
};

#define GET_PTRS_VALUE_MPI_Intercomm_merge(args) { \
	args_MPI_Intercomm_merge_t* pargs = (args_MPI_Intercomm_merge_t*) args; \
	if (pargs->newintracomm != NULL) { \
		pargs->newintracomm__ref.val = *pargs->newintracomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_hindexed` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_hindexed` function call.
 *
 * @struct args_MPI_Type_create_hindexed_t
 *
 * @note 
 *	int
 *	MPI_Type_create_hindexed (
 *			int count (int)
 *			const int[] array_of_blocklengths (const int[])
 *			const MPI_Aint[] array_of_displacements (const long[])
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_hindexed
typedef struct {
	int count;
	int(* array_of_blocklengths);
	struct {
		int val;
	} array_of_blocklengths__ref;
	MPI_Aint(* array_of_displacements);
	struct {
		MPI_Aint val;
	} array_of_displacements__ref;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_hindexed_t;

#define GET_ARGS_VALUE_MPI_Type_create_hindexed(activity) { \
	args_MPI_Type_create_hindexed_t* args = (args_MPI_Type_create_hindexed_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_blocklengths = (int(*)) array_of_blocklengths; \
	args->array_of_displacements = (MPI_Aint(*)) array_of_displacements; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_hindexed(args) { \
	args_MPI_Type_create_hindexed_t* pargs = (args_MPI_Type_create_hindexed_t*) args; \
	if (pargs->array_of_blocklengths != NULL) { \
		pargs->array_of_blocklengths__ref.val = *pargs->array_of_blocklengths; \
	} \
	if (pargs->array_of_displacements != NULL) { \
		pargs->array_of_displacements__ref.val = *pargs->array_of_displacements; \
	} \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_get_nkeys` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_get_nkeys` function call.
 *
 * @struct args_MPI_Info_get_nkeys_t
 *
 * @note 
 *	int
 *	MPI_Info_get_nkeys (
 *			MPI_Info info (struct mpi_info_t *)
 *			int * nkeys (int *)
 *	)
 */
#if HAVE_MPI_Info_get_nkeys
typedef struct {
	MPI_Info info;
	int * nkeys;
	struct {
		int val;
	} nkeys__ref;
	int retval;
} args_MPI_Info_get_nkeys_t;

#define GET_ARGS_VALUE_MPI_Info_get_nkeys(activity) { \
	args_MPI_Info_get_nkeys_t* args = (args_MPI_Info_get_nkeys_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->nkeys = (int *) nkeys; \
};

#define GET_PTRS_VALUE_MPI_Info_get_nkeys(args) { \
	args_MPI_Info_get_nkeys_t* pargs = (args_MPI_Info_get_nkeys_t*) args; \
	if (pargs->nkeys != NULL) { \
		pargs->nkeys__ref.val = *pargs->nkeys; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read` function call.
 *
 * @struct args_MPI_File_read_t
 *
 * @note 
 *	int
 *	MPI_File_read (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_t;

#define GET_ARGS_VALUE_MPI_File_read(activity) { \
	args_MPI_File_read_t* args = (args_MPI_File_read_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read(args) { \
	args_MPI_File_read_t* pargs = (args_MPI_File_read_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ineighbor_allgatherv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ineighbor_allgatherv` function call.
 *
 * @struct args_MPI_Ineighbor_allgatherv_t
 *
 * @note 
 *	int
 *	MPI_Ineighbor_allgatherv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ineighbor_allgatherv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ineighbor_allgatherv_t;

#define GET_ARGS_VALUE_MPI_Ineighbor_allgatherv(activity) { \
	args_MPI_Ineighbor_allgatherv_t* args = (args_MPI_Ineighbor_allgatherv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ineighbor_allgatherv(args) { \
	args_MPI_Ineighbor_allgatherv_t* pargs = (args_MPI_Ineighbor_allgatherv_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Attr_put` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Attr_put` function call.
 *
 * @struct args_MPI_Attr_put_t
 *
 * @note 
 *	int
 *	MPI_Attr_put (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int keyval (int)
 *			void * attribute_val (void *)
 *	)
 */
#if HAVE_MPI_Attr_put
typedef struct {
	MPI_Comm comm;
	int keyval;
	void * attribute_val;
	int retval;
} args_MPI_Attr_put_t;

#define GET_ARGS_VALUE_MPI_Attr_put(activity) { \
	args_MPI_Attr_put_t* args = (args_MPI_Attr_put_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->keyval = (int) keyval; \
	args->attribute_val = (void *) attribute_val; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_ordered_begin` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_ordered_begin` function call.
 *
 * @struct args_MPI_File_write_ordered_begin_t
 *
 * @note 
 *	int
 *	MPI_File_write_ordered_begin (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_File_write_ordered_begin
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	int retval;
} args_MPI_File_write_ordered_begin_t;

#define GET_ARGS_VALUE_MPI_File_write_ordered_begin(activity) { \
	args_MPI_File_write_ordered_begin_t* args = (args_MPI_File_write_ordered_begin_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_set_elements_x` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_set_elements_x` function call.
 *
 * @struct args_MPI_Status_set_elements_x_t
 *
 * @note 
 *	int
 *	MPI_Status_set_elements_x (
 *			MPI_Status * status (struct opaque **)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Count count (long long)
 *	)
 */
#if HAVE_MPI_Status_set_elements_x
typedef struct {
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	MPI_Datatype datatype;
	MPI_Count count;
	int retval;
} args_MPI_Status_set_elements_x_t;

#define GET_ARGS_VALUE_MPI_Status_set_elements_x(activity) { \
	args_MPI_Status_set_elements_x_t* args = (args_MPI_Status_set_elements_x_t*) activity->args; \
	args->status = (MPI_Status *) status; \
	args->datatype = (MPI_Datatype) datatype; \
	args->count = (MPI_Count) count; \
};

#define GET_PTRS_VALUE_MPI_Status_set_elements_x(args) { \
	args_MPI_Status_set_elements_x_t* pargs = (args_MPI_Status_set_elements_x_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Compare_and_swap` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Compare_and_swap` function call.
 *
 * @struct args_MPI_Compare_and_swap_t
 *
 * @note 
 *	int
 *	MPI_Compare_and_swap (
 *			const void * origin_addr (const void *)
 *			const void * compare_addr (const void *)
 *			void * result_addr (void *)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Compare_and_swap
typedef struct {
	void * origin_addr;
	void * compare_addr;
	void * result_addr;
	MPI_Datatype datatype;
	int target_rank;
	MPI_Aint target_disp;
	MPI_Win win;
	int retval;
} args_MPI_Compare_and_swap_t;

#define GET_ARGS_VALUE_MPI_Compare_and_swap(activity) { \
	args_MPI_Compare_and_swap_t* args = (args_MPI_Compare_and_swap_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->compare_addr = (void *) compare_addr; \
	args->result_addr = (void *) result_addr; \
	args->datatype = (MPI_Datatype) datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_f90_real` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_f90_real` function call.
 *
 * @struct args_MPI_Type_create_f90_real_t
 *
 * @note 
 *	int
 *	MPI_Type_create_f90_real (
 *			int p (int)
 *			int r (int)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_f90_real
typedef struct {
	int p;
	int r;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_f90_real_t;

#define GET_ARGS_VALUE_MPI_Type_create_f90_real(activity) { \
	args_MPI_Type_create_f90_real_t* args = (args_MPI_Type_create_f90_real_t*) activity->args; \
	args->p = (int) p; \
	args->r = (int) r; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_f90_real(args) { \
	args_MPI_Type_create_f90_real_t* pargs = (args_MPI_Type_create_f90_real_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_delete_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_delete_attr` function call.
 *
 * @struct args_MPI_Type_delete_attr_t
 *
 * @note 
 *	int
 *	MPI_Type_delete_attr (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			int type_keyval (int)
 *	)
 */
#if HAVE_MPI_Type_delete_attr
typedef struct {
	MPI_Datatype type;
	int type_keyval;
	int retval;
} args_MPI_Type_delete_attr_t;

#define GET_ARGS_VALUE_MPI_Type_delete_attr(activity) { \
	args_MPI_Type_delete_attr_t* args = (args_MPI_Type_delete_attr_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->type_keyval = (int) type_keyval; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Probe` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Probe` function call.
 *
 * @struct args_MPI_Probe_t
 *
 * @note 
 *	int
 *	MPI_Probe (
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Probe
typedef struct {
	int source;
	int tag;
	MPI_Comm comm;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Probe_t;

#define GET_ARGS_VALUE_MPI_Probe(activity) { \
	args_MPI_Probe_t* args = (args_MPI_Probe_t*) activity->args; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Probe(args) { \
	args_MPI_Probe_t* pargs = (args_MPI_Probe_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_close` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_close` function call.
 *
 * @struct args_MPI_File_close_t
 *
 * @note 
 *	int
 *	MPI_File_close (
 *			MPI_File * fh (struct mpi_file_t **)
 *	)
 */
#if HAVE_MPI_File_close
typedef struct {
	MPI_File * fh;
	struct {
		MPI_File val;
	} fh__ref;
	int retval;
} args_MPI_File_close_t;

#define GET_ARGS_VALUE_MPI_File_close(activity) { \
	args_MPI_File_close_t* args = (args_MPI_File_close_t*) activity->args; \
	args->fh = (MPI_File *) fh; \
};

#define GET_PTRS_VALUE_MPI_File_close(args) { \
	args_MPI_File_close_t* pargs = (args_MPI_File_close_t*) args; \
	if (pargs->fh != NULL) { \
		pargs->fh__ref.val = *pargs->fh; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Request_get_status` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Request_get_status` function call.
 *
 * @struct args_MPI_Request_get_status_t
 *
 * @note 
 *	int
 *	MPI_Request_get_status (
 *			MPI_Request request (struct mpi_request_t *)
 *			int * flag (int *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Request_get_status
typedef struct {
	MPI_Request request;
	int * flag;
	struct {
		int val;
	} flag__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Request_get_status_t;

#define GET_ARGS_VALUE_MPI_Request_get_status(activity) { \
	args_MPI_Request_get_status_t* args = (args_MPI_Request_get_status_t*) activity->args; \
	args->request = (MPI_Request) request; \
	args->flag = (int *) flag; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Request_get_status(args) { \
	args_MPI_Request_get_status_t* pargs = (args_MPI_Request_get_status_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_call_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_call_errhandler` function call.
 *
 * @struct args_MPI_Session_call_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Session_call_errhandler (
 *			MPI_Session session (struct mpi_instance_t *)
 *			int errorcode (int)
 *	)
 */
#if HAVE_MPI_Session_call_errhandler
typedef struct {
	MPI_Session session;
	int errorcode;
	int retval;
} args_MPI_Session_call_errhandler_t;

#define GET_ARGS_VALUE_MPI_Session_call_errhandler(activity) { \
	args_MPI_Session_call_errhandler_t* args = (args_MPI_Session_call_errhandler_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->errorcode = (int) errorcode; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Rget_accumulate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Rget_accumulate` function call.
 *
 * @struct args_MPI_Rget_accumulate_t
 *
 * @note 
 *	int
 *	MPI_Rget_accumulate (
 *			const void * origin_addr (const void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			void * result_addr (void *)
 *			int result_count (int)
 *			MPI_Datatype result_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_count (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Rget_accumulate
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	void * result_addr;
	int result_count;
	MPI_Datatype result_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_count;
	MPI_Datatype target_datatype;
	MPI_Op op;
	MPI_Win win;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Rget_accumulate_t;

#define GET_ARGS_VALUE_MPI_Rget_accumulate(activity) { \
	args_MPI_Rget_accumulate_t* args = (args_MPI_Rget_accumulate_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->result_addr = (void *) result_addr; \
	args->result_count = (int) result_count; \
	args->result_datatype = (MPI_Datatype) result_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_count = (int) target_count; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->op = (MPI_Op) op; \
	args->win = (MPI_Win) win; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Rget_accumulate(args) { \
	args_MPI_Rget_accumulate_t* pargs = (args_MPI_Rget_accumulate_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iread_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iread_all` function call.
 *
 * @struct args_MPI_File_iread_all_t
 *
 * @note 
 *	int
 *	MPI_File_iread_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iread_all
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iread_all_t;

#define GET_ARGS_VALUE_MPI_File_iread_all(activity) { \
	args_MPI_File_iread_all_t* args = (args_MPI_File_iread_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iread_all(args) { \
	args_MPI_File_iread_all_t* pargs = (args_MPI_File_iread_all_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Isendrecv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Isendrecv` function call.
 *
 * @struct args_MPI_Isendrecv_t
 *
 * @note 
 *	int
 *	MPI_Isendrecv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int sendtag (int)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int source (int)
 *			int recvtag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Isendrecv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	int dest;
	int sendtag;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int source;
	int recvtag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Isendrecv_t;

#define GET_ARGS_VALUE_MPI_Isendrecv(activity) { \
	args_MPI_Isendrecv_t* args = (args_MPI_Isendrecv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->dest = (int) dest; \
	args->sendtag = (int) sendtag; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->source = (int) source; \
	args->recvtag = (int) recvtag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Isendrecv(args) { \
	args_MPI_Isendrecv_t* pargs = (args_MPI_Isendrecv_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Pack_external` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Pack_external` function call.
 *
 * @struct args_MPI_Pack_external_t
 *
 * @note 
 *	int
 *	MPI_Pack_external (
 *			const char[] datarep (const char[])
 *			const void * inbuf (const void *)
 *			int incount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			void * outbuf (void *)
 *			MPI_Aint outsize (long)
 *			MPI_Aint * position (long*)
 *	)
 */
#if HAVE_MPI_Pack_external
typedef struct {
	char(* datarep);
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} datarep__ref;
	void * inbuf;
	int incount;
	MPI_Datatype datatype;
	void * outbuf;
	MPI_Aint outsize;
	MPI_Aint * position;
	struct {
		MPI_Aint val;
	} position__ref;
	int retval;
} args_MPI_Pack_external_t;

#define GET_ARGS_VALUE_MPI_Pack_external(activity) { \
	args_MPI_Pack_external_t* args = (args_MPI_Pack_external_t*) activity->args; \
	args->datarep = (char(*)) datarep; \
	args->inbuf = (void *) inbuf; \
	args->incount = (int) incount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->outbuf = (void *) outbuf; \
	args->outsize = (MPI_Aint) outsize; \
	args->position = (MPI_Aint *) position; \
};

#define GET_PTRS_VALUE_MPI_Pack_external(args) { \
	args_MPI_Pack_external_t* pargs = (args_MPI_Pack_external_t*) args; \
	if (pargs->datarep != NULL) { \
		strncpy(pargs->datarep__ref.val, pargs->datarep, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->position != NULL) { \
		pargs->position__ref.val = *pargs->position; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Pready_range` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Pready_range` function call.
 *
 * @struct args_MPI_Pready_range_t
 *
 * @note 
 *	int
 *	MPI_Pready_range (
 *			int partition_low (int)
 *			int partition_high (int)
 *			MPI_Request request (struct mpi_request_t *)
 *	)
 */
#if HAVE_MPI_Pready_range
typedef struct {
	int partition_low;
	int partition_high;
	MPI_Request request;
	int retval;
} args_MPI_Pready_range_t;

#define GET_ARGS_VALUE_MPI_Pready_range(activity) { \
	args_MPI_Pready_range_t* args = (args_MPI_Pready_range_t*) activity->args; \
	args->partition_low = (int) partition_low; \
	args->partition_high = (int) partition_high; \
	args->request = (MPI_Request) request; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_envelope` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_envelope` function call.
 *
 * @struct args_MPI_Type_get_envelope_t
 *
 * @note 
 *	int
 *	MPI_Type_get_envelope (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			int * num_integers (int *)
 *			int * num_addresses (int *)
 *			int * num_datatypes (int *)
 *			int * combiner (int *)
 *	)
 */
#if HAVE_MPI_Type_get_envelope
typedef struct {
	MPI_Datatype type;
	int * num_integers;
	struct {
		int val;
	} num_integers__ref;
	int * num_addresses;
	struct {
		int val;
	} num_addresses__ref;
	int * num_datatypes;
	struct {
		int val;
	} num_datatypes__ref;
	int * combiner;
	struct {
		int val;
	} combiner__ref;
	int retval;
} args_MPI_Type_get_envelope_t;

#define GET_ARGS_VALUE_MPI_Type_get_envelope(activity) { \
	args_MPI_Type_get_envelope_t* args = (args_MPI_Type_get_envelope_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->num_integers = (int *) num_integers; \
	args->num_addresses = (int *) num_addresses; \
	args->num_datatypes = (int *) num_datatypes; \
	args->combiner = (int *) combiner; \
};

#define GET_PTRS_VALUE_MPI_Type_get_envelope(args) { \
	args_MPI_Type_get_envelope_t* pargs = (args_MPI_Type_get_envelope_t*) args; \
	if (pargs->num_integers != NULL) { \
		pargs->num_integers__ref.val = *pargs->num_integers; \
	} \
	if (pargs->num_addresses != NULL) { \
		pargs->num_addresses__ref.val = *pargs->num_addresses; \
	} \
	if (pargs->num_datatypes != NULL) { \
		pargs->num_datatypes__ref.val = *pargs->num_datatypes; \
	} \
	if (pargs->combiner != NULL) { \
		pargs->combiner__ref.val = *pargs->combiner; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_create` function call.
 *
 * @struct args_MPI_Win_create_t
 *
 * @note 
 *	int
 *	MPI_Win_create (
 *			void * base (void *)
 *			MPI_Aint size (long)
 *			int disp_unit (int)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Win * win (struct mpi_win_t **)
 *	)
 */
#if HAVE_MPI_Win_create
typedef struct {
	void * base;
	MPI_Aint size;
	int disp_unit;
	MPI_Info info;
	MPI_Comm comm;
	MPI_Win * win;
	struct {
		MPI_Win val;
	} win__ref;
	int retval;
} args_MPI_Win_create_t;

#define GET_ARGS_VALUE_MPI_Win_create(activity) { \
	args_MPI_Win_create_t* args = (args_MPI_Win_create_t*) activity->args; \
	args->base = (void *) base; \
	args->size = (MPI_Aint) size; \
	args->disp_unit = (int) disp_unit; \
	args->info = (MPI_Info) info; \
	args->comm = (MPI_Comm) comm; \
	args->win = (MPI_Win *) win; \
};

#define GET_PTRS_VALUE_MPI_Win_create(args) { \
	args_MPI_Win_create_t* pargs = (args_MPI_Win_create_t*) args; \
	if (pargs->win != NULL) { \
		pargs->win__ref.val = *pargs->win; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Isendrecv_replace` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Isendrecv_replace` function call.
 *
 * @struct args_MPI_Isendrecv_replace_t
 *
 * @note 
 *	int
 *	MPI_Isendrecv_replace (
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int sendtag (int)
 *			int source (int)
 *			int recvtag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Isendrecv_replace
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int sendtag;
	int source;
	int recvtag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Isendrecv_replace_t;

#define GET_ARGS_VALUE_MPI_Isendrecv_replace(activity) { \
	args_MPI_Isendrecv_replace_t* args = (args_MPI_Isendrecv_replace_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->sendtag = (int) sendtag; \
	args->source = (int) source; \
	args->recvtag = (int) recvtag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Isendrecv_replace(args) { \
	args_MPI_Isendrecv_replace_t* pargs = (args_MPI_Isendrecv_replace_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_set_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_set_errhandler` function call.
 *
 * @struct args_MPI_Win_set_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Win_set_errhandler (
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *	)
 */
#if HAVE_MPI_Win_set_errhandler
typedef struct {
	MPI_Win win;
	MPI_Errhandler errhandler;
	int retval;
} args_MPI_Win_set_errhandler_t;

#define GET_ARGS_VALUE_MPI_Win_set_errhandler(activity) { \
	args_MPI_Win_set_errhandler_t* args = (args_MPI_Win_set_errhandler_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->errhandler = (MPI_Errhandler) errhandler; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Fetch_and_op` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Fetch_and_op` function call.
 *
 * @struct args_MPI_Fetch_and_op_t
 *
 * @note 
 *	int
 *	MPI_Fetch_and_op (
 *			const void * origin_addr (const void *)
 *			void * result_addr (void *)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Fetch_and_op
typedef struct {
	void * origin_addr;
	void * result_addr;
	MPI_Datatype datatype;
	int target_rank;
	MPI_Aint target_disp;
	MPI_Op op;
	MPI_Win win;
	int retval;
} args_MPI_Fetch_and_op_t;

#define GET_ARGS_VALUE_MPI_Fetch_and_op(activity) { \
	args_MPI_Fetch_and_op_t* args = (args_MPI_Fetch_and_op_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->result_addr = (void *) result_addr; \
	args->datatype = (MPI_Datatype) datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->op = (MPI_Op) op; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cartdim_get` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cartdim_get` function call.
 *
 * @struct args_MPI_Cartdim_get_t
 *
 * @note 
 *	int
 *	MPI_Cartdim_get (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * ndims (int *)
 *	)
 */
#if HAVE_MPI_Cartdim_get
typedef struct {
	MPI_Comm comm;
	int * ndims;
	struct {
		int val;
	} ndims__ref;
	int retval;
} args_MPI_Cartdim_get_t;

#define GET_ARGS_VALUE_MPI_Cartdim_get(activity) { \
	args_MPI_Cartdim_get_t* args = (args_MPI_Cartdim_get_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->ndims = (int *) ndims; \
};

#define GET_PTRS_VALUE_MPI_Cartdim_get(args) { \
	args_MPI_Cartdim_get_t* pargs = (args_MPI_Cartdim_get_t*) args; \
	if (pargs->ndims != NULL) { \
		pargs->ndims__ref.val = *pargs->ndims; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Dist_graph_neighbors` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Dist_graph_neighbors` function call.
 *
 * @struct args_MPI_Dist_graph_neighbors_t
 *
 * @note 
 *	int
 *	MPI_Dist_graph_neighbors (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int maxindegree (int)
 *			int[] sources (int[])
 *			int[] sourceweights (int[])
 *			int maxoutdegree (int)
 *			int[] destinations (int[])
 *			int[] destweights (int[])
 *	)
 */
#if HAVE_MPI_Dist_graph_neighbors
typedef struct {
	MPI_Comm comm;
	int maxindegree;
	int(* sources);
	struct {
		int val;
	} sources__ref;
	int(* sourceweights);
	struct {
		int val;
	} sourceweights__ref;
	int maxoutdegree;
	int(* destinations);
	struct {
		int val;
	} destinations__ref;
	int(* destweights);
	struct {
		int val;
	} destweights__ref;
	int retval;
} args_MPI_Dist_graph_neighbors_t;

#define GET_ARGS_VALUE_MPI_Dist_graph_neighbors(activity) { \
	args_MPI_Dist_graph_neighbors_t* args = (args_MPI_Dist_graph_neighbors_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->maxindegree = (int) maxindegree; \
	args->sources = (int(*)) sources; \
	args->sourceweights = (int(*)) sourceweights; \
	args->maxoutdegree = (int) maxoutdegree; \
	args->destinations = (int(*)) destinations; \
	args->destweights = (int(*)) destweights; \
};

#define GET_PTRS_VALUE_MPI_Dist_graph_neighbors(args) { \
	args_MPI_Dist_graph_neighbors_t* pargs = (args_MPI_Dist_graph_neighbors_t*) args; \
	if (pargs->sources != NULL) { \
		pargs->sources__ref.val = *pargs->sources; \
	} \
	if (pargs->sourceweights != NULL) { \
		pargs->sourceweights__ref.val = *pargs->sourceweights; \
	} \
	if (pargs->destinations != NULL) { \
		pargs->destinations__ref.val = *pargs->destinations; \
	} \
	if (pargs->destweights != NULL) { \
		pargs->destweights__ref.val = *pargs->destweights; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_seek` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_seek` function call.
 *
 * @struct args_MPI_File_seek_t
 *
 * @note 
 *	int
 *	MPI_File_seek (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			int whence (int)
 *	)
 */
#if HAVE_MPI_File_seek
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	int whence;
	int retval;
} args_MPI_File_seek_t;

#define GET_ARGS_VALUE_MPI_File_seek(activity) { \
	args_MPI_File_seek_t* args = (args_MPI_File_seek_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->whence = (int) whence; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get` function call.
 *
 * @struct args_MPI_Get_t
 *
 * @note 
 *	int
 *	MPI_Get (
 *			void * origin_addr (void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_count (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Get
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_count;
	MPI_Datatype target_datatype;
	MPI_Win win;
	int retval;
} args_MPI_Get_t;

#define GET_ARGS_VALUE_MPI_Get(activity) { \
	args_MPI_Get_t* args = (args_MPI_Get_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_count = (int) target_count; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Pack_external_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Pack_external_size` function call.
 *
 * @struct args_MPI_Pack_external_size_t
 *
 * @note 
 *	int
 *	MPI_Pack_external_size (
 *			const char[] datarep (const char[])
 *			int incount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Aint * size (long*)
 *	)
 */
#if HAVE_MPI_Pack_external_size
typedef struct {
	char(* datarep);
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} datarep__ref;
	int incount;
	MPI_Datatype datatype;
	MPI_Aint * size;
	struct {
		MPI_Aint val;
	} size__ref;
	int retval;
} args_MPI_Pack_external_size_t;

#define GET_ARGS_VALUE_MPI_Pack_external_size(activity) { \
	args_MPI_Pack_external_size_t* args = (args_MPI_Pack_external_size_t*) activity->args; \
	args->datarep = (char(*)) datarep; \
	args->incount = (int) incount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->size = (MPI_Aint *) size; \
};

#define GET_PTRS_VALUE_MPI_Pack_external_size(args) { \
	args_MPI_Pack_external_size_t* pargs = (args_MPI_Pack_external_size_t*) args; \
	if (pargs->datarep != NULL) { \
		strncpy(pargs->datarep__ref.val, pargs->datarep, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_flush_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_flush_all` function call.
 *
 * @struct args_MPI_Win_flush_all_t
 *
 * @note 
 *	int
 *	MPI_Win_flush_all (
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_flush_all
typedef struct {
	MPI_Win win;
	int retval;
} args_MPI_Win_flush_all_t;

#define GET_ARGS_VALUE_MPI_Win_flush_all(activity) { \
	args_MPI_Win_flush_all_t* args = (args_MPI_Win_flush_all_t*) activity->args; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Rsend` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Rsend` function call.
 *
 * @struct args_MPI_Rsend_t
 *
 * @note 
 *	int
 *	MPI_Rsend (
 *			const void * ibuf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Rsend
typedef struct {
	void * ibuf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	int retval;
} args_MPI_Rsend_t;

#define GET_ARGS_VALUE_MPI_Rsend(activity) { \
	args_MPI_Rsend_t* args = (args_MPI_Rsend_t*) activity->args; \
	args->ibuf = (void *) ibuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_free` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_free` function call.
 *
 * @struct args_MPI_Win_free_t
 *
 * @note 
 *	int
 *	MPI_Win_free (
 *			MPI_Win * win (struct mpi_win_t **)
 *	)
 */
#if HAVE_MPI_Win_free
typedef struct {
	MPI_Win * win;
	struct {
		MPI_Win val;
	} win__ref;
	int retval;
} args_MPI_Win_free_t;

#define GET_ARGS_VALUE_MPI_Win_free(activity) { \
	args_MPI_Win_free_t* args = (args_MPI_Win_free_t*) activity->args; \
	args->win = (MPI_Win *) win; \
};

#define GET_PTRS_VALUE_MPI_Win_free(args) { \
	args_MPI_Win_free_t* pargs = (args_MPI_Win_free_t*) args; \
	if (pargs->win != NULL) { \
		pargs->win__ref.val = *pargs->win; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_f90_complex` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_f90_complex` function call.
 *
 * @struct args_MPI_Type_create_f90_complex_t
 *
 * @note 
 *	int
 *	MPI_Type_create_f90_complex (
 *			int p (int)
 *			int r (int)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_f90_complex
typedef struct {
	int p;
	int r;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_f90_complex_t;

#define GET_ARGS_VALUE_MPI_Type_create_f90_complex(activity) { \
	args_MPI_Type_create_f90_complex_t* args = (args_MPI_Type_create_f90_complex_t*) activity->args; \
	args->p = (int) p; \
	args->r = (int) r; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_f90_complex(args) { \
	args_MPI_Type_create_f90_complex_t* pargs = (args_MPI_Type_create_f90_complex_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_alltoallw_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_alltoallw_init` function call.
 *
 * @struct args_MPI_Neighbor_alltoallw_init_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_alltoallw_init (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const MPI_Aint[] sdispls (const long[])
 *			const MPI_Datatype[] sendtypes (const struct mpi_datatype_t *[])
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const MPI_Aint[] rdispls (const long[])
 *			const MPI_Datatype[] recvtypes (const struct mpi_datatype_t *[])
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Neighbor_alltoallw_init
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	MPI_Aint(* sdispls);
	struct {
		MPI_Aint val;
	} sdispls__ref;
	MPI_Datatype(* sendtypes);
	struct {
		MPI_Datatype val;
	} sendtypes__ref;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	MPI_Aint(* rdispls);
	struct {
		MPI_Aint val;
	} rdispls__ref;
	MPI_Datatype(* recvtypes);
	struct {
		MPI_Datatype val;
	} recvtypes__ref;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Neighbor_alltoallw_init_t;

#define GET_ARGS_VALUE_MPI_Neighbor_alltoallw_init(activity) { \
	args_MPI_Neighbor_alltoallw_init_t* args = (args_MPI_Neighbor_alltoallw_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (MPI_Aint(*)) sdispls; \
	args->sendtypes = (MPI_Datatype(*)) sendtypes; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (MPI_Aint(*)) rdispls; \
	args->recvtypes = (MPI_Datatype(*)) recvtypes; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_alltoallw_init(args) { \
	args_MPI_Neighbor_alltoallw_init_t* pargs = (args_MPI_Neighbor_alltoallw_init_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->sendtypes != NULL) { \
		pargs->sendtypes__ref.val = *pargs->sendtypes; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->recvtypes != NULL) { \
		pargs->recvtypes__ref.val = *pargs->recvtypes; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Rget` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Rget` function call.
 *
 * @struct args_MPI_Rget_t
 *
 * @note 
 *	int
 *	MPI_Rget (
 *			void * origin_addr (void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_count (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Rget
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_count;
	MPI_Datatype target_datatype;
	MPI_Win win;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Rget_t;

#define GET_ARGS_VALUE_MPI_Rget(activity) { \
	args_MPI_Rget_t* args = (args_MPI_Rget_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_count = (int) target_count; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->win = (MPI_Win) win; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Rget(args) { \
	args_MPI_Rget_t* pargs = (args_MPI_Rget_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_create_keyval` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_create_keyval` function call.
 *
 * @struct args_MPI_Win_create_keyval_t
 *
 * @note 
 *	int
 *	MPI_Win_create_keyval (
 *			MPI_Win_copy_attr_function * win_copy_attr_fn (int (*)(struct mpi_win_t *, int, void *, void *, void *, int *))
 *			MPI_Win_delete_attr_function * win_delete_attr_fn (int (*)(struct mpi_win_t *, int, void *, void *))
 *			int * win_keyval (int *)
 *			void * extra_state (void *)
 *	)
 */
#if HAVE_MPI_Win_create_keyval
typedef struct {
	MPI_Win_copy_attr_function * win_copy_attr_fn;
	MPI_Win_delete_attr_function * win_delete_attr_fn;
	int * win_keyval;
	struct {
		int val;
	} win_keyval__ref;
	void * extra_state;
	int retval;
} args_MPI_Win_create_keyval_t;

#define GET_ARGS_VALUE_MPI_Win_create_keyval(activity) { \
	args_MPI_Win_create_keyval_t* args = (args_MPI_Win_create_keyval_t*) activity->args; \
	args->win_copy_attr_fn = (MPI_Win_copy_attr_function *) win_copy_attr_fn; \
	args->win_delete_attr_fn = (MPI_Win_delete_attr_function *) win_delete_attr_fn; \
	args->win_keyval = (int *) win_keyval; \
	args->extra_state = (void *) extra_state; \
};

#define GET_PTRS_VALUE_MPI_Win_create_keyval(args) { \
	args_MPI_Win_create_keyval_t* pargs = (args_MPI_Win_create_keyval_t*) args; \
	if (pargs->win_keyval != NULL) { \
		pargs->win_keyval__ref.val = *pargs->win_keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Op_commutative` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Op_commutative` function call.
 *
 * @struct args_MPI_Op_commutative_t
 *
 * @note 
 *	int
 *	MPI_Op_commutative (
 *			MPI_Op op (struct mpi_op_t *)
 *			int * commute (int *)
 *	)
 */
#if HAVE_MPI_Op_commutative
typedef struct {
	MPI_Op op;
	int * commute;
	struct {
		int val;
	} commute__ref;
	int retval;
} args_MPI_Op_commutative_t;

#define GET_ARGS_VALUE_MPI_Op_commutative(activity) { \
	args_MPI_Op_commutative_t* args = (args_MPI_Op_commutative_t*) activity->args; \
	args->op = (MPI_Op) op; \
	args->commute = (int *) commute; \
};

#define GET_PTRS_VALUE_MPI_Op_commutative(args) { \
	args_MPI_Op_commutative_t* pargs = (args_MPI_Op_commutative_t*) args; \
	if (pargs->commute != NULL) { \
		pargs->commute__ref.val = *pargs->commute; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_allgather` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_allgather` function call.
 *
 * @struct args_MPI_Neighbor_allgather_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_allgather (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Neighbor_allgather
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Neighbor_allgather_t;

#define GET_ARGS_VALUE_MPI_Neighbor_allgather(activity) { \
	args_MPI_Neighbor_allgather_t* args = (args_MPI_Neighbor_allgather_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_call_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_call_errhandler` function call.
 *
 * @struct args_MPI_Comm_call_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Comm_call_errhandler (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int errorcode (int)
 *	)
 */
#if HAVE_MPI_Comm_call_errhandler
typedef struct {
	MPI_Comm comm;
	int errorcode;
	int retval;
} args_MPI_Comm_call_errhandler_t;

#define GET_ARGS_VALUE_MPI_Comm_call_errhandler(activity) { \
	args_MPI_Comm_call_errhandler_t* args = (args_MPI_Comm_call_errhandler_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->errorcode = (int) errorcode; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Scatter_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Scatter_init` function call.
 *
 * @struct args_MPI_Scatter_init_t
 *
 * @note 
 *	int
 *	MPI_Scatter_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Scatter_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Scatter_init_t;

#define GET_ARGS_VALUE_MPI_Scatter_init(activity) { \
	args_MPI_Scatter_init_t* args = (args_MPI_Scatter_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Scatter_init(args) { \
	args_MPI_Scatter_init_t* pargs = (args_MPI_Scatter_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_get_string` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_get_string` function call.
 *
 * @struct args_MPI_Info_get_string_t
 *
 * @note 
 *	int
 *	MPI_Info_get_string (
 *			MPI_Info info (struct mpi_info_t *)
 *			const char * key (const char *)
 *			int * buflen (int *)
 *			char * value (char *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Info_get_string
typedef struct {
	MPI_Info info;
	char * key;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} key__ref;
	int * buflen;
	struct {
		int val;
	} buflen__ref;
	char * value;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} value__ref;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Info_get_string_t;

#define GET_ARGS_VALUE_MPI_Info_get_string(activity) { \
	args_MPI_Info_get_string_t* args = (args_MPI_Info_get_string_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->key = (char *) key; \
	args->buflen = (int *) buflen; \
	args->value = (char *) value; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Info_get_string(args) { \
	args_MPI_Info_get_string_t* pargs = (args_MPI_Info_get_string_t*) args; \
	if (pargs->key != NULL) { \
		strncpy(pargs->key__ref.val, pargs->key, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->buflen != NULL) { \
		pargs->buflen__ref.val = *pargs->buflen; \
	} \
	if (pargs->value != NULL) { \
		strncpy(pargs->value__ref.val, pargs->value, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Mrecv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Mrecv` function call.
 *
 * @struct args_MPI_Mrecv_t
 *
 * @note 
 *	int
 *	MPI_Mrecv (
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			MPI_Message * message (struct mpi_message_t **)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Mrecv
typedef struct {
	void * buf;
	int count;
	MPI_Datatype type;
	MPI_Message * message;
	struct {
		MPI_Message val;
	} message__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Mrecv_t;

#define GET_ARGS_VALUE_MPI_Mrecv(activity) { \
	args_MPI_Mrecv_t* args = (args_MPI_Mrecv_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->type = (MPI_Datatype) type; \
	args->message = (MPI_Message *) message; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Mrecv(args) { \
	args_MPI_Mrecv_t* pargs = (args_MPI_Mrecv_t*) args; \
	if (pargs->message != NULL) { \
		pargs->message__ref.val = *pargs->message; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Open_port` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Open_port` function call.
 *
 * @struct args_MPI_Open_port_t
 *
 * @note 
 *	int
 *	MPI_Open_port (
 *			MPI_Info info (struct mpi_info_t *)
 *			char * port_name (char *)
 *	)
 */
#if HAVE_MPI_Open_port
typedef struct {
	MPI_Info info;
	char * port_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} port_name__ref;
	int retval;
} args_MPI_Open_port_t;

#define GET_ARGS_VALUE_MPI_Open_port(activity) { \
	args_MPI_Open_port_t* args = (args_MPI_Open_port_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->port_name = (char *) port_name; \
};

#define GET_PTRS_VALUE_MPI_Open_port(args) { \
	args_MPI_Open_port_t* pargs = (args_MPI_Open_port_t*) args; \
	if (pargs->port_name != NULL) { \
		strncpy(pargs->port_name__ref.val, pargs->port_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cart_get` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cart_get` function call.
 *
 * @struct args_MPI_Cart_get_t
 *
 * @note 
 *	int
 *	MPI_Cart_get (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int maxdims (int)
 *			int[] dims (int[])
 *			int[] periods (int[])
 *			int[] coords (int[])
 *	)
 */
#if HAVE_MPI_Cart_get
typedef struct {
	MPI_Comm comm;
	int maxdims;
	int(* dims);
	struct {
		int val;
	} dims__ref;
	int(* periods);
	struct {
		int val;
	} periods__ref;
	int(* coords);
	struct {
		int val;
	} coords__ref;
	int retval;
} args_MPI_Cart_get_t;

#define GET_ARGS_VALUE_MPI_Cart_get(activity) { \
	args_MPI_Cart_get_t* args = (args_MPI_Cart_get_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->maxdims = (int) maxdims; \
	args->dims = (int(*)) dims; \
	args->periods = (int(*)) periods; \
	args->coords = (int(*)) coords; \
};

#define GET_PTRS_VALUE_MPI_Cart_get(args) { \
	args_MPI_Cart_get_t* pargs = (args_MPI_Cart_get_t*) args; \
	if (pargs->dims != NULL) { \
		pargs->dims__ref.val = *pargs->dims; \
	} \
	if (pargs->periods != NULL) { \
		pargs->periods__ref.val = *pargs->periods; \
	} \
	if (pargs->coords != NULL) { \
		pargs->coords__ref.val = *pargs->coords; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Lookup_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Lookup_name` function call.
 *
 * @struct args_MPI_Lookup_name_t
 *
 * @note 
 *	int
 *	MPI_Lookup_name (
 *			const char * service_name (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *			char * port_name (char *)
 *	)
 */
#if HAVE_MPI_Lookup_name
typedef struct {
	char * service_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} service_name__ref;
	MPI_Info info;
	char * port_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} port_name__ref;
	int retval;
} args_MPI_Lookup_name_t;

#define GET_ARGS_VALUE_MPI_Lookup_name(activity) { \
	args_MPI_Lookup_name_t* args = (args_MPI_Lookup_name_t*) activity->args; \
	args->service_name = (char *) service_name; \
	args->info = (MPI_Info) info; \
	args->port_name = (char *) port_name; \
};

#define GET_PTRS_VALUE_MPI_Lookup_name(args) { \
	args_MPI_Lookup_name_t* pargs = (args_MPI_Lookup_name_t*) args; \
	if (pargs->service_name != NULL) { \
		strncpy(pargs->service_name__ref.val, pargs->service_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->port_name != NULL) { \
		strncpy(pargs->port_name__ref.val, pargs->port_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_extent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_extent` function call.
 *
 * @struct args_MPI_Type_get_extent_t
 *
 * @note 
 *	int
 *	MPI_Type_get_extent (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			MPI_Aint * lb (long*)
 *			MPI_Aint * extent (long*)
 *	)
 */
#if HAVE_MPI_Type_get_extent
typedef struct {
	MPI_Datatype type;
	MPI_Aint * lb;
	struct {
		MPI_Aint val;
	} lb__ref;
	MPI_Aint * extent;
	struct {
		MPI_Aint val;
	} extent__ref;
	int retval;
} args_MPI_Type_get_extent_t;

#define GET_ARGS_VALUE_MPI_Type_get_extent(activity) { \
	args_MPI_Type_get_extent_t* args = (args_MPI_Type_get_extent_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->lb = (MPI_Aint *) lb; \
	args->extent = (MPI_Aint *) extent; \
};

#define GET_PTRS_VALUE_MPI_Type_get_extent(args) { \
	args_MPI_Type_get_extent_t* pargs = (args_MPI_Type_get_extent_t*) args; \
	if (pargs->lb != NULL) { \
		pargs->lb__ref.val = *pargs->lb; \
	} \
	if (pargs->extent != NULL) { \
		pargs->extent__ref.val = *pargs->extent; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_spawn` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_spawn` function call.
 *
 * @struct args_MPI_Comm_spawn_t
 *
 * @note 
 *	int
 *	MPI_Comm_spawn (
 *			const char * command (const char *)
 *			char *[] argv (char *[])
 *			int maxprocs (int)
 *			MPI_Info info (struct mpi_info_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Comm * intercomm (struct mpi_communicator_t **)
 *			int[] array_of_errcodes (int[])
 *	)
 */
#if HAVE_MPI_Comm_spawn
typedef struct {
	char * command;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} command__ref;
	char *(* argv);
	struct {
		void* ptr1;
		char val[MPI_STRING_SIZE_MAX];
	} argv__ref;
	int maxprocs;
	MPI_Info info;
	int root;
	MPI_Comm comm;
	MPI_Comm * intercomm;
	struct {
		MPI_Comm val;
	} intercomm__ref;
	int(* array_of_errcodes);
	struct {
		int val;
	} array_of_errcodes__ref;
	int retval;
} args_MPI_Comm_spawn_t;

#define GET_ARGS_VALUE_MPI_Comm_spawn(activity) { \
	args_MPI_Comm_spawn_t* args = (args_MPI_Comm_spawn_t*) activity->args; \
	args->command = (char *) command; \
	args->argv = (char *(*)) argv; \
	args->maxprocs = (int) maxprocs; \
	args->info = (MPI_Info) info; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->intercomm = (MPI_Comm *) intercomm; \
	args->array_of_errcodes = (int(*)) array_of_errcodes; \
};

#define GET_PTRS_VALUE_MPI_Comm_spawn(args) { \
	args_MPI_Comm_spawn_t* pargs = (args_MPI_Comm_spawn_t*) args; \
	if (pargs->command != NULL) { \
		strncpy(pargs->command__ref.val, pargs->command, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->argv != NULL) { \
		pargs->argv__ref.ptr1 = *pargs->argv; \
		if (pargs->argv__ref.ptr1 != NULL) { \
			strncpy(pargs->argv__ref.val, pargs->argv__ref.ptr1, MPI_STRING_SIZE_MAX-1); \
		} \
	} \
	if (pargs->intercomm != NULL) { \
		pargs->intercomm__ref.val = *pargs->intercomm; \
	} \
	if (pargs->array_of_errcodes != NULL) { \
		pargs->array_of_errcodes__ref.val = *pargs->array_of_errcodes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Unpublish_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Unpublish_name` function call.
 *
 * @struct args_MPI_Unpublish_name_t
 *
 * @note 
 *	int
 *	MPI_Unpublish_name (
 *			const char * service_name (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *			const char * port_name (const char *)
 *	)
 */
#if HAVE_MPI_Unpublish_name
typedef struct {
	char * service_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} service_name__ref;
	MPI_Info info;
	char * port_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} port_name__ref;
	int retval;
} args_MPI_Unpublish_name_t;

#define GET_ARGS_VALUE_MPI_Unpublish_name(activity) { \
	args_MPI_Unpublish_name_t* args = (args_MPI_Unpublish_name_t*) activity->args; \
	args->service_name = (char *) service_name; \
	args->info = (MPI_Info) info; \
	args->port_name = (char *) port_name; \
};

#define GET_PTRS_VALUE_MPI_Unpublish_name(args) { \
	args_MPI_Unpublish_name_t* pargs = (args_MPI_Unpublish_name_t*) args; \
	if (pargs->service_name != NULL) { \
		strncpy(pargs->service_name__ref.val, pargs->service_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->port_name != NULL) { \
		strncpy(pargs->port_name__ref.val, pargs->port_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Grequest_complete` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Grequest_complete` function call.
 *
 * @struct args_MPI_Grequest_complete_t
 *
 * @note 
 *	int
 *	MPI_Grequest_complete (
 *			MPI_Request request (struct mpi_request_t *)
 *	)
 */
#if HAVE_MPI_Grequest_complete
typedef struct {
	MPI_Request request;
	int retval;
} args_MPI_Grequest_complete_t;

#define GET_ARGS_VALUE_MPI_Grequest_complete(activity) { \
	args_MPI_Grequest_complete_t* args = (args_MPI_Grequest_complete_t*) activity->args; \
	args->request = (MPI_Request) request; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_group` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_group` function call.
 *
 * @struct args_MPI_File_get_group_t
 *
 * @note 
 *	int
 *	MPI_File_get_group (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Group * group (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_File_get_group
typedef struct {
	MPI_File fh;
	MPI_Group * group;
	struct {
		MPI_Group val;
	} group__ref;
	int retval;
} args_MPI_File_get_group_t;

#define GET_ARGS_VALUE_MPI_File_get_group(activity) { \
	args_MPI_File_get_group_t* args = (args_MPI_File_get_group_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->group = (MPI_Group *) group; \
};

#define GET_PTRS_VALUE_MPI_File_get_group(args) { \
	args_MPI_File_get_group_t* pargs = (args_MPI_File_get_group_t*) args; \
	if (pargs->group != NULL) { \
		pargs->group__ref.val = *pargs->group; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iread_at_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iread_at_all` function call.
 *
 * @struct args_MPI_File_iread_at_all_t
 *
 * @note 
 *	int
 *	MPI_File_iread_at_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iread_at_all
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iread_at_all_t;

#define GET_ARGS_VALUE_MPI_File_iread_at_all(activity) { \
	args_MPI_File_iread_at_all_t* args = (args_MPI_File_iread_at_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iread_at_all(args) { \
	args_MPI_File_iread_at_all_t* pargs = (args_MPI_File_iread_at_all_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Graphdims_get` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Graphdims_get` function call.
 *
 * @struct args_MPI_Graphdims_get_t
 *
 * @note 
 *	int
 *	MPI_Graphdims_get (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * nnodes (int *)
 *			int * nedges (int *)
 *	)
 */
#if HAVE_MPI_Graphdims_get
typedef struct {
	MPI_Comm comm;
	int * nnodes;
	struct {
		int val;
	} nnodes__ref;
	int * nedges;
	struct {
		int val;
	} nedges__ref;
	int retval;
} args_MPI_Graphdims_get_t;

#define GET_ARGS_VALUE_MPI_Graphdims_get(activity) { \
	args_MPI_Graphdims_get_t* args = (args_MPI_Graphdims_get_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->nnodes = (int *) nnodes; \
	args->nedges = (int *) nedges; \
};

#define GET_PTRS_VALUE_MPI_Graphdims_get(args) { \
	args_MPI_Graphdims_get_t* pargs = (args_MPI_Graphdims_get_t*) args; \
	if (pargs->nnodes != NULL) { \
		pargs->nnodes__ref.val = *pargs->nnodes; \
	} \
	if (pargs->nedges != NULL) { \
		pargs->nedges__ref.val = *pargs->nedges; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iread_shared` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iread_shared` function call.
 *
 * @struct args_MPI_File_iread_shared_t
 *
 * @note 
 *	int
 *	MPI_File_iread_shared (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iread_shared
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iread_shared_t;

#define GET_ARGS_VALUE_MPI_File_iread_shared(activity) { \
	args_MPI_File_iread_shared_t* args = (args_MPI_File_iread_shared_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iread_shared(args) { \
	args_MPI_File_iread_shared_t* pargs = (args_MPI_File_iread_shared_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_idup_with_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_idup_with_info` function call.
 *
 * @struct args_MPI_Comm_idup_with_info_t
 *
 * @note 
 *	int
 *	MPI_Comm_idup_with_info (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Comm_idup_with_info
typedef struct {
	MPI_Comm comm;
	MPI_Info info;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Comm_idup_with_info_t;

#define GET_ARGS_VALUE_MPI_Comm_idup_with_info(activity) { \
	args_MPI_Comm_idup_with_info_t* args = (args_MPI_Comm_idup_with_info_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->newcomm = (MPI_Comm *) newcomm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Comm_idup_with_info(args) { \
	args_MPI_Comm_idup_with_info_t* pargs = (args_MPI_Comm_idup_with_info_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_version` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_version` function call.
 *
 * @struct args_MPI_Get_version_t
 *
 * @note 
 *	int
 *	MPI_Get_version (
 *			int * version (int *)
 *			int * subversion (int *)
 *	)
 */
#if HAVE_MPI_Get_version
typedef struct {
	int * version;
	struct {
		int val;
	} version__ref;
	int * subversion;
	struct {
		int val;
	} subversion__ref;
	int retval;
} args_MPI_Get_version_t;

#define GET_ARGS_VALUE_MPI_Get_version(activity) { \
	args_MPI_Get_version_t* args = (args_MPI_Get_version_t*) activity->args; \
	args->version = (int *) version; \
	args->subversion = (int *) subversion; \
};

#define GET_PTRS_VALUE_MPI_Get_version(args) { \
	args_MPI_Get_version_t* pargs = (args_MPI_Get_version_t*) args; \
	if (pargs->version != NULL) { \
		pargs->version__ref.val = *pargs->version; \
	} \
	if (pargs->subversion != NULL) { \
		pargs->subversion__ref.val = *pargs->subversion; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_lock_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_lock_all` function call.
 *
 * @struct args_MPI_Win_lock_all_t
 *
 * @note 
 *	int
 *	MPI_Win_lock_all (
 *			int mpi_assert (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_lock_all
typedef struct {
	int mpi_assert;
	MPI_Win win;
	int retval;
} args_MPI_Win_lock_all_t;

#define GET_ARGS_VALUE_MPI_Win_lock_all(activity) { \
	args_MPI_Win_lock_all_t* args = (args_MPI_Win_lock_all_t*) activity->args; \
	args->mpi_assert = (int) mpi_assert; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Intercomm_create_from_groups` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Intercomm_create_from_groups` function call.
 *
 * @struct args_MPI_Intercomm_create_from_groups_t
 *
 * @note 
 *	int
 *	MPI_Intercomm_create_from_groups (
 *			MPI_Group local_group (struct mpi_group_t *)
 *			int local_leader (int)
 *			MPI_Group remote_group (struct mpi_group_t *)
 *			int remote_leader (int)
 *			const char * tag (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *			MPI_Comm * newintercomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Intercomm_create_from_groups
typedef struct {
	MPI_Group local_group;
	int local_leader;
	MPI_Group remote_group;
	int remote_leader;
	char * tag;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} tag__ref;
	MPI_Info info;
	MPI_Errhandler errhandler;
	MPI_Comm * newintercomm;
	struct {
		MPI_Comm val;
	} newintercomm__ref;
	int retval;
} args_MPI_Intercomm_create_from_groups_t;

#define GET_ARGS_VALUE_MPI_Intercomm_create_from_groups(activity) { \
	args_MPI_Intercomm_create_from_groups_t* args = (args_MPI_Intercomm_create_from_groups_t*) activity->args; \
	args->local_group = (MPI_Group) local_group; \
	args->local_leader = (int) local_leader; \
	args->remote_group = (MPI_Group) remote_group; \
	args->remote_leader = (int) remote_leader; \
	args->tag = (char *) tag; \
	args->info = (MPI_Info) info; \
	args->errhandler = (MPI_Errhandler) errhandler; \
	args->newintercomm = (MPI_Comm *) newintercomm; \
};

#define GET_PTRS_VALUE_MPI_Intercomm_create_from_groups(args) { \
	args_MPI_Intercomm_create_from_groups_t* pargs = (args_MPI_Intercomm_create_from_groups_t*) args; \
	if (pargs->tag != NULL) { \
		strncpy(pargs->tag__ref.val, pargs->tag, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->newintercomm != NULL) { \
		pargs->newintercomm__ref.val = *pargs->newintercomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_alltoallv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_alltoallv_init` function call.
 *
 * @struct args_MPI_Neighbor_alltoallv_init_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_alltoallv_init (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Neighbor_alltoallv_init
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Neighbor_alltoallv_init_t;

#define GET_ARGS_VALUE_MPI_Neighbor_alltoallv_init(activity) { \
	args_MPI_Neighbor_alltoallv_init_t* args = (args_MPI_Neighbor_alltoallv_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_alltoallv_init(args) { \
	args_MPI_Neighbor_alltoallv_init_t* pargs = (args_MPI_Neighbor_alltoallv_init_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_darray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_darray` function call.
 *
 * @struct args_MPI_Type_create_darray_t
 *
 * @note 
 *	int
 *	MPI_Type_create_darray (
 *			int size (int)
 *			int rank (int)
 *			int ndims (int)
 *			const int[] gsize_array (const int[])
 *			const int[] distrib_array (const int[])
 *			const int[] darg_array (const int[])
 *			const int[] psize_array (const int[])
 *			int order (int)
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_darray
typedef struct {
	int size;
	int rank;
	int ndims;
	int(* gsize_array);
	struct {
		int val;
	} gsize_array__ref;
	int(* distrib_array);
	struct {
		int val;
	} distrib_array__ref;
	int(* darg_array);
	struct {
		int val;
	} darg_array__ref;
	int(* psize_array);
	struct {
		int val;
	} psize_array__ref;
	int order;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_darray_t;

#define GET_ARGS_VALUE_MPI_Type_create_darray(activity) { \
	args_MPI_Type_create_darray_t* args = (args_MPI_Type_create_darray_t*) activity->args; \
	args->size = (int) size; \
	args->rank = (int) rank; \
	args->ndims = (int) ndims; \
	args->gsize_array = (int(*)) gsize_array; \
	args->distrib_array = (int(*)) distrib_array; \
	args->darg_array = (int(*)) darg_array; \
	args->psize_array = (int(*)) psize_array; \
	args->order = (int) order; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_darray(args) { \
	args_MPI_Type_create_darray_t* pargs = (args_MPI_Type_create_darray_t*) args; \
	if (pargs->gsize_array != NULL) { \
		pargs->gsize_array__ref.val = *pargs->gsize_array; \
	} \
	if (pargs->distrib_array != NULL) { \
		pargs->distrib_array__ref.val = *pargs->distrib_array; \
	} \
	if (pargs->darg_array != NULL) { \
		pargs->darg_array__ref.val = *pargs->darg_array; \
	} \
	if (pargs->psize_array != NULL) { \
		pargs->psize_array__ref.val = *pargs->psize_array; \
	} \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_position_shared` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_position_shared` function call.
 *
 * @struct args_MPI_File_get_position_shared_t
 *
 * @note 
 *	int
 *	MPI_File_get_position_shared (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset * offset (long long*)
 *	)
 */
#if HAVE_MPI_File_get_position_shared
typedef struct {
	MPI_File fh;
	MPI_Offset * offset;
	struct {
		MPI_Offset val;
	} offset__ref;
	int retval;
} args_MPI_File_get_position_shared_t;

#define GET_ARGS_VALUE_MPI_File_get_position_shared(activity) { \
	args_MPI_File_get_position_shared_t* args = (args_MPI_File_get_position_shared_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset *) offset; \
};

#define GET_PTRS_VALUE_MPI_File_get_position_shared(args) { \
	args_MPI_File_get_position_shared_t* pargs = (args_MPI_File_get_position_shared_t*) args; \
	if (pargs->offset != NULL) { \
		pargs->offset__ref.val = *pargs->offset; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_get_group` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_get_group` function call.
 *
 * @struct args_MPI_Win_get_group_t
 *
 * @note 
 *	int
 *	MPI_Win_get_group (
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Group * group (struct mpi_group_t **)
 *	)
 */
#if HAVE_MPI_Win_get_group
typedef struct {
	MPI_Win win;
	MPI_Group * group;
	struct {
		MPI_Group val;
	} group__ref;
	int retval;
} args_MPI_Win_get_group_t;

#define GET_ARGS_VALUE_MPI_Win_get_group(activity) { \
	args_MPI_Win_get_group_t* args = (args_MPI_Win_get_group_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->group = (MPI_Group *) group; \
};

#define GET_PTRS_VALUE_MPI_Win_get_group(args) { \
	args_MPI_Win_get_group_t* pargs = (args_MPI_Win_get_group_t*) args; \
	if (pargs->group != NULL) { \
		pargs->group__ref.val = *pargs->group; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Error_class` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Error_class` function call.
 *
 * @struct args_MPI_Error_class_t
 *
 * @note 
 *	int
 *	MPI_Error_class (
 *			int errorcode (int)
 *			int * errorclass (int *)
 *	)
 */
#if HAVE_MPI_Error_class
typedef struct {
	int errorcode;
	int * errorclass;
	struct {
		int val;
	} errorclass__ref;
	int retval;
} args_MPI_Error_class_t;

#define GET_ARGS_VALUE_MPI_Error_class(activity) { \
	args_MPI_Error_class_t* args = (args_MPI_Error_class_t*) activity->args; \
	args->errorcode = (int) errorcode; \
	args->errorclass = (int *) errorclass; \
};

#define GET_PTRS_VALUE_MPI_Error_class(args) { \
	args_MPI_Error_class_t* pargs = (args_MPI_Error_class_t*) args; \
	if (pargs->errorclass != NULL) { \
		pargs->errorclass__ref.val = *pargs->errorclass; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_get_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_get_attr` function call.
 *
 * @struct args_MPI_Win_get_attr_t
 *
 * @note 
 *	int
 *	MPI_Win_get_attr (
 *			MPI_Win win (struct mpi_win_t *)
 *			int win_keyval (int)
 *			void * attribute_val (void *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Win_get_attr
typedef struct {
	MPI_Win win;
	int win_keyval;
	void * attribute_val;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Win_get_attr_t;

#define GET_ARGS_VALUE_MPI_Win_get_attr(activity) { \
	args_MPI_Win_get_attr_t* args = (args_MPI_Win_get_attr_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->win_keyval = (int) win_keyval; \
	args->attribute_val = (void *) attribute_val; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Win_get_attr(args) { \
	args_MPI_Win_get_attr_t* pargs = (args_MPI_Win_get_attr_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Reduce_local` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Reduce_local` function call.
 *
 * @struct args_MPI_Reduce_local_t
 *
 * @note 
 *	int
 *	MPI_Reduce_local (
 *			const void * inbuf (const void *)
 *			void * inoutbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *	)
 */
#if HAVE_MPI_Reduce_local
typedef struct {
	void * inbuf;
	void * inoutbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	int retval;
} args_MPI_Reduce_local_t;

#define GET_ARGS_VALUE_MPI_Reduce_local(activity) { \
	args_MPI_Reduce_local_t* args = (args_MPI_Reduce_local_t*) activity->args; \
	args->inbuf = (void *) inbuf; \
	args->inoutbuf = (void *) inoutbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ireduce_scatter_block` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ireduce_scatter_block` function call.
 *
 * @struct args_MPI_Ireduce_scatter_block_t
 *
 * @note 
 *	int
 *	MPI_Ireduce_scatter_block (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ireduce_scatter_block
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int recvcount;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ireduce_scatter_block_t;

#define GET_ARGS_VALUE_MPI_Ireduce_scatter_block(activity) { \
	args_MPI_Ireduce_scatter_block_t* args = (args_MPI_Ireduce_scatter_block_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ireduce_scatter_block(args) { \
	args_MPI_Ireduce_scatter_block_t* pargs = (args_MPI_Ireduce_scatter_block_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_set_cancelled` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_set_cancelled` function call.
 *
 * @struct args_MPI_Status_set_cancelled_t
 *
 * @note 
 *	int
 *	MPI_Status_set_cancelled (
 *			MPI_Status * status (struct opaque **)
 *			int flag (int)
 *	)
 */
#if HAVE_MPI_Status_set_cancelled
typedef struct {
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int flag;
	int retval;
} args_MPI_Status_set_cancelled_t;

#define GET_ARGS_VALUE_MPI_Status_set_cancelled(activity) { \
	args_MPI_Status_set_cancelled_t* args = (args_MPI_Status_set_cancelled_t*) activity->args; \
	args->status = (MPI_Status *) status; \
	args->flag = (int) flag; \
};

#define GET_PTRS_VALUE_MPI_Status_set_cancelled(args) { \
	args_MPI_Status_set_cancelled_t* pargs = (args_MPI_Status_set_cancelled_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_test` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_test` function call.
 *
 * @struct args_MPI_Win_test_t
 *
 * @note 
 *	int
 *	MPI_Win_test (
 *			MPI_Win win (struct mpi_win_t *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Win_test
typedef struct {
	MPI_Win win;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Win_test_t;

#define GET_ARGS_VALUE_MPI_Win_test(activity) { \
	args_MPI_Win_test_t* args = (args_MPI_Win_test_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Win_test(args) { \
	args_MPI_Win_test_t* pargs = (args_MPI_Win_test_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Test_cancelled` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Test_cancelled` function call.
 *
 * @struct args_MPI_Test_cancelled_t
 *
 * @note 
 *	int
 *	MPI_Test_cancelled (
 *			const MPI_Status * status (const struct opaque * *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Test_cancelled
typedef struct {
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Test_cancelled_t;

#define GET_ARGS_VALUE_MPI_Test_cancelled(activity) { \
	args_MPI_Test_cancelled_t* args = (args_MPI_Test_cancelled_t*) activity->args; \
	args->status = (MPI_Status *) status; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Test_cancelled(args) { \
	args_MPI_Test_cancelled_t* pargs = (args_MPI_Test_cancelled_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_seek_shared` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_seek_shared` function call.
 *
 * @struct args_MPI_File_seek_shared_t
 *
 * @note 
 *	int
 *	MPI_File_seek_shared (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			int whence (int)
 *	)
 */
#if HAVE_MPI_File_seek_shared
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	int whence;
	int retval;
} args_MPI_File_seek_shared_t;

#define GET_ARGS_VALUE_MPI_File_seek_shared(activity) { \
	args_MPI_File_seek_shared_t* args = (args_MPI_File_seek_shared_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->whence = (int) whence; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Error_string` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Error_string` function call.
 *
 * @struct args_MPI_Error_string_t
 *
 * @note 
 *	int
 *	MPI_Error_string (
 *			int errorcode (int)
 *			char * string (char *)
 *			int * resultlen (int *)
 *	)
 */
#if HAVE_MPI_Error_string
typedef struct {
	int errorcode;
	char * string;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} string__ref;
	int * resultlen;
	struct {
		int val;
	} resultlen__ref;
	int retval;
} args_MPI_Error_string_t;

#define GET_ARGS_VALUE_MPI_Error_string(activity) { \
	args_MPI_Error_string_t* args = (args_MPI_Error_string_t*) activity->args; \
	args->errorcode = (int) errorcode; \
	args->string = (char *) string; \
	args->resultlen = (int *) resultlen; \
};

#define GET_PTRS_VALUE_MPI_Error_string(args) { \
	args_MPI_Error_string_t* pargs = (args_MPI_Error_string_t*) args; \
	if (pargs->string != NULL) { \
		strncpy(pargs->string__ref.val, pargs->string, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->resultlen != NULL) { \
		pargs->resultlen__ref.val = *pargs->resultlen; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Graph_neighbors_count` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Graph_neighbors_count` function call.
 *
 * @struct args_MPI_Graph_neighbors_count_t
 *
 * @note 
 *	int
 *	MPI_Graph_neighbors_count (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int rank (int)
 *			int * nneighbors (int *)
 *	)
 */
#if HAVE_MPI_Graph_neighbors_count
typedef struct {
	MPI_Comm comm;
	int rank;
	int * nneighbors;
	struct {
		int val;
	} nneighbors__ref;
	int retval;
} args_MPI_Graph_neighbors_count_t;

#define GET_ARGS_VALUE_MPI_Graph_neighbors_count(activity) { \
	args_MPI_Graph_neighbors_count_t* args = (args_MPI_Graph_neighbors_count_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->rank = (int) rank; \
	args->nneighbors = (int *) nneighbors; \
};

#define GET_PTRS_VALUE_MPI_Graph_neighbors_count(args) { \
	args_MPI_Graph_neighbors_count_t* pargs = (args_MPI_Graph_neighbors_count_t*) args; \
	if (pargs->nneighbors != NULL) { \
		pargs->nneighbors__ref.val = *pargs->nneighbors; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_create_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_create_errhandler` function call.
 *
 * @struct args_MPI_Session_create_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Session_create_errhandler (
 *			MPI_Session_errhandler_function * session_errhandler_fn (void (*)(struct mpi_instance_t * *, int *, ...))
 *			MPI_Errhandler * errhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_Session_create_errhandler
typedef struct {
	MPI_Session_errhandler_function * session_errhandler_fn;
	MPI_Errhandler * errhandler;
	struct {
		MPI_Errhandler val;
	} errhandler__ref;
	int retval;
} args_MPI_Session_create_errhandler_t;

#define GET_ARGS_VALUE_MPI_Session_create_errhandler(activity) { \
	args_MPI_Session_create_errhandler_t* args = (args_MPI_Session_create_errhandler_t*) activity->args; \
	args->session_errhandler_fn = (MPI_Session_errhandler_function *) session_errhandler_fn; \
	args->errhandler = (MPI_Errhandler *) errhandler; \
};

#define GET_PTRS_VALUE_MPI_Session_create_errhandler(args) { \
	args_MPI_Session_create_errhandler_t* pargs = (args_MPI_Session_create_errhandler_t*) args; \
	if (pargs->errhandler != NULL) { \
		pargs->errhandler__ref.val = *pargs->errhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_unlock` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_unlock` function call.
 *
 * @struct args_MPI_Win_unlock_t
 *
 * @note 
 *	int
 *	MPI_Win_unlock (
 *			int rank (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_unlock
typedef struct {
	int rank;
	MPI_Win win;
	int retval;
} args_MPI_Win_unlock_t;

#define GET_ARGS_VALUE_MPI_Win_unlock(activity) { \
	args_MPI_Win_unlock_t* args = (args_MPI_Win_unlock_t*) activity->args; \
	args->rank = (int) rank; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iscatter` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iscatter` function call.
 *
 * @struct args_MPI_Iscatter_t
 *
 * @note 
 *	int
 *	MPI_Iscatter (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Iscatter
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Iscatter_t;

#define GET_ARGS_VALUE_MPI_Iscatter(activity) { \
	args_MPI_Iscatter_t* args = (args_MPI_Iscatter_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Iscatter(args) { \
	args_MPI_Iscatter_t* pargs = (args_MPI_Iscatter_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_all` function call.
 *
 * @struct args_MPI_File_read_all_t
 *
 * @note 
 *	int
 *	MPI_File_read_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_all
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_all_t;

#define GET_ARGS_VALUE_MPI_File_read_all(activity) { \
	args_MPI_File_read_all_t* args = (args_MPI_File_read_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_all(args) { \
	args_MPI_File_read_all_t* pargs = (args_MPI_File_read_all_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_set_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_set_errhandler` function call.
 *
 * @struct args_MPI_File_set_errhandler_t
 *
 * @note 
 *	int
 *	MPI_File_set_errhandler (
 *			MPI_File file (struct mpi_file_t *)
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *	)
 */
#if HAVE_MPI_File_set_errhandler
typedef struct {
	MPI_File file;
	MPI_Errhandler errhandler;
	int retval;
} args_MPI_File_set_errhandler_t;

#define GET_ARGS_VALUE_MPI_File_set_errhandler(activity) { \
	args_MPI_File_set_errhandler_t* args = (args_MPI_File_set_errhandler_t*) activity->args; \
	args->file = (MPI_File) file; \
	args->errhandler = (MPI_Errhandler) errhandler; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_set_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_set_attr` function call.
 *
 * @struct args_MPI_Type_set_attr_t
 *
 * @note 
 *	int
 *	MPI_Type_set_attr (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			int type_keyval (int)
 *			void * attr_val (void *)
 *	)
 */
#if HAVE_MPI_Type_set_attr
typedef struct {
	MPI_Datatype type;
	int type_keyval;
	void * attr_val;
	int retval;
} args_MPI_Type_set_attr_t;

#define GET_ARGS_VALUE_MPI_Type_set_attr(activity) { \
	args_MPI_Type_set_attr_t* args = (args_MPI_Type_set_attr_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->type_keyval = (int) type_keyval; \
	args->attr_val = (void *) attr_val; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_errhandler` function call.
 *
 * @struct args_MPI_File_get_errhandler_t
 *
 * @note 
 *	int
 *	MPI_File_get_errhandler (
 *			MPI_File file (struct mpi_file_t *)
 *			MPI_Errhandler * errhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_File_get_errhandler
typedef struct {
	MPI_File file;
	MPI_Errhandler * errhandler;
	struct {
		MPI_Errhandler val;
	} errhandler__ref;
	int retval;
} args_MPI_File_get_errhandler_t;

#define GET_ARGS_VALUE_MPI_File_get_errhandler(activity) { \
	args_MPI_File_get_errhandler_t* args = (args_MPI_File_get_errhandler_t*) activity->args; \
	args->file = (MPI_File) file; \
	args->errhandler = (MPI_Errhandler *) errhandler; \
};

#define GET_PTRS_VALUE_MPI_File_get_errhandler(args) { \
	args_MPI_File_get_errhandler_t* pargs = (args_MPI_File_get_errhandler_t*) args; \
	if (pargs->errhandler != NULL) { \
		pargs->errhandler__ref.val = *pargs->errhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_finalize` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_finalize` function call.
 *
 * @struct args_MPI_Session_finalize_t
 *
 * @note 
 *	int
 *	MPI_Session_finalize (
 *			MPI_Session * session (struct mpi_instance_t **)
 *	)
 */
#if HAVE_MPI_Session_finalize
typedef struct {
	MPI_Session * session;
	struct {
		MPI_Session val;
	} session__ref;
	int retval;
} args_MPI_Session_finalize_t;

#define GET_ARGS_VALUE_MPI_Session_finalize(activity) { \
	args_MPI_Session_finalize_t* args = (args_MPI_Session_finalize_t*) activity->args; \
	args->session = (MPI_Session *) session; \
};

#define GET_PTRS_VALUE_MPI_Session_finalize(args) { \
	args_MPI_Session_finalize_t* pargs = (args_MPI_Session_finalize_t*) args; \
	if (pargs->session != NULL) { \
		pargs->session__ref.val = *pargs->session; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_free_keyval` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_free_keyval` function call.
 *
 * @struct args_MPI_Comm_free_keyval_t
 *
 * @note 
 *	int
 *	MPI_Comm_free_keyval (
 *			int * comm_keyval (int *)
 *	)
 */
#if HAVE_MPI_Comm_free_keyval
typedef struct {
	int * comm_keyval;
	struct {
		int val;
	} comm_keyval__ref;
	int retval;
} args_MPI_Comm_free_keyval_t;

#define GET_ARGS_VALUE_MPI_Comm_free_keyval(activity) { \
	args_MPI_Comm_free_keyval_t* args = (args_MPI_Comm_free_keyval_t*) activity->args; \
	args->comm_keyval = (int *) comm_keyval; \
};

#define GET_PTRS_VALUE_MPI_Comm_free_keyval(args) { \
	args_MPI_Comm_free_keyval_t* pargs = (args_MPI_Comm_free_keyval_t*) args; \
	if (pargs->comm_keyval != NULL) { \
		pargs->comm_keyval__ref.val = *pargs->comm_keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iwrite_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iwrite_all` function call.
 *
 * @struct args_MPI_File_iwrite_all_t
 *
 * @note 
 *	int
 *	MPI_File_iwrite_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iwrite_all
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iwrite_all_t;

#define GET_ARGS_VALUE_MPI_File_iwrite_all(activity) { \
	args_MPI_File_iwrite_all_t* args = (args_MPI_File_iwrite_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iwrite_all(args) { \
	args_MPI_File_iwrite_all_t* pargs = (args_MPI_File_iwrite_all_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Free_mem` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Free_mem` function call.
 *
 * @struct args_MPI_Free_mem_t
 *
 * @note 
 *	int
 *	MPI_Free_mem (
 *			void * base (void *)
 *	)
 */
#if HAVE_MPI_Free_mem
typedef struct {
	void * base;
	int retval;
} args_MPI_Free_mem_t;

#define GET_ARGS_VALUE_MPI_Free_mem(activity) { \
	args_MPI_Free_mem_t* args = (args_MPI_Free_mem_t*) activity->args; \
	args->base = (void *) base; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_set_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_set_info` function call.
 *
 * @struct args_MPI_Win_set_info_t
 *
 * @note 
 *	int
 *	MPI_Win_set_info (
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *	)
 */
#if HAVE_MPI_Win_set_info
typedef struct {
	MPI_Win win;
	MPI_Info info;
	int retval;
} args_MPI_Win_set_info_t;

#define GET_ARGS_VALUE_MPI_Win_set_info(activity) { \
	args_MPI_Win_set_info_t* args = (args_MPI_Win_set_info_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->info = (MPI_Info) info; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Alltoallv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Alltoallv_init` function call.
 *
 * @struct args_MPI_Alltoallv_init_t
 *
 * @note 
 *	int
 *	MPI_Alltoallv_init (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Alltoallv_init
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Alltoallv_init_t;

#define GET_ARGS_VALUE_MPI_Alltoallv_init(activity) { \
	args_MPI_Alltoallv_init_t* args = (args_MPI_Alltoallv_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Alltoallv_init(args) { \
	args_MPI_Alltoallv_init_t* pargs = (args_MPI_Alltoallv_init_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_attach` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_attach` function call.
 *
 * @struct args_MPI_Win_attach_t
 *
 * @note 
 *	int
 *	MPI_Win_attach (
 *			MPI_Win win (struct mpi_win_t *)
 *			void * base (void *)
 *			MPI_Aint size (long)
 *	)
 */
#if HAVE_MPI_Win_attach
typedef struct {
	MPI_Win win;
	void * base;
	MPI_Aint size;
	int retval;
} args_MPI_Win_attach_t;

#define GET_ARGS_VALUE_MPI_Win_attach(activity) { \
	args_MPI_Win_attach_t* args = (args_MPI_Win_attach_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->base = (void *) base; \
	args->size = (MPI_Aint) size; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_position` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_position` function call.
 *
 * @struct args_MPI_File_get_position_t
 *
 * @note 
 *	int
 *	MPI_File_get_position (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset * offset (long long*)
 *	)
 */
#if HAVE_MPI_File_get_position
typedef struct {
	MPI_File fh;
	MPI_Offset * offset;
	struct {
		MPI_Offset val;
	} offset__ref;
	int retval;
} args_MPI_File_get_position_t;

#define GET_ARGS_VALUE_MPI_File_get_position(activity) { \
	args_MPI_File_get_position_t* args = (args_MPI_File_get_position_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset *) offset; \
};

#define GET_PTRS_VALUE_MPI_File_get_position(args) { \
	args_MPI_File_get_position_t* pargs = (args_MPI_File_get_position_t*) args; \
	if (pargs->offset != NULL) { \
		pargs->offset__ref.val = *pargs->offset; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Accumulate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Accumulate` function call.
 *
 * @struct args_MPI_Accumulate_t
 *
 * @note 
 *	int
 *	MPI_Accumulate (
 *			const void * origin_addr (const void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_count (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Accumulate
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_count;
	MPI_Datatype target_datatype;
	MPI_Op op;
	MPI_Win win;
	int retval;
} args_MPI_Accumulate_t;

#define GET_ARGS_VALUE_MPI_Accumulate(activity) { \
	args_MPI_Accumulate_t* args = (args_MPI_Accumulate_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_count = (int) target_count; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->op = (MPI_Op) op; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_shared` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_shared` function call.
 *
 * @struct args_MPI_File_write_shared_t
 *
 * @note 
 *	int
 *	MPI_File_write_shared (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_shared
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_shared_t;

#define GET_ARGS_VALUE_MPI_File_write_shared(activity) { \
	args_MPI_File_write_shared_t* args = (args_MPI_File_write_shared_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_shared(args) { \
	args_MPI_File_write_shared_t* pargs = (args_MPI_File_write_shared_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_create_dynamic` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_create_dynamic` function call.
 *
 * @struct args_MPI_Win_create_dynamic_t
 *
 * @note 
 *	int
 *	MPI_Win_create_dynamic (
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Win * win (struct mpi_win_t **)
 *	)
 */
#if HAVE_MPI_Win_create_dynamic
typedef struct {
	MPI_Info info;
	MPI_Comm comm;
	MPI_Win * win;
	struct {
		MPI_Win val;
	} win__ref;
	int retval;
} args_MPI_Win_create_dynamic_t;

#define GET_ARGS_VALUE_MPI_Win_create_dynamic(activity) { \
	args_MPI_Win_create_dynamic_t* args = (args_MPI_Win_create_dynamic_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->comm = (MPI_Comm) comm; \
	args->win = (MPI_Win *) win; \
};

#define GET_PTRS_VALUE_MPI_Win_create_dynamic(args) { \
	args_MPI_Win_create_dynamic_t* pargs = (args_MPI_Win_create_dynamic_t*) args; \
	if (pargs->win != NULL) { \
		pargs->win__ref.val = *pargs->win; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_alltoallw` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_alltoallw` function call.
 *
 * @struct args_MPI_Neighbor_alltoallw_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_alltoallw (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const MPI_Aint[] sdispls (const long[])
 *			const MPI_Datatype[] sendtypes (const struct mpi_datatype_t *[])
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const MPI_Aint[] rdispls (const long[])
 *			const MPI_Datatype[] recvtypes (const struct mpi_datatype_t *[])
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Neighbor_alltoallw
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	MPI_Aint(* sdispls);
	struct {
		MPI_Aint val;
	} sdispls__ref;
	MPI_Datatype(* sendtypes);
	struct {
		MPI_Datatype val;
	} sendtypes__ref;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	MPI_Aint(* rdispls);
	struct {
		MPI_Aint val;
	} rdispls__ref;
	MPI_Datatype(* recvtypes);
	struct {
		MPI_Datatype val;
	} recvtypes__ref;
	MPI_Comm comm;
	int retval;
} args_MPI_Neighbor_alltoallw_t;

#define GET_ARGS_VALUE_MPI_Neighbor_alltoallw(activity) { \
	args_MPI_Neighbor_alltoallw_t* args = (args_MPI_Neighbor_alltoallw_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (MPI_Aint(*)) sdispls; \
	args->sendtypes = (MPI_Datatype(*)) sendtypes; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (MPI_Aint(*)) rdispls; \
	args->recvtypes = (MPI_Datatype(*)) recvtypes; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_alltoallw(args) { \
	args_MPI_Neighbor_alltoallw_t* pargs = (args_MPI_Neighbor_alltoallw_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->sendtypes != NULL) { \
		pargs->sendtypes__ref.val = *pargs->sendtypes; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->recvtypes != NULL) { \
		pargs->recvtypes__ref.val = *pargs->recvtypes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iexscan` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iexscan` function call.
 *
 * @struct args_MPI_Iexscan_t
 *
 * @note 
 *	int
 *	MPI_Iexscan (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Iexscan
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Iexscan_t;

#define GET_ARGS_VALUE_MPI_Iexscan(activity) { \
	args_MPI_Iexscan_t* args = (args_MPI_Iexscan_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Iexscan(args) { \
	args_MPI_Iexscan_t* pargs = (args_MPI_Iexscan_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Graph_map` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Graph_map` function call.
 *
 * @struct args_MPI_Graph_map_t
 *
 * @note 
 *	int
 *	MPI_Graph_map (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int nnodes (int)
 *			const int[] index (const int[])
 *			const int[] edges (const int[])
 *			int * newrank (int *)
 *	)
 */
#if HAVE_MPI_Graph_map
typedef struct {
	MPI_Comm comm;
	int nnodes;
	int(* index);
	struct {
		int val;
	} index__ref;
	int(* edges);
	struct {
		int val;
	} edges__ref;
	int * newrank;
	struct {
		int val;
	} newrank__ref;
	int retval;
} args_MPI_Graph_map_t;

#define GET_ARGS_VALUE_MPI_Graph_map(activity) { \
	args_MPI_Graph_map_t* args = (args_MPI_Graph_map_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->nnodes = (int) nnodes; \
	args->index = (int(*)) index; \
	args->edges = (int(*)) edges; \
	args->newrank = (int *) newrank; \
};

#define GET_PTRS_VALUE_MPI_Graph_map(args) { \
	args_MPI_Graph_map_t* pargs = (args_MPI_Graph_map_t*) args; \
	if (pargs->index != NULL) { \
		pargs->index__ref.val = *pargs->index; \
	} \
	if (pargs->edges != NULL) { \
		pargs->edges__ref.val = *pargs->edges; \
	} \
	if (pargs->newrank != NULL) { \
		pargs->newrank__ref.val = *pargs->newrank; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Recv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Recv_init` function call.
 *
 * @struct args_MPI_Recv_init_t
 *
 * @note 
 *	int
 *	MPI_Recv_init (
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Recv_init
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int source;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Recv_init_t;

#define GET_ARGS_VALUE_MPI_Recv_init(activity) { \
	args_MPI_Recv_init_t* args = (args_MPI_Recv_init_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Recv_init(args) { \
	args_MPI_Recv_init_t* pargs = (args_MPI_Recv_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_subarray` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_subarray` function call.
 *
 * @struct args_MPI_Type_create_subarray_t
 *
 * @note 
 *	int
 *	MPI_Type_create_subarray (
 *			int ndims (int)
 *			const int[] size_array (const int[])
 *			const int[] subsize_array (const int[])
 *			const int[] start_array (const int[])
 *			int order (int)
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_subarray
typedef struct {
	int ndims;
	int(* size_array);
	struct {
		int val;
	} size_array__ref;
	int(* subsize_array);
	struct {
		int val;
	} subsize_array__ref;
	int(* start_array);
	struct {
		int val;
	} start_array__ref;
	int order;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_subarray_t;

#define GET_ARGS_VALUE_MPI_Type_create_subarray(activity) { \
	args_MPI_Type_create_subarray_t* args = (args_MPI_Type_create_subarray_t*) activity->args; \
	args->ndims = (int) ndims; \
	args->size_array = (int(*)) size_array; \
	args->subsize_array = (int(*)) subsize_array; \
	args->start_array = (int(*)) start_array; \
	args->order = (int) order; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_subarray(args) { \
	args_MPI_Type_create_subarray_t* pargs = (args_MPI_Type_create_subarray_t*) args; \
	if (pargs->size_array != NULL) { \
		pargs->size_array__ref.val = *pargs->size_array; \
	} \
	if (pargs->subsize_array != NULL) { \
		pargs->subsize_array__ref.val = *pargs->subsize_array; \
	} \
	if (pargs->start_array != NULL) { \
		pargs->start_array__ref.val = *pargs->start_array; \
	} \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_create_group` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_create_group` function call.
 *
 * @struct args_MPI_Comm_create_group_t
 *
 * @note 
 *	int
 *	MPI_Comm_create_group (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Group group (struct mpi_group_t *)
 *			int tag (int)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_create_group
typedef struct {
	MPI_Comm comm;
	MPI_Group group;
	int tag;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_create_group_t;

#define GET_ARGS_VALUE_MPI_Comm_create_group(activity) { \
	args_MPI_Comm_create_group_t* args = (args_MPI_Comm_create_group_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->group = (MPI_Group) group; \
	args->tag = (int) tag; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_create_group(args) { \
	args_MPI_Comm_create_group_t* pargs = (args_MPI_Comm_create_group_t*) args; \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Allgather_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Allgather_init` function call.
 *
 * @struct args_MPI_Allgather_init_t
 *
 * @note 
 *	int
 *	MPI_Allgather_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Allgather_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Allgather_init_t;

#define GET_ARGS_VALUE_MPI_Allgather_init(activity) { \
	args_MPI_Allgather_init_t* args = (args_MPI_Allgather_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Allgather_init(args) { \
	args_MPI_Allgather_init_t* pargs = (args_MPI_Allgather_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Reduce_scatter_block_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Reduce_scatter_block_init` function call.
 *
 * @struct args_MPI_Reduce_scatter_block_init_t
 *
 * @note 
 *	int
 *	MPI_Reduce_scatter_block_init (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Reduce_scatter_block_init
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int recvcount;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Reduce_scatter_block_init_t;

#define GET_ARGS_VALUE_MPI_Reduce_scatter_block_init(activity) { \
	args_MPI_Reduce_scatter_block_init_t* args = (args_MPI_Reduce_scatter_block_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Reduce_scatter_block_init(args) { \
	args_MPI_Reduce_scatter_block_init_t* pargs = (args_MPI_Reduce_scatter_block_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_match_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_match_size` function call.
 *
 * @struct args_MPI_Type_match_size_t
 *
 * @note 
 *	int
 *	MPI_Type_match_size (
 *			int typeclass (int)
 *			int size (int)
 *			MPI_Datatype * type (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_match_size
typedef struct {
	int typeclass;
	int size;
	MPI_Datatype * type;
	struct {
		MPI_Datatype val;
	} type__ref;
	int retval;
} args_MPI_Type_match_size_t;

#define GET_ARGS_VALUE_MPI_Type_match_size(activity) { \
	args_MPI_Type_match_size_t* args = (args_MPI_Type_match_size_t*) activity->args; \
	args->typeclass = (int) typeclass; \
	args->size = (int) size; \
	args->type = (MPI_Datatype *) type; \
};

#define GET_PTRS_VALUE_MPI_Type_match_size(args) { \
	args_MPI_Type_match_size_t* pargs = (args_MPI_Type_match_size_t*) args; \
	if (pargs->type != NULL) { \
		pargs->type__ref.val = *pargs->type; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_true_extent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_true_extent` function call.
 *
 * @struct args_MPI_Type_get_true_extent_t
 *
 * @note 
 *	int
 *	MPI_Type_get_true_extent (
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Aint * true_lb (long*)
 *			MPI_Aint * true_extent (long*)
 *	)
 */
#if HAVE_MPI_Type_get_true_extent
typedef struct {
	MPI_Datatype datatype;
	MPI_Aint * true_lb;
	struct {
		MPI_Aint val;
	} true_lb__ref;
	MPI_Aint * true_extent;
	struct {
		MPI_Aint val;
	} true_extent__ref;
	int retval;
} args_MPI_Type_get_true_extent_t;

#define GET_ARGS_VALUE_MPI_Type_get_true_extent(activity) { \
	args_MPI_Type_get_true_extent_t* args = (args_MPI_Type_get_true_extent_t*) activity->args; \
	args->datatype = (MPI_Datatype) datatype; \
	args->true_lb = (MPI_Aint *) true_lb; \
	args->true_extent = (MPI_Aint *) true_extent; \
};

#define GET_PTRS_VALUE_MPI_Type_get_true_extent(args) { \
	args_MPI_Type_get_true_extent_t* pargs = (args_MPI_Type_get_true_extent_t*) args; \
	if (pargs->true_lb != NULL) { \
		pargs->true_lb__ref.val = *pargs->true_lb; \
	} \
	if (pargs->true_extent != NULL) { \
		pargs->true_extent__ref.val = *pargs->true_extent; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Alltoall_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Alltoall_init` function call.
 *
 * @struct args_MPI_Alltoall_init_t
 *
 * @note 
 *	int
 *	MPI_Alltoall_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Alltoall_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Alltoall_init_t;

#define GET_ARGS_VALUE_MPI_Alltoall_init(activity) { \
	args_MPI_Alltoall_init_t* args = (args_MPI_Alltoall_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Alltoall_init(args) { \
	args_MPI_Alltoall_init_t* pargs = (args_MPI_Alltoall_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Send_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Send_init` function call.
 *
 * @struct args_MPI_Send_init_t
 *
 * @note 
 *	int
 *	MPI_Send_init (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Send_init
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Send_init_t;

#define GET_ARGS_VALUE_MPI_Send_init(activity) { \
	args_MPI_Send_init_t* args = (args_MPI_Send_init_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Send_init(args) { \
	args_MPI_Send_init_t* pargs = (args_MPI_Send_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_allgather_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_allgather_init` function call.
 *
 * @struct args_MPI_Neighbor_allgather_init_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_allgather_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Neighbor_allgather_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Neighbor_allgather_init_t;

#define GET_ARGS_VALUE_MPI_Neighbor_allgather_init(activity) { \
	args_MPI_Neighbor_allgather_init_t* args = (args_MPI_Neighbor_allgather_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_allgather_init(args) { \
	args_MPI_Neighbor_allgather_init_t* pargs = (args_MPI_Neighbor_allgather_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ibcast` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ibcast` function call.
 *
 * @struct args_MPI_Ibcast_t
 *
 * @note 
 *	int
 *	MPI_Ibcast (
 *			void * buffer (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ibcast
typedef struct {
	void * buffer;
	int count;
	MPI_Datatype datatype;
	int root;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ibcast_t;

#define GET_ARGS_VALUE_MPI_Ibcast(activity) { \
	args_MPI_Ibcast_t* args = (args_MPI_Ibcast_t*) activity->args; \
	args->buffer = (void *) buffer; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ibcast(args) { \
	args_MPI_Ibcast_t* pargs = (args_MPI_Ibcast_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iread` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iread` function call.
 *
 * @struct args_MPI_File_iread_t
 *
 * @note 
 *	int
 *	MPI_File_iread (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iread
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iread_t;

#define GET_ARGS_VALUE_MPI_File_iread(activity) { \
	args_MPI_File_iread_t* args = (args_MPI_File_iread_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iread(args) { \
	args_MPI_File_iread_t* pargs = (args_MPI_File_iread_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_alltoall_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_alltoall_init` function call.
 *
 * @struct args_MPI_Neighbor_alltoall_init_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_alltoall_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Neighbor_alltoall_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Neighbor_alltoall_init_t;

#define GET_ARGS_VALUE_MPI_Neighbor_alltoall_init(activity) { \
	args_MPI_Neighbor_alltoall_init_t* args = (args_MPI_Neighbor_alltoall_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_alltoall_init(args) { \
	args_MPI_Neighbor_alltoall_init_t* pargs = (args_MPI_Neighbor_alltoall_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cart_rank` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cart_rank` function call.
 *
 * @struct args_MPI_Cart_rank_t
 *
 * @note 
 *	int
 *	MPI_Cart_rank (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			const int[] coords (const int[])
 *			int * rank (int *)
 *	)
 */
#if HAVE_MPI_Cart_rank
typedef struct {
	MPI_Comm comm;
	int(* coords);
	struct {
		int val;
	} coords__ref;
	int * rank;
	struct {
		int val;
	} rank__ref;
	int retval;
} args_MPI_Cart_rank_t;

#define GET_ARGS_VALUE_MPI_Cart_rank(activity) { \
	args_MPI_Cart_rank_t* args = (args_MPI_Cart_rank_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->coords = (int(*)) coords; \
	args->rank = (int *) rank; \
};

#define GET_PTRS_VALUE_MPI_Cart_rank(args) { \
	args_MPI_Cart_rank_t* pargs = (args_MPI_Cart_rank_t*) args; \
	if (pargs->coords != NULL) { \
		pargs->coords__ref.val = *pargs->coords; \
	} \
	if (pargs->rank != NULL) { \
		pargs->rank__ref.val = *pargs->rank; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Publish_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Publish_name` function call.
 *
 * @struct args_MPI_Publish_name_t
 *
 * @note 
 *	int
 *	MPI_Publish_name (
 *			const char * service_name (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *			const char * port_name (const char *)
 *	)
 */
#if HAVE_MPI_Publish_name
typedef struct {
	char * service_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} service_name__ref;
	MPI_Info info;
	char * port_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} port_name__ref;
	int retval;
} args_MPI_Publish_name_t;

#define GET_ARGS_VALUE_MPI_Publish_name(activity) { \
	args_MPI_Publish_name_t* args = (args_MPI_Publish_name_t*) activity->args; \
	args->service_name = (char *) service_name; \
	args->info = (MPI_Info) info; \
	args->port_name = (char *) port_name; \
};

#define GET_PTRS_VALUE_MPI_Publish_name(args) { \
	args_MPI_Publish_name_t* pargs = (args_MPI_Publish_name_t*) args; \
	if (pargs->service_name != NULL) { \
		strncpy(pargs->service_name__ref.val, pargs->service_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->port_name != NULL) { \
		strncpy(pargs->port_name__ref.val, pargs->port_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_set_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_set_attr` function call.
 *
 * @struct args_MPI_Win_set_attr_t
 *
 * @note 
 *	int
 *	MPI_Win_set_attr (
 *			MPI_Win win (struct mpi_win_t *)
 *			int win_keyval (int)
 *			void * attribute_val (void *)
 *	)
 */
#if HAVE_MPI_Win_set_attr
typedef struct {
	MPI_Win win;
	int win_keyval;
	void * attribute_val;
	int retval;
} args_MPI_Win_set_attr_t;

#define GET_ARGS_VALUE_MPI_Win_set_attr(activity) { \
	args_MPI_Win_set_attr_t* args = (args_MPI_Win_set_attr_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->win_keyval = (int) win_keyval; \
	args->attribute_val = (void *) attribute_val; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_sync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_sync` function call.
 *
 * @struct args_MPI_Win_sync_t
 *
 * @note 
 *	int
 *	MPI_Win_sync (
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_sync
typedef struct {
	MPI_Win win;
	int retval;
} args_MPI_Win_sync_t;

#define GET_ARGS_VALUE_MPI_Win_sync(activity) { \
	args_MPI_Win_sync_t* args = (args_MPI_Win_sync_t*) activity->args; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_free_keyval` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_free_keyval` function call.
 *
 * @struct args_MPI_Type_free_keyval_t
 *
 * @note 
 *	int
 *	MPI_Type_free_keyval (
 *			int * type_keyval (int *)
 *	)
 */
#if HAVE_MPI_Type_free_keyval
typedef struct {
	int * type_keyval;
	struct {
		int val;
	} type_keyval__ref;
	int retval;
} args_MPI_Type_free_keyval_t;

#define GET_ARGS_VALUE_MPI_Type_free_keyval(activity) { \
	args_MPI_Type_free_keyval_t* args = (args_MPI_Type_free_keyval_t*) activity->args; \
	args->type_keyval = (int *) type_keyval; \
};

#define GET_PTRS_VALUE_MPI_Type_free_keyval(args) { \
	args_MPI_Type_free_keyval_t* pargs = (args_MPI_Type_free_keyval_t*) args; \
	if (pargs->type_keyval != NULL) { \
		pargs->type_keyval__ref.val = *pargs->type_keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write` function call.
 *
 * @struct args_MPI_File_write_t
 *
 * @note 
 *	int
 *	MPI_File_write (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_t;

#define GET_ARGS_VALUE_MPI_File_write(activity) { \
	args_MPI_File_write_t* args = (args_MPI_File_write_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write(args) { \
	args_MPI_File_write_t* pargs = (args_MPI_File_write_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Register_datarep` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Register_datarep` function call.
 *
 * @struct args_MPI_Register_datarep_t
 *
 * @note 
 *	int
 *	MPI_Register_datarep (
 *			const char * datarep (const char *)
 *			MPI_Datarep_conversion_function * read_conversion_fn (int (*)(void *, struct mpi_datatype_t *, int, void *, long long, void *))
 *			MPI_Datarep_conversion_function * write_conversion_fn (int (*)(void *, struct mpi_datatype_t *, int, void *, long long, void *))
 *			MPI_Datarep_extent_function * dtype_file_extent_fn (int (*)(struct mpi_datatype_t *, long *, void *))
 *			void * extra_state (void *)
 *	)
 */
#if HAVE_MPI_Register_datarep
typedef struct {
	char * datarep;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} datarep__ref;
	MPI_Datarep_conversion_function * read_conversion_fn;
	MPI_Datarep_conversion_function * write_conversion_fn;
	MPI_Datarep_extent_function * dtype_file_extent_fn;
	void * extra_state;
	int retval;
} args_MPI_Register_datarep_t;

#define GET_ARGS_VALUE_MPI_Register_datarep(activity) { \
	args_MPI_Register_datarep_t* args = (args_MPI_Register_datarep_t*) activity->args; \
	args->datarep = (char *) datarep; \
	args->read_conversion_fn = (MPI_Datarep_conversion_function *) read_conversion_fn; \
	args->write_conversion_fn = (MPI_Datarep_conversion_function *) write_conversion_fn; \
	args->dtype_file_extent_fn = (MPI_Datarep_extent_function *) dtype_file_extent_fn; \
	args->extra_state = (void *) extra_state; \
};

#define GET_PTRS_VALUE_MPI_Register_datarep(args) { \
	args_MPI_Register_datarep_t* pargs = (args_MPI_Register_datarep_t*) args; \
	if (pargs->datarep != NULL) { \
		strncpy(pargs->datarep__ref.val, pargs->datarep, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ineighbor_alltoall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ineighbor_alltoall` function call.
 *
 * @struct args_MPI_Ineighbor_alltoall_t
 *
 * @note 
 *	int
 *	MPI_Ineighbor_alltoall (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ineighbor_alltoall
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ineighbor_alltoall_t;

#define GET_ARGS_VALUE_MPI_Ineighbor_alltoall(activity) { \
	args_MPI_Ineighbor_alltoall_t* args = (args_MPI_Ineighbor_alltoall_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ineighbor_alltoall(args) { \
	args_MPI_Ineighbor_alltoall_t* pargs = (args_MPI_Ineighbor_alltoall_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_preallocate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_preallocate` function call.
 *
 * @struct args_MPI_File_preallocate_t
 *
 * @note 
 *	int
 *	MPI_File_preallocate (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset size (long long)
 *	)
 */
#if HAVE_MPI_File_preallocate
typedef struct {
	MPI_File fh;
	MPI_Offset size;
	int retval;
} args_MPI_File_preallocate_t;

#define GET_ARGS_VALUE_MPI_File_preallocate(activity) { \
	args_MPI_File_preallocate_t* args = (args_MPI_File_preallocate_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->size = (MPI_Offset) size; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iallgatherv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iallgatherv` function call.
 *
 * @struct args_MPI_Iallgatherv_t
 *
 * @note 
 *	int
 *	MPI_Iallgatherv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Iallgatherv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Iallgatherv_t;

#define GET_ARGS_VALUE_MPI_Iallgatherv(activity) { \
	args_MPI_Iallgatherv_t* args = (args_MPI_Iallgatherv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Iallgatherv(args) { \
	args_MPI_Iallgatherv_t* pargs = (args_MPI_Iallgatherv_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_allgatherv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_allgatherv_init` function call.
 *
 * @struct args_MPI_Neighbor_allgatherv_init_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_allgatherv_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Neighbor_allgatherv_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Neighbor_allgatherv_init_t;

#define GET_ARGS_VALUE_MPI_Neighbor_allgatherv_init(activity) { \
	args_MPI_Neighbor_allgatherv_init_t* args = (args_MPI_Neighbor_allgatherv_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_allgatherv_init(args) { \
	args_MPI_Neighbor_allgatherv_init_t* pargs = (args_MPI_Neighbor_allgatherv_init_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iprobe` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iprobe` function call.
 *
 * @struct args_MPI_Iprobe_t
 *
 * @note 
 *	int
 *	MPI_Iprobe (
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int * flag (int *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Iprobe
typedef struct {
	int source;
	int tag;
	MPI_Comm comm;
	int * flag;
	struct {
		int val;
	} flag__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Iprobe_t;

#define GET_ARGS_VALUE_MPI_Iprobe(activity) { \
	args_MPI_Iprobe_t* args = (args_MPI_Iprobe_t*) activity->args; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->flag = (int *) flag; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Iprobe(args) { \
	args_MPI_Iprobe_t* pargs = (args_MPI_Iprobe_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_true_extent_x` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_true_extent_x` function call.
 *
 * @struct args_MPI_Type_get_true_extent_x_t
 *
 * @note 
 *	int
 *	MPI_Type_get_true_extent_x (
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Count * true_lb (long long*)
 *			MPI_Count * true_extent (long long*)
 *	)
 */
#if HAVE_MPI_Type_get_true_extent_x
typedef struct {
	MPI_Datatype datatype;
	MPI_Count * true_lb;
	struct {
		MPI_Count val;
	} true_lb__ref;
	MPI_Count * true_extent;
	struct {
		MPI_Count val;
	} true_extent__ref;
	int retval;
} args_MPI_Type_get_true_extent_x_t;

#define GET_ARGS_VALUE_MPI_Type_get_true_extent_x(activity) { \
	args_MPI_Type_get_true_extent_x_t* args = (args_MPI_Type_get_true_extent_x_t*) activity->args; \
	args->datatype = (MPI_Datatype) datatype; \
	args->true_lb = (MPI_Count *) true_lb; \
	args->true_extent = (MPI_Count *) true_extent; \
};

#define GET_PTRS_VALUE_MPI_Type_get_true_extent_x(args) { \
	args_MPI_Type_get_true_extent_x_t* pargs = (args_MPI_Type_get_true_extent_x_t*) args; \
	if (pargs->true_lb != NULL) { \
		pargs->true_lb__ref.val = *pargs->true_lb; \
	} \
	if (pargs->true_extent != NULL) { \
		pargs->true_extent__ref.val = *pargs->true_extent; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_complete` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_complete` function call.
 *
 * @struct args_MPI_Win_complete_t
 *
 * @note 
 *	int
 *	MPI_Win_complete (
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_complete
typedef struct {
	MPI_Win win;
	int retval;
} args_MPI_Win_complete_t;

#define GET_ARGS_VALUE_MPI_Win_complete(activity) { \
	args_MPI_Win_complete_t* args = (args_MPI_Win_complete_t*) activity->args; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_set_atomicity` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_set_atomicity` function call.
 *
 * @struct args_MPI_File_set_atomicity_t
 *
 * @note 
 *	int
 *	MPI_File_set_atomicity (
 *			MPI_File fh (struct mpi_file_t *)
 *			int flag (int)
 *	)
 */
#if HAVE_MPI_File_set_atomicity
typedef struct {
	MPI_File fh;
	int flag;
	int retval;
} args_MPI_File_set_atomicity_t;

#define GET_ARGS_VALUE_MPI_File_set_atomicity(activity) { \
	args_MPI_File_set_atomicity_t* args = (args_MPI_File_set_atomicity_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->flag = (int) flag; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Unpack_external` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Unpack_external` function call.
 *
 * @struct args_MPI_Unpack_external_t
 *
 * @note 
 *	int
 *	MPI_Unpack_external (
 *			const char[] datarep (const char[])
 *			const void * inbuf (const void *)
 *			MPI_Aint insize (long)
 *			MPI_Aint * position (long*)
 *			void * outbuf (void *)
 *			int outcount (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_Unpack_external
typedef struct {
	char(* datarep);
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} datarep__ref;
	void * inbuf;
	MPI_Aint insize;
	MPI_Aint * position;
	struct {
		MPI_Aint val;
	} position__ref;
	void * outbuf;
	int outcount;
	MPI_Datatype datatype;
	int retval;
} args_MPI_Unpack_external_t;

#define GET_ARGS_VALUE_MPI_Unpack_external(activity) { \
	args_MPI_Unpack_external_t* args = (args_MPI_Unpack_external_t*) activity->args; \
	args->datarep = (char(*)) datarep; \
	args->inbuf = (void *) inbuf; \
	args->insize = (MPI_Aint) insize; \
	args->position = (MPI_Aint *) position; \
	args->outbuf = (void *) outbuf; \
	args->outcount = (int) outcount; \
	args->datatype = (MPI_Datatype) datatype; \
};

#define GET_PTRS_VALUE_MPI_Unpack_external(args) { \
	args_MPI_Unpack_external_t* pargs = (args_MPI_Unpack_external_t*) args; \
	if (pargs->datarep != NULL) { \
		strncpy(pargs->datarep__ref.val, pargs->datarep, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->position != NULL) { \
		pargs->position__ref.val = *pargs->position; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Mprobe` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Mprobe` function call.
 *
 * @struct args_MPI_Mprobe_t
 *
 * @note 
 *	int
 *	MPI_Mprobe (
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Message * message (struct mpi_message_t **)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Mprobe
typedef struct {
	int source;
	int tag;
	MPI_Comm comm;
	MPI_Message * message;
	struct {
		MPI_Message val;
	} message__ref;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_Mprobe_t;

#define GET_ARGS_VALUE_MPI_Mprobe(activity) { \
	args_MPI_Mprobe_t* args = (args_MPI_Mprobe_t*) activity->args; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->message = (MPI_Message *) message; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_Mprobe(args) { \
	args_MPI_Mprobe_t* pargs = (args_MPI_Mprobe_t*) args; \
	if (pargs->message != NULL) { \
		pargs->message__ref.val = *pargs->message; \
	} \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Add_error_code` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Add_error_code` function call.
 *
 * @struct args_MPI_Add_error_code_t
 *
 * @note 
 *	int
 *	MPI_Add_error_code (
 *			int errorclass (int)
 *			int * errorcode (int *)
 *	)
 */
#if HAVE_MPI_Add_error_code
typedef struct {
	int errorclass;
	int * errorcode;
	struct {
		int val;
	} errorcode__ref;
	int retval;
} args_MPI_Add_error_code_t;

#define GET_ARGS_VALUE_MPI_Add_error_code(activity) { \
	args_MPI_Add_error_code_t* args = (args_MPI_Add_error_code_t*) activity->args; \
	args->errorclass = (int) errorclass; \
	args->errorcode = (int *) errorcode; \
};

#define GET_PTRS_VALUE_MPI_Add_error_code(args) { \
	args_MPI_Add_error_code_t* pargs = (args_MPI_Add_error_code_t*) args; \
	if (pargs->errorcode != NULL) { \
		pargs->errorcode__ref.val = *pargs->errorcode; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_delete_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_delete_attr` function call.
 *
 * @struct args_MPI_Win_delete_attr_t
 *
 * @note 
 *	int
 *	MPI_Win_delete_attr (
 *			MPI_Win win (struct mpi_win_t *)
 *			int win_keyval (int)
 *	)
 */
#if HAVE_MPI_Win_delete_attr
typedef struct {
	MPI_Win win;
	int win_keyval;
	int retval;
} args_MPI_Win_delete_attr_t;

#define GET_ARGS_VALUE_MPI_Win_delete_attr(activity) { \
	args_MPI_Win_delete_attr_t* args = (args_MPI_Win_delete_attr_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->win_keyval = (int) win_keyval; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_at_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_at_all` function call.
 *
 * @struct args_MPI_File_read_at_all_t
 *
 * @note 
 *	int
 *	MPI_File_read_at_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_at_all
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_at_all_t;

#define GET_ARGS_VALUE_MPI_File_read_at_all(activity) { \
	args_MPI_File_read_at_all_t* args = (args_MPI_File_read_at_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_at_all(args) { \
	args_MPI_File_read_at_all_t* pargs = (args_MPI_File_read_at_all_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Pready` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Pready` function call.
 *
 * @struct args_MPI_Pready_t
 *
 * @note 
 *	int
 *	MPI_Pready (
 *			int partitions (int)
 *			MPI_Request request (struct mpi_request_t *)
 *	)
 */
#if HAVE_MPI_Pready
typedef struct {
	int partitions;
	MPI_Request request;
	int retval;
} args_MPI_Pready_t;

#define GET_ARGS_VALUE_MPI_Pready(activity) { \
	args_MPI_Pready_t* args = (args_MPI_Pready_t*) activity->args; \
	args->partitions = (int) partitions; \
	args->request = (MPI_Request) request; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iscatterv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iscatterv` function call.
 *
 * @struct args_MPI_Iscatterv_t
 *
 * @note 
 *	int
 *	MPI_Iscatterv (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Iscatterv
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Iscatterv_t;

#define GET_ARGS_VALUE_MPI_Iscatterv(activity) { \
	args_MPI_Iscatterv_t* args = (args_MPI_Iscatterv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->displs = (int(*)) displs; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Iscatterv(args) { \
	args_MPI_Iscatterv_t* pargs = (args_MPI_Iscatterv_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_detach` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_detach` function call.
 *
 * @struct args_MPI_Win_detach_t
 *
 * @note 
 *	int
 *	MPI_Win_detach (
 *			MPI_Win win (struct mpi_win_t *)
 *			const void * base (const void *)
 *	)
 */
#if HAVE_MPI_Win_detach
typedef struct {
	MPI_Win win;
	void * base;
	int retval;
} args_MPI_Win_detach_t;

#define GET_ARGS_VALUE_MPI_Win_detach(activity) { \
	args_MPI_Win_detach_t* args = (args_MPI_Win_detach_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->base = (void *) base; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_call_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_call_errhandler` function call.
 *
 * @struct args_MPI_File_call_errhandler_t
 *
 * @note 
 *	int
 *	MPI_File_call_errhandler (
 *			MPI_File fh (struct mpi_file_t *)
 *			int errorcode (int)
 *	)
 */
#if HAVE_MPI_File_call_errhandler
typedef struct {
	MPI_File fh;
	int errorcode;
	int retval;
} args_MPI_File_call_errhandler_t;

#define GET_ARGS_VALUE_MPI_File_call_errhandler(activity) { \
	args_MPI_File_call_errhandler_t* args = (args_MPI_File_call_errhandler_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->errorcode = (int) errorcode; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iallreduce` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iallreduce` function call.
 *
 * @struct args_MPI_Iallreduce_t
 *
 * @note 
 *	int
 *	MPI_Iallreduce (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Iallreduce
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Iallreduce_t;

#define GET_ARGS_VALUE_MPI_Iallreduce(activity) { \
	args_MPI_Iallreduce_t* args = (args_MPI_Iallreduce_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Iallreduce(args) { \
	args_MPI_Iallreduce_t* pargs = (args_MPI_Iallreduce_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_processor_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_processor_name` function call.
 *
 * @struct args_MPI_Get_processor_name_t
 *
 * @note 
 *	int
 *	MPI_Get_processor_name (
 *			char * name (char *)
 *			int * resultlen (int *)
 *	)
 */
#if HAVE_MPI_Get_processor_name
typedef struct {
	char * name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} name__ref;
	int * resultlen;
	struct {
		int val;
	} resultlen__ref;
	int retval;
} args_MPI_Get_processor_name_t;

#define GET_ARGS_VALUE_MPI_Get_processor_name(activity) { \
	args_MPI_Get_processor_name_t* args = (args_MPI_Get_processor_name_t*) activity->args; \
	args->name = (char *) name; \
	args->resultlen = (int *) resultlen; \
};

#define GET_PTRS_VALUE_MPI_Get_processor_name(args) { \
	args_MPI_Get_processor_name_t* pargs = (args_MPI_Get_processor_name_t*) args; \
	if (pargs->name != NULL) { \
		strncpy(pargs->name__ref.val, pargs->name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->resultlen != NULL) { \
		pargs->resultlen__ref.val = *pargs->resultlen; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Start` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Start` function call.
 *
 * @struct args_MPI_Start_t
 *
 * @note 
 *	int
 *	MPI_Start (
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Start
typedef struct {
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Start_t;

#define GET_ARGS_VALUE_MPI_Start(activity) { \
	args_MPI_Start_t* args = (args_MPI_Start_t*) activity->args; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Start(args) { \
	args_MPI_Start_t* pargs = (args_MPI_Start_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_type_extent` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_type_extent` function call.
 *
 * @struct args_MPI_File_get_type_extent_t
 *
 * @note 
 *	int
 *	MPI_File_get_type_extent (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Aint * extent (long*)
 *	)
 */
#if HAVE_MPI_File_get_type_extent
typedef struct {
	MPI_File fh;
	MPI_Datatype datatype;
	MPI_Aint * extent;
	struct {
		MPI_Aint val;
	} extent__ref;
	int retval;
} args_MPI_File_get_type_extent_t;

#define GET_ARGS_VALUE_MPI_File_get_type_extent(activity) { \
	args_MPI_File_get_type_extent_t* args = (args_MPI_File_get_type_extent_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->datatype = (MPI_Datatype) datatype; \
	args->extent = (MPI_Aint *) extent; \
};

#define GET_PTRS_VALUE_MPI_File_get_type_extent(args) { \
	args_MPI_File_get_type_extent_t* pargs = (args_MPI_File_get_type_extent_t*) args; \
	if (pargs->extent != NULL) { \
		pargs->extent__ref.val = *pargs->extent; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_shared` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_shared` function call.
 *
 * @struct args_MPI_File_read_shared_t
 *
 * @note 
 *	int
 *	MPI_File_read_shared (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_read_shared
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_read_shared_t;

#define GET_ARGS_VALUE_MPI_File_read_shared(activity) { \
	args_MPI_File_read_shared_t* args = (args_MPI_File_read_shared_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_read_shared(args) { \
	args_MPI_File_read_shared_t* pargs = (args_MPI_File_read_shared_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_open` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_open` function call.
 *
 * @struct args_MPI_File_open_t
 *
 * @note 
 *	int
 *	MPI_File_open (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			const char * filename (const char *)
 *			int amode (int)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_File * fh (struct mpi_file_t **)
 *	)
 */
#if HAVE_MPI_File_open
typedef struct {
	MPI_Comm comm;
	char * filename;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} filename__ref;
	int amode;
	MPI_Info info;
	MPI_File * fh;
	struct {
		MPI_File val;
	} fh__ref;
	int retval;
} args_MPI_File_open_t;

#define GET_ARGS_VALUE_MPI_File_open(activity) { \
	args_MPI_File_open_t* args = (args_MPI_File_open_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->filename = (char *) filename; \
	args->amode = (int) amode; \
	args->info = (MPI_Info) info; \
	args->fh = (MPI_File *) fh; \
};

#define GET_PTRS_VALUE_MPI_File_open(args) { \
	args_MPI_File_open_t* pargs = (args_MPI_File_open_t*) args; \
	if (pargs->filename != NULL) { \
		strncpy(pargs->filename__ref.val, pargs->filename, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->fh != NULL) { \
		pargs->fh__ref.val = *pargs->fh; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_amode` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_amode` function call.
 *
 * @struct args_MPI_File_get_amode_t
 *
 * @note 
 *	int
 *	MPI_File_get_amode (
 *			MPI_File fh (struct mpi_file_t *)
 *			int * amode (int *)
 *	)
 */
#if HAVE_MPI_File_get_amode
typedef struct {
	MPI_File fh;
	int * amode;
	struct {
		int val;
	} amode__ref;
	int retval;
} args_MPI_File_get_amode_t;

#define GET_ARGS_VALUE_MPI_File_get_amode(activity) { \
	args_MPI_File_get_amode_t* args = (args_MPI_File_get_amode_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->amode = (int *) amode; \
};

#define GET_PTRS_VALUE_MPI_File_get_amode(args) { \
	args_MPI_File_get_amode_t* pargs = (args_MPI_File_get_amode_t*) args; \
	if (pargs->amode != NULL) { \
		pargs->amode__ref.val = *pargs->amode; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_hindexed_block` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_hindexed_block` function call.
 *
 * @struct args_MPI_Type_create_hindexed_block_t
 *
 * @note 
 *	int
 *	MPI_Type_create_hindexed_block (
 *			int count (int)
 *			int blocklength (int)
 *			const MPI_Aint[] array_of_displacements (const long[])
 *			MPI_Datatype oldtype (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_create_hindexed_block
typedef struct {
	int count;
	int blocklength;
	MPI_Aint(* array_of_displacements);
	struct {
		MPI_Aint val;
	} array_of_displacements__ref;
	MPI_Datatype oldtype;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_create_hindexed_block_t;

#define GET_ARGS_VALUE_MPI_Type_create_hindexed_block(activity) { \
	args_MPI_Type_create_hindexed_block_t* args = (args_MPI_Type_create_hindexed_block_t*) activity->args; \
	args->count = (int) count; \
	args->blocklength = (int) blocklength; \
	args->array_of_displacements = (MPI_Aint(*)) array_of_displacements; \
	args->oldtype = (MPI_Datatype) oldtype; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_create_hindexed_block(args) { \
	args_MPI_Type_create_hindexed_block_t* pargs = (args_MPI_Type_create_hindexed_block_t*) args; \
	if (pargs->array_of_displacements != NULL) { \
		pargs->array_of_displacements__ref.val = *pargs->array_of_displacements; \
	} \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cart_coords` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cart_coords` function call.
 *
 * @struct args_MPI_Cart_coords_t
 *
 * @note 
 *	int
 *	MPI_Cart_coords (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int rank (int)
 *			int maxdims (int)
 *			int[] coords (int[])
 *	)
 */
#if HAVE_MPI_Cart_coords
typedef struct {
	MPI_Comm comm;
	int rank;
	int maxdims;
	int(* coords);
	struct {
		int val;
	} coords__ref;
	int retval;
} args_MPI_Cart_coords_t;

#define GET_ARGS_VALUE_MPI_Cart_coords(activity) { \
	args_MPI_Cart_coords_t* args = (args_MPI_Cart_coords_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->rank = (int) rank; \
	args->maxdims = (int) maxdims; \
	args->coords = (int(*)) coords; \
};

#define GET_PTRS_VALUE_MPI_Cart_coords(args) { \
	args_MPI_Cart_coords_t* pargs = (args_MPI_Cart_coords_t*) args; \
	if (pargs->coords != NULL) { \
		pargs->coords__ref.val = *pargs->coords; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Issend` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Issend` function call.
 *
 * @struct args_MPI_Issend_t
 *
 * @note 
 *	int
 *	MPI_Issend (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Issend
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Issend_t;

#define GET_ARGS_VALUE_MPI_Issend(activity) { \
	args_MPI_Issend_t* args = (args_MPI_Issend_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Issend(args) { \
	args_MPI_Issend_t* pargs = (args_MPI_Issend_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Graph_get` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Graph_get` function call.
 *
 * @struct args_MPI_Graph_get_t
 *
 * @note 
 *	int
 *	MPI_Graph_get (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int maxindex (int)
 *			int maxedges (int)
 *			int[] index (int[])
 *			int[] edges (int[])
 *	)
 */
#if HAVE_MPI_Graph_get
typedef struct {
	MPI_Comm comm;
	int maxindex;
	int maxedges;
	int(* index);
	struct {
		int val;
	} index__ref;
	int(* edges);
	struct {
		int val;
	} edges__ref;
	int retval;
} args_MPI_Graph_get_t;

#define GET_ARGS_VALUE_MPI_Graph_get(activity) { \
	args_MPI_Graph_get_t* args = (args_MPI_Graph_get_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->maxindex = (int) maxindex; \
	args->maxedges = (int) maxedges; \
	args->index = (int(*)) index; \
	args->edges = (int(*)) edges; \
};

#define GET_PTRS_VALUE_MPI_Graph_get(args) { \
	args_MPI_Graph_get_t* pargs = (args_MPI_Graph_get_t*) args; \
	if (pargs->index != NULL) { \
		pargs->index__ref.val = *pargs->index; \
	} \
	if (pargs->edges != NULL) { \
		pargs->edges__ref.val = *pargs->edges; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_free_keyval` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_free_keyval` function call.
 *
 * @struct args_MPI_Win_free_keyval_t
 *
 * @note 
 *	int
 *	MPI_Win_free_keyval (
 *			int * win_keyval (int *)
 *	)
 */
#if HAVE_MPI_Win_free_keyval
typedef struct {
	int * win_keyval;
	struct {
		int val;
	} win_keyval__ref;
	int retval;
} args_MPI_Win_free_keyval_t;

#define GET_ARGS_VALUE_MPI_Win_free_keyval(activity) { \
	args_MPI_Win_free_keyval_t* args = (args_MPI_Win_free_keyval_t*) activity->args; \
	args->win_keyval = (int *) win_keyval; \
};

#define GET_PTRS_VALUE_MPI_Win_free_keyval(args) { \
	args_MPI_Win_free_keyval_t* pargs = (args_MPI_Win_free_keyval_t*) args; \
	if (pargs->win_keyval != NULL) { \
		pargs->win_keyval__ref.val = *pargs->win_keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ineighbor_alltoallw` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ineighbor_alltoallw` function call.
 *
 * @struct args_MPI_Ineighbor_alltoallw_t
 *
 * @note 
 *	int
 *	MPI_Ineighbor_alltoallw (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const MPI_Aint[] sdispls (const long[])
 *			const MPI_Datatype[] sendtypes (const struct mpi_datatype_t *[])
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const MPI_Aint[] rdispls (const long[])
 *			const MPI_Datatype[] recvtypes (const struct mpi_datatype_t *[])
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ineighbor_alltoallw
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	MPI_Aint(* sdispls);
	struct {
		MPI_Aint val;
	} sdispls__ref;
	MPI_Datatype(* sendtypes);
	struct {
		MPI_Datatype val;
	} sendtypes__ref;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	MPI_Aint(* rdispls);
	struct {
		MPI_Aint val;
	} rdispls__ref;
	MPI_Datatype(* recvtypes);
	struct {
		MPI_Datatype val;
	} recvtypes__ref;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ineighbor_alltoallw_t;

#define GET_ARGS_VALUE_MPI_Ineighbor_alltoallw(activity) { \
	args_MPI_Ineighbor_alltoallw_t* args = (args_MPI_Ineighbor_alltoallw_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (MPI_Aint(*)) sdispls; \
	args->sendtypes = (MPI_Datatype(*)) sendtypes; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (MPI_Aint(*)) rdispls; \
	args->recvtypes = (MPI_Datatype(*)) recvtypes; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ineighbor_alltoallw(args) { \
	args_MPI_Ineighbor_alltoallw_t* pargs = (args_MPI_Ineighbor_alltoallw_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->sendtypes != NULL) { \
		pargs->sendtypes__ref.val = *pargs->sendtypes; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->recvtypes != NULL) { \
		pargs->recvtypes__ref.val = *pargs->recvtypes; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_set_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_set_info` function call.
 *
 * @struct args_MPI_File_set_info_t
 *
 * @note 
 *	int
 *	MPI_File_set_info (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *	)
 */
#if HAVE_MPI_File_set_info
typedef struct {
	MPI_File fh;
	MPI_Info info;
	int retval;
} args_MPI_File_set_info_t;

#define GET_ARGS_VALUE_MPI_File_set_info(activity) { \
	args_MPI_File_set_info_t* args = (args_MPI_File_set_info_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->info = (MPI_Info) info; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iread_at` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iread_at` function call.
 *
 * @struct args_MPI_File_iread_at_t
 *
 * @note 
 *	int
 *	MPI_File_iread_at (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iread_at
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iread_at_t;

#define GET_ARGS_VALUE_MPI_File_iread_at(activity) { \
	args_MPI_File_iread_at_t* args = (args_MPI_File_iread_at_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iread_at(args) { \
	args_MPI_File_iread_at_t* pargs = (args_MPI_File_iread_at_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Attr_delete` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Attr_delete` function call.
 *
 * @struct args_MPI_Attr_delete_t
 *
 * @note 
 *	int
 *	MPI_Attr_delete (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int keyval (int)
 *	)
 */
#if HAVE_MPI_Attr_delete
typedef struct {
	MPI_Comm comm;
	int keyval;
	int retval;
} args_MPI_Attr_delete_t;

#define GET_ARGS_VALUE_MPI_Attr_delete(activity) { \
	args_MPI_Attr_delete_t* args = (args_MPI_Attr_delete_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->keyval = (int) keyval; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_get_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_get_info` function call.
 *
 * @struct args_MPI_Session_get_info_t
 *
 * @note 
 *	int
 *	MPI_Session_get_info (
 *			MPI_Session session (struct mpi_instance_t *)
 *			MPI_Info * info_used (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Session_get_info
typedef struct {
	MPI_Session session;
	MPI_Info * info_used;
	struct {
		MPI_Info val;
	} info_used__ref;
	int retval;
} args_MPI_Session_get_info_t;

#define GET_ARGS_VALUE_MPI_Session_get_info(activity) { \
	args_MPI_Session_get_info_t* args = (args_MPI_Session_get_info_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->info_used = (MPI_Info *) info_used; \
};

#define GET_PTRS_VALUE_MPI_Session_get_info(args) { \
	args_MPI_Session_get_info_t* pargs = (args_MPI_Session_get_info_t*) args; \
	if (pargs->info_used != NULL) { \
		pargs->info_used__ref.val = *pargs->info_used; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_get_nth_pset` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_get_nth_pset` function call.
 *
 * @struct args_MPI_Session_get_nth_pset_t
 *
 * @note 
 *	int
 *	MPI_Session_get_nth_pset (
 *			MPI_Session session (struct mpi_instance_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			int n (int)
 *			int * len (int *)
 *			char * pset_name (char *)
 *	)
 */
#if HAVE_MPI_Session_get_nth_pset
typedef struct {
	MPI_Session session;
	MPI_Info info;
	int n;
	int * len;
	struct {
		int val;
	} len__ref;
	char * pset_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} pset_name__ref;
	int retval;
} args_MPI_Session_get_nth_pset_t;

#define GET_ARGS_VALUE_MPI_Session_get_nth_pset(activity) { \
	args_MPI_Session_get_nth_pset_t* args = (args_MPI_Session_get_nth_pset_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->info = (MPI_Info) info; \
	args->n = (int) n; \
	args->len = (int *) len; \
	args->pset_name = (char *) pset_name; \
};

#define GET_PTRS_VALUE_MPI_Session_get_nth_pset(args) { \
	args_MPI_Session_get_nth_pset_t* pargs = (args_MPI_Session_get_nth_pset_t*) args; \
	if (pargs->len != NULL) { \
		pargs->len__ref.val = *pargs->len; \
	} \
	if (pargs->pset_name != NULL) { \
		strncpy(pargs->pset_name__ref.val, pargs->pset_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_create_keyval` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_create_keyval` function call.
 *
 * @struct args_MPI_Type_create_keyval_t
 *
 * @note 
 *	int
 *	MPI_Type_create_keyval (
 *			MPI_Type_copy_attr_function * type_copy_attr_fn (int (*)(struct mpi_datatype_t *, int, void *, void *, void *, int *))
 *			MPI_Type_delete_attr_function * type_delete_attr_fn (int (*)(struct mpi_datatype_t *, int, void *, void *))
 *			int * type_keyval (int *)
 *			void * extra_state (void *)
 *	)
 */
#if HAVE_MPI_Type_create_keyval
typedef struct {
	MPI_Type_copy_attr_function * type_copy_attr_fn;
	MPI_Type_delete_attr_function * type_delete_attr_fn;
	int * type_keyval;
	struct {
		int val;
	} type_keyval__ref;
	void * extra_state;
	int retval;
} args_MPI_Type_create_keyval_t;

#define GET_ARGS_VALUE_MPI_Type_create_keyval(activity) { \
	args_MPI_Type_create_keyval_t* args = (args_MPI_Type_create_keyval_t*) activity->args; \
	args->type_copy_attr_fn = (MPI_Type_copy_attr_function *) type_copy_attr_fn; \
	args->type_delete_attr_fn = (MPI_Type_delete_attr_function *) type_delete_attr_fn; \
	args->type_keyval = (int *) type_keyval; \
	args->extra_state = (void *) extra_state; \
};

#define GET_PTRS_VALUE_MPI_Type_create_keyval(args) { \
	args_MPI_Type_create_keyval_t* pargs = (args_MPI_Type_create_keyval_t*) args; \
	if (pargs->type_keyval != NULL) { \
		pargs->type_keyval__ref.val = *pargs->type_keyval; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Attr_get` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Attr_get` function call.
 *
 * @struct args_MPI_Attr_get_t
 *
 * @note 
 *	int
 *	MPI_Attr_get (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int keyval (int)
 *			void * attribute_val (void *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Attr_get
typedef struct {
	MPI_Comm comm;
	int keyval;
	void * attribute_val;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Attr_get_t;

#define GET_ARGS_VALUE_MPI_Attr_get(activity) { \
	args_MPI_Attr_get_t* args = (args_MPI_Attr_get_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->keyval = (int) keyval; \
	args->attribute_val = (void *) attribute_val; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Attr_get(args) { \
	args_MPI_Attr_get_t* pargs = (args_MPI_Attr_get_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Add_error_string` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Add_error_string` function call.
 *
 * @struct args_MPI_Add_error_string_t
 *
 * @note 
 *	int
 *	MPI_Add_error_string (
 *			int errorcode (int)
 *			const char * string (const char *)
 *	)
 */
#if HAVE_MPI_Add_error_string
typedef struct {
	int errorcode;
	char * string;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} string__ref;
	int retval;
} args_MPI_Add_error_string_t;

#define GET_ARGS_VALUE_MPI_Add_error_string(activity) { \
	args_MPI_Add_error_string_t* args = (args_MPI_Add_error_string_t*) activity->args; \
	args->errorcode = (int) errorcode; \
	args->string = (char *) string; \
};

#define GET_PTRS_VALUE_MPI_Add_error_string(args) { \
	args_MPI_Add_error_string_t* pargs = (args_MPI_Add_error_string_t*) args; \
	if (pargs->string != NULL) { \
		strncpy(pargs->string__ref.val, pargs->string, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ineighbor_alltoallv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ineighbor_alltoallv` function call.
 *
 * @struct args_MPI_Ineighbor_alltoallv_t
 *
 * @note 
 *	int
 *	MPI_Ineighbor_alltoallv (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ineighbor_alltoallv
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ineighbor_alltoallv_t;

#define GET_ARGS_VALUE_MPI_Ineighbor_alltoallv(activity) { \
	args_MPI_Ineighbor_alltoallv_t* args = (args_MPI_Ineighbor_alltoallv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ineighbor_alltoallv(args) { \
	args_MPI_Ineighbor_alltoallv_t* pargs = (args_MPI_Ineighbor_alltoallv_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Imrecv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Imrecv` function call.
 *
 * @struct args_MPI_Imrecv_t
 *
 * @note 
 *	int
 *	MPI_Imrecv (
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			MPI_Message * message (struct mpi_message_t **)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Imrecv
typedef struct {
	void * buf;
	int count;
	MPI_Datatype type;
	MPI_Message * message;
	struct {
		MPI_Message val;
	} message__ref;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Imrecv_t;

#define GET_ARGS_VALUE_MPI_Imrecv(activity) { \
	args_MPI_Imrecv_t* args = (args_MPI_Imrecv_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->type = (MPI_Datatype) type; \
	args->message = (MPI_Message *) message; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Imrecv(args) { \
	args_MPI_Imrecv_t* pargs = (args_MPI_Imrecv_t*) args; \
	if (pargs->message != NULL) { \
		pargs->message__ref.val = *pargs->message; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Alltoallw` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Alltoallw` function call.
 *
 * @struct args_MPI_Alltoallw_t
 *
 * @note 
 *	int
 *	MPI_Alltoallw (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			const MPI_Datatype[] sendtypes (const struct mpi_datatype_t *[])
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			const MPI_Datatype[] recvtypes (const struct mpi_datatype_t *[])
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Alltoallw
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype(* sendtypes);
	struct {
		MPI_Datatype val;
	} sendtypes__ref;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype(* recvtypes);
	struct {
		MPI_Datatype val;
	} recvtypes__ref;
	MPI_Comm comm;
	int retval;
} args_MPI_Alltoallw_t;

#define GET_ARGS_VALUE_MPI_Alltoallw(activity) { \
	args_MPI_Alltoallw_t* args = (args_MPI_Alltoallw_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtypes = (MPI_Datatype(*)) sendtypes; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtypes = (MPI_Datatype(*)) recvtypes; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Alltoallw(args) { \
	args_MPI_Alltoallw_t* pargs = (args_MPI_Alltoallw_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->sendtypes != NULL) { \
		pargs->sendtypes__ref.val = *pargs->sendtypes; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->recvtypes != NULL) { \
		pargs->recvtypes__ref.val = *pargs->recvtypes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Bcast_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Bcast_init` function call.
 *
 * @struct args_MPI_Bcast_init_t
 *
 * @note 
 *	int
 *	MPI_Bcast_init (
 *			void * buffer (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Bcast_init
typedef struct {
	void * buffer;
	int count;
	MPI_Datatype datatype;
	int root;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Bcast_init_t;

#define GET_ARGS_VALUE_MPI_Bcast_init(activity) { \
	args_MPI_Bcast_init_t* args = (args_MPI_Bcast_init_t*) activity->args; \
	args->buffer = (void *) buffer; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Bcast_init(args) { \
	args_MPI_Bcast_init_t* pargs = (args_MPI_Bcast_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ibarrier` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ibarrier` function call.
 *
 * @struct args_MPI_Ibarrier_t
 *
 * @note 
 *	int
 *	MPI_Ibarrier (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ibarrier
typedef struct {
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ibarrier_t;

#define GET_ARGS_VALUE_MPI_Ibarrier(activity) { \
	args_MPI_Ibarrier_t* args = (args_MPI_Ibarrier_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ibarrier(args) { \
	args_MPI_Ibarrier_t* pargs = (args_MPI_Ibarrier_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iwrite_at_all` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iwrite_at_all` function call.
 *
 * @struct args_MPI_File_iwrite_at_all_t
 *
 * @note 
 *	int
 *	MPI_File_iwrite_at_all (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iwrite_at_all
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iwrite_at_all_t;

#define GET_ARGS_VALUE_MPI_File_iwrite_at_all(activity) { \
	args_MPI_File_iwrite_at_all_t* args = (args_MPI_File_iwrite_at_all_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iwrite_at_all(args) { \
	args_MPI_File_iwrite_at_all_t* pargs = (args_MPI_File_iwrite_at_all_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_size` function call.
 *
 * @struct args_MPI_File_get_size_t
 *
 * @note 
 *	int
 *	MPI_File_get_size (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset * size (long long*)
 *	)
 */
#if HAVE_MPI_File_get_size
typedef struct {
	MPI_File fh;
	MPI_Offset * size;
	struct {
		MPI_Offset val;
	} size__ref;
	int retval;
} args_MPI_File_get_size_t;

#define GET_ARGS_VALUE_MPI_File_get_size(activity) { \
	args_MPI_File_get_size_t* args = (args_MPI_File_get_size_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->size = (MPI_Offset *) size; \
};

#define GET_PTRS_VALUE_MPI_File_get_size(args) { \
	args_MPI_File_get_size_t* pargs = (args_MPI_File_get_size_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Barrier_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Barrier_init` function call.
 *
 * @struct args_MPI_Barrier_init_t
 *
 * @note 
 *	int
 *	MPI_Barrier_init (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Barrier_init
typedef struct {
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Barrier_init_t;

#define GET_ARGS_VALUE_MPI_Barrier_init(activity) { \
	args_MPI_Barrier_init_t* args = (args_MPI_Barrier_init_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Barrier_init(args) { \
	args_MPI_Barrier_init_t* pargs = (args_MPI_Barrier_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_view` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_view` function call.
 *
 * @struct args_MPI_File_get_view_t
 *
 * @note 
 *	int
 *	MPI_File_get_view (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset * disp (long long*)
 *			MPI_Datatype * etype (struct mpi_datatype_t **)
 *			MPI_Datatype * filetype (struct mpi_datatype_t **)
 *			char * datarep (char *)
 *	)
 */
#if HAVE_MPI_File_get_view
typedef struct {
	MPI_File fh;
	MPI_Offset * disp;
	struct {
		MPI_Offset val;
	} disp__ref;
	MPI_Datatype * etype;
	struct {
		MPI_Datatype val;
	} etype__ref;
	MPI_Datatype * filetype;
	struct {
		MPI_Datatype val;
	} filetype__ref;
	char * datarep;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} datarep__ref;
	int retval;
} args_MPI_File_get_view_t;

#define GET_ARGS_VALUE_MPI_File_get_view(activity) { \
	args_MPI_File_get_view_t* args = (args_MPI_File_get_view_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->disp = (MPI_Offset *) disp; \
	args->etype = (MPI_Datatype *) etype; \
	args->filetype = (MPI_Datatype *) filetype; \
	args->datarep = (char *) datarep; \
};

#define GET_PTRS_VALUE_MPI_File_get_view(args) { \
	args_MPI_File_get_view_t* pargs = (args_MPI_File_get_view_t*) args; \
	if (pargs->disp != NULL) { \
		pargs->disp__ref.val = *pargs->disp; \
	} \
	if (pargs->etype != NULL) { \
		pargs->etype__ref.val = *pargs->etype; \
	} \
	if (pargs->filetype != NULL) { \
		pargs->filetype__ref.val = *pargs->filetype; \
	} \
	if (pargs->datarep != NULL) { \
		strncpy(pargs->datarep__ref.val, pargs->datarep, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_allocate_shared` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_allocate_shared` function call.
 *
 * @struct args_MPI_Win_allocate_shared_t
 *
 * @note 
 *	int
 *	MPI_Win_allocate_shared (
 *			MPI_Aint size (long)
 *			int disp_unit (int)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			void * baseptr (void *)
 *			MPI_Win * win (struct mpi_win_t **)
 *	)
 */
#if HAVE_MPI_Win_allocate_shared
typedef struct {
	MPI_Aint size;
	int disp_unit;
	MPI_Info info;
	MPI_Comm comm;
	void * baseptr;
	MPI_Win * win;
	struct {
		MPI_Win val;
	} win__ref;
	int retval;
} args_MPI_Win_allocate_shared_t;

#define GET_ARGS_VALUE_MPI_Win_allocate_shared(activity) { \
	args_MPI_Win_allocate_shared_t* args = (args_MPI_Win_allocate_shared_t*) activity->args; \
	args->size = (MPI_Aint) size; \
	args->disp_unit = (int) disp_unit; \
	args->info = (MPI_Info) info; \
	args->comm = (MPI_Comm) comm; \
	args->baseptr = (void *) baseptr; \
	args->win = (MPI_Win *) win; \
};

#define GET_PTRS_VALUE_MPI_Win_allocate_shared(args) { \
	args_MPI_Win_allocate_shared_t* pargs = (args_MPI_Win_allocate_shared_t*) args; \
	if (pargs->win != NULL) { \
		pargs->win__ref.val = *pargs->win; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Close_port` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Close_port` function call.
 *
 * @struct args_MPI_Close_port_t
 *
 * @note 
 *	int
 *	MPI_Close_port (
 *			const char * port_name (const char *)
 *	)
 */
#if HAVE_MPI_Close_port
typedef struct {
	char * port_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} port_name__ref;
	int retval;
} args_MPI_Close_port_t;

#define GET_ARGS_VALUE_MPI_Close_port(activity) { \
	args_MPI_Close_port_t* args = (args_MPI_Close_port_t*) activity->args; \
	args->port_name = (char *) port_name; \
};

#define GET_PTRS_VALUE_MPI_Close_port(args) { \
	args_MPI_Close_port_t* pargs = (args_MPI_Close_port_t*) args; \
	if (pargs->port_name != NULL) { \
		strncpy(pargs->port_name__ref.val, pargs->port_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Finalized` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Finalized` function call.
 *
 * @struct args_MPI_Finalized_t
 *
 * @note 
 *	int
 *	MPI_Finalized (
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Finalized
typedef struct {
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Finalized_t;

#define GET_ARGS_VALUE_MPI_Finalized(activity) { \
	args_MPI_Finalized_t* args = (args_MPI_Finalized_t*) activity->args; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Finalized(args) { \
	args_MPI_Finalized_t* pargs = (args_MPI_Finalized_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_dup` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_dup` function call.
 *
 * @struct args_MPI_Info_dup_t
 *
 * @note 
 *	int
 *	MPI_Info_dup (
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Info * newinfo (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Info_dup
typedef struct {
	MPI_Info info;
	MPI_Info * newinfo;
	struct {
		MPI_Info val;
	} newinfo__ref;
	int retval;
} args_MPI_Info_dup_t;

#define GET_ARGS_VALUE_MPI_Info_dup(activity) { \
	args_MPI_Info_dup_t* args = (args_MPI_Info_dup_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->newinfo = (MPI_Info *) newinfo; \
};

#define GET_PTRS_VALUE_MPI_Info_dup(args) { \
	args_MPI_Info_dup_t* pargs = (args_MPI_Info_dup_t*) args; \
	if (pargs->newinfo != NULL) { \
		pargs->newinfo__ref.val = *pargs->newinfo; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_get` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_get` function call.
 *
 * @struct args_MPI_Info_get_t
 *
 * @note 
 *	int
 *	MPI_Info_get (
 *			MPI_Info info (struct mpi_info_t *)
 *			const char * key (const char *)
 *			int valuelen (int)
 *			char * value (char *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Info_get
typedef struct {
	MPI_Info info;
	char * key;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} key__ref;
	int valuelen;
	char * value;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} value__ref;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Info_get_t;

#define GET_ARGS_VALUE_MPI_Info_get(activity) { \
	args_MPI_Info_get_t* args = (args_MPI_Info_get_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->key = (char *) key; \
	args->valuelen = (int) valuelen; \
	args->value = (char *) value; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Info_get(args) { \
	args_MPI_Info_get_t* pargs = (args_MPI_Info_get_t*) args; \
	if (pargs->key != NULL) { \
		strncpy(pargs->key__ref.val, pargs->key, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->value != NULL) { \
		strncpy(pargs->value__ref.val, pargs->value, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Get_library_version` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Get_library_version` function call.
 *
 * @struct args_MPI_Get_library_version_t
 *
 * @note 
 *	int
 *	MPI_Get_library_version (
 *			char * version (char *)
 *			int * resultlen (int *)
 *	)
 */
#if HAVE_MPI_Get_library_version
typedef struct {
	char * version;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} version__ref;
	int * resultlen;
	struct {
		int val;
	} resultlen__ref;
	int retval;
} args_MPI_Get_library_version_t;

#define GET_ARGS_VALUE_MPI_Get_library_version(activity) { \
	args_MPI_Get_library_version_t* args = (args_MPI_Get_library_version_t*) activity->args; \
	args->version = (char *) version; \
	args->resultlen = (int *) resultlen; \
};

#define GET_PTRS_VALUE_MPI_Get_library_version(args) { \
	args_MPI_Get_library_version_t* pargs = (args_MPI_Get_library_version_t*) args; \
	if (pargs->version != NULL) { \
		strncpy(pargs->version__ref.val, pargs->version, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->resultlen != NULL) { \
		pargs->resultlen__ref.val = *pargs->resultlen; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_create` function call.
 *
 * @struct args_MPI_Info_create_t
 *
 * @note 
 *	int
 *	MPI_Info_create (
 *			MPI_Info * info (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Info_create
typedef struct {
	MPI_Info * info;
	struct {
		MPI_Info val;
	} info__ref;
	int retval;
} args_MPI_Info_create_t;

#define GET_ARGS_VALUE_MPI_Info_create(activity) { \
	args_MPI_Info_create_t* args = (args_MPI_Info_create_t*) activity->args; \
	args->info = (MPI_Info *) info; \
};

#define GET_PTRS_VALUE_MPI_Info_create(args) { \
	args_MPI_Info_create_t* pargs = (args_MPI_Info_create_t*) args; \
	if (pargs->info != NULL) { \
		pargs->info__ref.val = *pargs->info; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_fence` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_fence` function call.
 *
 * @struct args_MPI_Win_fence_t
 *
 * @note 
 *	int
 *	MPI_Win_fence (
 *			int mpi_assert (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_fence
typedef struct {
	int mpi_assert;
	MPI_Win win;
	int retval;
} args_MPI_Win_fence_t;

#define GET_ARGS_VALUE_MPI_Win_fence(activity) { \
	args_MPI_Win_fence_t* args = (args_MPI_Win_fence_t*) activity->args; \
	args->mpi_assert = (int) mpi_assert; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iallgather` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iallgather` function call.
 *
 * @struct args_MPI_Iallgather_t
 *
 * @note 
 *	int
 *	MPI_Iallgather (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Iallgather
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Iallgather_t;

#define GET_ARGS_VALUE_MPI_Iallgather(activity) { \
	args_MPI_Iallgather_t* args = (args_MPI_Iallgather_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Iallgather(args) { \
	args_MPI_Iallgather_t* pargs = (args_MPI_Iallgather_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_spawn_multiple` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_spawn_multiple` function call.
 *
 * @struct args_MPI_Comm_spawn_multiple_t
 *
 * @note 
 *	int
 *	MPI_Comm_spawn_multiple (
 *			int count (int)
 *			char *[] array_of_commands (char *[])
 *			char **[] array_of_argv (char **[])
 *			const int[] array_of_maxprocs (const int[])
 *			const MPI_Info[] array_of_info (const struct mpi_info_t *[])
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Comm * intercomm (struct mpi_communicator_t **)
 *			int[] array_of_errcodes (int[])
 *	)
 */
#if HAVE_MPI_Comm_spawn_multiple
typedef struct {
	int count;
	char *(* array_of_commands);
	struct {
		void* ptr1;
		char val[MPI_STRING_SIZE_MAX];
	} array_of_commands__ref;
	char **(* array_of_argv);
	struct {
		void* ptr1;
		void* ptr2;
		char val[MPI_STRING_SIZE_MAX];
	} array_of_argv__ref;
	int(* array_of_maxprocs);
	struct {
		int val;
	} array_of_maxprocs__ref;
	MPI_Info(* array_of_info);
	struct {
		MPI_Info val;
	} array_of_info__ref;
	int root;
	MPI_Comm comm;
	MPI_Comm * intercomm;
	struct {
		MPI_Comm val;
	} intercomm__ref;
	int(* array_of_errcodes);
	struct {
		int val;
	} array_of_errcodes__ref;
	int retval;
} args_MPI_Comm_spawn_multiple_t;

#define GET_ARGS_VALUE_MPI_Comm_spawn_multiple(activity) { \
	args_MPI_Comm_spawn_multiple_t* args = (args_MPI_Comm_spawn_multiple_t*) activity->args; \
	args->count = (int) count; \
	args->array_of_commands = (char *(*)) array_of_commands; \
	args->array_of_argv = (char **(*)) array_of_argv; \
	args->array_of_maxprocs = (int(*)) array_of_maxprocs; \
	args->array_of_info = (MPI_Info(*)) array_of_info; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->intercomm = (MPI_Comm *) intercomm; \
	args->array_of_errcodes = (int(*)) array_of_errcodes; \
};

#define GET_PTRS_VALUE_MPI_Comm_spawn_multiple(args) { \
	args_MPI_Comm_spawn_multiple_t* pargs = (args_MPI_Comm_spawn_multiple_t*) args; \
	if (pargs->array_of_commands != NULL) { \
		pargs->array_of_commands__ref.ptr1 = *pargs->array_of_commands; \
		if (pargs->array_of_commands__ref.ptr1 != NULL) { \
			strncpy(pargs->array_of_commands__ref.val, pargs->array_of_commands__ref.ptr1, MPI_STRING_SIZE_MAX-1); \
		} \
	} \
	if (pargs->array_of_argv != NULL) { \
		pargs->array_of_argv__ref.ptr1 = *pargs->array_of_argv; \
		if (pargs->array_of_argv__ref.ptr1 != NULL) { \
			pargs->array_of_argv__ref.ptr2 = **pargs->array_of_argv; \
			if (pargs->array_of_argv__ref.ptr2 != NULL) { \
				strncpy(pargs->array_of_argv__ref.val, pargs->array_of_argv__ref.ptr2, MPI_STRING_SIZE_MAX-1); \
			} \
		} \
	} \
	if (pargs->array_of_maxprocs != NULL) { \
		pargs->array_of_maxprocs__ref.val = *pargs->array_of_maxprocs; \
	} \
	if (pargs->array_of_info != NULL) { \
		pargs->array_of_info__ref.val = *pargs->array_of_info; \
	} \
	if (pargs->intercomm != NULL) { \
		pargs->intercomm__ref.val = *pargs->intercomm; \
	} \
	if (pargs->array_of_errcodes != NULL) { \
		pargs->array_of_errcodes__ref.val = *pargs->array_of_errcodes; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Precv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Precv_init` function call.
 *
 * @struct args_MPI_Precv_init_t
 *
 * @note 
 *	int
 *	MPI_Precv_init (
 *			void * buf (void *)
 *			int partitions (int)
 *			MPI_Count count (long long)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int source (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Precv_init
typedef struct {
	void * buf;
	int partitions;
	MPI_Count count;
	MPI_Datatype datatype;
	int source;
	int tag;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Precv_init_t;

#define GET_ARGS_VALUE_MPI_Precv_init(activity) { \
	args_MPI_Precv_init_t* args = (args_MPI_Precv_init_t*) activity->args; \
	args->buf = (void *) buf; \
	args->partitions = (int) partitions; \
	args->count = (MPI_Count) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->source = (int) source; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Precv_init(args) { \
	args_MPI_Precv_init_t* pargs = (args_MPI_Precv_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_set_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_set_errhandler` function call.
 *
 * @struct args_MPI_Comm_set_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Comm_set_errhandler (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *	)
 */
#if HAVE_MPI_Comm_set_errhandler
typedef struct {
	MPI_Comm comm;
	MPI_Errhandler errhandler;
	int retval;
} args_MPI_Comm_set_errhandler_t;

#define GET_ARGS_VALUE_MPI_Comm_set_errhandler(activity) { \
	args_MPI_Comm_set_errhandler_t* args = (args_MPI_Comm_set_errhandler_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->errhandler = (MPI_Errhandler) errhandler; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_set_view` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_set_view` function call.
 *
 * @struct args_MPI_File_set_view_t
 *
 * @note 
 *	int
 *	MPI_File_set_view (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset disp (long long)
 *			MPI_Datatype etype (struct mpi_datatype_t *)
 *			MPI_Datatype filetype (struct mpi_datatype_t *)
 *			const char * datarep (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *	)
 */
#if HAVE_MPI_File_set_view
typedef struct {
	MPI_File fh;
	MPI_Offset disp;
	MPI_Datatype etype;
	MPI_Datatype filetype;
	char * datarep;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} datarep__ref;
	MPI_Info info;
	int retval;
} args_MPI_File_set_view_t;

#define GET_ARGS_VALUE_MPI_File_set_view(activity) { \
	args_MPI_File_set_view_t* args = (args_MPI_File_set_view_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->disp = (MPI_Offset) disp; \
	args->etype = (MPI_Datatype) etype; \
	args->filetype = (MPI_Datatype) filetype; \
	args->datarep = (char *) datarep; \
	args->info = (MPI_Info) info; \
};

#define GET_PTRS_VALUE_MPI_File_set_view(args) { \
	args_MPI_File_set_view_t* pargs = (args_MPI_File_set_view_t*) args; \
	if (pargs->datarep != NULL) { \
		strncpy(pargs->datarep__ref.val, pargs->datarep, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Bsend` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Bsend` function call.
 *
 * @struct args_MPI_Bsend_t
 *
 * @note 
 *	int
 *	MPI_Bsend (
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			int dest (int)
 *			int tag (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Bsend
typedef struct {
	void * buf;
	int count;
	MPI_Datatype datatype;
	int dest;
	int tag;
	MPI_Comm comm;
	int retval;
} args_MPI_Bsend_t;

#define GET_ARGS_VALUE_MPI_Bsend(activity) { \
	args_MPI_Bsend_t* args = (args_MPI_Bsend_t*) activity->args; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->dest = (int) dest; \
	args->tag = (int) tag; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_size` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_size` function call.
 *
 * @struct args_MPI_Type_size_t
 *
 * @note 
 *	int
 *	MPI_Type_size (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			int * size (int *)
 *	)
 */
#if HAVE_MPI_Type_size
typedef struct {
	MPI_Datatype type;
	int * size;
	struct {
		int val;
	} size__ref;
	int retval;
} args_MPI_Type_size_t;

#define GET_ARGS_VALUE_MPI_Type_size(activity) { \
	args_MPI_Type_size_t* args = (args_MPI_Type_size_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->size = (int *) size; \
};

#define GET_PTRS_VALUE_MPI_Type_size(args) { \
	args_MPI_Type_size_t* pargs = (args_MPI_Type_size_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_attr` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_attr` function call.
 *
 * @struct args_MPI_Type_get_attr_t
 *
 * @note 
 *	int
 *	MPI_Type_get_attr (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			int type_keyval (int)
 *			void * attribute_val (void *)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Type_get_attr
typedef struct {
	MPI_Datatype type;
	int type_keyval;
	void * attribute_val;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Type_get_attr_t;

#define GET_ARGS_VALUE_MPI_Type_get_attr(activity) { \
	args_MPI_Type_get_attr_t* args = (args_MPI_Type_get_attr_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->type_keyval = (int) type_keyval; \
	args->attribute_val = (void *) attribute_val; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Type_get_attr(args) { \
	args_MPI_Type_get_attr_t* pargs = (args_MPI_Type_get_attr_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_write_ordered` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_write_ordered` function call.
 *
 * @struct args_MPI_File_write_ordered_t
 *
 * @note 
 *	int
 *	MPI_File_write_ordered (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Status * status (struct opaque **)
 *	)
 */
#if HAVE_MPI_File_write_ordered
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Status * status;
	struct {
		MPI_Status val;
	} status__ref;
	int retval;
} args_MPI_File_write_ordered_t;

#define GET_ARGS_VALUE_MPI_File_write_ordered(activity) { \
	args_MPI_File_write_ordered_t* args = (args_MPI_File_write_ordered_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->status = (MPI_Status *) status; \
};

#define GET_PTRS_VALUE_MPI_File_write_ordered(args) { \
	args_MPI_File_write_ordered_t* pargs = (args_MPI_File_write_ordered_t*) args; \
	if (pargs->status != NULL) { \
		pargs->status__ref.val = *pargs->status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_get_info` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_get_info` function call.
 *
 * @struct args_MPI_File_get_info_t
 *
 * @note 
 *	int
 *	MPI_File_get_info (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Info * info_used (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_File_get_info
typedef struct {
	MPI_File fh;
	MPI_Info * info_used;
	struct {
		MPI_Info val;
	} info_used__ref;
	int retval;
} args_MPI_File_get_info_t;

#define GET_ARGS_VALUE_MPI_File_get_info(activity) { \
	args_MPI_File_get_info_t* args = (args_MPI_File_get_info_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->info_used = (MPI_Info *) info_used; \
};

#define GET_PTRS_VALUE_MPI_File_get_info(args) { \
	args_MPI_File_get_info_t* pargs = (args_MPI_File_get_info_t*) args; \
	if (pargs->info_used != NULL) { \
		pargs->info_used__ref.val = *pargs->info_used; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Graph_neighbors` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Graph_neighbors` function call.
 *
 * @struct args_MPI_Graph_neighbors_t
 *
 * @note 
 *	int
 *	MPI_Graph_neighbors (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			int rank (int)
 *			int maxneighbors (int)
 *			int[] neighbors (int[])
 *	)
 */
#if HAVE_MPI_Graph_neighbors
typedef struct {
	MPI_Comm comm;
	int rank;
	int maxneighbors;
	int(* neighbors);
	struct {
		int val;
	} neighbors__ref;
	int retval;
} args_MPI_Graph_neighbors_t;

#define GET_ARGS_VALUE_MPI_Graph_neighbors(activity) { \
	args_MPI_Graph_neighbors_t* args = (args_MPI_Graph_neighbors_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->rank = (int) rank; \
	args->maxneighbors = (int) maxneighbors; \
	args->neighbors = (int(*)) neighbors; \
};

#define GET_PTRS_VALUE_MPI_Graph_neighbors(args) { \
	args_MPI_Graph_neighbors_t* pargs = (args_MPI_Graph_neighbors_t*) args; \
	if (pargs->neighbors != NULL) { \
		pargs->neighbors__ref.val = *pargs->neighbors; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Igatherv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Igatherv` function call.
 *
 * @struct args_MPI_Igatherv_t
 *
 * @note 
 *	int
 *	MPI_Igatherv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Igatherv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Igatherv_t;

#define GET_ARGS_VALUE_MPI_Igatherv(activity) { \
	args_MPI_Igatherv_t* args = (args_MPI_Igatherv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Igatherv(args) { \
	args_MPI_Igatherv_t* pargs = (args_MPI_Igatherv_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_delete` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_delete` function call.
 *
 * @struct args_MPI_Info_delete_t
 *
 * @note 
 *	int
 *	MPI_Info_delete (
 *			MPI_Info info (struct mpi_info_t *)
 *			const char * key (const char *)
 *	)
 */
#if HAVE_MPI_Info_delete
typedef struct {
	MPI_Info info;
	char * key;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} key__ref;
	int retval;
} args_MPI_Info_delete_t;

#define GET_ARGS_VALUE_MPI_Info_delete(activity) { \
	args_MPI_Info_delete_t* args = (args_MPI_Info_delete_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->key = (char *) key; \
};

#define GET_PTRS_VALUE_MPI_Info_delete(args) { \
	args_MPI_Info_delete_t* pargs = (args_MPI_Info_delete_t*) args; \
	if (pargs->key != NULL) { \
		strncpy(pargs->key__ref.val, pargs->key, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Alloc_mem` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Alloc_mem` function call.
 *
 * @struct args_MPI_Alloc_mem_t
 *
 * @note 
 *	int
 *	MPI_Alloc_mem (
 *			MPI_Aint size (long)
 *			MPI_Info info (struct mpi_info_t *)
 *			void * baseptr (void *)
 *	)
 */
#if HAVE_MPI_Alloc_mem
typedef struct {
	MPI_Aint size;
	MPI_Info info;
	void * baseptr;
	int retval;
} args_MPI_Alloc_mem_t;

#define GET_ARGS_VALUE_MPI_Alloc_mem(activity) { \
	args_MPI_Alloc_mem_t* args = (args_MPI_Alloc_mem_t*) activity->args; \
	args->size = (MPI_Aint) size; \
	args->info = (MPI_Info) info; \
	args->baseptr = (void *) baseptr; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_get_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_get_errhandler` function call.
 *
 * @struct args_MPI_Comm_get_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Comm_get_errhandler (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Errhandler * erhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_Comm_get_errhandler
typedef struct {
	MPI_Comm comm;
	MPI_Errhandler * erhandler;
	struct {
		MPI_Errhandler val;
	} erhandler__ref;
	int retval;
} args_MPI_Comm_get_errhandler_t;

#define GET_ARGS_VALUE_MPI_Comm_get_errhandler(activity) { \
	args_MPI_Comm_get_errhandler_t* args = (args_MPI_Comm_get_errhandler_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->erhandler = (MPI_Errhandler *) erhandler; \
};

#define GET_PTRS_VALUE_MPI_Comm_get_errhandler(args) { \
	args_MPI_Comm_get_errhandler_t* pargs = (args_MPI_Comm_get_errhandler_t*) args; \
	if (pargs->erhandler != NULL) { \
		pargs->erhandler__ref.val = *pargs->erhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_init` function call.
 *
 * @struct args_MPI_Session_init_t
 *
 * @note 
 *	int
 *	MPI_Session_init (
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *			MPI_Session * session (struct mpi_instance_t **)
 *	)
 */
#if HAVE_MPI_Session_init
typedef struct {
	MPI_Info info;
	MPI_Errhandler errhandler;
	MPI_Session * session;
	struct {
		MPI_Session val;
	} session__ref;
	int retval;
} args_MPI_Session_init_t;

#define GET_ARGS_VALUE_MPI_Session_init(activity) { \
	args_MPI_Session_init_t* args = (args_MPI_Session_init_t*) activity->args; \
	args->info = (MPI_Info) info; \
	args->errhandler = (MPI_Errhandler) errhandler; \
	args->session = (MPI_Session *) session; \
};

#define GET_PTRS_VALUE_MPI_Session_init(args) { \
	args_MPI_Session_init_t* pargs = (args_MPI_Session_init_t*) args; \
	if (pargs->session != NULL) { \
		pargs->session__ref.val = *pargs->session; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_post` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_post` function call.
 *
 * @struct args_MPI_Win_post_t
 *
 * @note 
 *	int
 *	MPI_Win_post (
 *			MPI_Group group (struct mpi_group_t *)
 *			int mpi_assert (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_post
typedef struct {
	MPI_Group group;
	int mpi_assert;
	MPI_Win win;
	int retval;
} args_MPI_Win_post_t;

#define GET_ARGS_VALUE_MPI_Win_post(activity) { \
	args_MPI_Win_post_t* args = (args_MPI_Win_post_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->mpi_assert = (int) mpi_assert; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Intercomm_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Intercomm_create` function call.
 *
 * @struct args_MPI_Intercomm_create_t
 *
 * @note 
 *	int
 *	MPI_Intercomm_create (
 *			MPI_Comm local_comm (struct mpi_communicator_t *)
 *			int local_leader (int)
 *			MPI_Comm bridge_comm (struct mpi_communicator_t *)
 *			int remote_leader (int)
 *			int tag (int)
 *			MPI_Comm * newintercomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Intercomm_create
typedef struct {
	MPI_Comm local_comm;
	int local_leader;
	MPI_Comm bridge_comm;
	int remote_leader;
	int tag;
	MPI_Comm * newintercomm;
	struct {
		MPI_Comm val;
	} newintercomm__ref;
	int retval;
} args_MPI_Intercomm_create_t;

#define GET_ARGS_VALUE_MPI_Intercomm_create(activity) { \
	args_MPI_Intercomm_create_t* args = (args_MPI_Intercomm_create_t*) activity->args; \
	args->local_comm = (MPI_Comm) local_comm; \
	args->local_leader = (int) local_leader; \
	args->bridge_comm = (MPI_Comm) bridge_comm; \
	args->remote_leader = (int) remote_leader; \
	args->tag = (int) tag; \
	args->newintercomm = (MPI_Comm *) newintercomm; \
};

#define GET_PTRS_VALUE_MPI_Intercomm_create(args) { \
	args_MPI_Intercomm_create_t* pargs = (args_MPI_Intercomm_create_t*) args; \
	if (pargs->newintercomm != NULL) { \
		pargs->newintercomm__ref.val = *pargs->newintercomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_all_begin` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_all_begin` function call.
 *
 * @struct args_MPI_File_read_all_begin_t
 *
 * @note 
 *	int
 *	MPI_File_read_all_begin (
 *			MPI_File fh (struct mpi_file_t *)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_File_read_all_begin
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	int retval;
} args_MPI_File_read_all_begin_t;

#define GET_ARGS_VALUE_MPI_File_read_all_begin(activity) { \
	args_MPI_File_read_all_begin_t* args = (args_MPI_File_read_all_begin_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ialltoallv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ialltoallv` function call.
 *
 * @struct args_MPI_Ialltoallv_t
 *
 * @note 
 *	int
 *	MPI_Ialltoallv (
 *			const void * sendbuf (const void *)
 *			const int[] sendcounts (const int[])
 *			const int[] sdispls (const int[])
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] rdispls (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ialltoallv
typedef struct {
	void * sendbuf;
	int(* sendcounts);
	struct {
		int val;
	} sendcounts__ref;
	int(* sdispls);
	struct {
		int val;
	} sdispls__ref;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* rdispls);
	struct {
		int val;
	} rdispls__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ialltoallv_t;

#define GET_ARGS_VALUE_MPI_Ialltoallv(activity) { \
	args_MPI_Ialltoallv_t* args = (args_MPI_Ialltoallv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcounts = (int(*)) sendcounts; \
	args->sdispls = (int(*)) sdispls; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->rdispls = (int(*)) rdispls; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ialltoallv(args) { \
	args_MPI_Ialltoallv_t* pargs = (args_MPI_Ialltoallv_t*) args; \
	if (pargs->sendcounts != NULL) { \
		pargs->sendcounts__ref.val = *pargs->sendcounts; \
	} \
	if (pargs->sdispls != NULL) { \
		pargs->sdispls__ref.val = *pargs->sdispls; \
	} \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->rdispls != NULL) { \
		pargs->rdispls__ref.val = *pargs->rdispls; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_delete` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_delete` function call.
 *
 * @struct args_MPI_File_delete_t
 *
 * @note 
 *	int
 *	MPI_File_delete (
 *			const char * filename (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *	)
 */
#if HAVE_MPI_File_delete
typedef struct {
	char * filename;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} filename__ref;
	MPI_Info info;
	int retval;
} args_MPI_File_delete_t;

#define GET_ARGS_VALUE_MPI_File_delete(activity) { \
	args_MPI_File_delete_t* args = (args_MPI_File_delete_t*) activity->args; \
	args->filename = (char *) filename; \
	args->info = (MPI_Info) info; \
};

#define GET_PTRS_VALUE_MPI_File_delete(args) { \
	args_MPI_File_delete_t* pargs = (args_MPI_File_delete_t*) args; \
	if (pargs->filename != NULL) { \
		strncpy(pargs->filename__ref.val, pargs->filename, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Dims_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Dims_create` function call.
 *
 * @struct args_MPI_Dims_create_t
 *
 * @note 
 *	int
 *	MPI_Dims_create (
 *			int nnodes (int)
 *			int ndims (int)
 *			int[] dims (int[])
 *	)
 */
#if HAVE_MPI_Dims_create
typedef struct {
	int nnodes;
	int ndims;
	int(* dims);
	struct {
		int val;
	} dims__ref;
	int retval;
} args_MPI_Dims_create_t;

#define GET_ARGS_VALUE_MPI_Dims_create(activity) { \
	args_MPI_Dims_create_t* args = (args_MPI_Dims_create_t*) activity->args; \
	args->nnodes = (int) nnodes; \
	args->ndims = (int) ndims; \
	args->dims = (int(*)) dims; \
};

#define GET_PTRS_VALUE_MPI_Dims_create(args) { \
	args_MPI_Dims_create_t* pargs = (args_MPI_Dims_create_t*) args; \
	if (pargs->dims != NULL) { \
		pargs->dims__ref.val = *pargs->dims; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Cart_sub` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Cart_sub` function call.
 *
 * @struct args_MPI_Cart_sub_t
 *
 * @note 
 *	int
 *	MPI_Cart_sub (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			const int[] remain_dims (const int[])
 *			MPI_Comm * new_comm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Cart_sub
typedef struct {
	MPI_Comm comm;
	int(* remain_dims);
	struct {
		int val;
	} remain_dims__ref;
	MPI_Comm * new_comm;
	struct {
		MPI_Comm val;
	} new_comm__ref;
	int retval;
} args_MPI_Cart_sub_t;

#define GET_ARGS_VALUE_MPI_Cart_sub(activity) { \
	args_MPI_Cart_sub_t* args = (args_MPI_Cart_sub_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
	args->remain_dims = (int(*)) remain_dims; \
	args->new_comm = (MPI_Comm *) new_comm; \
};

#define GET_PTRS_VALUE_MPI_Cart_sub(args) { \
	args_MPI_Cart_sub_t* pargs = (args_MPI_Cart_sub_t*) args; \
	if (pargs->remain_dims != NULL) { \
		pargs->remain_dims__ref.val = *pargs->remain_dims; \
	} \
	if (pargs->new_comm != NULL) { \
		pargs->new_comm__ref.val = *pargs->new_comm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_allocate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_allocate` function call.
 *
 * @struct args_MPI_Win_allocate_t
 *
 * @note 
 *	int
 *	MPI_Win_allocate (
 *			MPI_Aint size (long)
 *			int disp_unit (int)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			void * baseptr (void *)
 *			MPI_Win * win (struct mpi_win_t **)
 *	)
 */
#if HAVE_MPI_Win_allocate
typedef struct {
	MPI_Aint size;
	int disp_unit;
	MPI_Info info;
	MPI_Comm comm;
	void * baseptr;
	MPI_Win * win;
	struct {
		MPI_Win val;
	} win__ref;
	int retval;
} args_MPI_Win_allocate_t;

#define GET_ARGS_VALUE_MPI_Win_allocate(activity) { \
	args_MPI_Win_allocate_t* args = (args_MPI_Win_allocate_t*) activity->args; \
	args->size = (MPI_Aint) size; \
	args->disp_unit = (int) disp_unit; \
	args->info = (MPI_Info) info; \
	args->comm = (MPI_Comm) comm; \
	args->baseptr = (void *) baseptr; \
	args->win = (MPI_Win *) win; \
};

#define GET_PTRS_VALUE_MPI_Win_allocate(args) { \
	args_MPI_Win_allocate_t* pargs = (args_MPI_Win_allocate_t*) args; \
	if (pargs->win != NULL) { \
		pargs->win__ref.val = *pargs->win; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_get_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_get_errhandler` function call.
 *
 * @struct args_MPI_Session_get_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Session_get_errhandler (
 *			MPI_Session session (struct mpi_instance_t *)
 *			MPI_Errhandler * erhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_Session_get_errhandler
typedef struct {
	MPI_Session session;
	MPI_Errhandler * erhandler;
	struct {
		MPI_Errhandler val;
	} erhandler__ref;
	int retval;
} args_MPI_Session_get_errhandler_t;

#define GET_ARGS_VALUE_MPI_Session_get_errhandler(activity) { \
	args_MPI_Session_get_errhandler_t* args = (args_MPI_Session_get_errhandler_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->erhandler = (MPI_Errhandler *) erhandler; \
};

#define GET_PTRS_VALUE_MPI_Session_get_errhandler(args) { \
	args_MPI_Session_get_errhandler_t* pargs = (args_MPI_Session_get_errhandler_t*) args; \
	if (pargs->erhandler != NULL) { \
		pargs->erhandler__ref.val = *pargs->erhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Parrived` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Parrived` function call.
 *
 * @struct args_MPI_Parrived_t
 *
 * @note 
 *	int
 *	MPI_Parrived (
 *			MPI_Request request (struct mpi_request_t *)
 *			int partition (int)
 *			int * flag (int *)
 *	)
 */
#if HAVE_MPI_Parrived
typedef struct {
	MPI_Request request;
	int partition;
	int * flag;
	struct {
		int val;
	} flag__ref;
	int retval;
} args_MPI_Parrived_t;

#define GET_ARGS_VALUE_MPI_Parrived(activity) { \
	args_MPI_Parrived_t* args = (args_MPI_Parrived_t*) activity->args; \
	args->request = (MPI_Request) request; \
	args->partition = (int) partition; \
	args->flag = (int *) flag; \
};

#define GET_PTRS_VALUE_MPI_Parrived(args) { \
	args_MPI_Parrived_t* pargs = (args_MPI_Parrived_t*) args; \
	if (pargs->flag != NULL) { \
		pargs->flag__ref.val = *pargs->flag; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_create_env` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_create_env` function call.
 *
 * @struct args_MPI_Info_create_env_t
 *
 * @note 
 *	int
 *	MPI_Info_create_env (
 *			int argc (int)
 *			char *[] argv (char *[])
 *			MPI_Info * info (struct mpi_info_t **)
 *	)
 */
#if HAVE_MPI_Info_create_env
typedef struct {
	int argc;
	char *(* argv);
	struct {
		void* ptr1;
		char val[MPI_STRING_SIZE_MAX];
	} argv__ref;
	MPI_Info * info;
	struct {
		MPI_Info val;
	} info__ref;
	int retval;
} args_MPI_Info_create_env_t;

#define GET_ARGS_VALUE_MPI_Info_create_env(activity) { \
	args_MPI_Info_create_env_t* args = (args_MPI_Info_create_env_t*) activity->args; \
	args->argc = (int) argc; \
	args->argv = (char *(*)) argv; \
	args->info = (MPI_Info *) info; \
};

#define GET_PTRS_VALUE_MPI_Info_create_env(args) { \
	args_MPI_Info_create_env_t* pargs = (args_MPI_Info_create_env_t*) args; \
	if (pargs->argv != NULL) { \
		pargs->argv__ref.ptr1 = *pargs->argv; \
		if (pargs->argv__ref.ptr1 != NULL) { \
			strncpy(pargs->argv__ref.val, pargs->argv__ref.ptr1, MPI_STRING_SIZE_MAX-1); \
		} \
	} \
	if (pargs->info != NULL) { \
		pargs->info__ref.val = *pargs->info; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_create_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_create_errhandler` function call.
 *
 * @struct args_MPI_File_create_errhandler_t
 *
 * @note 
 *	int
 *	MPI_File_create_errhandler (
 *			MPI_File_errhandler_function * function (void (*)(struct mpi_file_t * *, int *, ...))
 *			MPI_Errhandler * errhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_File_create_errhandler
typedef struct {
	MPI_File_errhandler_function * function;
	MPI_Errhandler * errhandler;
	struct {
		MPI_Errhandler val;
	} errhandler__ref;
	int retval;
} args_MPI_File_create_errhandler_t;

#define GET_ARGS_VALUE_MPI_File_create_errhandler(activity) { \
	args_MPI_File_create_errhandler_t* args = (args_MPI_File_create_errhandler_t*) activity->args; \
	args->function = (MPI_File_errhandler_function *) function; \
	args->errhandler = (MPI_Errhandler *) errhandler; \
};

#define GET_PTRS_VALUE_MPI_File_create_errhandler(args) { \
	args_MPI_File_create_errhandler_t* pargs = (args_MPI_File_create_errhandler_t*) args; \
	if (pargs->errhandler != NULL) { \
		pargs->errhandler__ref.val = *pargs->errhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ialltoall` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ialltoall` function call.
 *
 * @struct args_MPI_Ialltoall_t
 *
 * @note 
 *	int
 *	MPI_Ialltoall (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ialltoall
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ialltoall_t;

#define GET_ARGS_VALUE_MPI_Ialltoall(activity) { \
	args_MPI_Ialltoall_t* args = (args_MPI_Ialltoall_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ialltoall(args) { \
	args_MPI_Ialltoall_t* pargs = (args_MPI_Ialltoall_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Raccumulate` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Raccumulate` function call.
 *
 * @struct args_MPI_Raccumulate_t
 *
 * @note 
 *	int
 *	MPI_Raccumulate (
 *			const void * origin_addr (const void *)
 *			int origin_count (int)
 *			MPI_Datatype origin_datatype (struct mpi_datatype_t *)
 *			int target_rank (int)
 *			MPI_Aint target_disp (long)
 *			int target_count (int)
 *			MPI_Datatype target_datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Raccumulate
typedef struct {
	void * origin_addr;
	int origin_count;
	MPI_Datatype origin_datatype;
	int target_rank;
	MPI_Aint target_disp;
	int target_count;
	MPI_Datatype target_datatype;
	MPI_Op op;
	MPI_Win win;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Raccumulate_t;

#define GET_ARGS_VALUE_MPI_Raccumulate(activity) { \
	args_MPI_Raccumulate_t* args = (args_MPI_Raccumulate_t*) activity->args; \
	args->origin_addr = (void *) origin_addr; \
	args->origin_count = (int) origin_count; \
	args->origin_datatype = (MPI_Datatype) origin_datatype; \
	args->target_rank = (int) target_rank; \
	args->target_disp = (MPI_Aint) target_disp; \
	args->target_count = (int) target_count; \
	args->target_datatype = (MPI_Datatype) target_datatype; \
	args->op = (MPI_Op) op; \
	args->win = (MPI_Win) win; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Raccumulate(args) { \
	args_MPI_Raccumulate_t* pargs = (args_MPI_Raccumulate_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_size_x` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_size_x` function call.
 *
 * @struct args_MPI_Type_size_x_t
 *
 * @note 
 *	int
 *	MPI_Type_size_x (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			MPI_Count * size (long long*)
 *	)
 */
#if HAVE_MPI_Type_size_x
typedef struct {
	MPI_Datatype type;
	MPI_Count * size;
	struct {
		MPI_Count val;
	} size__ref;
	int retval;
} args_MPI_Type_size_x_t;

#define GET_ARGS_VALUE_MPI_Type_size_x(activity) { \
	args_MPI_Type_size_x_t* args = (args_MPI_Type_size_x_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->size = (MPI_Count *) size; \
};

#define GET_PTRS_VALUE_MPI_Type_size_x(args) { \
	args_MPI_Type_size_x_t* pargs = (args_MPI_Type_size_x_t*) args; \
	if (pargs->size != NULL) { \
		pargs->size__ref.val = *pargs->size; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_get_extent_x` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_get_extent_x` function call.
 *
 * @struct args_MPI_Type_get_extent_x_t
 *
 * @note 
 *	int
 *	MPI_Type_get_extent_x (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			MPI_Count * lb (long long*)
 *			MPI_Count * extent (long long*)
 *	)
 */
#if HAVE_MPI_Type_get_extent_x
typedef struct {
	MPI_Datatype type;
	MPI_Count * lb;
	struct {
		MPI_Count val;
	} lb__ref;
	MPI_Count * extent;
	struct {
		MPI_Count val;
	} extent__ref;
	int retval;
} args_MPI_Type_get_extent_x_t;

#define GET_ARGS_VALUE_MPI_Type_get_extent_x(activity) { \
	args_MPI_Type_get_extent_x_t* args = (args_MPI_Type_get_extent_x_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->lb = (MPI_Count *) lb; \
	args->extent = (MPI_Count *) extent; \
};

#define GET_PTRS_VALUE_MPI_Type_get_extent_x(args) { \
	args_MPI_Type_get_extent_x_t* pargs = (args_MPI_Type_get_extent_x_t*) args; \
	if (pargs->lb != NULL) { \
		pargs->lb__ref.val = *pargs->lb; \
	} \
	if (pargs->extent != NULL) { \
		pargs->extent__ref.val = *pargs->extent; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_read_at_all_begin` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_read_at_all_begin` function call.
 *
 * @struct args_MPI_File_read_at_all_begin_t
 *
 * @note 
 *	int
 *	MPI_File_read_at_all_begin (
 *			MPI_File fh (struct mpi_file_t *)
 *			MPI_Offset offset (long long)
 *			void * buf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_File_read_at_all_begin
typedef struct {
	MPI_File fh;
	MPI_Offset offset;
	void * buf;
	int count;
	MPI_Datatype datatype;
	int retval;
} args_MPI_File_read_at_all_begin_t;

#define GET_ARGS_VALUE_MPI_File_read_at_all_begin(activity) { \
	args_MPI_File_read_at_all_begin_t* args = (args_MPI_File_read_at_all_begin_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->offset = (MPI_Offset) offset; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Dist_graph_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Dist_graph_create` function call.
 *
 * @struct args_MPI_Dist_graph_create_t
 *
 * @note 
 *	int
 *	MPI_Dist_graph_create (
 *			MPI_Comm comm_old (struct mpi_communicator_t *)
 *			int n (int)
 *			const int[] nodes (const int[])
 *			const int[] degrees (const int[])
 *			const int[] targets (const int[])
 *			const int[] weights (const int[])
 *			MPI_Info info (struct mpi_info_t *)
 *			int reorder (int)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Dist_graph_create
typedef struct {
	MPI_Comm comm_old;
	int n;
	int(* nodes);
	struct {
		int val;
	} nodes__ref;
	int(* degrees);
	struct {
		int val;
	} degrees__ref;
	int(* targets);
	struct {
		int val;
	} targets__ref;
	int(* weights);
	struct {
		int val;
	} weights__ref;
	MPI_Info info;
	int reorder;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Dist_graph_create_t;

#define GET_ARGS_VALUE_MPI_Dist_graph_create(activity) { \
	args_MPI_Dist_graph_create_t* args = (args_MPI_Dist_graph_create_t*) activity->args; \
	args->comm_old = (MPI_Comm) comm_old; \
	args->n = (int) n; \
	args->nodes = (int(*)) nodes; \
	args->degrees = (int(*)) degrees; \
	args->targets = (int(*)) targets; \
	args->weights = (int(*)) weights; \
	args->info = (MPI_Info) info; \
	args->reorder = (int) reorder; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Dist_graph_create(args) { \
	args_MPI_Dist_graph_create_t* pargs = (args_MPI_Dist_graph_create_t*) args; \
	if (pargs->nodes != NULL) { \
		pargs->nodes__ref.val = *pargs->nodes; \
	} \
	if (pargs->degrees != NULL) { \
		pargs->degrees__ref.val = *pargs->degrees; \
	} \
	if (pargs->targets != NULL) { \
		pargs->targets__ref.val = *pargs->targets; \
	} \
	if (pargs->weights != NULL) { \
		pargs->weights__ref.val = *pargs->weights; \
	} \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_join` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_join` function call.
 *
 * @struct args_MPI_Comm_join_t
 *
 * @note 
 *	int
 *	MPI_Comm_join (
 *			int fd (int)
 *			MPI_Comm * intercomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_join
typedef struct {
	int fd;
	MPI_Comm * intercomm;
	struct {
		MPI_Comm val;
	} intercomm__ref;
	int retval;
} args_MPI_Comm_join_t;

#define GET_ARGS_VALUE_MPI_Comm_join(activity) { \
	args_MPI_Comm_join_t* args = (args_MPI_Comm_join_t*) activity->args; \
	args->fd = (int) fd; \
	args->intercomm = (MPI_Comm *) intercomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_join(args) { \
	args_MPI_Comm_join_t* pargs = (args_MPI_Comm_join_t*) args; \
	if (pargs->intercomm != NULL) { \
		pargs->intercomm__ref.val = *pargs->intercomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Gatherv_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Gatherv_init` function call.
 *
 * @struct args_MPI_Gatherv_init_t
 *
 * @note 
 *	int
 *	MPI_Gatherv_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Gatherv_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Gatherv_init_t;

#define GET_ARGS_VALUE_MPI_Gatherv_init(activity) { \
	args_MPI_Gatherv_init_t* args = (args_MPI_Gatherv_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Gatherv_init(args) { \
	args_MPI_Gatherv_init_t* pargs = (args_MPI_Gatherv_init_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_sync` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_sync` function call.
 *
 * @struct args_MPI_File_sync_t
 *
 * @note 
 *	int
 *	MPI_File_sync (
 *			MPI_File fh (struct mpi_file_t *)
 *	)
 */
#if HAVE_MPI_File_sync
typedef struct {
	MPI_File fh;
	int retval;
} args_MPI_File_sync_t;

#define GET_ARGS_VALUE_MPI_File_sync(activity) { \
	args_MPI_File_sync_t* args = (args_MPI_File_sync_t*) activity->args; \
	args->fh = (MPI_File) fh; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_accept` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_accept` function call.
 *
 * @struct args_MPI_Comm_accept_t
 *
 * @note 
 *	int
 *	MPI_Comm_accept (
 *			const char * port_name (const char *)
 *			MPI_Info info (struct mpi_info_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Comm * newcomm (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Comm_accept
typedef struct {
	char * port_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} port_name__ref;
	MPI_Info info;
	int root;
	MPI_Comm comm;
	MPI_Comm * newcomm;
	struct {
		MPI_Comm val;
	} newcomm__ref;
	int retval;
} args_MPI_Comm_accept_t;

#define GET_ARGS_VALUE_MPI_Comm_accept(activity) { \
	args_MPI_Comm_accept_t* args = (args_MPI_Comm_accept_t*) activity->args; \
	args->port_name = (char *) port_name; \
	args->info = (MPI_Info) info; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->newcomm = (MPI_Comm *) newcomm; \
};

#define GET_PTRS_VALUE_MPI_Comm_accept(args) { \
	args_MPI_Comm_accept_t* pargs = (args_MPI_Comm_accept_t*) args; \
	if (pargs->port_name != NULL) { \
		strncpy(pargs->port_name__ref.val, pargs->port_name, MPI_STRING_SIZE_MAX-1); \
	} \
	if (pargs->newcomm != NULL) { \
		pargs->newcomm__ref.val = *pargs->newcomm; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Ineighbor_allgather` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Ineighbor_allgather` function call.
 *
 * @struct args_MPI_Ineighbor_allgather_t
 *
 * @note 
 *	int
 *	MPI_Ineighbor_allgather (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Ineighbor_allgather
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Ineighbor_allgather_t;

#define GET_ARGS_VALUE_MPI_Ineighbor_allgather(activity) { \
	args_MPI_Ineighbor_allgather_t* args = (args_MPI_Ineighbor_allgather_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Ineighbor_allgather(args) { \
	args_MPI_Ineighbor_allgather_t* pargs = (args_MPI_Ineighbor_allgather_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_dup` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_dup` function call.
 *
 * @struct args_MPI_Type_dup_t
 *
 * @note 
 *	int
 *	MPI_Type_dup (
 *			MPI_Datatype type (struct mpi_datatype_t *)
 *			MPI_Datatype * newtype (struct mpi_datatype_t **)
 *	)
 */
#if HAVE_MPI_Type_dup
typedef struct {
	MPI_Datatype type;
	MPI_Datatype * newtype;
	struct {
		MPI_Datatype val;
	} newtype__ref;
	int retval;
} args_MPI_Type_dup_t;

#define GET_ARGS_VALUE_MPI_Type_dup(activity) { \
	args_MPI_Type_dup_t* args = (args_MPI_Type_dup_t*) activity->args; \
	args->type = (MPI_Datatype) type; \
	args->newtype = (MPI_Datatype *) newtype; \
};

#define GET_PTRS_VALUE_MPI_Type_dup(args) { \
	args_MPI_Type_dup_t* pargs = (args_MPI_Type_dup_t*) args; \
	if (pargs->newtype != NULL) { \
		pargs->newtype__ref.val = *pargs->newtype; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iwrite_shared` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iwrite_shared` function call.
 *
 * @struct args_MPI_File_iwrite_shared_t
 *
 * @note 
 *	int
 *	MPI_File_iwrite_shared (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iwrite_shared
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iwrite_shared_t;

#define GET_ARGS_VALUE_MPI_File_iwrite_shared(activity) { \
	args_MPI_File_iwrite_shared_t* args = (args_MPI_File_iwrite_shared_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iwrite_shared(args) { \
	args_MPI_File_iwrite_shared_t* pargs = (args_MPI_File_iwrite_shared_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_get_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_get_errhandler` function call.
 *
 * @struct args_MPI_Win_get_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Win_get_errhandler (
 *			MPI_Win win (struct mpi_win_t *)
 *			MPI_Errhandler * errhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_Win_get_errhandler
typedef struct {
	MPI_Win win;
	MPI_Errhandler * errhandler;
	struct {
		MPI_Errhandler val;
	} errhandler__ref;
	int retval;
} args_MPI_Win_get_errhandler_t;

#define GET_ARGS_VALUE_MPI_Win_get_errhandler(activity) { \
	args_MPI_Win_get_errhandler_t* args = (args_MPI_Win_get_errhandler_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->errhandler = (MPI_Errhandler *) errhandler; \
};

#define GET_PTRS_VALUE_MPI_Win_get_errhandler(args) { \
	args_MPI_Win_get_errhandler_t* pargs = (args_MPI_Win_get_errhandler_t*) args; \
	if (pargs->errhandler != NULL) { \
		pargs->errhandler__ref.val = *pargs->errhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Iscan` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Iscan` function call.
 *
 * @struct args_MPI_Iscan_t
 *
 * @note 
 *	int
 *	MPI_Iscan (
 *			const void * sendbuf (const void *)
 *			void * recvbuf (void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Op op (struct mpi_op_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Iscan
typedef struct {
	void * sendbuf;
	void * recvbuf;
	int count;
	MPI_Datatype datatype;
	MPI_Op op;
	MPI_Comm comm;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Iscan_t;

#define GET_ARGS_VALUE_MPI_Iscan(activity) { \
	args_MPI_Iscan_t* args = (args_MPI_Iscan_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->recvbuf = (void *) recvbuf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->op = (MPI_Op) op; \
	args->comm = (MPI_Comm) comm; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Iscan(args) { \
	args_MPI_Iscan_t* pargs = (args_MPI_Iscan_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_flush` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_flush` function call.
 *
 * @struct args_MPI_Win_flush_t
 *
 * @note 
 *	int
 *	MPI_Win_flush (
 *			int rank (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_flush
typedef struct {
	int rank;
	MPI_Win win;
	int retval;
} args_MPI_Win_flush_t;

#define GET_ARGS_VALUE_MPI_Win_flush(activity) { \
	args_MPI_Win_flush_t* args = (args_MPI_Win_flush_t*) activity->args; \
	args->rank = (int) rank; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Graph_create` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Graph_create` function call.
 *
 * @struct args_MPI_Graph_create_t
 *
 * @note 
 *	int
 *	MPI_Graph_create (
 *			MPI_Comm comm_old (struct mpi_communicator_t *)
 *			int nnodes (int)
 *			const int[] index (const int[])
 *			const int[] edges (const int[])
 *			int reorder (int)
 *			MPI_Comm * comm_graph (struct mpi_communicator_t **)
 *	)
 */
#if HAVE_MPI_Graph_create
typedef struct {
	MPI_Comm comm_old;
	int nnodes;
	int(* index);
	struct {
		int val;
	} index__ref;
	int(* edges);
	struct {
		int val;
	} edges__ref;
	int reorder;
	MPI_Comm * comm_graph;
	struct {
		MPI_Comm val;
	} comm_graph__ref;
	int retval;
} args_MPI_Graph_create_t;

#define GET_ARGS_VALUE_MPI_Graph_create(activity) { \
	args_MPI_Graph_create_t* args = (args_MPI_Graph_create_t*) activity->args; \
	args->comm_old = (MPI_Comm) comm_old; \
	args->nnodes = (int) nnodes; \
	args->index = (int(*)) index; \
	args->edges = (int(*)) edges; \
	args->reorder = (int) reorder; \
	args->comm_graph = (MPI_Comm *) comm_graph; \
};

#define GET_PTRS_VALUE_MPI_Graph_create(args) { \
	args_MPI_Graph_create_t* pargs = (args_MPI_Graph_create_t*) args; \
	if (pargs->index != NULL) { \
		pargs->index__ref.val = *pargs->index; \
	} \
	if (pargs->edges != NULL) { \
		pargs->edges__ref.val = *pargs->edges; \
	} \
	if (pargs->comm_graph != NULL) { \
		pargs->comm_graph__ref.val = *pargs->comm_graph; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_set_name` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_set_name` function call.
 *
 * @struct args_MPI_Win_set_name_t
 *
 * @note 
 *	int
 *	MPI_Win_set_name (
 *			MPI_Win win (struct mpi_win_t *)
 *			const char * win_name (const char *)
 *	)
 */
#if HAVE_MPI_Win_set_name
typedef struct {
	MPI_Win win;
	char * win_name;
	struct {
		char val[MPI_STRING_SIZE_MAX];
	} win_name__ref;
	int retval;
} args_MPI_Win_set_name_t;

#define GET_ARGS_VALUE_MPI_Win_set_name(activity) { \
	args_MPI_Win_set_name_t* args = (args_MPI_Win_set_name_t*) activity->args; \
	args->win = (MPI_Win) win; \
	args->win_name = (char *) win_name; \
};

#define GET_PTRS_VALUE_MPI_Win_set_name(args) { \
	args_MPI_Win_set_name_t* pargs = (args_MPI_Win_set_name_t*) args; \
	if (pargs->win_name != NULL) { \
		strncpy(pargs->win_name__ref.val, pargs->win_name, MPI_STRING_SIZE_MAX-1); \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_create_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_create_errhandler` function call.
 *
 * @struct args_MPI_Win_create_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Win_create_errhandler (
 *			MPI_Win_errhandler_function * function (void (*)(struct mpi_win_t * *, int *, ...))
 *			MPI_Errhandler * errhandler (struct mpi_errhandler_t **)
 *	)
 */
#if HAVE_MPI_Win_create_errhandler
typedef struct {
	MPI_Win_errhandler_function * function;
	MPI_Errhandler * errhandler;
	struct {
		MPI_Errhandler val;
	} errhandler__ref;
	int retval;
} args_MPI_Win_create_errhandler_t;

#define GET_ARGS_VALUE_MPI_Win_create_errhandler(activity) { \
	args_MPI_Win_create_errhandler_t* args = (args_MPI_Win_create_errhandler_t*) activity->args; \
	args->function = (MPI_Win_errhandler_function *) function; \
	args->errhandler = (MPI_Errhandler *) errhandler; \
};

#define GET_PTRS_VALUE_MPI_Win_create_errhandler(args) { \
	args_MPI_Win_create_errhandler_t* pargs = (args_MPI_Win_create_errhandler_t*) args; \
	if (pargs->errhandler != NULL) { \
		pargs->errhandler__ref.val = *pargs->errhandler; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Gather_init` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Gather_init` function call.
 *
 * @struct args_MPI_Gather_init_t
 *
 * @note 
 *	int
 *	MPI_Gather_init (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			int recvcount (int)
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			int root (int)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *			MPI_Info info (struct mpi_info_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_Gather_init
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int recvcount;
	MPI_Datatype recvtype;
	int root;
	MPI_Comm comm;
	MPI_Info info;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_Gather_init_t;

#define GET_ARGS_VALUE_MPI_Gather_init(activity) { \
	args_MPI_Gather_init_t* args = (args_MPI_Gather_init_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcount = (int) recvcount; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->root = (int) root; \
	args->comm = (MPI_Comm) comm; \
	args->info = (MPI_Info) info; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_Gather_init(args) { \
	args_MPI_Gather_init_t* pargs = (args_MPI_Gather_init_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Neighbor_allgatherv` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Neighbor_allgatherv` function call.
 *
 * @struct args_MPI_Neighbor_allgatherv_t
 *
 * @note 
 *	int
 *	MPI_Neighbor_allgatherv (
 *			const void * sendbuf (const void *)
 *			int sendcount (int)
 *			MPI_Datatype sendtype (struct mpi_datatype_t *)
 *			void * recvbuf (void *)
 *			const int[] recvcounts (const int[])
 *			const int[] displs (const int[])
 *			MPI_Datatype recvtype (struct mpi_datatype_t *)
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Neighbor_allgatherv
typedef struct {
	void * sendbuf;
	int sendcount;
	MPI_Datatype sendtype;
	void * recvbuf;
	int(* recvcounts);
	struct {
		int val;
	} recvcounts__ref;
	int(* displs);
	struct {
		int val;
	} displs__ref;
	MPI_Datatype recvtype;
	MPI_Comm comm;
	int retval;
} args_MPI_Neighbor_allgatherv_t;

#define GET_ARGS_VALUE_MPI_Neighbor_allgatherv(activity) { \
	args_MPI_Neighbor_allgatherv_t* args = (args_MPI_Neighbor_allgatherv_t*) activity->args; \
	args->sendbuf = (void *) sendbuf; \
	args->sendcount = (int) sendcount; \
	args->sendtype = (MPI_Datatype) sendtype; \
	args->recvbuf = (void *) recvbuf; \
	args->recvcounts = (int(*)) recvcounts; \
	args->displs = (int(*)) displs; \
	args->recvtype = (MPI_Datatype) recvtype; \
	args->comm = (MPI_Comm) comm; \
};

#define GET_PTRS_VALUE_MPI_Neighbor_allgatherv(args) { \
	args_MPI_Neighbor_allgatherv_t* pargs = (args_MPI_Neighbor_allgatherv_t*) args; \
	if (pargs->recvcounts != NULL) { \
		pargs->recvcounts__ref.val = *pargs->recvcounts; \
	} \
	if (pargs->displs != NULL) { \
		pargs->displs__ref.val = *pargs->displs; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_iwrite` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_iwrite` function call.
 *
 * @struct args_MPI_File_iwrite_t
 *
 * @note 
 *	int
 *	MPI_File_iwrite (
 *			MPI_File fh (struct mpi_file_t *)
 *			const void * buf (const void *)
 *			int count (int)
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *			MPI_Request * request (struct mpi_request_t **)
 *	)
 */
#if HAVE_MPI_File_iwrite
typedef struct {
	MPI_File fh;
	void * buf;
	int count;
	MPI_Datatype datatype;
	MPI_Request * request;
	struct {
		MPI_Request val;
	} request__ref;
	int retval;
} args_MPI_File_iwrite_t;

#define GET_ARGS_VALUE_MPI_File_iwrite(activity) { \
	args_MPI_File_iwrite_t* args = (args_MPI_File_iwrite_t*) activity->args; \
	args->fh = (MPI_File) fh; \
	args->buf = (void *) buf; \
	args->count = (int) count; \
	args->datatype = (MPI_Datatype) datatype; \
	args->request = (MPI_Request *) request; \
};

#define GET_PTRS_VALUE_MPI_File_iwrite(args) { \
	args_MPI_File_iwrite_t* pargs = (args_MPI_File_iwrite_t*) args; \
	if (pargs->request != NULL) { \
		pargs->request__ref.val = *pargs->request; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Buffer_attach` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Buffer_attach` function call.
 *
 * @struct args_MPI_Buffer_attach_t
 *
 * @note 
 *	int
 *	MPI_Buffer_attach (
 *			void * buffer (void *)
 *			int size (int)
 *	)
 */
#if HAVE_MPI_Buffer_attach
typedef struct {
	void * buffer;
	int size;
	int retval;
} args_MPI_Buffer_attach_t;

#define GET_ARGS_VALUE_MPI_Buffer_attach(activity) { \
	args_MPI_Buffer_attach_t* args = (args_MPI_Buffer_attach_t*) activity->args; \
	args->buffer = (void *) buffer; \
	args->size = (int) size; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_set_errhandler` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_set_errhandler` function call.
 *
 * @struct args_MPI_Session_set_errhandler_t
 *
 * @note 
 *	int
 *	MPI_Session_set_errhandler (
 *			MPI_Session session (struct mpi_instance_t *)
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *	)
 */
#if HAVE_MPI_Session_set_errhandler
typedef struct {
	MPI_Session session;
	MPI_Errhandler errhandler;
	int retval;
} args_MPI_Session_set_errhandler_t;

#define GET_ARGS_VALUE_MPI_Session_set_errhandler(activity) { \
	args_MPI_Session_set_errhandler_t* args = (args_MPI_Session_set_errhandler_t*) activity->args; \
	args->session = (MPI_Session) session; \
	args->errhandler = (MPI_Errhandler) errhandler; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_start` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_start` function call.
 *
 * @struct args_MPI_Win_start_t
 *
 * @note 
 *	int
 *	MPI_Win_start (
 *			MPI_Group group (struct mpi_group_t *)
 *			int mpi_assert (int)
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_start
typedef struct {
	MPI_Group group;
	int mpi_assert;
	MPI_Win win;
	int retval;
} args_MPI_Win_start_t;

#define GET_ARGS_VALUE_MPI_Win_start(activity) { \
	args_MPI_Win_start_t* args = (args_MPI_Win_start_t*) activity->args; \
	args->group = (MPI_Group) group; \
	args->mpi_assert = (int) mpi_assert; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_f2c` function call.
 *
 * @struct args_MPI_Info_f2c_t
 *
 * @note 
 *	MPI_Info
 *	MPI_Info_f2c (
 *			int info (int)
 *	)
 */
#if HAVE_MPI_Info_f2c
typedef struct {
	int info;
	MPI_Info retval;
} args_MPI_Info_f2c_t;

#define GET_ARGS_VALUE_MPI_Info_f2c(activity) { \
	args_MPI_Info_f2c_t* args = (args_MPI_Info_f2c_t*) activity->args; \
	args->info = (int) info; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Info_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Info_c2f` function call.
 *
 * @struct args_MPI_Info_c2f_t
 *
 * @note 
 *	int
 *	MPI_Info_c2f (
 *			MPI_Info info (struct mpi_info_t *)
 *	)
 */
#if HAVE_MPI_Info_c2f
typedef struct {
	MPI_Info info;
	int retval;
} args_MPI_Info_c2f_t;

#define GET_ARGS_VALUE_MPI_Info_c2f(activity) { \
	args_MPI_Info_c2f_t* args = (args_MPI_Info_c2f_t*) activity->args; \
	args->info = (MPI_Info) info; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Op_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Op_c2f` function call.
 *
 * @struct args_MPI_Op_c2f_t
 *
 * @note 
 *	int
 *	MPI_Op_c2f (
 *			MPI_Op op (struct mpi_op_t *)
 *	)
 */
#if HAVE_MPI_Op_c2f
typedef struct {
	MPI_Op op;
	int retval;
} args_MPI_Op_c2f_t;

#define GET_ARGS_VALUE_MPI_Op_c2f(activity) { \
	args_MPI_Op_c2f_t* args = (args_MPI_Op_c2f_t*) activity->args; \
	args->op = (MPI_Op) op; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_c2f` function call.
 *
 * @struct args_MPI_Win_c2f_t
 *
 * @note 
 *	int
 *	MPI_Win_c2f (
 *			MPI_Win win (struct mpi_win_t *)
 *	)
 */
#if HAVE_MPI_Win_c2f
typedef struct {
	MPI_Win win;
	int retval;
} args_MPI_Win_c2f_t;

#define GET_ARGS_VALUE_MPI_Win_c2f(activity) { \
	args_MPI_Win_c2f_t* args = (args_MPI_Win_c2f_t*) activity->args; \
	args->win = (MPI_Win) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_f2c` function call.
 *
 * @struct args_MPI_Group_f2c_t
 *
 * @note 
 *	MPI_Group
 *	MPI_Group_f2c (
 *			int group (int)
 *	)
 */
#if HAVE_MPI_Group_f2c
typedef struct {
	int group;
	MPI_Group retval;
} args_MPI_Group_f2c_t;

#define GET_ARGS_VALUE_MPI_Group_f2c(activity) { \
	args_MPI_Group_f2c_t* args = (args_MPI_Group_f2c_t*) activity->args; \
	args->group = (int) group; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_c2f` function call.
 *
 * @struct args_MPI_File_c2f_t
 *
 * @note 
 *	int
 *	MPI_File_c2f (
 *			MPI_File file (struct mpi_file_t *)
 *	)
 */
#if HAVE_MPI_File_c2f
typedef struct {
	MPI_File file;
	int retval;
} args_MPI_File_c2f_t;

#define GET_ARGS_VALUE_MPI_File_c2f(activity) { \
	args_MPI_File_c2f_t* args = (args_MPI_File_c2f_t*) activity->args; \
	args->file = (MPI_File) file; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Request_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Request_c2f` function call.
 *
 * @struct args_MPI_Request_c2f_t
 *
 * @note 
 *	int
 *	MPI_Request_c2f (
 *			MPI_Request request (struct mpi_request_t *)
 *	)
 */
#if HAVE_MPI_Request_c2f
typedef struct {
	MPI_Request request;
	int retval;
} args_MPI_Request_c2f_t;

#define GET_ARGS_VALUE_MPI_Request_c2f(activity) { \
	args_MPI_Request_c2f_t* args = (args_MPI_Request_c2f_t*) activity->args; \
	args->request = (MPI_Request) request; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_File_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_File_f2c` function call.
 *
 * @struct args_MPI_File_f2c_t
 *
 * @note 
 *	MPI_File
 *	MPI_File_f2c (
 *			int file (int)
 *	)
 */
#if HAVE_MPI_File_f2c
typedef struct {
	int file;
	MPI_File retval;
} args_MPI_File_f2c_t;

#define GET_ARGS_VALUE_MPI_File_f2c(activity) { \
	args_MPI_File_f2c_t* args = (args_MPI_File_f2c_t*) activity->args; \
	args->file = (int) file; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_f2c` function call.
 *
 * @struct args_MPI_Session_f2c_t
 *
 * @note 
 *	MPI_Session
 *	MPI_Session_f2c (
 *			int session (int)
 *	)
 */
#if HAVE_MPI_Session_f2c
typedef struct {
	int session;
	MPI_Session retval;
} args_MPI_Session_f2c_t;

#define GET_ARGS_VALUE_MPI_Session_f2c(activity) { \
	args_MPI_Session_f2c_t* args = (args_MPI_Session_f2c_t*) activity->args; \
	args->session = (int) session; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_f082f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_f082f` function call.
 *
 * @struct args_MPI_Status_f082f_t
 *
 * @note 
 *	int
 *	MPI_Status_f082f (
 *			const MPI_F08_status * f08_status (const struct opaque * *)
 *			int * f_status (int *)
 *	)
 */
#if HAVE_MPI_Status_f082f
typedef struct {
	MPI_F08_status * f08_status;
	struct {
		MPI_F08_status val;
	} f08_status__ref;
	int * f_status;
	struct {
		int val;
	} f_status__ref;
	int retval;
} args_MPI_Status_f082f_t;

#define GET_ARGS_VALUE_MPI_Status_f082f(activity) { \
	args_MPI_Status_f082f_t* args = (args_MPI_Status_f082f_t*) activity->args; \
	args->f08_status = (MPI_F08_status *) f08_status; \
	args->f_status = (int *) f_status; \
};

#define GET_PTRS_VALUE_MPI_Status_f082f(args) { \
	args_MPI_Status_f082f_t* pargs = (args_MPI_Status_f082f_t*) args; \
	if (pargs->f08_status != NULL) { \
		pargs->f08_status__ref.val = *pargs->f08_status; \
	} \
	if (pargs->f_status != NULL) { \
		pargs->f_status__ref.val = *pargs->f_status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_c2f08` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_c2f08` function call.
 *
 * @struct args_MPI_Status_c2f08_t
 *
 * @note 
 *	int
 *	MPI_Status_c2f08 (
 *			const MPI_Status * c_status (const struct opaque * *)
 *			MPI_F08_status * f08_status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Status_c2f08
typedef struct {
	MPI_Status * c_status;
	struct {
		MPI_Status val;
	} c_status__ref;
	MPI_F08_status * f08_status;
	struct {
		MPI_F08_status val;
	} f08_status__ref;
	int retval;
} args_MPI_Status_c2f08_t;

#define GET_ARGS_VALUE_MPI_Status_c2f08(activity) { \
	args_MPI_Status_c2f08_t* args = (args_MPI_Status_c2f08_t*) activity->args; \
	args->c_status = (MPI_Status *) c_status; \
	args->f08_status = (MPI_F08_status *) f08_status; \
};

#define GET_PTRS_VALUE_MPI_Status_c2f08(args) { \
	args_MPI_Status_c2f08_t* pargs = (args_MPI_Status_c2f08_t*) args; \
	if (pargs->c_status != NULL) { \
		pargs->c_status__ref.val = *pargs->c_status; \
	} \
	if (pargs->f08_status != NULL) { \
		pargs->f08_status__ref.val = *pargs->f08_status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_f2c` function call.
 *
 * @struct args_MPI_Type_f2c_t
 *
 * @note 
 *	MPI_Datatype
 *	MPI_Type_f2c (
 *			int datatype (int)
 *	)
 */
#if HAVE_MPI_Type_f2c
typedef struct {
	int datatype;
	MPI_Datatype retval;
} args_MPI_Type_f2c_t;

#define GET_ARGS_VALUE_MPI_Type_f2c(activity) { \
	args_MPI_Type_f2c_t* args = (args_MPI_Type_f2c_t*) activity->args; \
	args->datatype = (int) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Message_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Message_c2f` function call.
 *
 * @struct args_MPI_Message_c2f_t
 *
 * @note 
 *	int
 *	MPI_Message_c2f (
 *			MPI_Message message (struct mpi_message_t *)
 *	)
 */
#if HAVE_MPI_Message_c2f
typedef struct {
	MPI_Message message;
	int retval;
} args_MPI_Message_c2f_t;

#define GET_ARGS_VALUE_MPI_Message_c2f(activity) { \
	args_MPI_Message_c2f_t* args = (args_MPI_Message_c2f_t*) activity->args; \
	args->message = (MPI_Message) message; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Session_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Session_c2f` function call.
 *
 * @struct args_MPI_Session_c2f_t
 *
 * @note 
 *	int
 *	MPI_Session_c2f (
 *			const MPI_Session session (const struct mpi_instance_t *)
 *	)
 */
#if HAVE_MPI_Session_c2f
typedef struct {
	MPI_Session session;
	int retval;
} args_MPI_Session_c2f_t;

#define GET_ARGS_VALUE_MPI_Session_c2f(activity) { \
	args_MPI_Session_c2f_t* args = (args_MPI_Session_c2f_t*) activity->args; \
	args->session = (MPI_Session) session; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Message_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Message_f2c` function call.
 *
 * @struct args_MPI_Message_f2c_t
 *
 * @note 
 *	MPI_Message
 *	MPI_Message_f2c (
 *			int message (int)
 *	)
 */
#if HAVE_MPI_Message_f2c
typedef struct {
	int message;
	MPI_Message retval;
} args_MPI_Message_f2c_t;

#define GET_ARGS_VALUE_MPI_Message_f2c(activity) { \
	args_MPI_Message_f2c_t* args = (args_MPI_Message_f2c_t*) activity->args; \
	args->message = (int) message; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Errhandler_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Errhandler_f2c` function call.
 *
 * @struct args_MPI_Errhandler_f2c_t
 *
 * @note 
 *	MPI_Errhandler
 *	MPI_Errhandler_f2c (
 *			int errhandler (int)
 *	)
 */
#if HAVE_MPI_Errhandler_f2c
typedef struct {
	int errhandler;
	MPI_Errhandler retval;
} args_MPI_Errhandler_f2c_t;

#define GET_ARGS_VALUE_MPI_Errhandler_f2c(activity) { \
	args_MPI_Errhandler_f2c_t* args = (args_MPI_Errhandler_f2c_t*) activity->args; \
	args->errhandler = (int) errhandler; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Request_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Request_f2c` function call.
 *
 * @struct args_MPI_Request_f2c_t
 *
 * @note 
 *	MPI_Request
 *	MPI_Request_f2c (
 *			int request (int)
 *	)
 */
#if HAVE_MPI_Request_f2c
typedef struct {
	int request;
	MPI_Request retval;
} args_MPI_Request_f2c_t;

#define GET_ARGS_VALUE_MPI_Request_f2c(activity) { \
	args_MPI_Request_f2c_t* args = (args_MPI_Request_f2c_t*) activity->args; \
	args->request = (int) request; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_c2f` function call.
 *
 * @struct args_MPI_Status_c2f_t
 *
 * @note 
 *	int
 *	MPI_Status_c2f (
 *			const MPI_Status * c_status (const struct opaque * *)
 *			int * f_status (int *)
 *	)
 */
#if HAVE_MPI_Status_c2f
typedef struct {
	MPI_Status * c_status;
	struct {
		MPI_Status val;
	} c_status__ref;
	int * f_status;
	struct {
		int val;
	} f_status__ref;
	int retval;
} args_MPI_Status_c2f_t;

#define GET_ARGS_VALUE_MPI_Status_c2f(activity) { \
	args_MPI_Status_c2f_t* args = (args_MPI_Status_c2f_t*) activity->args; \
	args->c_status = (MPI_Status *) c_status; \
	args->f_status = (int *) f_status; \
};

#define GET_PTRS_VALUE_MPI_Status_c2f(args) { \
	args_MPI_Status_c2f_t* pargs = (args_MPI_Status_c2f_t*) args; \
	if (pargs->c_status != NULL) { \
		pargs->c_status__ref.val = *pargs->c_status; \
	} \
	if (pargs->f_status != NULL) { \
		pargs->f_status__ref.val = *pargs->f_status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_f2c` function call.
 *
 * @struct args_MPI_Comm_f2c_t
 *
 * @note 
 *	MPI_Comm
 *	MPI_Comm_f2c (
 *			int comm (int)
 *	)
 */
#if HAVE_MPI_Comm_f2c
typedef struct {
	int comm;
	MPI_Comm retval;
} args_MPI_Comm_f2c_t;

#define GET_ARGS_VALUE_MPI_Comm_f2c(activity) { \
	args_MPI_Comm_f2c_t* args = (args_MPI_Comm_f2c_t*) activity->args; \
	args->comm = (int) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Comm_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Comm_c2f` function call.
 *
 * @struct args_MPI_Comm_c2f_t
 *
 * @note 
 *	int
 *	MPI_Comm_c2f (
 *			MPI_Comm comm (struct mpi_communicator_t *)
 *	)
 */
#if HAVE_MPI_Comm_c2f
typedef struct {
	MPI_Comm comm;
	int retval;
} args_MPI_Comm_c2f_t;

#define GET_ARGS_VALUE_MPI_Comm_c2f(activity) { \
	args_MPI_Comm_c2f_t* args = (args_MPI_Comm_c2f_t*) activity->args; \
	args->comm = (MPI_Comm) comm; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Group_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Group_c2f` function call.
 *
 * @struct args_MPI_Group_c2f_t
 *
 * @note 
 *	int
 *	MPI_Group_c2f (
 *			MPI_Group group (struct mpi_group_t *)
 *	)
 */
#if HAVE_MPI_Group_c2f
typedef struct {
	MPI_Group group;
	int retval;
} args_MPI_Group_c2f_t;

#define GET_ARGS_VALUE_MPI_Group_c2f(activity) { \
	args_MPI_Group_c2f_t* args = (args_MPI_Group_c2f_t*) activity->args; \
	args->group = (MPI_Group) group; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Win_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Win_f2c` function call.
 *
 * @struct args_MPI_Win_f2c_t
 *
 * @note 
 *	MPI_Win
 *	MPI_Win_f2c (
 *			int win (int)
 *	)
 */
#if HAVE_MPI_Win_f2c
typedef struct {
	int win;
	MPI_Win retval;
} args_MPI_Win_f2c_t;

#define GET_ARGS_VALUE_MPI_Win_f2c(activity) { \
	args_MPI_Win_f2c_t* args = (args_MPI_Win_f2c_t*) activity->args; \
	args->win = (int) win; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_f082c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_f082c` function call.
 *
 * @struct args_MPI_Status_f082c_t
 *
 * @note 
 *	int
 *	MPI_Status_f082c (
 *			const MPI_F08_status * f08_status (const struct opaque * *)
 *			MPI_Status * c_status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Status_f082c
typedef struct {
	MPI_F08_status * f08_status;
	struct {
		MPI_F08_status val;
	} f08_status__ref;
	MPI_Status * c_status;
	struct {
		MPI_Status val;
	} c_status__ref;
	int retval;
} args_MPI_Status_f082c_t;

#define GET_ARGS_VALUE_MPI_Status_f082c(activity) { \
	args_MPI_Status_f082c_t* args = (args_MPI_Status_f082c_t*) activity->args; \
	args->f08_status = (MPI_F08_status *) f08_status; \
	args->c_status = (MPI_Status *) c_status; \
};

#define GET_PTRS_VALUE_MPI_Status_f082c(args) { \
	args_MPI_Status_f082c_t* pargs = (args_MPI_Status_f082c_t*) args; \
	if (pargs->f08_status != NULL) { \
		pargs->f08_status__ref.val = *pargs->f08_status; \
	} \
	if (pargs->c_status != NULL) { \
		pargs->c_status__ref.val = *pargs->c_status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Errhandler_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Errhandler_c2f` function call.
 *
 * @struct args_MPI_Errhandler_c2f_t
 *
 * @note 
 *	int
 *	MPI_Errhandler_c2f (
 *			MPI_Errhandler errhandler (struct mpi_errhandler_t *)
 *	)
 */
#if HAVE_MPI_Errhandler_c2f
typedef struct {
	MPI_Errhandler errhandler;
	int retval;
} args_MPI_Errhandler_c2f_t;

#define GET_ARGS_VALUE_MPI_Errhandler_c2f(activity) { \
	args_MPI_Errhandler_c2f_t* args = (args_MPI_Errhandler_c2f_t*) activity->args; \
	args->errhandler = (MPI_Errhandler) errhandler; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_f2f08` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_f2f08` function call.
 *
 * @struct args_MPI_Status_f2f08_t
 *
 * @note 
 *	int
 *	MPI_Status_f2f08 (
 *			const int * f_status (const int *)
 *			MPI_F08_status * f08_status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Status_f2f08
typedef struct {
	int * f_status;
	struct {
		int val;
	} f_status__ref;
	MPI_F08_status * f08_status;
	struct {
		MPI_F08_status val;
	} f08_status__ref;
	int retval;
} args_MPI_Status_f2f08_t;

#define GET_ARGS_VALUE_MPI_Status_f2f08(activity) { \
	args_MPI_Status_f2f08_t* args = (args_MPI_Status_f2f08_t*) activity->args; \
	args->f_status = (int *) f_status; \
	args->f08_status = (MPI_F08_status *) f08_status; \
};

#define GET_PTRS_VALUE_MPI_Status_f2f08(args) { \
	args_MPI_Status_f2f08_t* pargs = (args_MPI_Status_f2f08_t*) args; \
	if (pargs->f_status != NULL) { \
		pargs->f_status__ref.val = *pargs->f_status; \
	} \
	if (pargs->f08_status != NULL) { \
		pargs->f08_status__ref.val = *pargs->f08_status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Type_c2f` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Type_c2f` function call.
 *
 * @struct args_MPI_Type_c2f_t
 *
 * @note 
 *	int
 *	MPI_Type_c2f (
 *			MPI_Datatype datatype (struct mpi_datatype_t *)
 *	)
 */
#if HAVE_MPI_Type_c2f
typedef struct {
	MPI_Datatype datatype;
	int retval;
} args_MPI_Type_c2f_t;

#define GET_ARGS_VALUE_MPI_Type_c2f(activity) { \
	args_MPI_Type_c2f_t* args = (args_MPI_Type_c2f_t*) activity->args; \
	args->datatype = (MPI_Datatype) datatype; \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Status_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Status_f2c` function call.
 *
 * @struct args_MPI_Status_f2c_t
 *
 * @note 
 *	int
 *	MPI_Status_f2c (
 *			const int * f_status (const int *)
 *			MPI_Status * c_status (struct opaque **)
 *	)
 */
#if HAVE_MPI_Status_f2c
typedef struct {
	int * f_status;
	struct {
		int val;
	} f_status__ref;
	MPI_Status * c_status;
	struct {
		MPI_Status val;
	} c_status__ref;
	int retval;
} args_MPI_Status_f2c_t;

#define GET_ARGS_VALUE_MPI_Status_f2c(activity) { \
	args_MPI_Status_f2c_t* args = (args_MPI_Status_f2c_t*) activity->args; \
	args->f_status = (int *) f_status; \
	args->c_status = (MPI_Status *) c_status; \
};

#define GET_PTRS_VALUE_MPI_Status_f2c(args) { \
	args_MPI_Status_f2c_t* pargs = (args_MPI_Status_f2c_t*) args; \
	if (pargs->f_status != NULL) { \
		pargs->f_status__ref.val = *pargs->f_status; \
	} \
	if (pargs->c_status != NULL) { \
		pargs->c_status__ref.val = *pargs->c_status; \
	} \
};

#endif

/**
 * @brief Structure to hold the arguments for the `MPI_Op_f2c` function.
 *
 * This structure encapsulates the parameters and return value used in the 
 * `MPI_Op_f2c` function call.
 *
 * @struct args_MPI_Op_f2c_t
 *
 * @note 
 *	MPI_Op
 *	MPI_Op_f2c (
 *			int op (int)
 *	)
 */
#if HAVE_MPI_Op_f2c
typedef struct {
	int op;
	MPI_Op retval;
} args_MPI_Op_f2c_t;

#define GET_ARGS_VALUE_MPI_Op_f2c(activity) { \
	args_MPI_Op_f2c_t* args = (args_MPI_Op_f2c_t*) activity->args; \
	args->op = (int) op; \
};

#endif



/**
 * @brief Retrieves pointer-based argument values for MPI API calls.
 *
 * This function extracts pointer-based arguments based on the given MPI API ID.
 *
 * @param[in] id The MPI API function identifier.
 * @param[in,out] args Pointer to the MPI API arguments structure.
 * @param[in] is_enter Boolean flag indicating whether this function is handling an "enter" or "exit" event.
 */
static inline void get_mpi_pointed_args_for(mpi_api_id_t id, void* args, bool is_enter) 
{
    if (!is_enter) {
        switch(id) {
			#if HAVE_MPI_Init
			case MPI_API_ID_MPI_Init : {
				GET_PTRS_VALUE_MPI_Init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Init_thread
			case MPI_API_ID_MPI_Init_thread : {
				GET_PTRS_VALUE_MPI_Init_thread(args);
				return;
			}
			#endif
			#if HAVE_MPI_Initialized
			case MPI_API_ID_MPI_Initialized : {
				GET_PTRS_VALUE_MPI_Initialized(args);
				return;
			}
			#endif
			#if HAVE_MPI_Query_thread
			case MPI_API_ID_MPI_Query_thread : {
				GET_PTRS_VALUE_MPI_Query_thread(args);
				return;
			}
			#endif
			#if HAVE_MPI_Recv
			case MPI_API_ID_MPI_Recv : {
				GET_PTRS_VALUE_MPI_Recv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Sendrecv
			case MPI_API_ID_MPI_Sendrecv : {
				GET_PTRS_VALUE_MPI_Sendrecv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Sendrecv_replace
			case MPI_API_ID_MPI_Sendrecv_replace : {
				GET_PTRS_VALUE_MPI_Sendrecv_replace(args);
				return;
			}
			#endif
			#if HAVE_MPI_Isend
			case MPI_API_ID_MPI_Isend : {
				GET_PTRS_VALUE_MPI_Isend(args);
				return;
			}
			#endif
			#if HAVE_MPI_Irecv
			case MPI_API_ID_MPI_Irecv : {
				GET_PTRS_VALUE_MPI_Irecv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Wait
			case MPI_API_ID_MPI_Wait : {
				GET_PTRS_VALUE_MPI_Wait(args);
				return;
			}
			#endif
			#if HAVE_MPI_Waitall
			case MPI_API_ID_MPI_Waitall : {
				GET_PTRS_VALUE_MPI_Waitall(args);
				return;
			}
			#endif
			#if HAVE_MPI_Waitany
			case MPI_API_ID_MPI_Waitany : {
				GET_PTRS_VALUE_MPI_Waitany(args);
				return;
			}
			#endif
			#if HAVE_MPI_Waitsome
			case MPI_API_ID_MPI_Waitsome : {
				GET_PTRS_VALUE_MPI_Waitsome(args);
				return;
			}
			#endif
			#if HAVE_MPI_Test
			case MPI_API_ID_MPI_Test : {
				GET_PTRS_VALUE_MPI_Test(args);
				return;
			}
			#endif
			#if HAVE_MPI_Testall
			case MPI_API_ID_MPI_Testall : {
				GET_PTRS_VALUE_MPI_Testall(args);
				return;
			}
			#endif
			#if HAVE_MPI_Testany
			case MPI_API_ID_MPI_Testany : {
				GET_PTRS_VALUE_MPI_Testany(args);
				return;
			}
			#endif
			#if HAVE_MPI_Testsome
			case MPI_API_ID_MPI_Testsome : {
				GET_PTRS_VALUE_MPI_Testsome(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cancel
			case MPI_API_ID_MPI_Cancel : {
				GET_PTRS_VALUE_MPI_Cancel(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_contiguous
			case MPI_API_ID_MPI_Type_contiguous : {
				GET_PTRS_VALUE_MPI_Type_contiguous(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_vector
			case MPI_API_ID_MPI_Type_vector : {
				GET_PTRS_VALUE_MPI_Type_vector(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_indexed
			case MPI_API_ID_MPI_Type_indexed : {
				GET_PTRS_VALUE_MPI_Type_indexed(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_indexed_block
			case MPI_API_ID_MPI_Type_create_indexed_block : {
				GET_PTRS_VALUE_MPI_Type_create_indexed_block(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_struct
			case MPI_API_ID_MPI_Type_create_struct : {
				GET_PTRS_VALUE_MPI_Type_create_struct(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_resized
			case MPI_API_ID_MPI_Type_create_resized : {
				GET_PTRS_VALUE_MPI_Type_create_resized(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_commit
			case MPI_API_ID_MPI_Type_commit : {
				GET_PTRS_VALUE_MPI_Type_commit(args);
				return;
			}
			#endif
			#if HAVE_MPI_Get_count
			case MPI_API_ID_MPI_Get_count : {
				GET_PTRS_VALUE_MPI_Get_count(args);
				return;
			}
			#endif
			#if HAVE_MPI_Get_elements
			case MPI_API_ID_MPI_Get_elements : {
				GET_PTRS_VALUE_MPI_Get_elements(args);
				return;
			}
			#endif
			#if HAVE_MPI_Pack
			case MPI_API_ID_MPI_Pack : {
				GET_PTRS_VALUE_MPI_Pack(args);
				return;
			}
			#endif
			#if HAVE_MPI_Unpack
			case MPI_API_ID_MPI_Unpack : {
				GET_PTRS_VALUE_MPI_Unpack(args);
				return;
			}
			#endif
			#if HAVE_MPI_Pack_size
			case MPI_API_ID_MPI_Pack_size : {
				GET_PTRS_VALUE_MPI_Pack_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Gatherv
			case MPI_API_ID_MPI_Gatherv : {
				GET_PTRS_VALUE_MPI_Gatherv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Scatterv
			case MPI_API_ID_MPI_Scatterv : {
				GET_PTRS_VALUE_MPI_Scatterv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Allgatherv
			case MPI_API_ID_MPI_Allgatherv : {
				GET_PTRS_VALUE_MPI_Allgatherv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Alltoallv
			case MPI_API_ID_MPI_Alltoallv : {
				GET_PTRS_VALUE_MPI_Alltoallv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Reduce_scatter
			case MPI_API_ID_MPI_Reduce_scatter : {
				GET_PTRS_VALUE_MPI_Reduce_scatter(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_size
			case MPI_API_ID_MPI_Comm_size : {
				GET_PTRS_VALUE_MPI_Comm_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_rank
			case MPI_API_ID_MPI_Comm_rank : {
				GET_PTRS_VALUE_MPI_Comm_rank(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_group
			case MPI_API_ID_MPI_Comm_group : {
				GET_PTRS_VALUE_MPI_Comm_group(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_dup
			case MPI_API_ID_MPI_Comm_dup : {
				GET_PTRS_VALUE_MPI_Comm_dup(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_create
			case MPI_API_ID_MPI_Comm_create : {
				GET_PTRS_VALUE_MPI_Comm_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_split
			case MPI_API_ID_MPI_Comm_split : {
				GET_PTRS_VALUE_MPI_Comm_split(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_test_inter
			case MPI_API_ID_MPI_Comm_test_inter : {
				GET_PTRS_VALUE_MPI_Comm_test_inter(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_remote_size
			case MPI_API_ID_MPI_Comm_remote_size : {
				GET_PTRS_VALUE_MPI_Comm_remote_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_remote_group
			case MPI_API_ID_MPI_Comm_remote_group : {
				GET_PTRS_VALUE_MPI_Comm_remote_group(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_compare
			case MPI_API_ID_MPI_Comm_compare : {
				GET_PTRS_VALUE_MPI_Comm_compare(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_create_keyval
			case MPI_API_ID_MPI_Comm_create_keyval : {
				GET_PTRS_VALUE_MPI_Comm_create_keyval(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_get_attr
			case MPI_API_ID_MPI_Comm_get_attr : {
				GET_PTRS_VALUE_MPI_Comm_get_attr(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_get_name
			case MPI_API_ID_MPI_Comm_get_name : {
				GET_PTRS_VALUE_MPI_Comm_get_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_set_name
			case MPI_API_ID_MPI_Comm_set_name : {
				GET_PTRS_VALUE_MPI_Comm_set_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_size
			case MPI_API_ID_MPI_Group_size : {
				GET_PTRS_VALUE_MPI_Group_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_rank
			case MPI_API_ID_MPI_Group_rank : {
				GET_PTRS_VALUE_MPI_Group_rank(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_translate_ranks
			case MPI_API_ID_MPI_Group_translate_ranks : {
				GET_PTRS_VALUE_MPI_Group_translate_ranks(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_compare
			case MPI_API_ID_MPI_Group_compare : {
				GET_PTRS_VALUE_MPI_Group_compare(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_union
			case MPI_API_ID_MPI_Group_union : {
				GET_PTRS_VALUE_MPI_Group_union(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_intersection
			case MPI_API_ID_MPI_Group_intersection : {
				GET_PTRS_VALUE_MPI_Group_intersection(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_difference
			case MPI_API_ID_MPI_Group_difference : {
				GET_PTRS_VALUE_MPI_Group_difference(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_incl
			case MPI_API_ID_MPI_Group_incl : {
				GET_PTRS_VALUE_MPI_Group_incl(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_excl
			case MPI_API_ID_MPI_Group_excl : {
				GET_PTRS_VALUE_MPI_Group_excl(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_range_incl
			case MPI_API_ID_MPI_Group_range_incl : {
				GET_PTRS_VALUE_MPI_Group_range_incl(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_range_excl
			case MPI_API_ID_MPI_Group_range_excl : {
				GET_PTRS_VALUE_MPI_Group_range_excl(args);
				return;
			}
			#endif
			#if HAVE_MPI_Op_create
			case MPI_API_ID_MPI_Op_create : {
				GET_PTRS_VALUE_MPI_Op_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Get_address
			case MPI_API_ID_MPI_Get_address : {
				GET_PTRS_VALUE_MPI_Get_address(args);
				return;
			}
			#endif
			#if HAVE_MPI_Get_elements_x
			case MPI_API_ID_MPI_Get_elements_x : {
				GET_PTRS_VALUE_MPI_Get_elements_x(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cart_shift
			case MPI_API_ID_MPI_Cart_shift : {
				GET_PTRS_VALUE_MPI_Cart_shift(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_byte_offset
			case MPI_API_ID_MPI_File_get_byte_offset : {
				GET_PTRS_VALUE_MPI_File_get_byte_offset(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_get_info
			case MPI_API_ID_MPI_Win_get_info : {
				GET_PTRS_VALUE_MPI_Win_get_info(args);
				return;
			}
			#endif
			#if HAVE_MPI_Rput
			case MPI_API_ID_MPI_Rput : {
				GET_PTRS_VALUE_MPI_Rput(args);
				return;
			}
			#endif
			#if HAVE_MPI_Dist_graph_neighbors_count
			case MPI_API_ID_MPI_Dist_graph_neighbors_count : {
				GET_PTRS_VALUE_MPI_Dist_graph_neighbors_count(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ireduce
			case MPI_API_ID_MPI_Ireduce : {
				GET_PTRS_VALUE_MPI_Ireduce(args);
				return;
			}
			#endif
			#if HAVE_MPI_Psend_init
			case MPI_API_ID_MPI_Psend_init : {
				GET_PTRS_VALUE_MPI_Psend_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Reduce_init
			case MPI_API_ID_MPI_Reduce_init : {
				GET_PTRS_VALUE_MPI_Reduce_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Rsend_init
			case MPI_API_ID_MPI_Rsend_init : {
				GET_PTRS_VALUE_MPI_Rsend_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_at_all
			case MPI_API_ID_MPI_File_write_at_all : {
				GET_PTRS_VALUE_MPI_File_write_at_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_ordered_end
			case MPI_API_ID_MPI_File_write_ordered_end : {
				GET_PTRS_VALUE_MPI_File_write_ordered_end(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_shared_query
			case MPI_API_ID_MPI_Win_shared_query : {
				GET_PTRS_VALUE_MPI_Win_shared_query(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_name
			case MPI_API_ID_MPI_Type_get_name : {
				GET_PTRS_VALUE_MPI_Type_get_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_atomicity
			case MPI_API_ID_MPI_File_get_atomicity : {
				GET_PTRS_VALUE_MPI_File_get_atomicity(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_from_session_pset
			case MPI_API_ID_MPI_Group_from_session_pset : {
				GET_PTRS_VALUE_MPI_Group_from_session_pset(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_idup
			case MPI_API_ID_MPI_Comm_idup : {
				GET_PTRS_VALUE_MPI_Comm_idup(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_get_name
			case MPI_API_ID_MPI_Win_get_name : {
				GET_PTRS_VALUE_MPI_Win_get_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_Allgatherv_init
			case MPI_API_ID_MPI_Allgatherv_init : {
				GET_PTRS_VALUE_MPI_Allgatherv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_dup_with_info
			case MPI_API_ID_MPI_Comm_dup_with_info : {
				GET_PTRS_VALUE_MPI_Comm_dup_with_info(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_get_num_psets
			case MPI_API_ID_MPI_Session_get_num_psets : {
				GET_PTRS_VALUE_MPI_Session_get_num_psets(args);
				return;
			}
			#endif
			#if HAVE_MPI_Igather
			case MPI_API_ID_MPI_Igather : {
				GET_PTRS_VALUE_MPI_Igather(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_at
			case MPI_API_ID_MPI_File_read_at : {
				GET_PTRS_VALUE_MPI_File_read_at(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_hvector
			case MPI_API_ID_MPI_Type_create_hvector : {
				GET_PTRS_VALUE_MPI_Type_create_hvector(args);
				return;
			}
			#endif
			#if HAVE_MPI_Grequest_start
			case MPI_API_ID_MPI_Grequest_start : {
				GET_PTRS_VALUE_MPI_Grequest_start(args);
				return;
			}
			#endif
			#if HAVE_MPI_Bsend_init
			case MPI_API_ID_MPI_Bsend_init : {
				GET_PTRS_VALUE_MPI_Bsend_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_set_name
			case MPI_API_ID_MPI_Type_set_name : {
				GET_PTRS_VALUE_MPI_Type_set_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_split_type
			case MPI_API_ID_MPI_Comm_split_type : {
				GET_PTRS_VALUE_MPI_Comm_split_type(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_at_all_end
			case MPI_API_ID_MPI_File_read_at_all_end : {
				GET_PTRS_VALUE_MPI_File_read_at_all_end(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_all
			case MPI_API_ID_MPI_File_write_all : {
				GET_PTRS_VALUE_MPI_File_write_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_Improbe
			case MPI_API_ID_MPI_Improbe : {
				GET_PTRS_VALUE_MPI_Improbe(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_get_info
			case MPI_API_ID_MPI_Comm_get_info : {
				GET_PTRS_VALUE_MPI_Comm_get_info(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_all_end
			case MPI_API_ID_MPI_File_read_all_end : {
				GET_PTRS_VALUE_MPI_File_read_all_end(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_f90_integer
			case MPI_API_ID_MPI_Type_create_f90_integer : {
				GET_PTRS_VALUE_MPI_Type_create_f90_integer(args);
				return;
			}
			#endif
			#if HAVE_MPI_Exscan_init
			case MPI_API_ID_MPI_Exscan_init : {
				GET_PTRS_VALUE_MPI_Exscan_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ibsend
			case MPI_API_ID_MPI_Ibsend : {
				GET_PTRS_VALUE_MPI_Ibsend(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ialltoallw
			case MPI_API_ID_MPI_Ialltoallw : {
				GET_PTRS_VALUE_MPI_Ialltoallw(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_create_from_group
			case MPI_API_ID_MPI_Comm_create_from_group : {
				GET_PTRS_VALUE_MPI_Comm_create_from_group(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_contents
			case MPI_API_ID_MPI_Type_get_contents : {
				GET_PTRS_VALUE_MPI_Type_get_contents(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iwrite_at
			case MPI_API_ID_MPI_File_iwrite_at : {
				GET_PTRS_VALUE_MPI_File_iwrite_at(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_set_elements
			case MPI_API_ID_MPI_Status_set_elements : {
				GET_PTRS_VALUE_MPI_Status_set_elements(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_ordered
			case MPI_API_ID_MPI_File_read_ordered : {
				GET_PTRS_VALUE_MPI_File_read_ordered(args);
				return;
			}
			#endif
			#if HAVE_MPI_Is_thread_main
			case MPI_API_ID_MPI_Is_thread_main : {
				GET_PTRS_VALUE_MPI_Is_thread_main(args);
				return;
			}
			#endif
			#if HAVE_MPI_Allreduce_init
			case MPI_API_ID_MPI_Allreduce_init : {
				GET_PTRS_VALUE_MPI_Allreduce_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_get_valuelen
			case MPI_API_ID_MPI_Info_get_valuelen : {
				GET_PTRS_VALUE_MPI_Info_get_valuelen(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_create_errhandler
			case MPI_API_ID_MPI_Comm_create_errhandler : {
				GET_PTRS_VALUE_MPI_Comm_create_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_get_nthkey
			case MPI_API_ID_MPI_Info_get_nthkey : {
				GET_PTRS_VALUE_MPI_Info_get_nthkey(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ssend_init
			case MPI_API_ID_MPI_Ssend_init : {
				GET_PTRS_VALUE_MPI_Ssend_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cart_create
			case MPI_API_ID_MPI_Cart_create : {
				GET_PTRS_VALUE_MPI_Cart_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Scan_init
			case MPI_API_ID_MPI_Scan_init : {
				GET_PTRS_VALUE_MPI_Scan_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Irsend
			case MPI_API_ID_MPI_Irsend : {
				GET_PTRS_VALUE_MPI_Irsend(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_alltoallv
			case MPI_API_ID_MPI_Neighbor_alltoallv : {
				GET_PTRS_VALUE_MPI_Neighbor_alltoallv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Pready_list
			case MPI_API_ID_MPI_Pready_list : {
				GET_PTRS_VALUE_MPI_Pready_list(args);
				return;
			}
			#endif
			#if HAVE_MPI_Alltoallw_init
			case MPI_API_ID_MPI_Alltoallw_init : {
				GET_PTRS_VALUE_MPI_Alltoallw_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Dist_graph_create_adjacent
			case MPI_API_ID_MPI_Dist_graph_create_adjacent : {
				GET_PTRS_VALUE_MPI_Dist_graph_create_adjacent(args);
				return;
			}
			#endif
			#if HAVE_MPI_Reduce_scatter_init
			case MPI_API_ID_MPI_Reduce_scatter_init : {
				GET_PTRS_VALUE_MPI_Reduce_scatter_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_get_parent
			case MPI_API_ID_MPI_Comm_get_parent : {
				GET_PTRS_VALUE_MPI_Comm_get_parent(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_set
			case MPI_API_ID_MPI_Info_set : {
				GET_PTRS_VALUE_MPI_Info_set(args);
				return;
			}
			#endif
			#if HAVE_MPI_Keyval_create
			case MPI_API_ID_MPI_Keyval_create : {
				GET_PTRS_VALUE_MPI_Keyval_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_connect
			case MPI_API_ID_MPI_Comm_connect : {
				GET_PTRS_VALUE_MPI_Comm_connect(args);
				return;
			}
			#endif
			#if HAVE_MPI_Scatterv_init
			case MPI_API_ID_MPI_Scatterv_init : {
				GET_PTRS_VALUE_MPI_Scatterv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_at_all_end
			case MPI_API_ID_MPI_File_write_at_all_end : {
				GET_PTRS_VALUE_MPI_File_write_at_all_end(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_all_end
			case MPI_API_ID_MPI_File_write_all_end : {
				GET_PTRS_VALUE_MPI_File_write_all_end(args);
				return;
			}
			#endif
			#if HAVE_MPI_Buffer_detach
			case MPI_API_ID_MPI_Buffer_detach : {
				GET_PTRS_VALUE_MPI_Buffer_detach(args);
				return;
			}
			#endif
			#if HAVE_MPI_Startall
			case MPI_API_ID_MPI_Startall : {
				GET_PTRS_VALUE_MPI_Startall(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_ordered_end
			case MPI_API_ID_MPI_File_read_ordered_end : {
				GET_PTRS_VALUE_MPI_File_read_ordered_end(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_at
			case MPI_API_ID_MPI_File_write_at : {
				GET_PTRS_VALUE_MPI_File_write_at(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_get_pset_info
			case MPI_API_ID_MPI_Session_get_pset_info : {
				GET_PTRS_VALUE_MPI_Session_get_pset_info(args);
				return;
			}
			#endif
			#if HAVE_MPI_Topo_test
			case MPI_API_ID_MPI_Topo_test : {
				GET_PTRS_VALUE_MPI_Topo_test(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_disconnect
			case MPI_API_ID_MPI_Comm_disconnect : {
				GET_PTRS_VALUE_MPI_Comm_disconnect(args);
				return;
			}
			#endif
			#if HAVE_MPI_Add_error_class
			case MPI_API_ID_MPI_Add_error_class : {
				GET_PTRS_VALUE_MPI_Add_error_class(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ireduce_scatter
			case MPI_API_ID_MPI_Ireduce_scatter : {
				GET_PTRS_VALUE_MPI_Ireduce_scatter(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cart_map
			case MPI_API_ID_MPI_Cart_map : {
				GET_PTRS_VALUE_MPI_Cart_map(args);
				return;
			}
			#endif
			#if HAVE_MPI_Intercomm_merge
			case MPI_API_ID_MPI_Intercomm_merge : {
				GET_PTRS_VALUE_MPI_Intercomm_merge(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_hindexed
			case MPI_API_ID_MPI_Type_create_hindexed : {
				GET_PTRS_VALUE_MPI_Type_create_hindexed(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_get_nkeys
			case MPI_API_ID_MPI_Info_get_nkeys : {
				GET_PTRS_VALUE_MPI_Info_get_nkeys(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read
			case MPI_API_ID_MPI_File_read : {
				GET_PTRS_VALUE_MPI_File_read(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ineighbor_allgatherv
			case MPI_API_ID_MPI_Ineighbor_allgatherv : {
				GET_PTRS_VALUE_MPI_Ineighbor_allgatherv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_set_elements_x
			case MPI_API_ID_MPI_Status_set_elements_x : {
				GET_PTRS_VALUE_MPI_Status_set_elements_x(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_f90_real
			case MPI_API_ID_MPI_Type_create_f90_real : {
				GET_PTRS_VALUE_MPI_Type_create_f90_real(args);
				return;
			}
			#endif
			#if HAVE_MPI_Probe
			case MPI_API_ID_MPI_Probe : {
				GET_PTRS_VALUE_MPI_Probe(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_close
			case MPI_API_ID_MPI_File_close : {
				GET_PTRS_VALUE_MPI_File_close(args);
				return;
			}
			#endif
			#if HAVE_MPI_Request_get_status
			case MPI_API_ID_MPI_Request_get_status : {
				GET_PTRS_VALUE_MPI_Request_get_status(args);
				return;
			}
			#endif
			#if HAVE_MPI_Rget_accumulate
			case MPI_API_ID_MPI_Rget_accumulate : {
				GET_PTRS_VALUE_MPI_Rget_accumulate(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iread_all
			case MPI_API_ID_MPI_File_iread_all : {
				GET_PTRS_VALUE_MPI_File_iread_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_Isendrecv
			case MPI_API_ID_MPI_Isendrecv : {
				GET_PTRS_VALUE_MPI_Isendrecv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Pack_external
			case MPI_API_ID_MPI_Pack_external : {
				GET_PTRS_VALUE_MPI_Pack_external(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_envelope
			case MPI_API_ID_MPI_Type_get_envelope : {
				GET_PTRS_VALUE_MPI_Type_get_envelope(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_create
			case MPI_API_ID_MPI_Win_create : {
				GET_PTRS_VALUE_MPI_Win_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Isendrecv_replace
			case MPI_API_ID_MPI_Isendrecv_replace : {
				GET_PTRS_VALUE_MPI_Isendrecv_replace(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cartdim_get
			case MPI_API_ID_MPI_Cartdim_get : {
				GET_PTRS_VALUE_MPI_Cartdim_get(args);
				return;
			}
			#endif
			#if HAVE_MPI_Dist_graph_neighbors
			case MPI_API_ID_MPI_Dist_graph_neighbors : {
				GET_PTRS_VALUE_MPI_Dist_graph_neighbors(args);
				return;
			}
			#endif
			#if HAVE_MPI_Pack_external_size
			case MPI_API_ID_MPI_Pack_external_size : {
				GET_PTRS_VALUE_MPI_Pack_external_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_f90_complex
			case MPI_API_ID_MPI_Type_create_f90_complex : {
				GET_PTRS_VALUE_MPI_Type_create_f90_complex(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_alltoallw_init
			case MPI_API_ID_MPI_Neighbor_alltoallw_init : {
				GET_PTRS_VALUE_MPI_Neighbor_alltoallw_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Rget
			case MPI_API_ID_MPI_Rget : {
				GET_PTRS_VALUE_MPI_Rget(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_create_keyval
			case MPI_API_ID_MPI_Win_create_keyval : {
				GET_PTRS_VALUE_MPI_Win_create_keyval(args);
				return;
			}
			#endif
			#if HAVE_MPI_Op_commutative
			case MPI_API_ID_MPI_Op_commutative : {
				GET_PTRS_VALUE_MPI_Op_commutative(args);
				return;
			}
			#endif
			#if HAVE_MPI_Scatter_init
			case MPI_API_ID_MPI_Scatter_init : {
				GET_PTRS_VALUE_MPI_Scatter_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_get_string
			case MPI_API_ID_MPI_Info_get_string : {
				GET_PTRS_VALUE_MPI_Info_get_string(args);
				return;
			}
			#endif
			#if HAVE_MPI_Mrecv
			case MPI_API_ID_MPI_Mrecv : {
				GET_PTRS_VALUE_MPI_Mrecv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Open_port
			case MPI_API_ID_MPI_Open_port : {
				GET_PTRS_VALUE_MPI_Open_port(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cart_get
			case MPI_API_ID_MPI_Cart_get : {
				GET_PTRS_VALUE_MPI_Cart_get(args);
				return;
			}
			#endif
			#if HAVE_MPI_Lookup_name
			case MPI_API_ID_MPI_Lookup_name : {
				GET_PTRS_VALUE_MPI_Lookup_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_extent
			case MPI_API_ID_MPI_Type_get_extent : {
				GET_PTRS_VALUE_MPI_Type_get_extent(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_spawn
			case MPI_API_ID_MPI_Comm_spawn : {
				GET_PTRS_VALUE_MPI_Comm_spawn(args);
				return;
			}
			#endif
			#if HAVE_MPI_Unpublish_name
			case MPI_API_ID_MPI_Unpublish_name : {
				GET_PTRS_VALUE_MPI_Unpublish_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_group
			case MPI_API_ID_MPI_File_get_group : {
				GET_PTRS_VALUE_MPI_File_get_group(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iread_at_all
			case MPI_API_ID_MPI_File_iread_at_all : {
				GET_PTRS_VALUE_MPI_File_iread_at_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_Graphdims_get
			case MPI_API_ID_MPI_Graphdims_get : {
				GET_PTRS_VALUE_MPI_Graphdims_get(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iread_shared
			case MPI_API_ID_MPI_File_iread_shared : {
				GET_PTRS_VALUE_MPI_File_iread_shared(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_idup_with_info
			case MPI_API_ID_MPI_Comm_idup_with_info : {
				GET_PTRS_VALUE_MPI_Comm_idup_with_info(args);
				return;
			}
			#endif
			#if HAVE_MPI_Get_version
			case MPI_API_ID_MPI_Get_version : {
				GET_PTRS_VALUE_MPI_Get_version(args);
				return;
			}
			#endif
			#if HAVE_MPI_Intercomm_create_from_groups
			case MPI_API_ID_MPI_Intercomm_create_from_groups : {
				GET_PTRS_VALUE_MPI_Intercomm_create_from_groups(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_alltoallv_init
			case MPI_API_ID_MPI_Neighbor_alltoallv_init : {
				GET_PTRS_VALUE_MPI_Neighbor_alltoallv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_darray
			case MPI_API_ID_MPI_Type_create_darray : {
				GET_PTRS_VALUE_MPI_Type_create_darray(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_position_shared
			case MPI_API_ID_MPI_File_get_position_shared : {
				GET_PTRS_VALUE_MPI_File_get_position_shared(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_get_group
			case MPI_API_ID_MPI_Win_get_group : {
				GET_PTRS_VALUE_MPI_Win_get_group(args);
				return;
			}
			#endif
			#if HAVE_MPI_Error_class
			case MPI_API_ID_MPI_Error_class : {
				GET_PTRS_VALUE_MPI_Error_class(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_get_attr
			case MPI_API_ID_MPI_Win_get_attr : {
				GET_PTRS_VALUE_MPI_Win_get_attr(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ireduce_scatter_block
			case MPI_API_ID_MPI_Ireduce_scatter_block : {
				GET_PTRS_VALUE_MPI_Ireduce_scatter_block(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_set_cancelled
			case MPI_API_ID_MPI_Status_set_cancelled : {
				GET_PTRS_VALUE_MPI_Status_set_cancelled(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_test
			case MPI_API_ID_MPI_Win_test : {
				GET_PTRS_VALUE_MPI_Win_test(args);
				return;
			}
			#endif
			#if HAVE_MPI_Test_cancelled
			case MPI_API_ID_MPI_Test_cancelled : {
				GET_PTRS_VALUE_MPI_Test_cancelled(args);
				return;
			}
			#endif
			#if HAVE_MPI_Error_string
			case MPI_API_ID_MPI_Error_string : {
				GET_PTRS_VALUE_MPI_Error_string(args);
				return;
			}
			#endif
			#if HAVE_MPI_Graph_neighbors_count
			case MPI_API_ID_MPI_Graph_neighbors_count : {
				GET_PTRS_VALUE_MPI_Graph_neighbors_count(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_create_errhandler
			case MPI_API_ID_MPI_Session_create_errhandler : {
				GET_PTRS_VALUE_MPI_Session_create_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iscatter
			case MPI_API_ID_MPI_Iscatter : {
				GET_PTRS_VALUE_MPI_Iscatter(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_all
			case MPI_API_ID_MPI_File_read_all : {
				GET_PTRS_VALUE_MPI_File_read_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_errhandler
			case MPI_API_ID_MPI_File_get_errhandler : {
				GET_PTRS_VALUE_MPI_File_get_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_finalize
			case MPI_API_ID_MPI_Session_finalize : {
				GET_PTRS_VALUE_MPI_Session_finalize(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iwrite_all
			case MPI_API_ID_MPI_File_iwrite_all : {
				GET_PTRS_VALUE_MPI_File_iwrite_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_Alltoallv_init
			case MPI_API_ID_MPI_Alltoallv_init : {
				GET_PTRS_VALUE_MPI_Alltoallv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_position
			case MPI_API_ID_MPI_File_get_position : {
				GET_PTRS_VALUE_MPI_File_get_position(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_shared
			case MPI_API_ID_MPI_File_write_shared : {
				GET_PTRS_VALUE_MPI_File_write_shared(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_create_dynamic
			case MPI_API_ID_MPI_Win_create_dynamic : {
				GET_PTRS_VALUE_MPI_Win_create_dynamic(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_alltoallw
			case MPI_API_ID_MPI_Neighbor_alltoallw : {
				GET_PTRS_VALUE_MPI_Neighbor_alltoallw(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iexscan
			case MPI_API_ID_MPI_Iexscan : {
				GET_PTRS_VALUE_MPI_Iexscan(args);
				return;
			}
			#endif
			#if HAVE_MPI_Graph_map
			case MPI_API_ID_MPI_Graph_map : {
				GET_PTRS_VALUE_MPI_Graph_map(args);
				return;
			}
			#endif
			#if HAVE_MPI_Recv_init
			case MPI_API_ID_MPI_Recv_init : {
				GET_PTRS_VALUE_MPI_Recv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_subarray
			case MPI_API_ID_MPI_Type_create_subarray : {
				GET_PTRS_VALUE_MPI_Type_create_subarray(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_create_group
			case MPI_API_ID_MPI_Comm_create_group : {
				GET_PTRS_VALUE_MPI_Comm_create_group(args);
				return;
			}
			#endif
			#if HAVE_MPI_Allgather_init
			case MPI_API_ID_MPI_Allgather_init : {
				GET_PTRS_VALUE_MPI_Allgather_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Reduce_scatter_block_init
			case MPI_API_ID_MPI_Reduce_scatter_block_init : {
				GET_PTRS_VALUE_MPI_Reduce_scatter_block_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_match_size
			case MPI_API_ID_MPI_Type_match_size : {
				GET_PTRS_VALUE_MPI_Type_match_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_true_extent
			case MPI_API_ID_MPI_Type_get_true_extent : {
				GET_PTRS_VALUE_MPI_Type_get_true_extent(args);
				return;
			}
			#endif
			#if HAVE_MPI_Alltoall_init
			case MPI_API_ID_MPI_Alltoall_init : {
				GET_PTRS_VALUE_MPI_Alltoall_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Send_init
			case MPI_API_ID_MPI_Send_init : {
				GET_PTRS_VALUE_MPI_Send_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_allgather_init
			case MPI_API_ID_MPI_Neighbor_allgather_init : {
				GET_PTRS_VALUE_MPI_Neighbor_allgather_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ibcast
			case MPI_API_ID_MPI_Ibcast : {
				GET_PTRS_VALUE_MPI_Ibcast(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iread
			case MPI_API_ID_MPI_File_iread : {
				GET_PTRS_VALUE_MPI_File_iread(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_alltoall_init
			case MPI_API_ID_MPI_Neighbor_alltoall_init : {
				GET_PTRS_VALUE_MPI_Neighbor_alltoall_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cart_rank
			case MPI_API_ID_MPI_Cart_rank : {
				GET_PTRS_VALUE_MPI_Cart_rank(args);
				return;
			}
			#endif
			#if HAVE_MPI_Publish_name
			case MPI_API_ID_MPI_Publish_name : {
				GET_PTRS_VALUE_MPI_Publish_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write
			case MPI_API_ID_MPI_File_write : {
				GET_PTRS_VALUE_MPI_File_write(args);
				return;
			}
			#endif
			#if HAVE_MPI_Register_datarep
			case MPI_API_ID_MPI_Register_datarep : {
				GET_PTRS_VALUE_MPI_Register_datarep(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ineighbor_alltoall
			case MPI_API_ID_MPI_Ineighbor_alltoall : {
				GET_PTRS_VALUE_MPI_Ineighbor_alltoall(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iallgatherv
			case MPI_API_ID_MPI_Iallgatherv : {
				GET_PTRS_VALUE_MPI_Iallgatherv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_allgatherv_init
			case MPI_API_ID_MPI_Neighbor_allgatherv_init : {
				GET_PTRS_VALUE_MPI_Neighbor_allgatherv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iprobe
			case MPI_API_ID_MPI_Iprobe : {
				GET_PTRS_VALUE_MPI_Iprobe(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_true_extent_x
			case MPI_API_ID_MPI_Type_get_true_extent_x : {
				GET_PTRS_VALUE_MPI_Type_get_true_extent_x(args);
				return;
			}
			#endif
			#if HAVE_MPI_Unpack_external
			case MPI_API_ID_MPI_Unpack_external : {
				GET_PTRS_VALUE_MPI_Unpack_external(args);
				return;
			}
			#endif
			#if HAVE_MPI_Mprobe
			case MPI_API_ID_MPI_Mprobe : {
				GET_PTRS_VALUE_MPI_Mprobe(args);
				return;
			}
			#endif
			#if HAVE_MPI_Add_error_code
			case MPI_API_ID_MPI_Add_error_code : {
				GET_PTRS_VALUE_MPI_Add_error_code(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_at_all
			case MPI_API_ID_MPI_File_read_at_all : {
				GET_PTRS_VALUE_MPI_File_read_at_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iscatterv
			case MPI_API_ID_MPI_Iscatterv : {
				GET_PTRS_VALUE_MPI_Iscatterv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iallreduce
			case MPI_API_ID_MPI_Iallreduce : {
				GET_PTRS_VALUE_MPI_Iallreduce(args);
				return;
			}
			#endif
			#if HAVE_MPI_Get_processor_name
			case MPI_API_ID_MPI_Get_processor_name : {
				GET_PTRS_VALUE_MPI_Get_processor_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_Start
			case MPI_API_ID_MPI_Start : {
				GET_PTRS_VALUE_MPI_Start(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_type_extent
			case MPI_API_ID_MPI_File_get_type_extent : {
				GET_PTRS_VALUE_MPI_File_get_type_extent(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_read_shared
			case MPI_API_ID_MPI_File_read_shared : {
				GET_PTRS_VALUE_MPI_File_read_shared(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_open
			case MPI_API_ID_MPI_File_open : {
				GET_PTRS_VALUE_MPI_File_open(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_amode
			case MPI_API_ID_MPI_File_get_amode : {
				GET_PTRS_VALUE_MPI_File_get_amode(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_hindexed_block
			case MPI_API_ID_MPI_Type_create_hindexed_block : {
				GET_PTRS_VALUE_MPI_Type_create_hindexed_block(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cart_coords
			case MPI_API_ID_MPI_Cart_coords : {
				GET_PTRS_VALUE_MPI_Cart_coords(args);
				return;
			}
			#endif
			#if HAVE_MPI_Issend
			case MPI_API_ID_MPI_Issend : {
				GET_PTRS_VALUE_MPI_Issend(args);
				return;
			}
			#endif
			#if HAVE_MPI_Graph_get
			case MPI_API_ID_MPI_Graph_get : {
				GET_PTRS_VALUE_MPI_Graph_get(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ineighbor_alltoallw
			case MPI_API_ID_MPI_Ineighbor_alltoallw : {
				GET_PTRS_VALUE_MPI_Ineighbor_alltoallw(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iread_at
			case MPI_API_ID_MPI_File_iread_at : {
				GET_PTRS_VALUE_MPI_File_iread_at(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_get_info
			case MPI_API_ID_MPI_Session_get_info : {
				GET_PTRS_VALUE_MPI_Session_get_info(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_get_nth_pset
			case MPI_API_ID_MPI_Session_get_nth_pset : {
				GET_PTRS_VALUE_MPI_Session_get_nth_pset(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_create_keyval
			case MPI_API_ID_MPI_Type_create_keyval : {
				GET_PTRS_VALUE_MPI_Type_create_keyval(args);
				return;
			}
			#endif
			#if HAVE_MPI_Attr_get
			case MPI_API_ID_MPI_Attr_get : {
				GET_PTRS_VALUE_MPI_Attr_get(args);
				return;
			}
			#endif
			#if HAVE_MPI_Add_error_string
			case MPI_API_ID_MPI_Add_error_string : {
				GET_PTRS_VALUE_MPI_Add_error_string(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ineighbor_alltoallv
			case MPI_API_ID_MPI_Ineighbor_alltoallv : {
				GET_PTRS_VALUE_MPI_Ineighbor_alltoallv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Imrecv
			case MPI_API_ID_MPI_Imrecv : {
				GET_PTRS_VALUE_MPI_Imrecv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Alltoallw
			case MPI_API_ID_MPI_Alltoallw : {
				GET_PTRS_VALUE_MPI_Alltoallw(args);
				return;
			}
			#endif
			#if HAVE_MPI_Bcast_init
			case MPI_API_ID_MPI_Bcast_init : {
				GET_PTRS_VALUE_MPI_Bcast_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ibarrier
			case MPI_API_ID_MPI_Ibarrier : {
				GET_PTRS_VALUE_MPI_Ibarrier(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iwrite_at_all
			case MPI_API_ID_MPI_File_iwrite_at_all : {
				GET_PTRS_VALUE_MPI_File_iwrite_at_all(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_size
			case MPI_API_ID_MPI_File_get_size : {
				GET_PTRS_VALUE_MPI_File_get_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Barrier_init
			case MPI_API_ID_MPI_Barrier_init : {
				GET_PTRS_VALUE_MPI_Barrier_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_view
			case MPI_API_ID_MPI_File_get_view : {
				GET_PTRS_VALUE_MPI_File_get_view(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_allocate_shared
			case MPI_API_ID_MPI_Win_allocate_shared : {
				GET_PTRS_VALUE_MPI_Win_allocate_shared(args);
				return;
			}
			#endif
			#if HAVE_MPI_Close_port
			case MPI_API_ID_MPI_Close_port : {
				GET_PTRS_VALUE_MPI_Close_port(args);
				return;
			}
			#endif
			#if HAVE_MPI_Finalized
			case MPI_API_ID_MPI_Finalized : {
				GET_PTRS_VALUE_MPI_Finalized(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_dup
			case MPI_API_ID_MPI_Info_dup : {
				GET_PTRS_VALUE_MPI_Info_dup(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_get
			case MPI_API_ID_MPI_Info_get : {
				GET_PTRS_VALUE_MPI_Info_get(args);
				return;
			}
			#endif
			#if HAVE_MPI_Get_library_version
			case MPI_API_ID_MPI_Get_library_version : {
				GET_PTRS_VALUE_MPI_Get_library_version(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_create
			case MPI_API_ID_MPI_Info_create : {
				GET_PTRS_VALUE_MPI_Info_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iallgather
			case MPI_API_ID_MPI_Iallgather : {
				GET_PTRS_VALUE_MPI_Iallgather(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_spawn_multiple
			case MPI_API_ID_MPI_Comm_spawn_multiple : {
				GET_PTRS_VALUE_MPI_Comm_spawn_multiple(args);
				return;
			}
			#endif
			#if HAVE_MPI_Precv_init
			case MPI_API_ID_MPI_Precv_init : {
				GET_PTRS_VALUE_MPI_Precv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_set_view
			case MPI_API_ID_MPI_File_set_view : {
				GET_PTRS_VALUE_MPI_File_set_view(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_size
			case MPI_API_ID_MPI_Type_size : {
				GET_PTRS_VALUE_MPI_Type_size(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_attr
			case MPI_API_ID_MPI_Type_get_attr : {
				GET_PTRS_VALUE_MPI_Type_get_attr(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_write_ordered
			case MPI_API_ID_MPI_File_write_ordered : {
				GET_PTRS_VALUE_MPI_File_write_ordered(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_get_info
			case MPI_API_ID_MPI_File_get_info : {
				GET_PTRS_VALUE_MPI_File_get_info(args);
				return;
			}
			#endif
			#if HAVE_MPI_Graph_neighbors
			case MPI_API_ID_MPI_Graph_neighbors : {
				GET_PTRS_VALUE_MPI_Graph_neighbors(args);
				return;
			}
			#endif
			#if HAVE_MPI_Igatherv
			case MPI_API_ID_MPI_Igatherv : {
				GET_PTRS_VALUE_MPI_Igatherv(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_delete
			case MPI_API_ID_MPI_Info_delete : {
				GET_PTRS_VALUE_MPI_Info_delete(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_get_errhandler
			case MPI_API_ID_MPI_Comm_get_errhandler : {
				GET_PTRS_VALUE_MPI_Comm_get_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_init
			case MPI_API_ID_MPI_Session_init : {
				GET_PTRS_VALUE_MPI_Session_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Intercomm_create
			case MPI_API_ID_MPI_Intercomm_create : {
				GET_PTRS_VALUE_MPI_Intercomm_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ialltoallv
			case MPI_API_ID_MPI_Ialltoallv : {
				GET_PTRS_VALUE_MPI_Ialltoallv(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_delete
			case MPI_API_ID_MPI_File_delete : {
				GET_PTRS_VALUE_MPI_File_delete(args);
				return;
			}
			#endif
			#if HAVE_MPI_Dims_create
			case MPI_API_ID_MPI_Dims_create : {
				GET_PTRS_VALUE_MPI_Dims_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Cart_sub
			case MPI_API_ID_MPI_Cart_sub : {
				GET_PTRS_VALUE_MPI_Cart_sub(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_allocate
			case MPI_API_ID_MPI_Win_allocate : {
				GET_PTRS_VALUE_MPI_Win_allocate(args);
				return;
			}
			#endif
			#if HAVE_MPI_Session_get_errhandler
			case MPI_API_ID_MPI_Session_get_errhandler : {
				GET_PTRS_VALUE_MPI_Session_get_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Parrived
			case MPI_API_ID_MPI_Parrived : {
				GET_PTRS_VALUE_MPI_Parrived(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_create_env
			case MPI_API_ID_MPI_Info_create_env : {
				GET_PTRS_VALUE_MPI_Info_create_env(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_create_errhandler
			case MPI_API_ID_MPI_File_create_errhandler : {
				GET_PTRS_VALUE_MPI_File_create_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ialltoall
			case MPI_API_ID_MPI_Ialltoall : {
				GET_PTRS_VALUE_MPI_Ialltoall(args);
				return;
			}
			#endif
			#if HAVE_MPI_Raccumulate
			case MPI_API_ID_MPI_Raccumulate : {
				GET_PTRS_VALUE_MPI_Raccumulate(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_size_x
			case MPI_API_ID_MPI_Type_size_x : {
				GET_PTRS_VALUE_MPI_Type_size_x(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_get_extent_x
			case MPI_API_ID_MPI_Type_get_extent_x : {
				GET_PTRS_VALUE_MPI_Type_get_extent_x(args);
				return;
			}
			#endif
			#if HAVE_MPI_Dist_graph_create
			case MPI_API_ID_MPI_Dist_graph_create : {
				GET_PTRS_VALUE_MPI_Dist_graph_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_join
			case MPI_API_ID_MPI_Comm_join : {
				GET_PTRS_VALUE_MPI_Comm_join(args);
				return;
			}
			#endif
			#if HAVE_MPI_Gatherv_init
			case MPI_API_ID_MPI_Gatherv_init : {
				GET_PTRS_VALUE_MPI_Gatherv_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_accept
			case MPI_API_ID_MPI_Comm_accept : {
				GET_PTRS_VALUE_MPI_Comm_accept(args);
				return;
			}
			#endif
			#if HAVE_MPI_Ineighbor_allgather
			case MPI_API_ID_MPI_Ineighbor_allgather : {
				GET_PTRS_VALUE_MPI_Ineighbor_allgather(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_dup
			case MPI_API_ID_MPI_Type_dup : {
				GET_PTRS_VALUE_MPI_Type_dup(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iwrite_shared
			case MPI_API_ID_MPI_File_iwrite_shared : {
				GET_PTRS_VALUE_MPI_File_iwrite_shared(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_get_errhandler
			case MPI_API_ID_MPI_Win_get_errhandler : {
				GET_PTRS_VALUE_MPI_Win_get_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Iscan
			case MPI_API_ID_MPI_Iscan : {
				GET_PTRS_VALUE_MPI_Iscan(args);
				return;
			}
			#endif
			#if HAVE_MPI_Graph_create
			case MPI_API_ID_MPI_Graph_create : {
				GET_PTRS_VALUE_MPI_Graph_create(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_set_name
			case MPI_API_ID_MPI_Win_set_name : {
				GET_PTRS_VALUE_MPI_Win_set_name(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_create_errhandler
			case MPI_API_ID_MPI_Win_create_errhandler : {
				GET_PTRS_VALUE_MPI_Win_create_errhandler(args);
				return;
			}
			#endif
			#if HAVE_MPI_Gather_init
			case MPI_API_ID_MPI_Gather_init : {
				GET_PTRS_VALUE_MPI_Gather_init(args);
				return;
			}
			#endif
			#if HAVE_MPI_Neighbor_allgatherv
			case MPI_API_ID_MPI_Neighbor_allgatherv : {
				GET_PTRS_VALUE_MPI_Neighbor_allgatherv(args);
				return;
			}
			#endif
			#if HAVE_MPI_File_iwrite
			case MPI_API_ID_MPI_File_iwrite : {
				GET_PTRS_VALUE_MPI_File_iwrite(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_f082f
			case MPI_API_ID_MPI_Status_f082f : {
				GET_PTRS_VALUE_MPI_Status_f082f(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_c2f08
			case MPI_API_ID_MPI_Status_c2f08 : {
				GET_PTRS_VALUE_MPI_Status_c2f08(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_c2f
			case MPI_API_ID_MPI_Status_c2f : {
				GET_PTRS_VALUE_MPI_Status_c2f(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_f082c
			case MPI_API_ID_MPI_Status_f082c : {
				GET_PTRS_VALUE_MPI_Status_f082c(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_f2f08
			case MPI_API_ID_MPI_Status_f2f08 : {
				GET_PTRS_VALUE_MPI_Status_f2f08(args);
				return;
			}
			#endif
			#if HAVE_MPI_Status_f2c
			case MPI_API_ID_MPI_Status_f2c : {
				GET_PTRS_VALUE_MPI_Status_f2c(args);
				return;
			}
			#endif
            default : break;
        }
    } else {
        switch(id) {
			#if HAVE_MPI_Request_free
			case MPI_API_ID_MPI_Request_free : {
				GET_PTRS_VALUE_MPI_Request_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_free
			case MPI_API_ID_MPI_Type_free : {
				GET_PTRS_VALUE_MPI_Type_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_free
			case MPI_API_ID_MPI_Comm_free : {
				GET_PTRS_VALUE_MPI_Comm_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Group_free
			case MPI_API_ID_MPI_Group_free : {
				GET_PTRS_VALUE_MPI_Group_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Op_free
			case MPI_API_ID_MPI_Op_free : {
				GET_PTRS_VALUE_MPI_Op_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Errhandler_free
			case MPI_API_ID_MPI_Errhandler_free : {
				GET_PTRS_VALUE_MPI_Errhandler_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Info_free
			case MPI_API_ID_MPI_Info_free : {
				GET_PTRS_VALUE_MPI_Info_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Keyval_free
			case MPI_API_ID_MPI_Keyval_free : {
				GET_PTRS_VALUE_MPI_Keyval_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_free
			case MPI_API_ID_MPI_Win_free : {
				GET_PTRS_VALUE_MPI_Win_free(args);
				return;
			}
			#endif
			#if HAVE_MPI_Comm_free_keyval
			case MPI_API_ID_MPI_Comm_free_keyval : {
				GET_PTRS_VALUE_MPI_Comm_free_keyval(args);
				return;
			}
			#endif
			#if HAVE_MPI_Type_free_keyval
			case MPI_API_ID_MPI_Type_free_keyval : {
				GET_PTRS_VALUE_MPI_Type_free_keyval(args);
				return;
			}
			#endif
			#if HAVE_MPI_Win_free_keyval
			case MPI_API_ID_MPI_Win_free_keyval : {
				GET_PTRS_VALUE_MPI_Win_free_keyval(args);
				return;
			}
			#endif
            default : break;
        }
    }
}
#endif // MPI_API_HELPER_H