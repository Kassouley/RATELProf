/**
 * @file ratelprof.h
 * @brief Header file for the RATELProf profiling tool.
 *
 * RATELProf is a profiling tool designed to track API calls within 
 * different runtime domains.
 * This file provides type definitions, structures, and function 
 * declarations necessary for integrating and managing profiling capabilities.
 *
 * ## Features:
 * - Supports multiple profiling domains.
 * - Tracks function execution times, thread/process IDs, and correlation IDs.
 * - Provides API for enabling/disabling profiling domains.
 * - Allows setting callbacks for API call entry/exit.
 * - Manages lifecycle operations such as initialization and cleanup.
 * - ...
 * 
 * @note THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 * 
 */

#ifndef RATELPROF_H
#define RATELPROF_H

#include "utils/utils.h"
#include "utils/env.h"
#include "utils/logger.h"
#include "utils/demangle.h"
#include "utils/macro.h"

#include "ratelprof/ratelprof_id_system.h"
#include "ratelprof/ratelprof_time.h"
#include "ratelprof/ratelprof_lifecycle.h"
#include "ratelprof/ratelprof_source_location.h"
#include "ratelprof/ratelprof_status.h"

#define RATELPROF_PUBLIC_API __attribute__((weak))

#include "domains/hsa_api_helper.h"
#include "domains/omp_tgt_rtl_api_helper.h"
#include "domains/omp_routine_api_helper.h"
#include "domains/hip_api_helper.h"
#include "domains/mpi_api_helper.h"

/**
 * @def RATELPROF_DOMAIN_*_NAME
 * @brief Domain name macro.
 * 
 * Define the name domain.
 */
#define RATELPROF_DOMAIN_HSA_NAME "RATELPROF_DOMAIN_HSA"
#define RATELPROF_DOMAIN_OMP_TGT_RTL_NAME "RATELPROF_DOMAIN_OMP_TGT_RTL"
#define RATELPROF_DOMAIN_OMP_ROUTINE_NAME "RATELPROF_DOMAIN_OMP_ROUTINE"
#define RATELPROF_DOMAIN_HIP_NAME "RATELPROF_DOMAIN_HIP"
#define RATELPROF_DOMAIN_MPI_NAME "RATELPROF_DOMAIN_MPI"


/**
 * @def RATELPROF_DOMAIN_*_DESC
 * @brief Domain name macro.
 * 
 * Define a short description for a domain.
 */
#define RATELPROF_DOMAIN_HSA_DESC "HSA is an AMD low-level library that operates behind the scenes of HIP and OpenMP, enabling communication between CPUs and GPUs for parallel processing. This domain will be only useful for expert or debugging."
#define RATELPROF_DOMAIN_OMP_TGT_RTL_DESC "Refers to the target runtime library in the OpenMP programming model, working behind the scenes to execute '#pragma omp target' directives by managing data transfers and kernel execution on GPUs."
#define RATELPROF_DOMAIN_OMP_ROUTINE_DESC "OpenMP Target is a runtime library that provides routines for managing data movement, memory mapping, etc."
#define RATELPROF_DOMAIN_HIP_DESC "HIP is a programming framework used to launch GPU operations such as kernel dispatch or memory transfer. This domain is useful for anyone looking to understand and optimize the interactions between the CPU and GPU in programming."
#define RATELPROF_DOMAIN_MPI_DESC "MPI is a standardized library for parallel programming that enables processes to communicate by passing messages, supporting distributed-memory architectures."


/**
 * @typedef ratelprof_api_id_t
 * @brief Defines a type for API identifiers.
 * 
 * This type is used to represent the unique identifier for an API within a domain. 
 * It is typically an alias for `size_t`, and it is used in the context of tracking 
 * and profiling API calls.
 */
typedef size_t ratelprof_api_id_t;


/**
 * @enum ratelprof_domain_e
 * @typedef ratelprof_domain_t
 * @brief Enum to represent different profiling domains.
 * 
 * This enum defines the different domains in the profiling system. Each domain 
 * represents a specific API or runtime environment that can be profiled.
 */
typedef enum ratelprof_domain_e{
	RATELPROF_DOMAIN_HSA, /**< Domain hsa. */
	RATELPROF_DOMAIN_OMP_TGT_RTL, /**< Domain omp_tgt_rtl. */
	RATELPROF_DOMAIN_OMP_ROUTINE, /**< Domain omp_routine. */
	RATELPROF_DOMAIN_HIP, /**< Domain hip. */
	RATELPROF_DOMAIN_MPI, /**< Domain mpi. */
    RATELPROF_NB_DOMAIN /**< Total number of domains (used for bounds checking). */
} ratelprof_domain_t;


/**
 * @struct ratelprof_api_activity_s 
 * @typedef ratelprof_api_activity_t 
 * @brief Structure to represent an API activity within the profiling system.
 * 
 * This structure holds information about an API activity during profiling,
 * such as the domain, phase, function ID, and timing details, along with
 * domain-specific arguments that vary based on the profiling domain.
 */
typedef struct ratelprof_api_activity_s  {
    /**
     * @brief The profiling domain associated with the API activity.
     * 
     * This specifies the domain under which the API activity falls.
     */
	ratelprof_domain_t domain;

    /**
     * @brief The phase of the API activity (e.g., constructor or main).
     * 
     * Indicates the phase within the profiling lifecycle.
     */
    ratelprof_phase_t phase;

    /**
     * @brief The unique identifier of the function being profiled.
     * 
     * This ID represents the specific function within the domain that is being called.
     */
	ratelprof_api_id_t funid;

    /**
     * @brief Unique activity ID.
     * 
     * This ID uniquely identifies a particular instance of an API call or activity.
     */
    uint64_t id;

    /**
     * @brief Correlation ID to track related activities.
     * 
     * This correlation ID represents the ID of the parent activity.
     */
    uint64_t corr_id;

    /**
     * @brief Process ID that triggered the activity.
     * 
     * This ID represents the process that initiated the API call.
     */
	uint64_t pid;

    /**
     * @brief Thread ID that triggered the activity.
     * 
     * This ID represents the thread that initiated the API call.
     */
	uint64_t tid;

    /**
     * @brief Start time of the API activity.
     * 
     * The timestamp when the API activity began.
     */
    ratelprof_timespec_t start_time;

    /**
     * @brief Stop time of the API activity.
     * 
     * The timestamp when the API activity ended.
     */
    ratelprof_timespec_t stop_time;

    /**
     * @brief Return address of the API activity.
     * 
     * The return address of the intercepted function.
     */
    void* return_address;

    /**
     * @brief Union of domain-specific API arguments.
     * 
     * The structure used to hold arguments specific to the profiling domain.
     * Each domain has its own argument structure.
     */
    union {
		hsa_api_args_t hsa_args;  /**< Args for HSA domain. */
		omp_tgt_rtl_api_args_t omp_tgt_rtl_args;  /**< Args for OMP_TGT_RTL domain. */
		omp_routine_api_args_t omp_routine_args;  /**< Args for OMP_ROUTINE domain. */
		hip_api_args_t hip_args;  /**< Args for HIP domain. */
		mpi_api_args_t mpi_args;  /**< Args for MPI domain. */
	};
} ratelprof_api_activity_t;


#include "ratelprof/ratelprof_api_table.h"
#include "ratelprof/ratelprof_callback.h"


/**
 * @extern hsa_api_table
 * @brief The API table for HSA domain.
 * 
 * This external variable hold the API table that contains information
 * about HSA functions.
 * It is used to manage and track the tracing of domain functions.
 */        
extern ratelprof_api_table_t hsa_api_table;

/**
 * @extern omp_tgt_rtl_api_table
 * @brief The API table for OMP_TGT_RTL domain.
 * 
 * This external variable hold the API table that contains information
 * about OMP_TGT_RTL functions.
 * It is used to manage and track the tracing of domain functions.
 */        
extern ratelprof_api_table_t omp_tgt_rtl_api_table;

/**
 * @extern omp_routine_api_table
 * @brief The API table for OMP_ROUTINE domain.
 * 
 * This external variable hold the API table that contains information
 * about OMP_ROUTINE functions.
 * It is used to manage and track the tracing of domain functions.
 */        
extern ratelprof_api_table_t omp_routine_api_table;

/**
 * @extern hip_api_table
 * @brief The API table for HIP domain.
 * 
 * This external variable hold the API table that contains information
 * about HIP functions.
 * It is used to manage and track the tracing of domain functions.
 */        
extern ratelprof_api_table_t hip_api_table;

/**
 * @extern mpi_api_table
 * @brief The API table for MPI domain.
 * 
 * This external variable hold the API table that contains information
 * about MPI functions.
 * It is used to manage and track the tracing of domain functions.
 */        
extern ratelprof_api_table_t mpi_api_table;



/**
 * @brief Retrieves the name of a given domain.
 *
 * This function takes a `ratelprof_domain_t` enum value and returns the corresponding string 
 * representation of the domain.
 *
 * @param domain The domain for which the name is to be retrieved.
 * 
 * @return A pointer to a string containing the domain name. If the domain is unknown, 
 *         "Unknown domain" is returned.
 */
const char* ratelprof_get_domain_name(ratelprof_domain_t domain);


/**
 * @brief Retrieves a description of a given domain.
 *
 * This function takes a `ratelprof_domain_t` enum value and returns the corresponding description 
 * of the domain. The description provides further information about the domain and is useful for 
 * logging and debugging purposes, especially when identifying the behavior of different domains.
 *
 * @param domain The domain for which the description is to be retrieved.
 * 
 * @return A pointer to a string containing the domain description. If the domain is unknown, 
 *         "Unknown domain" is returned.
 */
const char* ratelprof_get_domain_desc(ratelprof_domain_t domain);


/**
 * @brief Retrieves the function name associated with a given domain and function ID.
 *
 * This function takes a domain and a function ID, then retrieves the corresponding 
 * function name for that id and domain. The function is designed to handle multiple domains, and 
 * it delegates the retrieval of the function name to domain-specific helper functions.
 *
 * @param domain The domain for which the function name is to be retrieved.
 * @param funid The function ID within the specified domain.
 *
 * @return A pointer to a string containing the function name associated with the given 
 *         domain and function ID. If the domain is unknown, NULL is returned.
 */
const char* ratelprof_get_funame_by_id(ratelprof_domain_t domain, ratelprof_api_id_t funid);


/**
 * @brief Retrieves the function ID associated with a given domain and function name.
 *
 * This function takes a domain and a function name, then retrieves the corresponding
 * function ID for that function. The function is designed to handle multiple domains, and
 * it delegates the retrieval of the function ID to domain-specific helper functions.
 *
 * @param domain The domain for which the function ID is to be retrieved.
 * @param funame The function name within the specified domain.
 *
 * @return The function ID associated with the given domain and function name. If the domain 
 *         or function name is not recognized, -1 is returned to indicate an error.
 */
ratelprof_api_id_t ratelprof_get_funid_by_name(ratelprof_domain_t domain, const char* funame);


/**
 * @brief Retrieves the function address associated with a given domain and function ID.
 *
 * This function takes a domain and a function ID, then retrieves the corresponding
 * function address for that function. The function is designed to handle multiple domains, and
 * it delegates the retrieval of the function address to domain-specific helper functions.
 *
 * @param domain The domain for which the function address is to be retrieved.
 * @param funid The function ID within the specified domain.
 *
 * @return The function address associated with the given domain and function ID. If the domain 
 *         or function ID is not recognized, NULL is returned to indicate an error.
 */
void* ratelprof_get_funaddr_by_id(ratelprof_domain_t domain, ratelprof_api_id_t funid);


/**
 * @brief Enables the specified domain for profiling.
 *
 * This function activates a domain for profiling by enabling the corresponding 
 * API table. Depending on the specified domain, it calls the `ratelprof_enable_api_table` 
 * function with the appropriate API table and a corresponding string identifier.
 *
 * @param domain The domain to be enabled. 

 * @return RATELPROF_STATUS_SUCCESS if the domain is successfully enabled.
 * @return RATELPROF_STATUS_UNKNOWN_DOMAIN if the provided domain is not recognized.
 * @return RATELPROF_STATUS_INVALID_PTR if the API table for the domain is NULL.
 * @return RATELPROF_STATUS_API_TABLE_NOT_INIT if the API table for the domain is not initialized.
 *         
 */
ratelprof_status_t ratelprof_enable_domain(ratelprof_domain_t domain);


/**
 * @brief Disables the specified domain for profiling.
 *
 * This function desactivates a domain for profiling by disabling the corresponding 
 * API table. Depending on the specified domain, it calls the `ratelprof_disable_api_table` 
 * function with the appropriate API table and a corresponding string identifier.
 *
 * @param domain The domain to be disabled. 

 * @return RATELPROF_STATUS_SUCCESS if the domain is successfully enabled.
 * @return RATELPROF_STATUS_UNKNOWN_DOMAIN if the provided domain is not recognized.
 * @return RATELPROF_STATUS_INVALID_PTR if the API table for the domain is NULL.
 * @return RATELPROF_STATUS_API_TABLE_NOT_INIT if the API table for the domain is not initialized.
 *         
 */
ratelprof_status_t ratelprof_disable_domain(ratelprof_domain_t domain);


/**
 * @brief Starts the profiling of the application.
 *
 * This function marks the start of the main program execution by setting the `current_phase` 
 * to `RATELPROF_IN_CONSTRUCTOR_PHASE`. It also records the start time of the 
 * constructor phase.
 *
 * @note This function should be called to initiate the begining of the main program execution after 
 *       tool initialization.
 *
 * @return RATELPROF_STATUS_SUCCESS if the function has been successfully executed.
 */
ratelprof_status_t ratelprof_start(void);


/**
 * @brief Stops the profiling of the application.
 *
 * This function marks the end of the main program execution by setting the `current_phase` 
 * to `RATELPROF_IN_TOOL_FINI_PHASE`. It also records the end time of the 
 * destructor phase.
 *
 * @note This function should be called to end the main program execution and initiate the begining of the
 * tool cleanup.
 *
 * @return RATELPROF_STATUS_SUCCESS if the function has been successfully executed.
 */
ratelprof_status_t ratelprof_stop(void);


/**
 * @brief Initializes the tool and sets up the necessary domains and API tables.
 *
 * This function initializes the tool by performing the following steps:
 * - Initializes the logger using `INIT_LOGGER()`.
 * - Starts the tool's lifecycle by calling `ratelprof_start_lifecycle()`.
 * - Initializes the ID system using `init_id_system()`.
 * - Iterates over each domain, initializing the corresponding API tables, 
 *   and populates them with necessary libraries for each domain.
 *
 * @note This function must be called before using any of the profiling functionalities. 
 *       It ensures all API tables are set up and populated 
 *       for each domain, and the tool is properly initialized.
 *
 * @return RATELPROF_STATUS_SUCCESS if the initialization is successful.
 * @return RATELPROF_STATUS_MALLOC_FAILED Memory allocation for the stack from init_id_system 
 *                                        or for the API table from ratelprof_init_api_table failed.
 * @return RATELPROF_STATUS_ALLOC_SIZE_0 The size for an allocation is 0.
 * @return RATELPROF_STATUS_INVALID_PTR The `api_table` address is NULL.
 * @return RATELPROF_STATUS_DLOPEN_FAILED Failed to open the shared library specified by `lib_path`.
 */
ratelprof_status_t ratelprof_init(void);


/**
 * @brief Finalizes the tool and cleans up all resources.
 *
 * This function finalizes the tool by performing the following steps:
 * - Closes the logger using `CLOSE_LOGGER()`.
 * - Cleans up the ID system by calling `cleanup_id_system()`.
 * - Iterates over each domain, cleaning up the corresponding API tables.
 * - Finalizes the lifecycle of the tool by calling `ratelprof_stop_lifecycle()`.
 *
 * @note This function should be called when the tool is no longer needed, 
 *       to clean up allocated resources and finalize the tool.
 *
 * @return RATELPROF_STATUS_SUCCESS if the finalization is successful.
 * @return RATELPROF_STATUS_INVALID_PTR The `api_table` pointer is NULL.
 */
ratelprof_status_t ratelprof_fini(void);

#endif // RATELPROF_H