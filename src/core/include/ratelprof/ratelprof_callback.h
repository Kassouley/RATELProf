/**
 * @file ratelprof_callback.h
 * @brief Header file for the callback system.
 *
 * This file provides type definitions, structures, and global pointers
 * of callback function handlers for the profiling system.
 *
 * @note THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 * 
 */

#ifndef RATELPROF_CALLBACK_H
#define RATELPROF_CALLBACK_H 

#include "utils/logger.h"
#include "ratelprof.h"

/**
 * @typedef  void (*api_callback_t)(ratelprof_domain_t domain, ratelprof_api_id_t id, void* user_activity) 
 * @brief Function pointer type for API callbacks.
 *
 * A function of this type is called when an API function is entered or exited.
 *
 * @param domain The API domain in which the function is executed.
 * @param id The unique identifier of the API function.
 * @param activity A generic pointer to the API activity structure containing event details.
 */
typedef void (*api_callback_t)(ratelprof_domain_t domain, ratelprof_api_id_t id, void* user_activity);


/**
 * @struct api_callback_handler_t
 * @brief Structure for storing API enter and exit callbacks.
 */
typedef struct {
    api_callback_t on_enter; /**< Function pointer for the enter callback. */
    api_callback_t on_exit;  /**< Function pointer for the exit callback. */
} api_callback_handler_t;

/**
 * @brief Default callback function.
 *
 * This function is called when no specific callback has been set for a domain.
 * It logs a warning message indicating that no callback function has been set.
 *
 * @param domain The API domain in which the function is executed.
 * @param id The unique identifier of the API function.
 * @param user_activity A generic pointer to the API activity structure containing event details.
 */
void default_callback_function(ratelprof_domain_t domain, ratelprof_api_id_t id, void* user_activity);


/**
 * @brief Initializes the callback system for a given number of domains.
 *
 * This function allocates memory for and initializes the global arrays that hold 
 * the `on_enter` and `on_exit` callback functions for each domain. It sets each 
 * domain's callbacks to a default handler initially.
 *
 * This function must be called before setting any domain-specific callbacks. 
 *
 * @param ndomains The number of domains to initialize the callback system for.
 *                 Must be a positive integer.
 *
 * @return RATELPROF_STATUS_SUCCESS if initialization is successful.
 * @return RATELPROF_STATUS_MALLOC_FAILED if memory allocation fails for the callback arrays.
 */
ratelprof_status_t init_callback_system(unsigned int ndomains);


/**
 * @brief Finalize the callback system.
 *
 * @return RATELPROF_STATUS_SUCCESS if initialization is successful.
 * @return RATELPROF_STATUS_MALLOC_FAILED if memory allocation fails for the callback arrays.
 */
ratelprof_status_t fini_callback_system();


/**
 * @brief Sets the callback functions for the specified domain.
 *
 * This function sets the provided callback handler for the specified domain. 
 * It associates the provided `on_enter` and `on_exit` callback functions 
 * with the given domain. The domain must be one of the recognized types 
 * If the domain is not recognized, it returns an error status.
 *
 * @param domain The domain for which to set the callbacks.
 * @param callback_handler A structure containing the `on_enter` and `on_exit` 
 *                         callback functions for the specified domain. Both 
 *                         `on_enter_callback` and `on_exit_callback` 
 *                         should be non-NULL functions.
 *
 * @return RATELPROF_STATUS_SUCCESS if the callbacks were successfully set.
 * @return RATELPROF_STATUS_UNKNOWN_DOMAIN if the specified domain is not recognized.
 * @return RATELPROF_STATUS_CALLBACK_IS_NULL if one of the two callbacks in the handler is NULL.
 * @return RATELPROF_STATUS_CALLBACK_SYSTEM_NOT_INIT if the callback system is not initialized.
 */
ratelprof_status_t ratelprof_set_api_callback(ratelprof_domain_t domain, api_callback_handler_t callback_handler);


extern api_callback_t *ratelprof_on_enter_callbacks;
extern api_callback_t *ratelprof_on_exit_callbacks;

#endif // RATELPROF_CALLBACK_H