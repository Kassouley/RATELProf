/**
 * @file ratelprof_status.h * @brief Status codes and error handling for the RATELProf library.
 *
 * This header file defines the status codes used throughout the library
 * to indicate function success or failure states. It also provides utility
 * functions and macros for handling errors effectively.
 *
 * ## Overview ##
 * - Defines `ratelprof_status_t` enum to represent different error states.
 * - Provides `get_error_string()` to convert status codes to human-readable messages.
 *
 * @note THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 *
 */


#ifndef RATELPROF_STATUS_H 
#define RATELPROF_STATUS_H 

/**
 * @brief Enum representing the possible status codes.
 *
 * This enumeration defines the various status codes used throughout the
 * library to indicate different conditions such as success, errors in memory allocation,
 * invalid pointers, stack issues, API table problems, plugin initialization states, 
 * and more.
 */
typedef enum {
	RATELPROF_ERROR = -1,            /**< A general error has occured */
	RATELPROF_STATUS_SUCCESS,                     /**< Function return success */
	RATELPROF_STATUS_CALLBACK_IS_NULL,            /**< Enter or exit callback has not been correctly set */
	RATELPROF_STATUS_MALLOC_FAILED,               /**< Memory allocation failed */
	RATELPROF_STATUS_STACK_IS_NULL,               /**< The stack is NULL or not initialized */
	RATELPROF_STATUS_INVALID_PTR,                 /**< Invalid structure pointer (NULL) */
	RATELPROF_STATUS_PLUGIN_ALREADY_INIT,         /**< The plugin is not null or has already been initialized */
	RATELPROF_STATUS_PLUGIN_IS_NULL,              /**< The plugin is NULL or not initialized */
	RATELPROF_STATUS_CALLBACK_SYSTEM_NOT_INIT,    /**< The callback system is not initialized */
	RATELPROF_STATUS_API_TABLE_NOT_INIT,          /**< The API table is not initialized */
	RATELPROF_STATUS_ALLOC_SIZE_0,                /**< An allocation function receive 0 bytes to allocate */
	RATELPROF_STATUS_UNKNOWN_DOMAIN,              /**< Domain in argument does not exist */
	RATELPROF_STATUS_DLOPEN_FAILED,               /**< Failed to open library */
	RATELPROF_STATUS_STACK_IS_EMPTY,              /**< The stack is empty */ 
    RATELPROF_NB_STATUS
} ratelprof_status_t;


/**
 * @brief Converts a ratelprof_status_t value to a human-readable error message.
 *
 * This function takes a `ratelprof_status_t` status code and returns a string
 * that describes the error or success corresponding to that status code.
 *
 * @param status The status code whose description is to be retrieved.
 * @return A constant string representing the error or success message.
 *
 * @note This function covers several common status codes, such as memory
 *       allocation failures, stack errors, API table issues, and plugin states.
 *       If the status code is unknown, it returns "Unknown error".
 */
static inline const char* get_error_string(ratelprof_status_t status) {
    switch (status)
    {	
		case RATELPROF_ERROR                       : return "A general error as occured.";
		case RATELPROF_STATUS_SUCCESS                     : return "Function return success";
		case RATELPROF_STATUS_CALLBACK_IS_NULL            : return "Enter or exit callback has not been correctly set";
		case RATELPROF_STATUS_MALLOC_FAILED               : return "Memory allocation failed";
		case RATELPROF_STATUS_STACK_IS_NULL               : return "The stack is NULL or not initialized";
		case RATELPROF_STATUS_INVALID_PTR                 : return "Invalid structure pointer (NULL)";
		case RATELPROF_STATUS_PLUGIN_ALREADY_INIT         : return "The plugin is not null or has already been initialized";
		case RATELPROF_STATUS_PLUGIN_IS_NULL              : return "The plugin is NULL or not initialized";
		case RATELPROF_STATUS_CALLBACK_SYSTEM_NOT_INIT    : return "The callback system is not initialized";
		case RATELPROF_STATUS_API_TABLE_NOT_INIT          : return "The API table is not initialized";
		case RATELPROF_STATUS_ALLOC_SIZE_0                : return "An allocation function receive 0 bytes to allocate";
		case RATELPROF_STATUS_UNKNOWN_DOMAIN              : return "Domain in argument does not exist";
		case RATELPROF_STATUS_DLOPEN_FAILED               : return "Failed to open library";
		case RATELPROF_STATUS_STACK_IS_EMPTY              : return "The stack is empty"; 
        default: break;
    }
    return "Unknown error";
}


/**
 * @brief Macro for error handling in RATELProf functions.
 *
 * This macro simplifies error handling by executing a function call 
 * that returns a `ratelprof_status_t` status. If the call does not 
 * return `RATELPROF_STATUS_SUCCESS`, the macro returns the error status immediately.
 *
 * @param call The function call that returns a `ratelprof_status_t` status.
 *
 * @param __VA_ARGS__ A block of instruction to execute if the call failed.
 *
 * @return If the call fails (i.e., does not return `RATELPROF_STATUS_SUCCESS`), 
 *         the macro causes the enclosing function to return the error status.
 *
 * @note This macro should be used within functions that return a `ratelprof_status_t`.
 *
 */
#define RATELPROF_TRY(call, ...) { \
    ratelprof_status_t status = call; \
    if (status != RATELPROF_STATUS_SUCCESS) { \
		__VA_ARGS__; \
		return status; \
    } \
};
    
#endif // RATELPROF_STATUS_H