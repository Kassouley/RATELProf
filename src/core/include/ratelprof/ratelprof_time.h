/**
 * @file ratelprof_time.h 
 * @brief High-Precision Time Management Utilities
 *
 * This header file provides utility functions for high-precision time measurements,
 * using `ratelprof_timespec_t` for nanosecond resolution and converting time values
 * to different units.
 *
 * Features:
 * - Defines type aliases for timestamps (`ratelprof_timespec_t`) and time values (`ratelprof_time_t`).
 * - Provides functions to retrieve the current time using `clock_gettime`.
 * - Supports conversion of timestamps to nanoseconds, microseconds, milliseconds, and seconds.
 * - Designed for profiling and performance measurement applications.
 * 
 * @note THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.
 * DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
 * ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA. 
 *
 */

#ifndef RATELPROF_TIME_H
#define RATELPROF_TIME_H

#include <stdint.h>
#include <time.h> 

/**
 * @brief Type alias for `struct timespec` used for time measurements.
 *
 * This typedef defines `ratelprof_timespec_t` as an alias for `struct timespec`, 
 * which represents timestamps with nanosecond precision. It is used to record 
 * timing information.
 *
 * @see struct timespec
 */
typedef struct timespec ratelprof_timespec_t;

/**
 * @brief Type alias for representing time.
 *
 * This typedef defines `ratelprof_time_t` as an alias for `uint64_t`, 
 * which is used to store time values, typically in nanoseconds.
 */
typedef uint64_t ratelprof_time_t;


/**
 * @brief Retrieves the current monotonic timestamp.
 *
 * This function obtains the current time using `clock_gettime` with the 
 * `CLOCK_MONOTONIC` clock source and returns it as a `ratelprof_timespec_t`.
 *
 * @return The current time as a `ratelprof_timespec_t` structure.
 *
 * @note 
 * - The `CLOCK_MONOTONIC` clock is not affected by system time changes.
 * - This function is useful for profiling and measuring elapsed time.
 *
 * @example
 * ```c
 * ratelprof_timespec_t ts = ratelprof_get_curr_timespec();
 * printf("Current time: %ld.%09ld seconds\n", ts.tv_sec, ts.tv_nsec);
 * ```
 */
ratelprof_timespec_t ratelprof_get_curr_timespec();


/**
 * @brief Retrieves the current epoch timestamp.
 *
 * This function obtains the current time using `clock_gettime` with the 
 * `CLOCK_REALTIME` clock source and returns it as a `ratelprof_timespec_t`.
 *
 * @return The current time as a `ratelprof_timespec_t` structure.
 */
ratelprof_timespec_t ratelprof_get_curr_epoch();


/**
 * @brief Converts a `ratelprof_timespec_t` timestamp to nanoseconds.
 *
 * This function takes a `ratelprof_timespec_t` (which is an alias for `struct timespec`) 
 * and converts it into a `ratelprof_time_t` (which is a `uint64_t`) representing 
 * the total time in nanoseconds.
 *
 * @param ts The `ratelprof_timespec_t` structure containing the time to be converted.
 *
 * @return The equivalent time in nanoseconds as a `ratelprof_time_t`.
 *
 * @note This function is useful for precise time calculations in profiling scenarios.
 *
 * @example
 * ```c
 * ratelprof_timespec_t ts;
 * clock_gettime(CLOCK_MONOTONIC, &ts);
 * ratelprof_time_t timestamp_ns = ratelprof_get_timestamp_ns(ts);
 * printf("Timestamp: %llu ns\n", timestamp_ns);
 * ```
 */
ratelprof_time_t ratelprof_get_timestamp_ns(ratelprof_timespec_t ts);


/**
 * @brief Converts a `ratelprof_timespec_t` timestamp to microseconds.
 *
 * This function takes a `ratelprof_timespec_t` (which is an alias for `struct timespec`) 
 * and converts it into a `ratelprof_time_t` (which is a `uint64_t`) representing 
 * the total time in microseconds.
 *
 * @param ts The `ratelprof_timespec_t` structure containing the time to be converted.
 *
 * @return The equivalent time in microseconds as a `ratelprof_time_t`.
 *
 * @note This function is useful for precise time calculations in profiling scenarios.
 *
 * @example
 * ```c
 * ratelprof_timespec_t ts;
 * clock_gettime(CLOCK_MONOTONIC, &ts);
 * ratelprof_time_t timestamp_us = ratelprof_get_timestamp_us(ts);
 * printf("Timestamp: %llu us\n", timestamp_us);
 * ```
 */
ratelprof_time_t ratelprof_get_timestamp_us(ratelprof_timespec_t ts);


/**
 * @brief Converts a `ratelprof_timespec_t` timestamp to milliseconds.
 *
 * This function takes a `ratelprof_timespec_t` (which is an alias for `struct timespec`) 
 * and converts it into a `ratelprof_time_t` (which is a `uint64_t`) representing 
 * the total time in milliseconds.
 *
 * @param ts The `ratelprof_timespec_t` structure containing the time to be converted.
 *
 * @return The equivalent time in milliseconds as a `ratelprof_time_t`.
 *
 * @note This function is useful for precise time calculations in profiling scenarios.
 *
 * @example
 * ```c
 * ratelprof_timespec_t ts;
 * clock_gettime(CLOCK_MONOTONIC, &ts);
 * ratelprof_time_t timestamp_ms = ratelprof_get_timestamp_ms(ts);
 * printf("Timestamp: %llu ms\n", timestamp_ms);
 * ```
 */
ratelprof_time_t ratelprof_get_timestamp_ms(ratelprof_timespec_t ts);


/**
 * @brief Converts a `ratelprof_timespec_t` timestamp to seconds.
 *
 * This function takes a `ratelprof_timespec_t` (which is an alias for `struct timespec`) 
 * and converts it into a `ratelprof_time_t` (which is a `uint64_t`) representing 
 * the total time in seconds.
 *
 * @param ts The `ratelprof_timespec_t` structure containing the time to be converted.
 *
 * @return The equivalent time in seconds as a `ratelprof_time_t`.
 *
 * @note This function is useful for precise time calculations in profiling scenarios.
 *
 * @example
 * ```c
 * ratelprof_timespec_t ts;
 * clock_gettime(CLOCK_MONOTONIC, &ts);
 * ratelprof_time_t timestamp_s = ratelprof_get_timestamp_s(ts);
 * printf("Timestamp: %llu s\n", timestamp_s);
 * ```
 */
ratelprof_time_t ratelprof_get_timestamp_s(ratelprof_timespec_t ts);

#endif // RATELPROF_TIME_H
